<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[【Android TimeCat】 切换软键盘和标签键盘时界面跳动]]></title>
      <url>/2018/03/06/2018-03-06-Android-TimeCat-%E5%88%87%E6%8D%A2%E8%BD%AF%E9%94%AE%E7%9B%98%E5%92%8C%E6%A0%87%E7%AD%BE%E9%94%AE%E7%9B%98%E6%97%B6%E7%95%8C%E9%9D%A2%E8%B7%B3%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在信息操作页面，点击标签打开对应的选择面板时，输入界面会上下跳动一下。分析一下原因，点击标签按钮后，先收起了软键盘，当前Activity的高度变高，输入框回到了界面底部；再打开选择面板时，输入框又被顶上来，所有看起来点击标签按钮后输入框会上下跳动一下。无论是先隐藏软键盘还是先打开选择面板都会有这个问题</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果这时候去纠结隐藏软键盘和打开面板如何同步的话就会走进一个牛角尖，去处理不同机型之间的兼容性问题了。其实解决思路非常简单，输入框不是会上下跳么，那固定它的位置不就好了？</p>
<p>举个例子，如果整个界面的根布局是<code>LinearLayout</code>，那么一个控件的位置其实是由它上面所有控件的高度决定的，如果它上面所有控件的高度都不变化，那即使整个<code>Activity</code>的高度变化（开/关软键盘）也不会影响这个控件的位置，也就不会发生跳动了。</p>
<p>但是我们发现，即使锁定了我们的信息操作页面根布局的高度，切换时还是有小幅度跳动。经过细致的分析冷静思考，我们终于找到了答案。由于我们的信息操作页面是用<code>Activity</code>通过设置弹框样式<code>android:theme=&quot;@style/EditDialogStyle&quot;</code>来实现的，而弹框样式是悬浮着的，会自动调整页面位置，软键盘显示时即使根布局的高度锁定，整个视图仍然会小幅度上移。所以我们的完美解决方案是同时锁定根布局高度和页面位置。</p>
<p>具体实现我们已经封装在<code>SmartKeyboardManager</code>类中，自动处理锁定高度和锁定页面位置的问题，顺便封装了<code>addKeyboard</code>方法来绑定按钮和相应的面板，并且使用了建造者设计模式。使用时如下调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置软键盘和选择面板的平滑交互</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setKeyboardManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSmartKeyboardManager = <span class="keyword">new</span> SmartKeyboardManager.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setContentView(ll_content_view)</span><br><span class="line">            .setEditText(et_content)</span><br><span class="line">            .addKeyboard(btn_label,   select_label)</span><br><span class="line">            .addKeyboard(btn_date,   select_date)</span><br><span class="line">            .addKeyboard(btn_time,   select_time)</span><br><span class="line">            .addKeyboard(btn_remind, select_remind)</span><br><span class="line">            .addKeyboard(btn_tag,    select_tag)</span><br><span class="line">            .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/triline3/timecat/blob/eb89b51218b8ca865d3bf0df442cd9c1380cce73/app/src/main/java/com/time/cat/mvp/view/keyboardManager/SmartKeyboardManager.java" target="_blank" rel="noopener">SmartKeyboardManager</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Keyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 解决Gradle :Resolve dependencies :classpath的办法]]></title>
      <url>/2018/03/06/2018-03-06-Android-TimeCat-%E8%A7%A3%E5%86%B3Gradle-Resolvedependencies-classpath%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>想学习一下别人的成型项目FastHub，结果build失败，gradle信息如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Executing tasks: [assemble]</span><br><span class="line"></span><br><span class="line">Configuration on demand is an incubating feature.</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">'FastHub'</span>.</span><br><span class="line">&gt; Could not resolve all files <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project : &gt; com.apollographql.apollo:gradle-plugin:<span class="number">0.4</span>.1</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https:<span class="comment">//help.gradle.org</span></span><br><span class="line"></span><br><span class="line">BUILD FAILED in <span class="number">3</span>m <span class="number">18</span>s</span><br></pre></td></tr></table></figure>
<p>首先在<code>设置</code>&gt;<code>proxy</code>里使用系统默认代理，<code>check connection</code> 使用<code>&#39;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom&#39;</code>完美通过，心想应该不是proxy的问题。可就是build失败，提示要么<code>Connection timed out</code>，要么<code>unknown host: dl.google.com</code>，简直逼疯。最后参考了一下，死马当活马医，在参考的文章里找到了解决方案。（我参考的不只下面的3个参考页面，开了一大堆csdn、StackOverflow、github issue的相关网页，都没解决，这3个是我解决时的参考，所以放这里了）</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在项目目录下新建文件<code>gradle.properties</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Project-wide Gradle settings.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more details on how to configure your build environment visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/build_environment.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the JVM arguments used for the daemon process.</span></span><br><span class="line"><span class="comment"># The setting is particularly useful for tweaking memory settings.</span></span><br><span class="line"><span class="comment"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span></span><br><span class="line"><span class="comment"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When configured, Gradle will run in incubating parallel mode.</span></span><br><span class="line"><span class="comment"># This option should only be used with decoupled projects. More details, visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span></span><br><span class="line"><span class="comment"># org.gradle.parallel=true</span></span><br><span class="line"><span class="comment">#Fri Mar 09 22:26:51 CST 2018</span></span><br><span class="line">systemProp.https.proxyPort=<span class="number">1080</span></span><br><span class="line">systemProp.http.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.https.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.http.proxyPort=<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p>内容意思是使用本地127.0.0.1:8000端口进行代理。</p>
<p>注意：</p>
<ul>
<li><code>gradle.properties</code>与<code>app</code>文件夹同级，而不是在<code>app</code>文件夹内。</li>
<li>记得把<code>shadowsocks</code>挂到<code>1080</code>端口，之前的<code>check connection</code>没卵用。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/fanfangemini/article/details/78310163" target="_blank" rel="noopener">android studio 解决Gradle :Resolve dependencies :classpath的办法</a></li>
<li><a href="http://blog.csdn.net/zx422359126/article/details/77046462" target="_blank" rel="noopener">Android Studio 解决resolve dependencies ‘classpath’卡住</a></li>
<li><a href="https://docs.gradle.org/current/userguide/userguide_single.html#sec:accessing_the_web_via_a_proxy" target="_blank" rel="noopener">Accessing the web through a HTTP proxy</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 原地归并排序]]></title>
      <url>/2018/03/01/2018-03-01-Android-TimeCat-%E5%8E%9F%E5%9C%B0%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中有个需求，需要把用户的task排序。</p>
<p>排序规则为，先按label排，每个label下按创建日期排，task处于完成状态的话覆盖原来label。label有四个，重要紧急，重要不紧急，紧急不重要，不重要不紧急。label加上完成状态共5组。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是先用桶排序分组，再对每个组内用原地归并排序。</p>
<p>考虑到分组有且只有5组，用桶排序逻辑清晰，易于阅读，效率也高。</p>
<p>之所以用原地归并排序，是因为我想学(zhuang)习(bi)。用其他排序方法也是可以的，因为单个用户的task不会太多，而且排序放在网络请求之后，各种排序方法的差别不大。</p>
<h2 id="纯java版原地归并排序"><a href="#纯java版原地归并排序" class="headerlink" title="纯java版原地归并排序"></a>纯java版原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InPlaceMergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i++] = arr[j];</span><br><span class="line">        arr[j--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">        reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r)  &#123;<span class="comment">//原地归并结束的条件。</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = j;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; arr[j] &lt;= arr[i]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">            i += (j-index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, l, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">            inplaceMerge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试用例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="纯java版非原地归并排序"><a href="#纯java版非原地归并排序" class="headerlink" title="纯java版非原地归并排序"></a>纯java版非原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> p = l;</span><br><span class="line">    <span class="keyword">int</span> q = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[p] &lt;= src[q]) &#123;</span><br><span class="line">            dest[i++] = src[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest[i++] = src[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid) &#123;</span><br><span class="line">        dest[i++] = src[p++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q &lt;= r) &#123;</span><br><span class="line">        dest[i++] = src[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// （原[l, r]范围的内容被复制回原数组）  </span></span><br><span class="line">    i = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= r) &#123;  </span><br><span class="line">        src[i] = dest[i++];  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(dest, src, l, mid);</span><br><span class="line">        mergeSort(dest, src, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(dest, src, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目运用版-：桶排序-原地归并排序"><a href="#项目运用版-：桶排序-原地归并排序" class="headerlink" title="项目运用版 ：桶排序 + 原地归并排序"></a>项目运用版 ：桶排序 + 原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;DBTask&gt; <span class="title">sort</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;DBTask&gt; sortedDBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_0_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_1_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_2_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_3_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; finished_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (DBTask dbTask : taskArrayList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbTask.getIsFinish()) &#123;</span><br><span class="line">            finished_DBTaskList.add(dbTask);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (dbTask.getLabel()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_URGENT:</span><br><span class="line">                label_0_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_1_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_URGENT:</span><br><span class="line">                label_2_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_3_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort2List(label_0_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_1_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_2_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_3_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(finished_DBTaskList, sortedDBTaskList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        DBTask temp = arr.get(i);</span><br><span class="line">        arr.set(i++, arr.get(j));</span><br><span class="line">        arr.set(j--, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">    reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r) &#123; <span class="comment">//原地归并结束的条件。</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; isValid(arr, i, j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = j;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r &amp;&amp; isValid(arr, j, i)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">        i += (j-index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Date date_i = TimeUtil.formatGMTDateStr(arr.get(i).getCreated_datetime());</span><br><span class="line">    Date date_j = TimeUtil.formatGMTDateStr(arr.get(j).getCreated_datetime());</span><br><span class="line">    <span class="keyword">return</span> (date_i != <span class="keyword">null</span> ? date_i.getTime() : <span class="number">0</span>) &lt;= (date_j != <span class="keyword">null</span> ? date_j.getTime() : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, l, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        inplaceMerge(arr, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort2List</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList, ArrayList&lt;DBTask&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(taskArrayList, <span class="number">0</span>, taskArrayList.size()-<span class="number">1</span>);</span><br><span class="line">    result.addAll(taskArrayList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 给刷新按钮添加旋转动画]]></title>
      <url>/2018/03/01/2018-03-01-Android-TimeCat-%E7%BB%99%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本着用户的动作反馈原则，给刷新按钮添加旋转动画。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是给原来的按钮上面覆盖一层view来承担动画效果，点击按钮时，覆盖的view显示并旋转，此时按钮被覆盖处于不可点击状态；当动画完成时隐藏覆盖的view，按钮又可以被点击了。需要计算动画时间来及时把动画停掉，我采用postdelay解决。</p>
<h2 id="res-menu-main-xml"><a href="#res-menu-main-xml" class="headerlink" title="res/menu/main.xml"></a>res/menu/main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_action_refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:showAsAction</span>=<span class="string">"always"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="res-layout-action-view-xml"><a href="#res-layout-action-view-xml" class="headerlink" title="res/layout/action_view.xml"></a>res/layout/action_view.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minHeight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minWidth</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingEnd</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingStart</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:scaleType</span>=<span class="string">"centerInside"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="res-anim-refresh-xml"><a href="#res-anim-refresh-xml" class="headerlink" title="res/anim/refresh.xml"></a>res/anim/refresh.xml</h2><p>设置一秒绕中心旋转720度的动画，这样动画重复次数取1，不用重复</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/linear_interpolator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MenuItem refreshItem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.refresh:</span><br><span class="line">            showRefreshAnimation(item);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRefreshAnimation</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        hideRefreshAnimation(); <span class="comment">//清空之前的效果</span></span><br><span class="line"></span><br><span class="line">        refreshItem = item;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里使用一个ImageView设置成MenuItem的ActionView，这样我们就可以使用这个ImageView显示旋转动画了</span></span><br><span class="line">        ImageView refreshActionView = (ImageView) getLayoutInflater().inflate(R.layout.action_view, <span class="keyword">null</span>);</span><br><span class="line">        refreshActionView.setImageResource(R.drawable.ic_autorenew_white_24dp);</span><br><span class="line">        refreshItem.setActionView(refreshActionView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示刷新动画</span></span><br><span class="line">        Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.refresh);</span><br><span class="line">        animation.setRepeatMode(Animation.RESTART);</span><br><span class="line">        animation.setRepeatCount(<span class="number">1</span>); <span class="comment">// 这里设置动画重复次数</span></span><br><span class="line">        refreshActionView.startAnimation(animation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                hideRefreshAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>); </span><br><span class="line">        <span class="comment">// 在动画xml文件里定义了动画时长为1秒，而动画重复次数为1次，所以在1秒后停止动画即可防止过度点击。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideRefreshAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refreshItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            View view = refreshItem.getActionView();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.clearAnimation();</span><br><span class="line">                refreshItem.setActionView(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h1><ul>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/anim/refresh.xml" target="_blank" rel="noopener">refresh.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/layout/action_view.xml" target="_blank" rel="noopener">action_view.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/menu/main_menu.xml" target="_blank" rel="noopener">main_menu.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/java/com/time/cat/ui/activity/main/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 MVP架构演进]]></title>
      <url>/2018/02/28/2018-02-28-Android-TimeCat-MVP%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我就想看看MVP怎么搞…</p>
<h1 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h1><p><a href="https://github.com/triline3/timecat/blob/e0a39a6087bbf7f4ad0e4e8f4e418526e96a4fb7/app/src/main/java/com/time/cat/ui/fragment/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~290</p>
<p><strong>文件目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>业务分层，把fragment的初始化分成<code>initView()</code>, <code>initData()</code>, <code>initListener()</code></li>
<li>功能分区，按<code>View</code>, <code>Data</code>, <code>Listener</code>,在fragment文件内部分区，用注释隔开，简单易懂</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>fragment持有内部类</li>
<li>数据的刷新需要context, 应该做到数据与状态无关，易于复用</li>
<li>fragment管的东西太多</li>
</ul>
<h1 id="基础MVP架构"><a href="#基础MVP架构" class="headerlink" title="基础MVP架构"></a>基础MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/c5a1a0a932be19b4756bd3c539cfdcaf9f2e22ee/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~160</p>
<p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">notes</span><br><span class="line">├── model</span><br><span class="line">│   ├── NotesDataManagerAction.java</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   ├── NotesPresenterAction.java</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>数据（model）和UI（view）解耦，双方都只暴露接口给presenter，由presenter决定数据和UI的互动</li>
<li>NotesFragment只作为view层，下放业务处理能力给presenter，使代码量大量减少（实际是转移给presenter，没有减少）</li>
<li>NotesFragment不再持有内部类，加载速度增加</li>
<li>在数据层去掉context，使data与view相互独立</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>没有绑定view，presenter可能在fragment销毁后仍有其引用，导致内存泄漏</li>
<li>NotesFragment里除了需要显示的view的初始化就都是接口的具体实现，对新手不友好</li>
</ul>
<h1 id="高级MVP架构"><a href="#高级MVP架构" class="headerlink" title="高级MVP架构"></a>高级MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/5fe59fa970011abb1bd06bd82b3911f91fe68575/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~160</p>
<p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">notes/</span><br><span class="line">├── model</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>高度抽象，减少代码冗余（比如绑定view）</li>
<li>使用代理模式将绑定和解绑view的操作抽离出来</li>
<li>使用工厂模式和注解在上层统一创建Presenter</li>
<li>将Presenter的创建过程放入到获取Presenter的方法中，如果存在返回，不存在创建，保证Presenter不会为空，保证在使用的时候再创建，节省内存资源</li>
<li>删除不必要的接口文件，用分区的方法突出类内可调用的业务处理函数</li>
<li>总的来说就是耐操</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>新手不友好，依赖注入设计模式等操作有一定的复杂度</li>
<li>MVP固有缺点：每条逻辑都要有完全不同的presenter来管理</li>
<li>添加多个presenter麻烦</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RecyclerView的卡顿问题]]></title>
      <url>/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView%E7%9A%84%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中大量使用了<code>RecycleView</code>和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。</p>
<h1 id="RecyclerView为什么会卡"><a href="#RecyclerView为什么会卡" class="headerlink" title="RecyclerView为什么会卡"></a>RecyclerView为什么会卡</h1><p><code>RecyclerView</code>作为v7包的新控件，自从推出就广受Android Developer们欢迎，实际上它已经取代了ListView和GridView两位老前辈的地位。然而不少亲们想必也已经发现了：没有优化过的Recycler性能很poor。上一篇博主使用的item也仅仅是一个图两串字而已，结果一滑动就卡的要命，不能忍！<br>那么why？回想在用<code>ListView</code>和<code>GridView</code>的<code>adapter</code>时，我们是用一种叫<code>ViewHolder</code>的自定义类（容器）来实现优化的，而<code>RecyclerView</code>的特性之一就是强制你使用它的<code>RecyclerView.ViewHolder</code>。可是，<code>RecyclerView.ViewHolder</code>要比我们写的那个单纯的容器复杂多了（源码里算上注释有大约500行），与<code>RecyclerView.Adapter</code>的联系也是千丝万缕。</p>
<p>按stackoverflow上面比较通俗的解释：<code>RecyclerView.Adapter</code>里面的<code>onCreateViewHolder()</code>方法和<code>onBindViewHolder()</code>方法对时间都非常敏感。类似I/O读写，Bitmap解码一类的耗时操作，最好不要在它们里面进行。</p>
<h1 id="如何解决卡顿问题"><a href="#如何解决卡顿问题" class="headerlink" title="如何解决卡顿问题"></a>如何解决卡顿问题</h1><p>首先当然得优化你的item，合理运用<code>&lt;include&gt;</code>，<code>&lt;merge&gt;</code>，<code>&lt;ViewStub&gt;</code>等标签，使布局层次尽量少——其实<code>ListView</code>和<code>GridView</code>里你也应该这么做，应该当成是一种写UI的习惯。</p>
<p>其次就是灵活使用各种第三方库，去完成各种耗时操作，比如通过<code>Glide</code>或者是<code>Picasso</code>加载图片。优秀的开源库在性能上往往都考虑得很仔细。</p>
<p>最后的问题来了，如果只想写一个小demo，不愿大张旗鼓怎么办？如果即便一般的第三方库也不好解决问题，比如上一篇那个该死的loadIcon()方法返回的是一个Drawable对象，Glide和Picasso都没法直接处理，转码又等于添了个耗时任务，那怎么办？<br>真正的app管理应用，应该引入UIL或者Picasso一类的加载库进行图标加载<br>（在此原谅博主没仔细敲代码，就信口开河了）<br>答案就是，<strong>想法在你setAdapter之前就把任务给完成</strong>。</p>
<h1 id="TimeCat-实例"><a href="#TimeCat-实例" class="headerlink" title="TimeCat 实例"></a>TimeCat 实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    context = getContext();</span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_notes, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    mStackView = view.findViewById(R.id.notes_csv);   <span class="comment">// 初始化RecycleView</span></span><br><span class="line">    cardStackViewAdapter = <span class="keyword">new</span> CardStackViewAdapter(context); <span class="comment">// 初始化Adapter</span></span><br><span class="line">    refreshData();  <span class="comment">// 刷新一次数据</span></span><br><span class="line">    mStackView.setAdapter(cardStackViewAdapter);  <span class="comment">// 在数据准备好后再setAdapter()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecycleView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 当RxJava遇到Retrofit（二）api注解@Path, @Url等]]></title>
      <url>/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%BA%8C%EF%BC%89api%E6%B3%A8%E8%A7%A3@Path,%20@Url%E7%AD%89/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>下面分为<code>GET</code>、<code>POST</code>、<code>DELETE</code>还有<code>PUT</code>的请求，说明<code>@Path</code>、<code>@Query</code>、<code>@QueryMap</code>、<code>@Body</code>、<code>@Field</code>的用法。</p>
<h1 id="初始化Retrofit"><a href="#初始化Retrofit" class="headerlink" title="初始化Retrofit"></a>初始化Retrofit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String BASE_URL = <span class="string">"http://192.168.88.105:8000/api/"</span>;</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder() </span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><h2 id="样式1（一个简单的get请求）"><a href="#样式1（一个简单的get请求）" class="headerlink" title="样式1（一个简单的get请求）"></a>样式1（一个简单的get请求）</h2><p><a href="http://192.168.88.105:8000/api/News" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="样式2（URL中有参数）"><a href="#样式2（URL中有参数）" class="headerlink" title="样式2（URL中有参数）"></a>样式2（URL中有参数）</h2><p><a href="http://192.168.88.105:8000/api/News/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure></p>
<p>或<br><a href="http://192.168.88.105:8000/api/News/1/类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1/类型1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}/{类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}/{类型}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Path</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（参数在URL问号之后）"><a href="#样式3（参数在URL问号之后）" class="headerlink" title="样式3（参数在URL问号之后）"></a>样式3（参数在URL问号之后）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure>
<p>或<br><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Query</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式4（多个参数在URL问号之后，且个数不确定）"><a href="#样式4（多个参数在URL问号之后，且个数不确定）" class="headerlink" title="样式4（多个参数在URL问号之后，且个数不确定）"></a>样式4（多个参数在URL问号之后，且个数不确定）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a>…<br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a>…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@QueryMap Map&lt;String, String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<p>也可以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          @Query(<span class="string">"newsId"</span>)</span> String newsId，</span></span><br><span class="line"><span class="function">          @QueryMap Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><h2 id="样式1（需要补全URL，post的数据只有一条reason）"><a href="#样式1（需要补全URL，post的数据只有一条reason）" class="headerlink" title="样式1（需要补全URL，post的数据只有一条reason）"></a>样式1（需要补全URL，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）"><a href="#样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）"></a>样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（需要补全URL，问号后加入access-token，post一个body（对象））"><a href="#样式3（需要补全URL，问号后加入access-token，post一个body（对象））" class="headerlink" title="样式3（需要补全URL，问号后加入access_token，post一个body（对象））"></a>样式3（需要补全URL，问号后加入access_token，post一个body（对象））</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body CommentBean bean)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="样式1（需要补全URL）"><a href="#样式1（需要补全URL）" class="headerlink" title="样式1（需要补全URL）"></a>样式1（需要补全URL）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式2（需要补全URL，问号后加入access-token）"><a href="#样式2（需要补全URL，问号后加入access-token）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token）"></a>样式2（需要补全URL，问号后加入access_token）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId，</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（带有body）"><a href="#样式3（带有body）" class="headerlink" title="样式3（带有body）"></a>样式3（带有body）</h2><p><a href="http://192.168.88.105:8000/api/Comments" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HTTP</span>(method = <span class="string">"DELETE"</span>,path = <span class="string">"Comments"</span>,hasBody = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteCommont</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Body CommentBody body</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line">CommentBody：需要提交的内容，与Post中的Body相同</span><br></pre></td></tr></table></figure>
<h1 id="PUT（这个请求很少用到，例子就写一个）"><a href="#PUT（这个请求很少用到，例子就写一个）" class="headerlink" title="PUT（这个请求很少用到，例子就写一个）"></a>PUT（这个请求很少用到，例子就写一个）</h1><p><a href="http://192.168.88.105:8000/api/Accounts/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/1</a><br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PUT</span>(<span class="string">"Accounts/&#123;accountId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ExtrasBean&gt; <span class="title">updateExtras</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"accountId"</span>)</span> String accountId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body ExtrasBean bean)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>@Path：所有在网址中的参数（URL的问号前面），如：<br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></li>
<li>@Query：URL问号后面的参数，如：<br><a href="http://192.168.88.105:8000/api/Comments?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments?access_token={access_token}</a></li>
<li>@QueryMap：相当于多个@Query</li>
<li>@Field：用于POST请求，提交单个数据</li>
<li>@Body：相当于多个@Field，以对象的形式提交</li>
</ul>
<blockquote>
<p>Tips</p>
<ul>
<li>Tips1 使用@Field时记得添加@FormUrlEncoded</li>
<li>Tips2 若需要重新定义接口地址，可以使用@Url，将地址以参数的形式传入即可。如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; getActivityList(</span><br><span class="line">        <span class="meta">@Url</span> String url,</span><br><span class="line">        <span class="meta">@QueryMap</span> Map&lt;String, String&gt; map);</span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; call = service.getActivityList(</span><br><span class="line">            <span class="string">"http://115.159.198.162:3001/api/ActivitySubjects"</span>, map);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/7687365aa946" target="_blank" rel="noopener">https://www.jianshu.com/p/7687365aa946</a><br><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 当RxJava遇到Retrofit（一）Retrofit入门]]></title>
      <url>/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%B8%80%EF%BC%89Retrofit%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比<code>HttpClient</code>以及<code>HttpUrlConnection</code>等，略懂android开发的估计无人不知<code>android-async-http</code>或者<code>volley</code>啥的，再往上走，有<code>okhttp</code>等。但是最后我们选择了一个新的http请求框架，<code>Retrofit</code>。</p>
<h1 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h1><p><code>retrofit</code>是<code>Square</code>公司出品的，为android和java提供一个类型安全的Http网络请求库，这里是官网地址。</p>
<p><code>Retrofit</code>的优点</p>
<ol>
<li>使用注解来描述http请求</li>
<li>URL参数的替换和query参数的支持</li>
<li>对象转化为请求体（如：JSON，protocol buffers等）</li>
<li>多重请求体和文件上传<br>以上都是官网描述</li>
</ol>
<h1 id="TimeCat中的实例"><a href="#TimeCat中的实例" class="headerlink" title="TimeCat中的实例"></a>TimeCat中的实例</h1><p>定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoteService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Headers</span>(&#123;<span class="string">"Content-Type: application/json"</span>, <span class="string">"Accept: application/json"</span>&#125;)</span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Note&gt; <span class="title">createNote</span><span class="params">(@Body Note note)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>辅助使用Retrofit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetrofitHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://192.168.88.105:8000/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient mOkHttpClient;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initOkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OKHttpClient</span></span><br><span class="line"><span class="comment">     * 设置缓存</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     * 设置打印日志</span></span><br><span class="line"><span class="comment">     * 设置UA拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor(<span class="keyword">new</span> Log());</span><br><span class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RetrofitHelper.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置Http缓存</span></span><br><span class="line">                    Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(TimeCatApp.getInstance().getCacheDir(), <span class="string">"HttpCache"</span>), <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>);</span><br><span class="line">                    mOkHttpClient = <span class="keyword">new</span> OkHttpClient.Builder().cache(cache).addInterceptor(interceptor).retryOnConnectionFailure(<span class="keyword">true</span>).connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS).writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS).readTimeout(<span class="number">20</span>, TimeUnit.SECONDS).build();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoteService <span class="title">getNoteService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .client(mOkHttpClient)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(NoteService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结合RxJava发起网络请求只需要<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RetrofitHelper.getNoteService().createNote(note) <span class="comment">//获取Observable对象</span></span><br><span class="line">        .compose(<span class="keyword">this</span>.bindToLifecycle())         <span class="comment">// 绑定到生命周期</span></span><br><span class="line">        .subscribeOn(Schedulers.newThread())     <span class="comment">//请求在新的线程中执行</span></span><br><span class="line">        .observeOn(Schedulers.io())              <span class="comment">//请求完成后在io线程中执行</span></span><br><span class="line">        .doOnNext(<span class="keyword">new</span> Action1&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                DB.notes().saveAndFireEvent(ModelUtil.toDBNote(note)); <span class="comment">// 进行数据读写，甚至可以进行文件读写</span></span><br><span class="line">                Log.e(TAG, <span class="string">"保存任务信息到本地"</span> + note.toString()); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//最后在主线程中执行</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                ToastUtil.show(<span class="string">"添加[ 任务 ]失败"</span>);</span><br><span class="line">                Log.e(TAG, e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                ToastUtil.show(<span class="string">"成功添加[ 任务 ]:"</span> + dialog_add_task_et_content.getText().toString());</span><br><span class="line">                finish();</span><br><span class="line">                Log.e(TAG, <span class="string">"请求成功"</span> + note.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="使用的套路"><a href="#使用的套路" class="headerlink" title="使用的套路"></a>使用的套路</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个没什么好说的，没有网络权限什么都做不了</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure>
<p>这里几个库的含义是：我们使用<code>retrofit2.0</code>去进行网络请求操作，同时我们使用<code>gson</code>去进行数据解析，并且结合<code>rxjava</code>去进行相应的代码编写</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .client(mOkHttpClient)</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<p>这段就是使用<code>RxJava</code>，利用<code>gson</code>做解析（这边解析器可以设置注入<code>Jackson</code>之类的，甚至可以自定义），http引擎框架是<code>okhttp</code></p>
<h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p><code>Retrofit</code>需要通过注解请求方法以及请求参数来表明应该如何去进行一个Http请求，目前内置了5种注解方式<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>以及<code>HEAD</code>。同时资源的相对URL要在注解中明确的指出。比如请求方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>@POST(&quot;/notes/&quot;)</code>的意思是，用<code>POST</code>方法，向<code>BASE_URL + &#39;notes/&#39;</code> 即<code>http://192.168.88.105:8000/notes/</code>发起请求。注意两个斜杆，左边的<code>/</code>代表在<code>BASE_URL</code>的基础上，右边的<code>/</code>表示<code>notes</code>的实际接口，去掉其中一个都会导致不同的结果。</p>
<p>更多api的写法请看<a href="">下一篇</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（四）线程控制 —— Scheduler]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%20%E2%80%94%E2%80%94%20Scheduler/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，事件的发起和消费都是在同一个线程中执行，也就是说之前我们使用的RxJava是同步的～～～</p>
<p>观察者模式本身的目的不就是后台处理，将处理结果回调给前台？这同步的是要哪样？所以，这篇为大家介绍RxJava的重要的概念——<code>Scheduler</code></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RxJava在不指定线程的情况下，发起时间和消费时间默认使用当前线程。所以之前的做法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>因为是在主线程中发起的，所以不管中间 <code>map</code>的处理还是<code>Action1</code>的执行都是在主线程中进行的。若是<code>map</code>中有耗时的操作(比如网络请求)，这样会导致主线程拥塞，这并不是我们想看到的。</p>
<h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><p><code>Scheduler</code>：线程控制器，可以指定每一段代码在什么样的线程中执行。<br>模拟一个需求：新的线程发起事件，在主线程中消费<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rxJavaTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.just(<span class="string">"Hello"</span>, <span class="string">"Word"</span>)</span><br><span class="line">            .subscribeOn(Schedulers.newThread())<span class="comment">//指定 subscribe() 发生在新的线程</span></span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    Log.i(TAG, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p>
<p>上面用到了<code>subscribeOn()</code>，和<code>observeOn()</code>方法来指定发生的线程和消费的线程。</p>
<ul>
<li><code>subscribeOn()</code>：指定subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</li>
<li><code>observeOn()</code>：指定Subscriber 所运行在的线程。或者叫做事件消费的线程。</li>
</ul>
<p>以及参数Scheduler，RxJava已经为我们提供了一下几个Scheduler</p>
<ul>
<li><code>Schedulers.immediate()</code>：直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</li>
<li><code>Schedulers.newThread()</code>：总是启用新线程，并在新线程执行操作。</li>
<li><code>Schedulers.io()</code>： I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 <code>newThread()</code> 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li><code>Schedulers.computation()</code>：计算所使用的 <code>Scheduler</code>。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 <code>computation()</code> 中，否则 I/O 操作的等待时间会浪费 CPU。</li>
<li><code>AndroidSchedulers.mainThread()</code>：它指定的操作将在 Android 主线程运行。</li>
</ul>
<h1 id="多次切换线程"><a href="#多次切换线程" class="headerlink" title="多次切换线程"></a>多次切换线程</h1><p>看完上面的介绍想必对RxJava线程的切换有了一些理解，上面只是对事件的发起和消费制定了线程。如果中间有<code>map</code>之类的操作呢？是否可以实现发起的线程在新线程中，<code>map</code>的处理在IO线程，最后的消费在主线程中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.newThread())<span class="comment">//指定：在新的线程中发起</span></span><br><span class="line">        .observeOn(Schedulers.io())         <span class="comment">//指定：在io线程中处理</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> handleString(s);       <span class="comment">//处理数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定：在主线程中处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                show(s);                       <span class="comment">//消费事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>observeOn()</code>被调用了两次，分别指定了<code>map</code>的处理的现场和消费事件<code>show(s)</code>的线程。</p>
<p>若将<code>observeOn(AndroidSchedulers.mainThread())</code>去掉会怎么样？不为消费事件<code>show(s)</code>指定线程后，<code>show(s)</code>会在那里执行？<br>其实，<code>observeOn()</code>指定的是它之后的操作所在的线程。也就是说，<code>map</code>的处理和最后的消费事件<code>show(s)</code>都会在io线程中执行。<br><code>observeOn()</code>可以多次使用，可以随意变换线程</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>学会线程控制后才算是真正学会了使用RxJava。RxJava的使用十分灵活，想要对其熟悉使用只有一个办法，那就是多用啦，熟能生巧。</p>
<p>参考：<br><a href="https://www.jianshu.com/p/ecfb9d68d2a2" target="_blank" rel="noopener">https://www.jianshu.com/p/ecfb9d68d2a2</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（三）对象转换器——map、flatMap]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%99%A8%E2%80%94%E2%80%94map%E3%80%81flatMap/</url>
      <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>在使用<code>map</code>之前要先说道一个接口：<code>Func1</code>，<code>Func1</code>和上一篇提到的<code>Action1</code>相似。<code>Func1</code> 和 <code>Action</code>的区别在于， <code>Func1</code> 包装的是有返回值的方法。<br>接下来就是map的用法，看代码更直观点；</p>
<h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>得到多个Student对象中的name，保存到nameList中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>Observable</code>中原来的参数是<code>Student对象</code>，而最后我们需要的是<code>name</code>，这里使用了<code>map</code>来实现这一转换的过程。当然，<code>map</code>可以多次使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多次使用map，想用几个用几个</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;<span class="comment">//将String类型的转化为Integer类型的哈希码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;<span class="comment">//将转化后得到的Integer类型的哈希码再转化为String类型</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer.intValue() + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h1><p><code>flatMap</code>是一个比教难理解的一个转换，在这里先假设一个需求，需要打印多个<code>Student</code>所学的课程。这跟之前获取<code>Student</code>的<code>name</code>又不同了，这里先确定一下关系，一个<code>Student</code>类中只有一个<code>name</code>，而一个<code>Student</code>却有多门课程（Course），<code>Student</code>我们可以理解成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 学生类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; coursesList;<span class="comment">//所修的课程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 课程类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//课程名</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果使用<code>map</code>来实现打印所有学生所修个课程名，实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Action1&lt;List&lt;Course&gt;&gt; action1 = <span class="keyword">new</span> Action1&lt;List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历courses，输出cuouses的name</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++)&#123;</span><br><span class="line">            Log.i(TAG, courses.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//返回coursesList</span></span><br><span class="line">                <span class="keyword">return</span> student.getCoursesList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(action1);</span><br></pre></td></tr></table></figure></p>
<p>可以看到，在<code>Action1</code>中出现了for来循环打印课程名，使用<code>RxJava</code>就是为了剔除这样的嵌套结构，使得整体的逻辑性更强。这时候就可以使用<code>flatMap</code>了，使用<code>flatMap</code>实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(student.getCoursesList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Course&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, course.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样就实现了跟上面代码一样的效果，看起来有点懵？确实，<code>flatMap</code>理解起来有点绕，刚接触<code>flatMap</code>的时候我也是懵逼一个。下面我将<code>flatMap</code>的示意图，希望能帮助理解：</p>
<p>flatMap示意图</p>
<p>由上图可以看出<code>Student1</code>、<code>Student2</code>经过<code>flatMap</code>后，按顺序依次经历了<code>Observable1</code>、<code>Observable2</code>，分别转化为<code>Course</code>。最后按顺序得到<code>Course1</code>、<code>Course2</code>、<code>Course3</code>、<code>Course4</code>、<code>Course5</code>、<code>Course6</code>，其中1-3由Student1得到，4-6由Student2得到。<br>结合代码和示意图，是不是对flatMap有了一定的理解。</p>
<blockquote>
<p><strong>注意</strong>：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。也就说，传入的顺序可能跟出来的顺序不一样。<br>如果要保证顺的的话，可以使用concatMap。</p>
</blockquote>
<p>#其他操作符</p>
<p>除了<code>map</code>和<code>flatMap</code>之外，还有其他操作符以供使用。这里就不一一列举他们的用法了，其他常用的操作符如下：</p>
<ul>
<li><code>filter</code>：集合进行过滤</li>
<li><code>each</code>：遍历集合</li>
<li><code>take</code>：取出集合中的前几个</li>
<li><code>skip</code>：跳过前几个元素</li>
</ul>
<p><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/32209660" target="_blank" rel="noopener">更多操作符</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/52cd2d514528" target="_blank" rel="noopener">https://www.jianshu.com/p/52cd2d514528</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（二）Action]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89Action/</url>
      <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>例：分别打印”Hello”、” World”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到，我们这里只用了<code>onNext(obj)</code>，还有两个重写的<code>onError(error)</code>和<code>onCompleted()</code>并没有用到，这样导致我们多出了几行根本用不到的代码。于是就想能不能只写我们使用到的，其他几个没用到的就不写，这样的代码看着才舒服。接下来就是使用本次的主角<code>Action</code>来代替<code>Subscriber</code></p>
<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>上部分的代码使用Action来代替Subscriber得到的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>舒服多了有没有！！</p>
<h2 id="什么是Action"><a href="#什么是Action" class="headerlink" title="什么是Action"></a>什么是Action</h2><p><code>Action</code>是<code>RxJava</code> 的一个接口，常用的有<code>Action0</code>和<code>Action1</code>。<br><code>Action0</code>： 它只有一个方法 <code>call()</code>，这个方法是无参无返回值的；由于 <code>onCompleted()</code> 方法也是无参无返回值的，因此 <code>Action0</code> 可以被当成一个包装对象，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。<br><code>Ation1</code>：它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数；与 <code>Action0</code> 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 <code>Action1</code> 可以将 <code>onNext(obj)</code>和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调</p>
<h2 id="Action的使用"><a href="#Action的使用" class="headerlink" title="Action的使用"></a>Action的使用</h2><p>定义三个对象，分别打包<code>onNext(obj)</code>、<code>onError(error)</code>、<code>onCompleted()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line"><span class="comment">//处理onNext()中的内容</span></span><br><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onError()中的内容</span></span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onCompleted()中的内容</span></span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>接下来使用<code>subscribe</code>重载的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 onNextAction 来定义 onNext()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction);</span><br><span class="line"><span class="comment">//使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">//使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure></p>
<p>根据实际情况使用以上的方法处理<code>onNext(obj)</code>、<code>onError(error)</code> 、<code>onCompleted()</code>的回调。<br>现在有个疑问，为什么使用<code>Action</code>也能达到使用<code>Subscriber</code>的结果？进<code>subscribe(Action1 onNext)</code>的源码看看。</p>
<p><img src="/assets/blog/img/2018-02-26/31.png" width="700"></p>
<p>还以为有多高深，原来就是把<code>Action</code>对象转化成对应的<code>Subscriber</code>对象了。这样就不难理解为什么可以使用<code>Action</code>来代替<code>Subscriber</code>了。</p>
<h2 id="重写打印”Hello”、”-Wrod”的方法"><a href="#重写打印”Hello”、”-Wrod”的方法" class="headerlink" title="重写打印”Hello”、” Wrod”的方法"></a>重写打印”Hello”、” Wrod”的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>相比第一篇那冗长的代码，现在感觉怎么样？还是觉得代码多？确实，如果只是打印几个字符串确实还是略微复杂。不急，RxJava还有其他功能呢。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Action</code>的使用为我们减少了不必要的代码，使得写出的代码看上去更加得简洁。不过就目前来看<code>RxJava</code>还是没有什么优势值得我们去使用，下一篇我还会介绍更多<code>RxJava</code>的用法。慢慢得，你就会发现使用<code>RxJava</code>写出来的代码看上去真的很漂亮。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/c7a995f3763c" target="_blank" rel="noopener">https://www.jianshu.com/p/c7a995f3763c</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（一）基本用法]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步处理。异步的话我们一般有现成的 AsyncTask / Handler / View.postdelay / … , 不过，今天我们用RxJava。RxJava的本质是<strong>异步处理</strong>，RxJava的好处就在于它的简洁性，逻辑简单的时候看不出RxJava的优势，想必大家都知道在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。这时候RxJava的优势就来了，<strong>随着程序逻辑变得越来越复杂，它依然能够保持简洁</strong>。</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>首先要先介绍一下观察者模式（可能比喻的不够恰当，意思到了就好）；</p>
<ul>
<li><strong>观察者</strong>：监视着被观察者的行为，当被观察者某个状态改变的时候会通知观察者，观察者会执行对应的操作；</li>
<li><strong>被观察者</strong>：被监视的对象，当某个状态改变的时候会通知观察者；</li>
<li><strong>订阅（或注册）</strong>：将观察者和被观察者建立联系。</li>
</ul>
<p>（很乱？来个栗子？）<br>这里举一个我个常用的例子，点击<code>Button</code>后触发<code>OnClickListener</code><br>中的<code>onClick()</code>事件。在这个事件中他们的角色分别如下：</p>
<ul>
<li><strong>观察者</strong>：OnClickListener；</li>
<li><strong>被观察者</strong>：Button；</li>
<li><strong>订阅（或注册）</strong>：setOnClickListener()。</li>
</ul>
<h1 id="RxJava中的观察者模式"><a href="#RxJava中的观察者模式" class="headerlink" title="RxJava中的观察者模式"></a>RxJava中的观察者模式</h1><p>在上面介绍了观察者模式，这里也将RxJava中的三个角色进行一下角色分配</p>
<ul>
<li><strong>观察者</strong>：Observer；</li>
<li><strong>被观察者</strong>：Observable；</li>
<li><strong>订阅（或注册）</strong>：subscribe()。</li>
</ul>
<h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p><code>Observer</code> 即观察者，它决定事件触发的时候将有怎样的行为。</p>
<p>RxJava 观察者的事件回调方法除了普通事件<code>onNext()</code>（相当于<code>onClick()/onEvent()</code>）之外，还定义了两个特殊的事件：<code>onCompleted()</code>和<code>onError()</code>。</p>
<ul>
<li><code>onCompleted()</code>: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的<code>onNext()</code>发出时，需要触发<code>onCompleted()</code>方法作为标志。</li>
<li><code>onError()</code>: 事件队列异常。在事件处理过程中出异常时，<code>onError()</code>会被触发，同时队列自动终止，不允许再有事件发出。</li>
</ul>
<p>在一个正确运行的事件序列中,<code>onCompleted()</code>和<code>onError()</code>有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code>:和<code>onError()</code>二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p>
<h2 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h2><p><code>Observable</code> 即被观察者，它决定什么时候触发事件以及触发怎样的事件。可以使用<code>create()</code>、<code>just(T...)</code>、<code>from(T[])</code>或<code>from(Iterable&lt;? extends T&gt;)</code>来创建一个 <code>Observable</code> ，并为它定义事件触发规则。</p>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>创建了<code>Observable</code>和<code>Observer</code>之后，再用<code>subscribe()</code>方法将它们联结起来</p>
<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>例：打印字符串</p>
<ol>
<li><p>添加依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava:1.0.14'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依次创建观察者，被观察者，订阅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用Observable.create()创建被观察者</span></span><br><span class="line">Observable observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Wrold"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//订阅</span></span><br><span class="line">observable1.subscribe(observer);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上用到的都是rx包里面的，别用错了！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.Observer;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br></pre></td></tr></table></figure></p>
<p>上面完成了一次Rxjava的基本使用，会在log里显示<code>Hello World</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/19cac3c5b106" target="_blank" rel="noopener">https://www.jianshu.com/p/19cac3c5b106</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android抽象布局——include、merge 、ViewStub]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%E6%8A%BD%E8%B1%A1%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94include%E3%80%81merge%20%E3%80%81ViewStub/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在布局优化中，Androi的官方提到了这三种布局<code>&lt;include /&gt;</code>、<code>&lt;merge /&gt;</code>、<code>&lt;ViewStub /&gt;</code>，并介绍了这三种布局各有的优势，下面也是简单说一下他们的优势，以及怎么使用，记下来权当做笔记。</p>
<h1 id="布局重用-lt-include-gt"><a href="#布局重用-lt-include-gt" class="headerlink" title="布局重用&lt;include /&gt;"></a>布局重用<code>&lt;include /&gt;</code></h1><p><code>&lt;include /&gt;</code>标签能够重用布局文件，简单的使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/app_bg"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/titlebar"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"@string/hello"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    ...  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>&lt;include /&gt;</code>标签可以使用单独的layout属性，这个也是必须使用的。</li>
<li>可以使用其他属性。<code>&lt;include /&gt;</code>标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖，解决方案。</li>
<li>在<code>include</code>标签中所有的<code>android:layout_*</code>都是有效的，前提是必须要写<code>layout_width</code>和<code>layout_height</code>两个属性。</li>
<li>布局中可以包含两个相同的<code>include</code>标签，引用时可以使用如下方法解决（参考）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View bookmarks_container_2 = findViewById(R.id.bookmarks_favourite);   </span><br><span class="line">  </span><br><span class="line">bookmarks_container_2.findViewById(R.id.bookmarks_list);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="减少视图层级-lt-merge-gt"><a href="#减少视图层级-lt-merge-gt" class="headerlink" title="减少视图层级&lt;merge /&gt;"></a>减少视图层级<code>&lt;merge /&gt;</code></h1><p><code>&lt;merge/&gt;</code>标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级，优化UI。<code>&lt;merge/&gt;</code>多用于替换FrameLayout或者当一个布局包含另一个时，<code>&lt;merge/&gt;</code>标签消除视图层次结构中多余的视图组。例如你的主布局文件是垂直布局，引入了一个垂直布局的<code>include</code>，这是如果<code>include</code>布局使用的<code>LinearLayout</code>就没意义了，使用的话反而减慢你的UI表现。这时可以使用<code>&lt;merge/&gt;</code>标签优化。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/add"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/delete"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>现在，当你添加该布局文件时(使用<code>&lt;include /&gt;</code>标签)，系统忽略<code>&lt;merge /&gt;</code>节点并且直接添加两个Button。更多<code>&lt;merge /&gt;</code>介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize by merging》</a></p>
<h1 id="需要时使用-lt-ViewStub-gt"><a href="#需要时使用-lt-ViewStub-gt" class="headerlink" title="需要时使用&lt;ViewStub /&gt;"></a>需要时使用<code>&lt;ViewStub /&gt;</code></h1><p><code>&lt;ViewStub /&gt;</code>标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。各种不常用的布局想进度条、显示错误消息等可以使用<code>&lt;ViewStub /&gt;</code>标签，以减少内存使用量，加快渲染速度。<code>&lt;ViewStub /&gt;</code>是一个<code>不可见的，大小为0的View</code>。<code>&lt;ViewStub /&gt;</code>标签使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/stub_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:inflatedId</span>=<span class="string">"@+id/panel_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout</span>=<span class="string">"@layout/progress_overlay"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当你想加载布局时，可以使用下面其中一种方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub) findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);  </span><br><span class="line"><span class="comment">// or  </span></span><br><span class="line">View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();</span><br></pre></td></tr></table></figure></p>
<p>当调用<code>inflate()</code>函数的时候，<code>ViewStub</code>被引用的资源替代，并且返回引用的view。 这样程序可以直接得到引用的<code>view</code>而不用再次调用函数<code>findViewById()</code>来查找了。<br>注：<code>ViewStub</code>目前有个缺陷就是还不支持 <code>&lt;merge /&gt;</code> 标签。</p>
<p>更多<code>&lt;ViewStub /&gt;</code>标签介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-with.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize with stubs》</a></p>
<p>参考：<br><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/reusing-layouts.html</a><br><a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html</a><br><a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint</a><br><a href="http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html</a><br><a href="http://developer.android.com/training/improving-layouts/loading-ondemand.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/loading-ondemand.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（三）封装]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>封装后方便对 OrmLite 的使用</p>
<p><a href="https://github.com/triline3/timecat/blob/master/app/src/main/java/com/time/cat/database/GenericDao.java" target="_blank" rel="noopener">见项目</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（二）高级操作]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>这篇文章主要介绍 <code>OrmLite 框架</code>中使用到的一些查询方法.</p>
<h1 id="WEHRE子句"><a href="#WEHRE子句" class="headerlink" title="WEHRE子句"></a>WEHRE子句</h1><p>在SQL语句中，经常会用到where语句，where 进行条件筛选。<br><code>dao.queryBuilder.()where()</code>方法返回一个<code>where对象</code>，<code>where</code>中提供了很多方法来进行条件筛选,下边逐个讲<code>where</code>中的方法。</p>
<p>方法 ：eq(columnName,value) 等于（=）equals<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id = 2</code></p>
<p>方法 ：lt(columnName,value) 小于（&lt;） less than<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt; 2</code></p>
<p>方法 ：gt(columnName,value) 大于（&gt;） greater than<br>使用示范：<code>mDao.queryBuilder().where().gt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt; 2</code></p>
<p>方法 ：ge(columnName,value) 大于等于（&gt;=）greater-than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().ge(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt;= 2</code></p>
<p>方法 ：le(columnName,value) 小于等于（&lt;=）less than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().le(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;= 2</code></p>
<p>方法 ：ne(columnName,value) 不等于（&lt;&gt;）not-equal-to<br>使用示范：<code>mDao.queryBuilder().where().ne(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;&gt; 2</code></p>
<p>方法 ：in(columnName,object…) 在指定列中匹配object数组所对应的值，返回匹配到的结果行集合,in还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().in(“id”, 1，2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id IN (1，2 )</code></p>
<p>方法 ：notIn(columnName,object…) 在指定列中匹配object数组所对应的值，返回没有匹配到的结果行集合notIn还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().notIn(“id”,1,2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id NOT IN (1 ,2 )</code></p>
<p>方法 ：like(columnName,pattern) 使用%通配符来匹配，指定行数据，返回匹配到的结果<br>使用示范：<code>mDao.queryBuilder().where().like(“LastName”, “A%”).query();</code> 匹配A开头的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%s”).query();</code> 匹配s结尾的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%art%”).query();</code> 匹配中间为art的LastName<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `LastName` LIKE &#39;A%&#39;</code></p>
<p>方法 ：between(columnName,low,high) 获取指定范围内的结果<br>使用示范：<code>mDao.queryBuilder().where().between(“id”, 1, 2).query();</code>获取id是1到2之间的结果<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `id` BETWEEN 1 AND 2</code></p>
<p>方法and()，or()用来组合上述where子语句。进行与，或操作。<br>方法 ：and() where子句与操作<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 3).and().gt(“id”, 1).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` &lt; 3 AND `id` &gt; 1 )</code></p>
<p>方法 ：or() where子句或操作<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 1).or().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` = 1 OR `id` = 2 )</code></p>
<h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p>根据指定列名排序，降序，升序<br>使用示范：<code>mDao.queryBuilder().orderBy(“id”, false).query(); //参数false表示降序，true表示升序。</code><br>对应SQL：<code>SELECT * FROM `t_person` ORDER BY `id` DESC（降序）</code></p>
<h1 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h1><p>过滤指定列不重复数据行，重复的只返回一次。<br>使用示范：<code>mDao.queryBuilder().selectColumns(“City”).distinct().query();</code><br>对应SQL：<code>SELECT DISTINCT `City` FROM `t_person`</code></p>
<h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h1><p>按照指定列分组<br>使用示范：<code>mDao.queryBuilder().groupBy(“city”).query();</code><br>对应SQL：<code>SELECT * FROM t_person GROUP BY city</code></p>
<h1 id="offset-Limit"><a href="#offset-Limit" class="headerlink" title="offset Limit"></a>offset Limit</h1><p>offset跳过指定的行数<br>limit限制获取指定行数<br>使用示范：<code>mDao.queryBuilder().offset(2).limit(2).query();</code> 可以用来分页<br>对应SQL：<code>SELECT * FROM t_person LIMIT 2 OFFSET 2</code></p>
<h1 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h1><p>等同于sql中的Having，针对分组数据，进行聚合函数（SUM, COUNT, MAX, AVG）运算。<br>使用示范：  <code>mPersonList = mDao.queryBuilder().groupBy(“City”).having(“SUM(id)&gt;4”).query()</code><br>对应SQL： <code>SELECT * FROM t_person GROUP BY City HAVING SUM(id)&gt;4</code></p>
<h1 id="countOf"><a href="#countOf" class="headerlink" title="countOf"></a>countOf</h1><p>返回查询结果的总数<br>使用示范：<code>mDao.queryBuilder().countOf()</code><br>对应SQL：<code>SELECT COUNT(*) FROM t_person</code></p>
<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>返回一个结果集的迭代器。<br>使用示范：<code>Iterator iterator = mDao.queryBuilder().iterator();</code></p>
<h1 id="queryForFirst"><a href="#queryForFirst" class="headerlink" title="queryForFirst"></a>queryForFirst</h1><p>返回所有行的第一行。<br>使用示范：<code>mDao.queryBuilder().queryForFirst();</code></p>
<p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（一）快速入门]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。</p>
<p>本文主要针对 Android 使用 <code>OrmLite 框架</code> 对数据库的基本操作介绍，如有那些地方介绍的不对，请指出来，一起学习，一起进步。</p>
<h1 id="添加-OrmLite-包"><a href="#添加-OrmLite-包" class="headerlink" title="添加 OrmLite 包"></a>添加 OrmLite 包</h1><p>向工程中添加 OrmLite 的 jar 包有两种方式：</p>
<ol>
<li>到 OrmLite 官网下载 ormlite-core-4.49.jar 和 ormlite-android-4.49.jar 两个jar 包添加到工程中。</li>
<li>在项目中添加依赖的方式。</li>
</ol>
<h1 id="创建项目中使用DatabaseHelper类"><a href="#创建项目中使用DatabaseHelper类" class="headerlink" title="创建项目中使用DatabaseHelper类"></a>创建项目中使用DatabaseHelper类</h1><p>首先要简单说一下 <code>OrmLite 框架</code>中 <code>OrmLiteSqliteOpenHelper</code> 类 ，<code>OrmLiteSqliteOpenHelper</code> 类继承了 <code>SQLiteOpenHelper</code>。所以，创建项目中的D<code>atabaseHelper</code> 类，要使该类继承 <code>OrmLite 框架</code> 的 <code>OrmLiteSqliteOpenHelper</code> 类来获得 <code>SQLiteHelper</code>.</p>
<h1 id="继承-OrmLiteSqliteOpenHelper-实现几个方法说明"><a href="#继承-OrmLiteSqliteOpenHelper-实现几个方法说明" class="headerlink" title="继承 OrmLiteSqliteOpenHelper 实现几个方法说明"></a>继承 <code>OrmLiteSqliteOpenHelper</code> 实现几个方法说明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context, String databaseName, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> databaseVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, databaseName, factory, databaseVersion);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数说明：</span></span><br><span class="line"><span class="comment">         * context：上下文。</span></span><br><span class="line"><span class="comment">         * databaseName： 数据库名。</span></span><br><span class="line"><span class="comment">         * factory： 游标实例，多数时候设置成NULL。</span></span><br><span class="line"><span class="comment">         * databaseVersion：数据库版本，当数据库版本升高时，会调用onUpgrade（）方法。</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure>
<h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource)</span> </span>&#123; </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在该方法中进行创建表操作</span></span><br><span class="line"><span class="comment">         * 使用`OrmLite 框架`的 TableUtils.createTable进行创建表操作。</span></span><br><span class="line"><span class="comment">         *eg.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TableUtils.createTable(connectionSource, UserInfo.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据库版本提升更新方法"><a href="#数据库版本提升更新方法" class="headerlink" title="数据库版本提升更新方法"></a>数据库版本提升更新方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//在该方法中进行更新操作</span></span><br></pre></td></tr></table></figure>
<h1 id="创建数据库表对应的-Bean"><a href="#创建数据库表对应的-Bean" class="headerlink" title="创建数据库表对应的 Bean"></a>创建数据库表对应的 Bean</h1><p>Bean 类中的变量对应数据库中的字段，在 Bean 中使用注解方式进行设置。<br>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DatabaseTable</span>(tableName = <span class="string">"tb_user_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DatabaseField</span>(generatedId = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"addr"</span>)</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应字段的set 和 get 方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="数据库中字段注解设置说明："><a href="#数据库中字段注解设置说明：" class="headerlink" title="数据库中字段注解设置说明："></a>数据库中字段注解设置说明：</h1><table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">参数名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@DatabaseTable</td>
<td style="text-align:center">tableName</td>
<td style="text-align:center">指定表明,没有将使用类名作为表明</td>
</tr>
<tr>
<td style="text-align:center">@DatabaseField</td>
<td style="text-align:center">cloumnName</td>
<td style="text-align:center">指定字段名,不指定则变量名作为字段名</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">canBeNull</td>
<td style="text-align:center">是否可以为null</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">dataType</td>
<td style="text-align:center">指定字段的类型</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">defaultValue</td>
<td style="text-align:center">指定默认值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">width</td>
<td style="text-align:center">指定长度</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">id</td>
<td style="text-align:center">指定字段为id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">generatedId</td>
<td style="text-align:center">指定字段为自增长的id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">generatedIdSequence</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreign</td>
<td style="text-align:center">指定这个字段的对象是一个外键,外键值是这个对象的id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">useGetSet</td>
<td style="text-align:center">指定ormlite访问变量使用set,get方法默认使用的是反射机制直接访问变量</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">throwIfNull</td>
<td style="text-align:center">如果空值抛出异常</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">persisted</td>
<td style="text-align:center">指定是否持久化此变量,默认true</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">unique</td>
<td style="text-align:center">字段值唯一</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueCombo</td>
<td style="text-align:center">整列的值唯一</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">index</td>
<td style="text-align:center">索引</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueIndex</td>
<td style="text-align:center">唯一索引</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignAutoRefresh</td>
<td style="text-align:center">外键值,自动刷新</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueIndex</td>
<td style="text-align:center">外键值,自动刷新</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignAutoCreate</td>
<td style="text-align:center">外键不存在时是否自动添加到外间表中</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignColumnName</td>
<td style="text-align:center">外键字段指定的外键表中的哪个字段</td>
</tr>
</tbody>
</table>
<h1 id="获取操作数据库对应表的-Bean-的-Dao"><a href="#获取操作数据库对应表的-Bean-的-Dao" class="headerlink" title="获取操作数据库对应表的 Bean 的 Dao"></a>获取操作数据库对应表的 Bean 的 Dao</h1><p>在<code>OrmLite 框架</code>中。操作数据是通过 对应<code>Bean</code>的<code>Dao</code> 实现的。 </p>
<p>那么Dao 是如何获取的呢？ </p>
<p>Dao 的获取方式： </p>
<p>对应Bean是通过 <code>OrmLiteSqliteOpenHelper</code> 类中 <code>getDao(Class clazz)</code> 方法获取。</p>
<p>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatabaseHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dao&lt;UserInfo,Integer&gt; <span class="title">getUserDao</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        helper = <span class="keyword">new</span> DatabaseHelper(context);</span><br><span class="line">        <span class="keyword">return</span> helper.getDao(UserInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过 <code>Dao</code> 对数据库进行简单增、删、改、查操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDao mDao = <span class="keyword">new</span> UserDao();</span><br></pre></td></tr></table></figure></p>
<p>增：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        UserInfo u1 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"beijng"</span>,<span class="string">"nan"</span>);</span><br><span class="line">        mDao.getUserDao(mContext).create(u1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>删：<br>下面的示例是使用删除集合完成删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改和删除要通过id 进行操作</span></span><br><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">UserInfo u3 = <span class="keyword">new</span> UserInfo(<span class="string">"招商"</span>,<span class="string">"beijng"</span>,<span class="string">"女"</span>);</span><br><span class="line">u3.setUserId(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Collection&lt;UserInfo&gt; collection = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</span><br><span class="line">    collection.add(u4);</span><br><span class="line">    collection.add(u3);</span><br><span class="line">    mDao.getUserDao(mContext).delete(collection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"updateMan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mDao.getUserDao(mContext).update(u4);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>查：<br>注：这里只举了一个查询方式，查询全部。条件查询请参考（OrmLite 复杂条件查询）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;UserInfo&gt; infos =  mDao.getUserDao(mContext).queryForAll();</span><br><span class="line">    <span class="keyword">for</span>(UserInfo info : infos)&#123;</span><br><span class="line">        <span class="comment">//在此处使用TextView进行显示</span></span><br><span class="line">        mUserText.append(<span class="string">"\n"</span> + info.toString() + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 制作捐赠二维码，实现捐赠收款]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E5%88%B6%E4%BD%9C%E6%8D%90%E8%B5%A0%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%8D%90%E8%B5%A0%E6%94%B6%E6%AC%BE/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>撰写了一篇对读者有帮助的博客，</p>
<p>贡献了一套对开发者有用的开源项目，<br>上架了一个免费的App，用户觉得好用想回报作者，<br>上架了一个收费的App，小白用户因不会使用 苹果支付（Apple Pay），谷歌钱包（Google Wallet Card），PayPal，没办法只要使用越狱破解版本，但又想获得版本更新，好用想回报作者，</p>
<p>以上问题因为有了 阿里支付宝（alipay）的二维码支付（捐赠），一切皆不是问题。平时你在互联网上看到的快捷捐赠就是这样实现的，你也可以实现.</p>
<h1 id="步骤分解："><a href="#步骤分解：" class="headerlink" title="步骤分解："></a>步骤分解：</h1><ol>
<li>PC端登陆支付宝官方网站 <a href="https://qr.alipay.com" target="_blank" rel="noopener">https://qr.alipay.com</a> </li>
<li>免费领取“向我付款”的二维码。</li>
<li>个性化设置可以自行上传头像照片，并设置收款人姓名</li>
<li>下载“向我付款”的二维码，放到你的博客、github、App下载页面（注意不要放到AppStore或App内，会违反AppStore审核规则被Reject！）</li>
</ol>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><ol>
<li>支付宝二维码实则为一个可以打开支付宝客户端的url地址。也可以用手机原生浏览器，如iOS的Safari，Android的浏览器，直接访问二维码的Web地址，如我的二维码地址为<a href="https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5" target="_blank" rel="noopener">https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5</a></li>
<li>必须使用支付宝android，iOS客户端的“扫一扫”功能，如没有安装，先安装。</li>
<li>使用微信扫描时，微信会禁止跳转到支付宝（竞争对手关系吧），这时候需要选择扫描结果页面–右上角的打开方式“…”，使用原生浏览器打开，并拷贝支付地址</li>
</ol>
<h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><ol>
<li>WeiboX：新浪微博 MAC客户端，个人开发者<a href="http://weiboformac.sinaapp.com/donates.php" target="_blank" rel="noopener">http://weiboformac.sinaapp.com/donates.php</a></li>
<li>JeepREC：iPhone版行车记录仪，个人开发者<br>专业版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8</a><br>免费版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8</a></li>
</ol>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.csdn.net/huanghr_1/article/details/41118059" target="_blank" rel="noopener">如何制作捐赠二维码，实现开源项目或免费应用的捐赠收款（支付宝篇）</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> alipay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 跳转QQ加群]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E8%B7%B3%E8%BD%ACQQ%E5%8A%A0%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目内测需要用到</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>访问<a href="https://qun.qq.com/join.html" target="_blank" rel="noopener">https://qun.qq.com/join.html</a></li>
<li>登录</li>
<li>左边选择QQ群，右边有代码，直接复制到项目即可</li>
</ol>
<p><img src="/assets/blog/img/2018-02-26/30.png" width="700"></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>必须明确QQ群号</li>
<li>该用户必须是QQ群号的管理员或群主</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> QQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android Studio 高效配置]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E9%AB%98%E6%95%88%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="1、代码提示不区分大小写"><a href="#1、代码提示不区分大小写" class="headerlink" title="1、代码提示不区分大小写"></a>1、代码提示不区分大小写</h1><p>File | Settings 打开设置，选择Editor | General | Code Completion</p>
<p>Case sensitive completion：选择None。</p>
<p><img src="/assets/blog/img/2018-02-26/5.png" width="700"></p>
<h1 id="2、显示行号"><a href="#2、显示行号" class="headerlink" title="2、显示行号"></a>2、显示行号</h1><p>File | Settings 打开设置，选择Editor | General | Appearance</p>
<p>如图勾选 Show line numbers。</p>
<p><img src="/assets/blog/img/2018-02-26/6.png" width="700"></p>
<h1 id="3、自动导包"><a href="#3、自动导包" class="headerlink" title="3、自动导包"></a>3、自动导包</h1><p>在 Android Studio 中， Alt + Enter 和 Control + Alt + O 是用来导包和清除无用导包。但是，你可以设置其快速自动导包的。</p>
<p>File | Settings打开设置，选择 Editor | General | Auto Import，勾选 Optimize imports on the fly 和 Add unambiguous imports on the fly 。</p>
<p><img src="/assets/blog/img/2018-02-26/7.png" width="700"></p>
<h1 id="4、Log日志的颜色自定义"><a href="#4、Log日志的颜色自定义" class="headerlink" title="4、Log日志的颜色自定义"></a>4、Log日志的颜色自定义</h1><p>Android Studio中 Logcat 的默认只有红白两种颜色，这样不利于我们分析Log打印的信息。建议还是采用Android Holo主题的配色方案。</p>
<p>File | Settings 打开设置，选择Editor | Color &amp; Fonts | Android Logcat，点击 Click on Save As…按钮创建一个新的配色 myLog。</p>
<p>注意：修改之前一定要取消勾选 Use inherited attributes</p>
<p><img src="/assets/blog/img/2018-02-26/8.png" width="700"></p>
<h1 id="5、屏幕截图与屏幕录屏"><a href="#5、屏幕截图与屏幕录屏" class="headerlink" title="5、屏幕截图与屏幕录屏"></a>5、屏幕截图与屏幕录屏</h1><p>Android Studio中 自带了截屏与录屏的功能。如图</p>
<p>截屏：</p>
<p><img src="/assets/blog/img/2018-02-26/9.png" width="200"><br><img src="/assets/blog/img/2018-02-26/10.png" width="200"></p>
<p>录屏：</p>
<p><img src="/assets/blog/img/2018-02-26/11.png" width="700"><br><img src="/assets/blog/img/2018-02-26/12.png" width="700"><br><img src="/assets/blog/img/2018-02-26/13.png" width="400"></p>
<h1 id="6、Android-Studio真机ADB-WiFi调试"><a href="#6、Android-Studio真机ADB-WiFi调试" class="headerlink" title="6、Android Studio真机ADB WiFi调试"></a>6、Android Studio真机ADB WiFi调试</h1><p>第一步，安装ADBWIFI插件，安装后之后重启AndroidStudio。</p>
<p><img src="/assets/blog/img/2018-02-26/14.png" width="300"><br><img src="/assets/blog/img/2018-02-26/15.png" width="300"><br><img src="/assets/blog/img/2018-02-26/16.png" width="300"></p>
<p>第二步，重启后，你会发现Tools | Android 多了一个 ADB WIFI。</p>
<p><img src="/assets/blog/img/2018-02-26/17.png" width="700"></p>
<p>手机通过数据线连上电脑，如图点击ADB Restart，出现如下图则成功</p>
<p><img src="/assets/blog/img/2018-02-26/18.png" width="700"></p>
<p>再点击 ADB USB to WIFI，出现如下图则成功，便可拔掉数据线无线调试了。</p>
<p><img src="/assets/blog/img/2018-02-26/19.png" width="700"></p>
<h1 id="7、WaKaTime"><a href="#7、WaKaTime" class="headerlink" title="7、WaKaTime"></a>7、WaKaTime</h1><p>一款可以记录你敲代码时间的插件。</p>
<p>安装wakatime插件如上面，安装后重启。记得在官网上注册账号获取API Key。在Tools下面点击WaKaTime Settings 设置你的API Key。</p>
<p>官网地址：<a href="https://wakatime.com/" target="_blank" rel="noopener">https://wakatime.com/</a></p>
<p><img src="/assets/blog/img/2018-02-26/20.png" width="700"><br><img src="/assets/blog/img/2018-02-26/21.png" width="700"><br><img src="/assets/blog/img/2018-02-26/22.png" width="700"></p>
<h1 id="8、SexyEditor插件（AndroidStudio设置背景）"><a href="#8、SexyEditor插件（AndroidStudio设置背景）" class="headerlink" title="8、SexyEditor插件（AndroidStudio设置背景）"></a>8、SexyEditor插件（AndroidStudio设置背景）</h1><p>你可以在你的AndroidStudio上设置一张背景图片。File | Settings 打开设置，Other Settings下面的SexyEditor。</p>
<p>opacity：设置图片的 透明度 0-100 数值越大  背景图片越清晰。</p>
<p>shrink to fit: 缩小到适合尺寸。设置图片的缩放。</p>
<p>random:设置图片随机循环播放。</p>
<p>file list ：批量选择图片列表。</p>
<p>往下拉有个Insert 插入图片的按钮。</p>
<p><img src="/assets/blog/img/2018-02-26/23.png" width="700"><br><img src="/assets/blog/img/2018-02-26/24.png" width="700"></p>
<p>效果怎么样，是不是高大上。</p>
<p><img src="/assets/blog/img/2018-02-26/25.png" width="700"></p>
<h1 id="9、ECTranslation翻译插件"><a href="#9、ECTranslation翻译插件" class="headerlink" title="9、ECTranslation翻译插件"></a>9、ECTranslation翻译插件</h1><p>选中某个单词，翻译中文。</p>
<p><img src="/assets/blog/img/2018-02-26/26.png" width="700"></p>
<p>安装完插件重启，然后在Preferences -&gt; Keymap -&gt; 搜索Translate，右键设置快捷键。</p>
<p><img src="/assets/blog/img/2018-02-26/27.png" width="700"></p>
<p>选中某个单词+快捷键如图：</p>
<p><img src="/assets/blog/img/2018-02-26/28.png" width="700"></p>
<h1 id="10、GsonFormat"><a href="#10、GsonFormat" class="headerlink" title="10、GsonFormat"></a>10、GsonFormat</h1><p>json数据自动生成实体类。安装插件和上面一样，重启之后你可以设置一下快捷键，方法和上面一样，我的快捷键设置的是Alt+S。下面是演示。</p>
<p><img src="/assets/blog/img/2018-02-26/29.png" width="700"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android Studio拾色器]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E6%8B%BE%E8%89%B2%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在考虑UI颜色配置的时候需要颜色对齐，需要用的次数多了，给Android Studio自带的拾色器作个小总结。</p>
<p>你可能下载过一些获取颜色值的一些小工具，<br>　　这种方式获取颜色，需要先切换窗口转跳到桌面，然后打开拾色器小工具程序，然后去拾取颜色；</p>
<p>你可能也知道Android Studio自带一个颜色拾色器，通过下面这种方式才能找到<br>　　这种方式获取颜色值限制性很强，需要特定的窗口，需要点击那么一小块颜色才能弹出窗口，才能使用</p>
<p><img src="/assets/blog/img/2018-02-26/1.png" width="700"></p>
<p>那有没有更好的方式？ 答案是肯定的，不然这些个干嘛~~<br>不用向上面那样去打开拾色器小工具程序，不用在特定的窗口点击特定的位置弹出拾色器工具，是用我们最喜欢的快捷键的方式打开<br>Android Studio自带了颜色拾色器工具，但是它没有设置快捷键，也没有告诉我们， 这才是问题，<br>不罗嗦了，跟着下面的设置去设置快捷键吧 </p>
<p><img src="/assets/blog/img/2018-02-26/2.png" width="700"></p>
<p><img src="/assets/blog/img/2018-02-26/3.png" width="700"></p>
<p>设置好之后Apply应用 + OK确认下就好了</p>
<p>下面就能愉快的玩耍了，Alt+C~~ </p>
<p><img src="/assets/blog/img/2018-02-26/4.png" width="700"></p>
<p>参考：<br><a href="http://blog.csdn.net/shibin1990_/article/details/51684877" target="_blank" rel="noopener">Android Studio设置颜色拾色器工具Color Picker</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 懒加载需求下的BaseFragment封装]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E6%87%92%E5%8A%A0%E8%BD%BD%E9%9C%80%E6%B1%82%E4%B8%8B%E7%9A%84BaseFragment%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在多个Fragment需要加载的时候,启动速度往往会变慢，影响用户体验。分析发现并非所有的Fragment都需要第一时间将数据填充完毕，因为它们都还没有被用户所”看见”.所以我们要达到的效果是Fragment被显示后才加载数据(lazy load)。由于这种需求具有共性，即每个Fragment都可能有懒加载的需要，故封装成基类BaseFragment.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fragment title</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String fragmentTitle;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可见状态 为了避免和&#123;<span class="doctag">@link</span> Fragment#isVisible()&#125;冲突 换个名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFragmentVisible;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标志位，View已经初始化完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否第一次加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     * 一般用于PagerAdapter需要刷新各个子Fragment的场景</span></span><br><span class="line"><span class="comment">     * 不要new 新的 PagerAdapter 而采取reset数据的方式</span></span><br><span class="line"><span class="comment">     * 所以要求Fragment重新走initData方法</span></span><br><span class="line"><span class="comment">     * 故使用 &#123;<span class="doctag">@link</span> BaseFragment#setForceLoad(boolean)&#125;来让Fragment下次执行initData</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceLoad = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Bundle bundle = getArguments();</span><br><span class="line">        <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; bundle.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            initVariables(bundle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若 viewpager 不设置 setOffscreenPageLimit 或设置数量不够</span></span><br><span class="line">        <span class="comment">// 销毁的Fragment onCreateView 每次都会执行(但实体类没有从内存销毁)</span></span><br><span class="line">        isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">        View view = initViews(inflater, container, savedInstanceState);</span><br><span class="line">        isPrepared = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是与ViewPager一起使用，调用的是setUserVisibleHint</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isVisibleToUser 是否显示出来了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是通过FragmentTransaction的show和hide的方法来控制显示，调用的是onHiddenChanged.</span></span><br><span class="line"><span class="comment">     * 若是初始就show的Fragment 为了触发该事件 需要先hide再show</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hidden hidden True if the fragment is now hidden, false if it is not</span></span><br><span class="line"><span class="comment">     * visible.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onHiddenChanged(hidden);</span><br><span class="line">        <span class="keyword">if</span> (!hidden) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要实现延迟加载Fragment内容,需要在 onCreateView</span></span><br><span class="line"><span class="comment">     * isPrepared = true;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrepared() &amp;&amp; isFragmentVisible()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forceLoad || isFirstLoad()) &#123;</span><br><span class="line">                forceLoad = <span class="keyword">false</span>;</span><br><span class="line">                isFirstLoad = <span class="keyword">false</span>;</span><br><span class="line">                initData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        isPrepared = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被ViewPager移出的Fragment 下次显示时会从getArguments()中重新获取数据</span></span><br><span class="line"><span class="comment">     * 所以若需要刷新被移除Fragment内的数据需要重新put数据 eg:</span></span><br><span class="line"><span class="comment">     * Bundle args = getArguments();</span></span><br><span class="line"><span class="comment">     * if (args != null) &#123;</span></span><br><span class="line"><span class="comment">     * args.putParcelable(KEY, info);</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initVariables</span><span class="params">(Bundle bundle)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initViews</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isPrepared;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceLoad</span><span class="params">(<span class="keyword">boolean</span> forceLoad)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceLoad = forceLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirstLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFirstLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFragmentVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFragmentVisible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fragmentTitle) &#123;</span><br><span class="line">            setDefaultFragmentTitle(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TextUtils.isEmpty(fragmentTitle) ? <span class="string">""</span> : fragmentTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        fragmentTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置fragment的Title直接调用 &#123;<span class="doctag">@link</span> BaseFragment#setTitle(String)&#125;,若不显示该title 可以不做处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 一般用于显示在TabLayout的标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setDefaultFragmentTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://github.com/xmagicj/LazyFragment" target="_blank" rel="noopener">LazyFragment</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android中使用矢量图（SVG, VectorDrawable）]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%EF%BC%88SVG,%20VectorDrawable%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目中需要根据不同的场景动态改变图标颜色，如果用png等格式，会使图片资源过多。明明图案是一样的，为什么改变个颜色就得多一张图?如果整体颜色风格改变，那之前的图片资源就都废了？所以选择用xml文件来描述图片颜色，想用什么色就用什么色。</p>
<p>图片本质上是一个存像素点的矩阵，而svg高级一点，存一些点，比如一个圆，那么就存圆心和半径数据就行了，这是轨迹，然后再规定颜色，这样和png资源相比，内存大大减少，还容易自定义，改个图标颜色简直不要太方便！</p>
<h1 id="SVG-和-VectorDrawable"><a href="#SVG-和-VectorDrawable" class="headerlink" title="SVG 和 VectorDrawable"></a>SVG 和 VectorDrawable</h1><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><blockquote>
<p>可缩放矢量图形（英语：Scalable Vector Graphics，SVG）是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。SVG由W3C制定，是一个开放标准。——摘自维基百科</p>
</blockquote>
<p><code>.svg</code>格式相对于<code>.jpg</code>、<code>.png</code>甚至<code>.webp</code>具有较多优势，我认为核心有两点：</p>
<ul>
<li>省时间。图像与分辨率无关，收放自如，适配安卓机坑爹的分辨率真是一劳永逸；</li>
<li>省空间。体积小，一般复杂图像也能在数KB搞定，图标更不在话下。</li>
</ul>
<h2 id="VectorDrawable"><a href="#VectorDrawable" class="headerlink" title="VectorDrawable"></a>VectorDrawable</h2><p><code>VectorDrawable</code>是Google从Android 5.0开始引入的一个新的<code>Drawable</code>子类，能够加载矢量图。到现在通过<code>support-library</code>已经至少能适配到Android 4.0了（通过AppBrain统计的Android版本分布来看，Android 4.1以下（api&lt;15）几乎可以不考虑了）。Android中的<code>VectorDrawable</code>只支持SVG的部分属性，相当于阉割版。</p>
<p>它虽然是个类，但是一般通过配置xml再设置到要使用的控件上。在Android工程中，在资源文件夹<code>res/drawable/</code>的目录下（没有则需新建），通过<code>&lt;vector&gt;&lt;/vector&gt;</code>标签描述，例如<code>svg_ic_arrow_right.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportHeight</span>=<span class="string">"24.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportWidth</span>=<span class="string">"24.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillColor</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本属性说明：</p>
<ul>
<li><code>width</code>, <code>height</code>：图片的宽高。可手动修改到需要尺寸；</li>
<li><code>viewportHeight</code>, <code>viewportWidth</code>：对应将上面height width等分的份数。以svg_ic_arrow_right.xml举例，可以想象将长宽都为8dp的正方形均分为24x24的网格，在这个网格中就可以很方便地描述点的坐标，图像就是这些点连接起来构成的。</li>
<li><code>fillColor</code>：填充颜色。最好直接在这里写明色值<code>#xxxxxxxx</code>，而不要用<code>@color/some_color</code>的形式，避免某些5.0以下机型可能会报错。</li>
<li><code>pathData</code>：在2中描述的网格中作画的路径。具体语法不是本文的重点，故不展开。</li>
</ul>
<p>下面这段代码描述出来的是一个蓝色闹钟，可以从Android Studio的<code>preview</code>功能栏里预览到它的样子：</p>
<p><img src="/assets/blog/img/2018-02-25/2.png" width="700"></p>
<p>emm…既然xml资源作图标这么方便，应该怎么获取呢？</p>
<h1 id="获取矢量图方式一：Android-Studio的Material-Icon"><a href="#获取矢量图方式一：Android-Studio的Material-Icon" class="headerlink" title="获取矢量图方式一：Android Studio的Material Icon"></a>获取矢量图方式一：<code>Android Studio</code>的<code>Material Icon</code></h1><p>鼠标选中<code>drawable</code>文件夹，右键， <code>New</code>， <code>Vector Asset</code></p>
<p><img src="/assets/blog/img/2018-02-25/3.png" width="700"></p>
<p>然后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/4.png" width="700"></p>
<p>点击机器人进入搜索筛选：</p>
<p><img src="/assets/blog/img/2018-02-25/5.png" width="700"></p>
<p>左侧的搜索和分类可以快速索引。这里都是由谷歌官方制作的MD标准图标，建议先到这里搜索，如果没有再到网上搜索。</p>
<h1 id="获取矢量图方式二：iconfont"><a href="#获取矢量图方式二：iconfont" class="headerlink" title="获取矢量图方式二：iconfont"></a>获取矢量图方式二：<a href="https://link.jianshu.com/?t=http://iconfont.cn" target="_blank" rel="noopener">iconfont</a></h1><p>墙裂安利一个网站，阿里的iconfont，海量在线矢量图，早收藏早致富！我已经离不开它了=￣ω￣=</p>
<p>第一步，搜索你要的资源名字，中英文一般都会有结果。比如“arrow”，结果：</p>
<p><img src="/assets/blog/img/2018-02-25/6.png" width="700"></p>
<p>第二步，鼠标移动到某一图标上点击，比如上面第一排第二个，出现：</p>
<p><img src="/assets/blog/img/2018-02-25/7.png" width="200"></p>
<p>三个选项，第一相当于购物车，可不用登录，第二是收藏，第三是下载，均需要登录。如果未登录，点击后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/8.png" width="700"></p>
<p>选择GitHub或微博都行。<br>第三步，登录成功，点击下载，弹出：</p>
<p><img src="/assets/blog/img/2018-02-25/9.png" width="700"></p>
<p>可以对图标属性进行编辑，如色值和大小（单位dp），然后点按钮“SVG下载”。下载成功后在下载目录找到一个.svg格式的文件，这个文件可以用浏览器打开-&gt;查看网页源码，或者用NotePad++等编辑器打开看到里面的内容，格式化后是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> standalone=<span class="string">"no"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"</span></span><br><span class="line"><span class="meta">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">"1490517024583"</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">style</span>=<span class="string">""</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">p-id</span>=<span class="string">"1010"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"16"</span> <span class="attr">height</span>=<span class="string">"16"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M288.86749 12.482601C272.260723-4.160867 245.369563-4.160867 228.720647 12.482601 212.15603 29.126068 212.15603 56.438425 228.720647 73.081892L704.289552 511.786622 228.720647 950.918109C212.15603 967.561574 212.15603 994.447175 228.720647 1011.517401 245.369563 1028.160866 272.260723 1028.160866 288.86749 1011.517401L794.952385 544.646802C803.803707 535.684935 807.597131 523.735776 807.007043 511.786622 807.597131 500.264224 803.803707 488.315065 794.952385 479.353198L288.86749 12.482601Z"</span> <span class="attr">p-id</span>=<span class="string">"1011"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件里好多标签Android是不认识的。不过没关系，有三种解决办法</p>
<h2 id="手动转化成xml"><a href="#手动转化成xml" class="headerlink" title="手动转化成xml"></a>手动转化成xml</h2><p>新建一个<code>&lt;vector&gt;&lt;/vector&gt;</code>标签的<code>xml文件</code>，通过观察文件内容，很容易获取到关键信息。</p>
<ul>
<li><code>width</code>, <code>height</code>自然对应<code>&lt;vector/&gt;</code>中宽高，</li>
<li><code>viewBox</code>后两位数字是分别对应<code>&lt;vector/&gt;</code>中的<code>viewportWidth</code>和<code>viewportHeight</code>，</li>
<li><code>&lt;path/&gt;</code>中的<code>d</code>的数据的对应<code>&lt;vector/&gt;</code>中<code>&lt;path/&gt;</code>中的<code>pathData</code>。</li>
<li><code>fillColor</code>自己手动设置。</li>
</ul>
<h2 id="svgtoandroid插件"><a href="#svgtoandroid插件" class="headerlink" title="svgtoandroid插件"></a>svgtoandroid插件</h2><p>安装：File -&gt; Setting -&gt; Plugins -&gt; Browser repositories -&gt; 搜“svg2VectorDrawable” -&gt; 安装并重启Android Studio，再次进来后顶部工具栏会多一个图标：</p>
<p><img src="/assets/blog/img/2018-02-25/10.png" width="200"></p>
<p>点击图标弹出对话框：</p>
<p><img src="/assets/blog/img/2018-02-25/12.png" width="700"></p>
<p>勾选Batch选项，将对被选中文件夹中的.svg文件进行批量转换。nodpi会自动添加到没有后缀的drawable文件夹中。</p>
<blockquote>
<p>网上下载的svg资源往往一步到位，有个这个插件将会事半功倍。导入第一个svg文件时就命名成我们想要的名字，如果不满意再导入时无需再关注命名，将后面导入的pathData覆盖第一个观察效果，直到满意后删除不需要的文件。</p>
</blockquote>
<h2 id="Android-Studio自带转化"><a href="#Android-Studio自带转化" class="headerlink" title="Android Studio自带转化"></a>Android Studio自带转化</h2><p>鼠标选中drawable文件夹，右键， New， Vector Asset， Local file，然后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/13.png" width="700"></p>
<p>先选本地文件（还能支持PSD，强吧），再到磁盘中找到之前下载的.svg矢量图。导入后可以为文件重命名（建议用svg_或者有区别于其它格式的前缀），默认导入宽高均为24dp，选中Override框则读取文件本来宽高，其它配置视需求而定。点击Next到下一页最后点Finish就导入了。自动导入需要格式化一下就是前面svg_ic_arrow_right.xml的样子了。</p>
<blockquote>
<p>海搜比较耗时间，线条粗细啦，位置没居中啦，大小不搭配啦，关键是这些问题都是导入项目或者运行到手机后才能发现（非强迫症当我没说）。<br>iconfont还有诸多成套的图标库，优点是风格大小一致，或者多彩图标。</p>
</blockquote>
<h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>项目的<code>build.gradle</code>配置有：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    vectorDrawables.useSupportLibrary = <span class="keyword">true</span></span><br><span class="line">   &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  compile <span class="string">"com.android.support:appcompat-v7:21+"</span> <span class="comment">// 至少Api21</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>项目的Activity中都包含（通用做法是在BaseActivity中加）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  AppCompatDelegate.setCompatVectorFromResourcesEnabled(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="AppCompatImageView"><a href="#AppCompatImageView" class="headerlink" title="AppCompatImageView"></a>AppCompatImageView</h2><p>这是继承自ImageView用于5.0以下加载矢量图的控件，只需要替换src为srcCompat属性，其它没什么不同。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.AppCompatImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你的<code>Activity</code>直接或间接继承自<code>AppCompatActivity</code>，当前视图中的<code>ImageView</code>在编译过程中会被自动转为<code>AppCompatImageView</code>（<code>support包</code>中所有含有<code>AppCompat</code>前缀的控件均受相同处理），因而在<code>Activity</code>中通过<code>findViewById()</code>的实例用<code>ImageView</code>或<code>AppCompatActivity</code>接收是没有区别的。<br>用以上条件的<code>Activity</code>中装载的<code>Fragment</code>，或者通过动态注入（如<code>Dialog</code>的<code>contentView</code>）的<code>ImageView</code>，均将被自动转为<code>AppCompatActivity</code>。<br>从<code>xml</code>文件中初始化<code>ImageView</code>并加载矢量图，必须使用<code>AppCompatImageView</code>的<code>srcCompat</code>属性。<br><code>ImageView</code>的染色属性tint同样适合矢量图。</p>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>在我的经验中，<code>TextView</code>可以用到矢量图的场景是最多的，主要是设置<code>CompoundDrawable</code>。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawableRight</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawablePadding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"drawable right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样设置后，没有任何不适，编译器也不报错，可能你自己运行也没问题。但是！这才是深坑啊。5.0以下某些机型可能会崩溃的。</p>
<p><code>AppCompatTextView</code>是没有对<code>CompoundDrawable</code>进行适配的，所以需要自己动手才能丰衣足食。简单原理是，判断系统版本如果小于5.0，就用<code>ContextCompat.getDrawable</code>获取到<code>Drawable</code>实例，再<code>setCompoundDrawablesWithIntrinsicBounds</code>。</p>
<p>这个部分已经有人做好并开源了，地址：<a href="https://link.jianshu.com/?t=https://github.com/woxingxiao/VectorCompatTextView" target="_blank" rel="noopener">VectorCompatTextView</a>，轻松compile到项目中使用。他还特意添加了一个实用功能——tint染色——可以选择是否让图标与文字颜色一样，这样就不必关心xml里的fillColor属性了。用例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xw.repo.VectorCompatTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/color_gray_light"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Next"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:drawableRightCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:tintDrawableInTextColor</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<h2 id="MenuItem"><a href="#MenuItem" class="headerlink" title="MenuItem"></a>MenuItem</h2><p><code>MenuItem</code>就是在<code>res/menu/</code>目录下通过xml配置的菜单，适用于<code>NavigationView</code>的<code>menu属性</code>和<code>Activity</code>中<code>onCreateOptionsMenu()</code>注入的选项菜单。</p>
<h2 id="VectorDrawable-转-Bitmap"><a href="#VectorDrawable-转-Bitmap" class="headerlink" title="VectorDrawable 转 Bitmap"></a>VectorDrawable 转 Bitmap</h2><p>自定义View中也可以自由使用矢量图。<br>首先需要将<code>VectorDrawable</code> 转为 <code>Bitmap</code>，看码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromVectorDrawable</span><span class="params">(Context context, <span class="keyword">int</span> drawableId)</span> </span>&#123;</span><br><span class="line">        Drawable drawable = ContextCompat.getDrawable(context, drawableId);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            drawable = (DrawableCompat.wrap(drawable)).mutate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),</span><br><span class="line">                Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">        drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, canvas.getWidth(), canvas.getHeight());</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>执行以上方法获得一个<code>Bitmap</code>的实例（设为<code>mVectorBitmap</code>），然后再在<code>ondraw()</code>里根据你的需求画出<code>bitmap</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">     canvas.drawBitmap(mVectorBitmap, left, top, paint);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.jianshu.com/p/0555b8c1d26a" target="_blank" rel="noopener">https://www.jianshu.com/p/0555b8c1d26a</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> svg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android中用intent传递对象的三种方法]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-Android%E4%B8%AD%E7%94%A8intent%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目中需要根据上一个Activity的数据来初始化当前Activity，考虑到启动Activity时可以传数据，那么就用intent实现了。<br>Android中，Activity和Fragment之间传递对象，可以通过将对象序列化并存入Bundle或者Intent中进行传递，也可以将对象转化为JSON字符串，进行传递。</p>
<p>序列化对象可以使用Java的<code>Serializable的接口</code>、<code>Parcelable接口</code>。转化成JSON字符串，可以使用<code>Gson</code>等库。</p>
<h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book(); </span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>); </span><br><span class="line">Author author=<span class="keyword">new</span> Author(); </span><br><span class="line">author.setId(<span class="number">1</span>); </span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>); </span><br><span class="line">book.setAuthor(author); </span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class); </span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,book); </span><br><span class="line">startActivity(intent);.</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book= (Book) getIntent().getSerializableExtra(<span class="string">"book"</span>);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="转化为JSON字符串"><a href="#转化为JSON字符串" class="headerlink" title="转化为JSON字符串"></a>转化为JSON字符串</h1><p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,<span class="keyword">new</span> Gson().toJson(book));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String bookJson=getIntent().getStringExtra(<span class="string">"book"</span>);</span><br><span class="line">Book book=<span class="keyword">new</span> Gson().fromJson(bookJson,Book.class);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="使用Parcelable"><a href="#使用Parcelable" class="headerlink" title="使用Parcelable"></a>使用Parcelable</h1><p>实现Parcelable接口需要实现两个方法</p>
<p><code>describeContents</code>方法。内容接口描述，默认返回0就可以;</p>
<p><code>writeToParcel</code>方法。将传递的数据打包到Parcel容器中。</p>
<p>除了要实现这两个方法还必须创建一个<code>Parcelable.Creator</code>接口的实例，用于读取Parcel容器中的数据</p>
<p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//该方法将类的数据写入外部提供的Parcel中.即打包需要传递的数据到Parcel容器保存，</span></span><br><span class="line">        <span class="comment">// 以便从parcel容器获取数据</span></span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(id);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Author&gt; CREATOR=<span class="keyword">new</span> Creator&lt;Author&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Author <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层。</span></span><br><span class="line">            Author author=<span class="keyword">new</span> Author();</span><br><span class="line">            author.setName(source.readString());</span><br><span class="line">            author.setId(source.readInt());</span><br><span class="line">            <span class="keyword">return</span> author;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Author[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="comment">//创建一个类型为T，长度为size的数组，仅一句话（return new T[size])即可。方法是供外部类反序列化本类数组使用。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Author[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(title);</span><br><span class="line">        dest.writeParcelable(author,flags);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR=<span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            Book book=<span class="keyword">new</span> Book();</span><br><span class="line">            book.setTitle(source.readString());</span><br><span class="line">            book.setAuthor(source.&lt;Author&gt;readParcelable(Author.class.getClassLoader()));</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,book);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book=getIntent().getParcelableExtra(<span class="string">"book"</span>);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>经过测试，我们得到下图的效果</p>
<p><img src="/assets/blog/img/2018-02-25/1.png" width="700"></p>
<h1 id="简化Parcel操作"><a href="#简化Parcel操作" class="headerlink" title="简化Parcel操作"></a>简化Parcel操作</h1><p>可以看出，通过转换为字符串的速度是最慢的。<code>Seralizable</code>次之，<code>Parcelable</code>比<code>Seralizable</code>快10倍。所以从性能上考虑，我们必定优先选择<code>Parcelable</code>。但是<code>Parcelable</code>有大量重复的模板代码，如何简化这些操作，将是下面主要讲解的内容。</p>
<p>如果你使用<code>android Studio</code> 可以通过安装<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="noopener">android-parcelable-intellij-plugin</a>插件，或者自己配置模板进行操作。</p>
<h2 id="parceler"><a href="#parceler" class="headerlink" title="parceler"></a>parceler</h2><p>除了上面的操作，还有大量的第三方库来简化Parcelable操作。当然使用这些库也许会降低Parcelable的性能。Parceler就是这样一个库。</p>
<p>Parceler使用非常简单，在定义Model时用<code>@Parcel</code>进行注解，在传递数据的时候使用Parcels的wrap方法来包装成一个Parcelable对象。获取数据时用Parcels的unwrap方法来获取对象。</p>
<p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Parcel</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Parcel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    Author author;</span><br><span class="line">    <span class="comment">//setter &amp; getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>, Parcels.wrap(book));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book= Parcels.unwrap(getIntent().getParcelableExtra(<span class="string">"book"</span>));</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<p>除了Parceler之外，还有如<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="noopener">auto-parcel</a>,<a href="https://github.com/foxykeep/ParcelableCodeGenerator" target="_blank" rel="noopener">ParcelableCodeGenerator</a>,<a href="https://github.com/baoyongzhang/ParcelableGenerator" target="_blank" rel="noopener">ParcelableGenerator</a>等第三方库，这里我将不进行讲解，有兴趣的朋友，可以自行研究。</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html" target="_blank" rel="noopener">Android中传递对象的三种方法</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 比较Fragment中获取Context对象的两种方法]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-%E6%AF%94%E8%BE%83Fragment%E4%B8%AD%E8%8E%B7%E5%8F%96Context%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们在使用<code>Fragment</code>的时候经常需要传递<code>Context</code>类型的参数，比如弹出一个<code>dialog</code>，而<code>Fragment</code>自己又不是一个<code>Context</code>类型的对象，于是我们有下面两种方法获取<code>Context</code>对象。</p>
<h1 id="两种方法介绍"><a href="#两种方法介绍" class="headerlink" title="两种方法介绍"></a>两种方法介绍</h1><ol>
<li><code>this.getActivity()</code>（可以不写this.）</li>
</ol>
<p>在<code>Fragment</code>中直接调用<code>getActivity()</code>方法，可以直接得到<code>Fragment</code>依附的<code>Activity</code>，而<code>Activity</code>是一个<code>Context</code>类型的对象。</p>
<ol>
<li>获取<code>Application</code>对象</li>
</ol>
<p>如下自己写一个<code>MyApplication</code>类继承<code>Application</code>，通过<code>getInstance</code>获取一个<code>Application</code>类型的对象，也是<code>Context</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyApplication mInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> MyApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h1><ol>
<li>this.getActivity()</li>
</ol>
<ul>
<li>优点：不需要写<code>MyApplication</code>类</li>
<li>缺点：<code>Fragment</code>很容易被销毁，调用<code>getActivity()</code>方法会报空指针错误（注意：并不是<code>getActivity()</code>返回值为null，而是<code>this.getActivity()</code>中的this，也就是<code>Fragment</code>自己是null，因为它已经被销毁了）</li>
</ul>
<ol>
<li>获取Application对象</li>
</ol>
<ul>
<li>优点：不会遇到类似<code>this.getActivity()</code>的空指针问题</li>
<li>缺点：某些情况下的Context必须是Activity，特别是实例化Dialog等需要依附于一个Activity的可视化的对象时传参必须是Activity对象（Toast是Android的一种通知机制，不需要依附于Activity）</li>
</ul>
<h1 id="两全其美的解决方案"><a href="#两全其美的解决方案" class="headerlink" title="两全其美的解决方案"></a>两全其美的解决方案</h1><p>1.<code>MyApplication</code>是一定要写的</p>
<p>2.写一个如下的<code>BaseFragment</code>类：所有的<code>Fragment</code>都继承这个<code>BaseFragment</code>,直接通过<code>getContext()</code>方法即可得到<code>Context</code>对象，当然实例化Dialog等需要依附于<code>Activity</code>的对象时，还是老老实实的<code>getActivity()</code>吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activity == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> MyApplication.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(activity);</span><br><span class="line">        activity = getActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Java 回调及其在项目中的运用]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-java%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>TImeCat</code>项目中的Activity和Fragment是分开管理的，有需求是点击ActionBar上的刷新，对应的fragment就重新拉取数据，或者在fragment中选择日期，对应在activity的标题位置要更新日期，考虑到性能问题，用回调实现。</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>以前不理解什么叫回调，天天听人家说加一个回调方法啥的，心里想我草，什么叫回调方法啊？然后自己就在网上找啊找啊找，找了很多也不是很明白，现在知道了，所谓回调：就是A类中调用B类中的某个方法C，然后B类中反过来调用A类中的方法D，D这个方法就叫回调方法，这样子说你是不是有点晕晕的，其实我刚开始也是这样不理解，看了人家说比较经典的回调方式：</p>
<p><code>Class A</code>实现接口<code>CallBack callback</code>——<code>背景1</code><br><code>class A</code>中包含一个<code>class B的引用b</code>——<code>背景2</code><br><code>class B</code>有一个参数为<code>callback</code>的方法<code>f(CallBack callback)</code>——<code>背景3</code><br>A的对象a调用B的方法 <code>f(CallBack callback)</code> ——<code>A类调用B类的某个方法 C</code><br>然后b就可以在<code>f(CallBack callback)</code>方法中调用A的方法 ——<code>B类调用A类的某个方法D</code><br>大家都喜欢用打电话的例子，好吧，为了跟上时代，我也用这个例子好了，我这个例子采用异步加回调</p>
<h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p>有一天小王遇到一个很难的问题，问题是“1 + 1 = ?”，就打电话问小李，小李一下子也不知道，就跟小王说，等我办完手上的事情，就去想想答案，小王也不会傻傻的拿着电话去等小李的答案吧，于是小王就对小李说，我还要去逛街，你知道了答案就打我电话告诉我，于是挂了电话，自己办自己的事情，过了一个小时，小李打了小王的电话，告诉他答案是2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这是一个回调接口 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 这个是小李知道答案时要调用的函数告诉小王，也就是回调函数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 是答案 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(String result)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个是小王 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * 实现了一个回调接口CallBack，相当于-----&gt;背景一 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wang</span> <span class="keyword">implements</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小李对象的引用 </span></span><br><span class="line"><span class="comment">     * 相当于-----&gt;背景二 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Li li;   </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小王的构造方法，持有小李的引用 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> li </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wang</span><span class="params">(Li li)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.li = li;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小王通过这个方法去问小李的问题 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question  就是小王要问的问题,1 + 1 = ? </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askQuestion</span><span class="params">(<span class="keyword">final</span> String question)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//这里用一个线程就是异步，  </span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">/** </span></span><br><span class="line"><span class="comment">                 * 小王调用小李中的方法，在这里注册回调接口 </span></span><br><span class="line"><span class="comment">                 * 这就相当于A类调用B的方法C </span></span><br><span class="line"><span class="comment">                 */</span>  </span><br><span class="line">                li.executeMessage(Wang.<span class="keyword">this</span>, question);   </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//小网问完问题挂掉电话就去干其他的事情了，诳街去了  </span></span><br><span class="line">        play();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"我要逛街去了"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小李知道答案后调用此方法告诉小王，就是所谓的小王的回调方法 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(String result)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"小李告诉小王的答案是---&gt;"</span> + result);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个就是小李啦 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Li</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 相当于B类有参数为CallBack callBack的f()----&gt;背景三 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callBack   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question  小王问的问题 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeMessage</span><span class="params">(CallBack callBack, String question)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"小王问的问题---&gt;"</span> + question);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//模拟小李办自己的事情需要很长时间  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123;  </span><br><span class="line">              </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 小李办完自己的事情之后想到了答案是2 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        String result = <span class="string">"答案是2"</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 于是就打电话告诉小王，调用小王中的方法 </span></span><br><span class="line"><span class="comment">         * 这就相当于B类反过来调用A的方法D </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        callBack.solve(result);   </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * new 一个小李 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        Li li = <span class="keyword">new</span> Li();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * new 一个小王 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        Wang wang = <span class="keyword">new</span> Wang(li);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 小王问小李问题 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        wang.askQuestion(<span class="string">"1 + 1 = ?"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面的那个例子你是不是差不多明白了回调机制呢，上面是一个异步回调，我们看看同步回调吧，<code>onClick()</code>方法</p>
<h1 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h1><p>现在来分析分析下Android View的点击方法<code>onclick()</code>;我们知道<code>onclick()</code>是一个回调方法，当用户点击<code>View</code>就执行这个方法，我们用<code>Button</code>来举例好了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是View的一个回调接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Called when a view has been clicked. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v The view that was clicked. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demoactivity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.view.View;  </span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个就相当于Class A </span></span><br><span class="line"><span class="comment"> * 实现了 OnClickListener接口----&gt;背景一 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Class A 包含Class B的引用-----&gt;背景二 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Button button;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        button = (Button)findViewById(R.id.button1);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * Class A 调用View的方法,而Button extends View-----&gt;A类调用B类的某个方法 C </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 用户点击Button时调用的回调函数，你可以做你要做的事 </span></span><br><span class="line"><span class="comment">     * 这里我做的是用Toast提示OnClick </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(getApplication(), <span class="string">"OnClick"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是<code>View</code>类的<code>setOnClickListener</code>方法，就相当于B类咯，只把关键代码贴出来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个View就相当于B类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Listener used to dispatch click events. </span></span><br><span class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK. </span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">protected</span> OnClickListener mOnClickListener;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * setOnClickListener()的参数是OnClickListener接口------&gt;背景三 </span></span><br><span class="line"><span class="comment">     * Register a callback to be invoked when this view is clicked. If this view is not </span></span><br><span class="line"><span class="comment">     * clickable, it becomes clickable. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l The callback that will run </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setClickable(boolean) </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (!isClickable()) &#123;  </span><br><span class="line">            setClickable(<span class="keyword">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        mOnClickListener = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Call this view's OnClickListener, if it is defined. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false </span></span><br><span class="line"><span class="comment">     *         otherwise is returned. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (mOnClickListener != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            playSoundEffect(SoundEffectConstants.CLICK);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//这个不就是相当于B类调用A类的某个方法D，这个D就是所谓的回调方法咯  </span></span><br><span class="line">            mOnClickListener.onClick(<span class="keyword">this</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子就是Android典型的回调机制，看完这个你是不是更进一步的理解了回调机制呢？ 线程<code>run()</code>也是一个回调方法，当执行Thread的<code>start()</code>方法就会回调这个<code>run()</code>方法，还有处理消息都比较经典等等</p>
<h1 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h1><p>点击Activity的刷新按钮，对应fragment重新拉取数据</p>
<p>为了简明起见，压缩代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        RefreshFragment refreshFragment = <span class="keyword">new</span> RefreshFragment();</span><br><span class="line">        setOnRefreshClickListener(refreshFragment); <span class="comment">// refreshFragment实现了回调接口，把fragment传进来即可</span></span><br><span class="line"></span><br><span class="line">        button = (Button)findViewById(R.id.button1);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="keyword">if</span> (onRefreshClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                onRefreshClickListener.OnRefresh();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他代码</span></span><br><span class="line">    OnRefreshClickListener onRefreshClickListener;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnRefreshClickListener</span><span class="params">(OnRefreshClickListener onRefreshClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onRefreshClickListener = onRefreshClickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RefreshFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">OnRefreshClickListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略其他代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里实现刷新数据，例如</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OnRefreshClickListener.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnRefreshClickListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnRefresh</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新手一般会踩的坑<a href="https://stackoverflow.com/questions/23811904/cyclic-inheritance-when-implementing-inner-interface-in-enum" target="_blank" rel="noopener">循环继承</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/xiaanming/article/details/8703708/" target="_blank" rel="noopener">一个经典例子让你彻彻底底理解java回调机制</a></li>
<li><a href="http://blog.csdn.net/gaolei1201/article/details/47084111" target="_blank" rel="noopener">Android实战之 万能的接口回调</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> 回调 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】快速构建APP BottomNavigationView + ViewPager + Fragment]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-BottomNavigationView+ViewPager+Fragment%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAApp/</url>
      <content type="html"><![CDATA[<p>先上图</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-02-25/0.gif" width="400"><br></div>


<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用Android-Studio创建一个BottomNavigationView项目</p>
<p><div class="image-package"><br><img src="/assets/blog/img/2018-02-25/0.png" width="700"><br></div></p>
<h2 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h2><p>修改activity_main.xml文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.design.widget.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"?android:attr/windowBackground"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:menu</span>=<span class="string">"@menu/navigation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建三个Fragment-布局及类"><a href="#创建三个Fragment-布局及类" class="headerlink" title="创建三个Fragment(布局及类)"></a>创建三个Fragment(布局及类)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"fragment1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inflater.inflate(R.layout.fragment1, container, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改menu-navigation-xml文件"><a href="#修改menu-navigation-xml文件" class="headerlink" title="修改menu/navigation.xml文件"></a>修改menu/navigation.xml文件</h2><p>在item项里添加上<code>android:orderInCategory</code>用于标记item的位置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_home"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_home_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_home"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_dashboard"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_dashboard_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_dashboard"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_notifications"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_notifications_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_notifications"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编辑MainActivity类"><a href="#编辑MainActivity类" class="headerlink" title="编辑MainActivity类"></a>编辑MainActivity类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.BottomNavigationView;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> BottomNavigationView navigation;</span><br><span class="line">  <span class="keyword">private</span> ViewPager viewPager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Fragment1 fragment1 = <span class="keyword">new</span> Fragment1();</span><br><span class="line">  <span class="keyword">private</span> Fragment2 fragment2 = <span class="keyword">new</span> Fragment2();</span><br><span class="line">  <span class="keyword">private</span> Fragment3 fragment3 = <span class="keyword">new</span> Fragment3();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    viewPager = (ViewPager) findViewById(R.id.viewPager);</span><br><span class="line">    <span class="comment">//添加viewPager事件监听（很容易忘）</span></span><br><span class="line">    viewPager.addOnPageChangeListener(<span class="keyword">this</span>);</span><br><span class="line">    navigation = (BottomNavigationView) findViewById(R.id.navigation);</span><br><span class="line">    navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);</span><br><span class="line"></span><br><span class="line">    viewPager.setAdapter(<span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment1;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment2;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class="line">      = <span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//点击BottomNavigationView的Item项，切换ViewPager页面</span></span><br><span class="line">      <span class="comment">//menu/navigation.xml里加的android:orderInCategory属性就是下面item.getOrder()取的值</span></span><br><span class="line">      viewPager.setCurrentItem(item.getOrder());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//页面滑动的时候，改变BottomNavigationView的Item高亮</span></span><br><span class="line">    navigation.getMenu().getItem(position).setChecked(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这么简单，快拿去添加自己的逻辑吧！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ViewPager </tag>
            
            <tag> Fragment </tag>
            
            <tag> BottomNavigationView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github issue 的用法]]></title>
      <url>/2018/01/31/2018-01-31-github-issue-usage/</url>
      <content type="html"><![CDATA[<p>小结一下GitHub上的issues功能，很有意思。</p>
<p>今天玩了一下gitment，尝试在博客中加上评论功能。</p>
<p>测试gitment的功能之后想删除测试的issue，但发现是删不掉的！！！如同版本提交commits，也是删不掉的。另外，对应issues的每一个操作都会记录下来。<br>这样的设计应该是有原因的，现在想不明白，以后再探究吧。<br>今天也大概了解了一下GitHub的API，也挺好玩的。</p>
<h1 id="issues的属性"><a href="#issues的属性" class="headerlink" title="issues的属性"></a>issues的属性</h1><p>GitHub中每一个仓库都会有对应的一个issues的功能，issues中可以新建多个issue，每一个issue就像一篇文章，有标题和内容，还有评论。另外，每个issue都有唯一的编号“#n”。 issue可以设置：Opened和Closed两种状态。</p>
<p>issue 还可以有额外的属性：</p>
<ul>
<li>Labels，标签。包括bug、invalid等，可以自定义。表示issue的类型，解决的方式。</li>
<li>Milestone，里程碑。通常用来做版本管理，v0.1、v1.0之类的，也可以是任意自定义字符串。一个里程碑对应的所有 issue 都被关闭后，这个里程碑会被自动认为已经达成。</li>
<li>Assignee，责任人。指定这个issue由谁负责来解决。</li>
</ul>
<h1 id="个人如何利用issues的功能？"><a href="#个人如何利用issues的功能？" class="headerlink" title="个人如何利用issues的功能？"></a>个人如何利用issues的功能？</h1><p>GitHub 的<code>issue</code>功能，对个人而言，就如同 <code>TODO list</code>。</p>
<p>可以把所有想要在下一步完成的工作，如<code>feature 添加</code>、<code>bug 修复</code>等，都写成一个个的 <code>issue</code> ，放在上面。既可以作为提醒，也可以统一管理。 另外，每一次 <code>commit</code> 都可以选择性的与某个 <code>issue</code> 关联。比如在 <code>message</code> 中添加 <code>#n</code>，就可以与第 <code>n</code> 个 <code>issue</code> 进行关联。 <code>commit message title, #1</code> 这个提交会作为一个 <code>comment</code> ，出现在编号为<code>1</code>的 <code>issue</code> 记录中。 如果添加：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fix #n</span><br><span class="line">fixes #n</span><br><span class="line">fixed #n</span><br><span class="line">close #n</span><br><span class="line">closes #n</span><br><span class="line">closed #n</span><br></pre></td></tr></table></figure></p>
<p>比如<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="keyword">message</span> title, fix <span class="comment">#n</span></span><br></pre></td></tr></table></figure></p>
<p>则可以自动关闭第 <code>n</code> 个 <code>issue</code>，即<code>issue</code>的状态从<code>Opened</code>变成了<code>Closed</code>。</p>
<p>充分利用这些功能，让每一个 <code>commit</code> 的意义更加明确，可以起到了良好的过程管理作用，使得这个Git库的项目进度更加显然。而且，这也是项目后期，写文档的绝佳素材。</p>
<h2 id="团队如何利用issues的功能？"><a href="#团队如何利用issues的功能？" class="headerlink" title="团队如何利用issues的功能？"></a>团队如何利用issues的功能？</h2><p>对团队而言，这就是一个协作系统。</p>
<p>现在，很多大公司的软件研发团队协作，都是通过JIRA来实现的。</p>
<p>目前也流行很多非代码的团队协作，比如teambition、Tower.im、Worktile、trello等。</p>
<p>其实，GitHub 的issues，就是一个轻量级协作系统。它的comment支持<code>GitHub Flavored Markdown</code>，可以进行内容丰富的交流。</p>
<p>Git本身就是分布式的代码版本控制软件，是为了程序员的协作而设计的。而 issues 的 Assignee 功能，就是这个在线协作系统的核心，足以让一群线上的开发者，一起完成一个软件项目。</p>
<h2 id="作为一个路人如何给别人的项目提bug？"><a href="#作为一个路人如何给别人的项目提bug？" class="headerlink" title="作为一个路人如何给别人的项目提bug？"></a>作为一个路人如何给别人的项目提bug？</h2><p>用 issues 给别人的项目提 bug。</p>
<h2 id="其他利用？"><a href="#其他利用？" class="headerlink" title="其他利用？"></a>其他利用？</h2><ul>
<li>可以拿来写blog，虽然很丑…也不方便</li>
<li>可以做评论的后端，比如gitment</li>
<li>可以拿来给小组成员交作业，进行项目管理（我的一个同学就是这么搞，感觉很挫…）</li>
<li>更多。。。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Github Issue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[添加Gitment评论系统踩过的坑]]></title>
      <url>/2018/01/31/2018-01-31-gitment/</url>
      <content type="html"><![CDATA[<h1 id="备忘-配置流程"><a href="#备忘-配置流程" class="headerlink" title="备忘-配置流程"></a>备忘-配置流程</h1><h2 id="在setting-OAuth-Application-注册页面完成注册"><a href="#在setting-OAuth-Application-注册页面完成注册" class="headerlink" title="在setting - OAuth Application 注册页面完成注册"></a>在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">setting - OAuth Application 注册页面</a>完成注册</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application <span class="string">Name:</span> gitment 评论 <span class="comment">//随便填</span></span><br><span class="line">Homepage <span class="string">Url:</span> <span class="string">http:</span><span class="comment">//XiChen.pub //自己的域名</span></span><br><span class="line">Application <span class="string">description:</span> <span class="comment">//随便填，留空也可以</span></span><br><span class="line">Authorization Callback <span class="string">URL:</span> <span class="string">http:</span><span class="comment">//XiChen.pub //自己的域名</span></span><br></pre></td></tr></table></figure>
<p>注册成功后会得到<code>Client ID</code>和<code>Client Secret</code></p>
<h2 id="在-config-yaml添加"><a href="#在-config-yaml添加" class="headerlink" title="在_config.yaml添加"></a>在<code>_config.yaml</code>添加</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">''</span> <span class="comment">#页面 ID, 可选。默认为 location.href</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">linxueyuanstdio</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">linxueyuanstdio.github.io</span> <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">'2f7f71f1ba398039ff23'</span> <span class="comment">#你的 Client ID</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">'3ebc908a7042fef2d56a83a2eb8c18777374a087'</span> <span class="comment">#你的 Client secret</span></span><br></pre></td></tr></table></figure>
<h2 id="在comment-ejs添加"><a href="#在comment-ejs添加" class="headerlink" title="在comment.ejs添加"></a>在<code>comment.ejs</code>添加</h2><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.gitment.client_id &amp;&amp; theme.gitment.client_secret &amp;&amp; theme.gitment.enable )&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitment_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var gitment = new Gitment(&#123;</span></span><br><span class="line"><span class="xml">        id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> page.title </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        owner: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.owner </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        repo: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.repo </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        oauth: &#123;</span></span><br><span class="line"><span class="xml">            client_id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.client_id </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">            client_secret: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.client_secret </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">    gitment.render('gitment_container')</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>其实到这里差不多已经配置好了 只需要初始化一下</p>
<ol>
<li>发布你的页面</li>
<li>然后在评论框登录你的github账号，必须跟第二步owner用户名相同的账号</li>
<li>登录之后点击初始化按钮</li>
</ol>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="Error：NOT-FOUND"><a href="#Error：NOT-FOUND" class="headerlink" title="Error：NOT FOUND"></a>Error：NOT FOUND</h2><p>owner或者repo配置错误了，照着第二步来就好，网页端生成后如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="actionscript">        id: <span class="string">'blog comment'</span>,</span></span><br><span class="line"><span class="actionscript">        owner: <span class="string">'linxueyuanstdio'</span>,</span></span><br><span class="line"><span class="actionscript">        repo: <span class="string">'linxueyuanstdio.github.io'</span>,</span></span><br><span class="line"><span class="undefined">        oauth: &#123;</span></span><br><span class="line"><span class="actionscript">            client_id: <span class="string">'2f7f71f1ba398039ff23'</span>,</span></span><br><span class="line"><span class="actionscript">            client_secret: <span class="string">'3ebc908a7042fef2d56a83a2eb8c18777374a087'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="actionscript">    gitment.render(<span class="string">'gitment_container'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h2 id="Error-Comments-Not-Initialized"><a href="#Error-Comments-Not-Initialized" class="headerlink" title="Error: Comments Not Initialized"></a>Error: Comments Not Initialized</h2><ul>
<li>在注册<code>OAuth Application</code>这个步骤中，给<code>Authorization callback URL</code>指定的地址错了</li>
<li>还没有在该页面的Gitment评论区登陆GitHub账号</li>
</ul>
<h2 id="初始化时在评论框点击登录，但是没有跳到授权页面"><a href="#初始化时在评论框点击登录，但是没有跳到授权页面" class="headerlink" title="初始化时在评论框点击登录，但是没有跳到授权页面"></a>初始化时在评论框点击登录，但是没有跳到授权页面</h2><p>不要在本地测试，因为在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">setting - OAuth Application 注册页面</a>填的<code>Authorization Callback URL</code>是自己的域名，不是本地调试的域名，比如<code>http://localhost:4000/</code>。当然，蛋疼的话可以另外申请一个<code>OAuth Application</code>填<code>http://localhost:4000/</code>也是可以的。</p>
<h2 id="Error：validation-failed"><a href="#Error：validation-failed" class="headerlink" title="Error：validation failed"></a>Error：validation failed</h2><p>看开发者工具的console，跟踪过去</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="keyword">to</span> load resource: the<span class="built_in"> server </span>responded with a status of 422 (Unprocessable Entity)</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST https:<span class="regexp">//</span>api.github.com<span class="regexp">/repos/</span>linxueyuanstdio<span class="regexp">/linxueyuanstdio.github.io/i</span>ssues <span class="number">422</span> (Unprocessable Entity)</span><br></pre></td></tr></table></figure>
<p>在<code>Network</code>那里找到原因，是id不合法。原来的gitment有一项id配置成了<code>window.location.pathname</code>，但仍报错。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/0.png" width="700"><br></div>

<p>尝试去掉id，留空行不行？按官网文档应该可以的，但是报错=. =。</p>
<p>思考一下，设定的id给评论对应的issue一个label，这个label的值就是id的值，那么id的作用应该是使issue和文章通过label连接在一起。</p>
<p>那么写死<code>id: &#39;blog comment&#39;</code>行不行呢？不行，每篇文章的评论是要根据id动态加载的，写死的话导致所有的文章共享一个issue。</p>
<p>麻痹，感觉这篇文章坑了我<a href="https://extremegtr.github.io/2017/09/07/Add-Gitment-comment-system-to-hexo-theme-NexT/" target="_blank" rel="noopener">添加Gitment评论系统到Hexo主题NexT</a>，而且官网的默认配置（把id留空）不对。</p>
<p>冷静，继续追踪</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/2.png" width="700"><br></div>

<p>传值是对的呀…</p>
<p>既然知道传值对了，id的作用也清楚了，难道是GitHub在搞事情？</p>
<p>去新建一个label，把值复制进去…</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/1.png" width="700"><br></div>

<p>卧槽，真的有长度限制！</p>
<p>那就简单了，只取title做id，平时写标题不要太浪~~~</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> page.title </span><span class="xml"><span class="tag">%&gt;</span>'</span></span><br></pre></td></tr></table></figure>
<h3 id="2018-02-25更新"><a href="#2018-02-25更新" class="headerlink" title="2018-02-25更新"></a>2018-02-25更新</h3><p>最近在整理项目开发的系列文章，发现标题不是想不浪就能克制得住的哇。评论中<a href="https://github.com/iHTCboy" target="_blank" rel="noopener">iHTCboy</a>的解决方法很有通用性，就采用他的方法好了。</p>
<p>主要思想是用时间作id</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>: '&lt;%= page.<span class="built_in">date</span> %&gt;'</span><br></pre></td></tr></table></figure>
<p>这样传给github的标签是定长的，不会超过长度限制。同时<code>date</code>可以自己写，只要精确到分秒，区分文章不是问题。Good job!</p>
<p>哇！！！写标题快浪起来！！！</p>
<ul>
<li>PS：一个date的例子：<code>date: 2018-02-25 11:48:00.000000000+8:00</code> 更改后面的0可以达到毫秒微秒纳秒级别</li>
<li>PS：<a href="https://github.com/xjzsq" target="_blank" rel="noopener">xjzsq</a>的方法也很好，思想是用副标题作id，可以看下<a href="http://www.xjdesyxx.top/2018/02/07/errsln/" target="_blank" rel="noopener">他的文章</a></li>
</ul>
<h2 id="大小写问题"><a href="#大小写问题" class="headerlink" title="大小写问题"></a>大小写问题</h2><p>配置项中，可能github账号中含大小写，比如我的是<code>LinXueyuanStdio</code>，但是在配置时不用关心大小写问题，因为POST的时候一律转成小写</p>
<h2 id="测试时产生的issue何去何从"><a href="#测试时产生的issue何去何从" class="headerlink" title="测试时产生的issue何去何从"></a>测试时产生的issue何去何从</h2><p>删不掉的，死心吧。<br>不过可以改title，改内容，改label等等，对应issues的每一个操作都会记录下来。<br>另外，版本提交的commits，也是删不掉的。</p>
<p>顺便总结一下<a href="http://xichen.pub/2018/01/31/2018-01-31-github-issue-usage/">github issue 的用法</a></p>
<p>参考：</p>
<ul>
<li><a href="https://extremegtr.github.io/2017/09/07/Add-Gitment-comment-system-to-hexo-theme-NexT/" target="_blank" rel="noopener">添加Gitment评论系统到Hexo主题NexT</a></li>
<li><a href="http://vayi.site/2017/08/16/Hexo-gitment/" target="_blank" rel="noopener">Hexo+gitment</a></li>
<li><a href="https://imsun.net/posts/gitment-introduction/#more" target="_blank" rel="noopener">Gitment：使用 GitHub Issues 搭建评论系统</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitment </tag>
            
            <tag> github </tag>
            
            <tag> github issue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 3]]></title>
      <url>/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>中，我们构建了一个简单的投票dapp，并在本地机器上运行。在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们将应用程序移动到使用<code>truffle</code>框架，并将其部署到公共Ropsten testnet，并通过<code>truffle</code>控制台和网页进行交互。在本节中，我们将添加更多的功能到我们的投票dapp</p>
<p>学习内容：</p>
<ol>
<li>使用像struct这样的新数据类型来组织和存储区块链上的数据。</li>
<li>tokens的概念及其用法。</li>
<li>使用Ethereum区块链平台的货币Ether进行支付。</li>
</ol>
<p>可以在这个仓库的<code>chapter3</code>目录中找到所有的代码：<a href="https://github.com/maheshmurthy/ethereum_voting_dapp" target="_blank" rel="noopener">https://github.com/maheshmurthy/ethereum_voting_dapp</a></p>
<p>在大选中，每个公民都会为自己喜欢的候选人投一票。然而，有的选举如选举股东的公司董事会，可以根据你在该公司拥有的股份数量进行投票。所以，你拥有的股票越多，得到的选票就越多。</p>
<p>为了支持这种选举，我们来增强我们的投票权。我们将增加购买公司股票的功能。然后他们可以用这些股票投票给候选人。我们还将添加一个功能来查找选民信息。在以太坊区块链世界中，这些股票通常被称为代币，将这些共享作为tokens。</p>
<p>如果你想跳过所有的解释，只想看看合同文件，你可以在这里找到它：<a href="https://github.com/maheshmurthy/ethereum_voting_dapp/blob/master/chapter3/contracts/Voting.sol。" target="_blank" rel="noopener">https://github.com/maheshmurthy/ethereum_voting_dapp/blob/master/chapter3/contracts/Voting.sol。</a></p>
<p>第一步是声明我们需要存储所有我们感兴趣的信息的变量。下面是有解释的合同变量。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// We use the struct datatype to store the voter information.</span><br><span class="line">  struct voter &#123;</span><br><span class="line">    address voterAddress; // The address of the voter</span><br><span class="line">    uint tokensBought;    // The total no. of tokens this voter owns</span><br><span class="line">    uint[] tokensUsedPerCandidate; // Array to keep track of votes per candidate.</span><br><span class="line">    /* We have an<span class="built_in"> array </span>called candidateList initialized below.</span><br><span class="line">     Every time this voter votes with her tokens, the value at that</span><br><span class="line">     index is incremented. Example,<span class="built_in"> if </span>candidateList<span class="built_in"> array </span>declared</span><br><span class="line">     below has [<span class="string">"Rama"</span>, <span class="string">"Nick"</span>, <span class="string">"Jose"</span>]<span class="built_in"> and </span>this</span><br><span class="line">     voter votes 10 tokens to Nick, the tokensUsedPerCandidate[1] </span><br><span class="line">     will be incremented by 10.</span><br><span class="line">     */</span><br><span class="line">  &#125;</span><br><span class="line">/* mapping is equivalent to an associate<span class="built_in"> array </span>or hash.</span><br><span class="line"> The key of the mapping is candidate name stored as type bytes32 </span><br><span class="line"><span class="built_in"> and </span>value is an unsigned integer which used to store the vote </span><br><span class="line"> count</span><br><span class="line"> */</span><br><span class="line">mapping (bytes32 =&gt; uint)<span class="keyword"> public</span> votesReceived;</span><br><span class="line">mapping (address =&gt; voter)<span class="keyword"> public</span> voterInfo;</span><br><span class="line">/* Solidity doesn't let you<span class="built_in"> return </span>an<span class="built_in"> array </span>of strings yet. We will </span><br><span class="line"> use an<span class="built_in"> array </span>of bytes32 instead to store the list of candidates</span><br><span class="line"> */</span><br><span class="line">bytes32[]<span class="keyword"> public</span> candidate<span class="class">List;</span></span><br><span class="line">uint<span class="keyword"> public</span> totalTokens; // Total no. of tokens available for this election</span><br><span class="line">uint<span class="keyword"> public</span> balanceTokens; // Total no. of tokens still available for purchase</span><br><span class="line">uint<span class="keyword"> public</span> tokenPrice; // Price per token</span><br></pre></td></tr></table></figure>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>和<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们初始化了在构造函数中竞争的候选者列表。但是，在合约部署在区块链上时，构造函数只会被调用一次。在这里，我们还必须初始化可用于销售的token总数和每个token的成本。所以，我们更新我们的合约构造函数，如下所示：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* When the contract is deployed on the blockchain, we will </span></span><br><span class="line"><span class="comment"> initialize the total number of tokens for sale, cost per token and</span></span><br><span class="line"><span class="comment"> all the candidates</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  function Voting(uint tokens, uint pricePerToken, <span class="keyword">bytes32[] </span>candidateNames) public &#123;</span><br><span class="line">    candidateList = candidateNames<span class="comment">;</span></span><br><span class="line">    totalTokens = tokens<span class="comment">;</span></span><br><span class="line">    <span class="keyword">balanceTokens </span>= tokens<span class="comment">;</span></span><br><span class="line">    tokenPrice = pricePerToken<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>truffle</code>中，使用<code>migration</code>将代码部署到区块链。可以在<a href="">这里</a>查看迁移文件。<code>truffle</code>的<code>migration</code>文件中的示例部署调用如下所示：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">deployer</span><span class="selector-class">.deploy</span>(Voting, <span class="number">1000</span>, web3.toWei(<span class="string">'0.1'</span>, <span class="string">'ether'</span>), [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>]);</span><br></pre></td></tr></table></figure>
<p>现在我们已经初始化了token并设置了价格，让我们看看有人可以通过支付以太币来购买这些<code>token</code>。这是购买<code>token</code>的函数。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is used to purchase the tokens. Note the keyword </span></span><br><span class="line"><span class="comment"> 'payable' below. By just adding that one keyword to a function, </span></span><br><span class="line"><span class="comment"> your contract can now accept Ether from anyone who calls this </span></span><br><span class="line"><span class="comment"> function. Accepting money can not get any easier than this!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">function <span class="title">buy</span>(<span class="params"></span>) payable <span class="keyword">public</span> <span class="title">returns</span> (<span class="params"><span class="keyword">uint</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">uint</span> tokensToBuy = msg.<span class="keyword">value</span> / tokenPrice;</span><br><span class="line">    <span class="keyword">if</span> (tokensToBuy &gt; balanceTokens) <span class="keyword">throw</span>;</span><br><span class="line">    voterInfo[msg.sender].voterAddress = msg.sender;</span><br><span class="line">    voterInfo[msg.sender].tokensBought += tokensToBuy;</span><br><span class="line">    balanceTokens -= tokensToBuy;</span><br><span class="line">    <span class="keyword">return</span> tokensToBuy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个示例购买电话如下所示</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">truffle</span>(development)&gt; <span class="selector-tag">Voting</span><span class="selector-class">.deployed</span>()<span class="selector-class">.then</span>(function(contract) &#123;<span class="selector-tag">contract</span><span class="selector-class">.buy</span>(&#123;<span class="attribute">value</span>: web3.toWei(<span class="string">'1'</span>, <span class="string">'ether'</span>), <span class="attribute">from</span>: web3.eth.accounts[<span class="number">1</span>]&#125;)&#125;)</span><br></pre></td></tr></table></figure>
<p><code>value: web3.toWei(‘1’, ‘ether’)</code>参数使用<code>msg.value</code>在<code>buy()</code>函数访问和<code>msg.sender</code>给我们<code>web3.eth.accounts[1]</code>的帐户地址。假设每个标记的值为0.1 Ether，则<code>web3.eth.accounts[1]</code>将接收1个Ether/0.1Ether=10tokens。</p>
<p>让我们休息一会儿，看看代码，并可视化账户（选民）和合同之间的交互。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-27/0.png" width="700"><br></div>

<p><code>index.html</code>文件更新：</p>
<ul>
<li>为了投票给候选人，你现在必须指定否。您想要投票的标记。</li>
<li>有一个新的部分，你可以购买令牌。</li>
<li>现在可以查询选民信息 - 他们拥有多少令牌，不可以。他们投给了每个候选人。</li>
<li>候选人不再被硬编码。我们从区块链中获取候选人并填充它。</li>
<li>在app.js文件必须支持上述所有的UI功能的更新。</li>
</ul>
<p>更新部署文件<code>2_deploy_contracts.js</code>以传递总共令牌和令牌价格以及候选名称。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Voting = artifacts.require(<span class="string">"./Voting.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Voting, <span class="number">1000</span>, web3.toWei(<span class="string">'0.1'</span>, <span class="string">'ether'</span>), [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>总而言之，在本教程中更新的四个文件是<code>Voting.sol</code>，<code>index.html</code>，<code>app.js</code>和<code>2_deploy_contracts.js</code>。一旦你用这些文件更新了<code>truffle</code>储存库，我们可以将合同部署到区块链。部署过程与之前的教程完全相同。</p>
<p>只需要使用<code>truffle</code>命令进行编译和<code>migrate</code>。</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> truffle migrate</span><br><span class="line"><span class="keyword">Using</span> network <span class="string">'development'</span>.</span><br><span class="line">Compiling Migrations.sol...</span><br><span class="line">Compiling Voting.sol...</span><br><span class="line">Writing artifacts to ./build/contracts</span><br><span class="line">Running migration: <span class="number">1</span>_initial_migration.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Migrations...</span><br><span class="line">Migrations: <span class="number">0xc9249947010675b8a3b1defb12334148f7f59010</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line">Running migration: <span class="number">2</span>_deploy_contracts.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Voting...</span><br><span class="line">Voting: <span class="number">0x795d6d1f7cf467f27e48181da5f1ebd5bbd0a8df</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br></pre></td></tr></table></figure>
<p>如果您能够成功部署合同并启动您的Web服务器，则您的页面如下所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-27/1.png" width="700"><br></div>

<p>将能够购买<code>tokens</code>，使用<code>tokens</code>投票给候选人并根据他们的地址查找选举人信息。如果你能够得到所有这些功能，Congratulation！</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 2]]></title>
      <url>/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>中，我们用<code>ganache</code>在开发环境中构建了一个简单的投票应用程序。现在在真正的区块链上获得这个应用程序。</p>
<p>以太坊有2个公共区块链。</p>
<ul>
<li>Testnet（也叫Ropsten）：这是一个测试区块链。可以把它看作一个QA或一个临时服务器，它仅用于测试目的。</li>
<li>Mainnet（也叫Homestead）：这是全世界真实交易的区块链。在这个网络上使用以太网是有实际价值的。</li>
</ul>
<p>学习目标:</p>
<ol>
<li>安装<code>geth</code>用于下载区块链的客户端软件，并在本地计算机上运行以太坊节点</li>
<li>安装名为<code>Truffle</code>的Ethereum dapp框架，将用于编译和部署智能合约</li>
<li>对投票应用程序进行小小的更新，使其用<code>Truffle</code></li>
<li>将合约编译并部署到<code>Ropsten testnet</code></li>
<li>通过<code>Truffle</code>控制台，然后通过网页与合约进行交互</li>
</ol>
<h1 id="安装geth并同步区块链"><a href="#安装geth并同步区块链" class="headerlink" title="安装geth并同步区块链"></a>安装geth并同步区块链</h1><p>安装非常简单：</p>
<h2 id="在Mac上"><a href="#在Mac上" class="headerlink" title="在Mac上"></a>在Mac上</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap ethereum / ethereum mahesh </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install ethereum</span></span><br></pre></td></tr></table></figure>
<h2 id="在Ubuntu上"><a href="#在Ubuntu上" class="headerlink" title="在Ubuntu上"></a>在Ubuntu上</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install software-properties-common </span><br><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>-y ppa：ethereum / ethereum </span><br><span class="line">$ sudo apt-get update </span><br><span class="line">$ sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>
<p>在这有各种平台的安装说明：<a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum</a></p>
<p>安装<code>geth</code>后，在命令行控制台中运行下面的命令：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="string">geth </span><span class="built_in">--testnet</span> <span class="built_in">--syncmode</span> <span class="string">"fast"</span> <span class="built_in">--rpc</span> <span class="built_in">--rpcapi</span> <span class="string">db,</span><span class="string">eth,</span><span class="string">net,</span><span class="string">web3,</span><span class="string">personal </span><span class="built_in">--cache=1024</span>  <span class="built_in">--rpcport</span> <span class="string">8545 </span><span class="built_in">--rpcaddr</span> <span class="string">127.</span>0.0.1 <span class="built_in">--rpccorsdomain</span> <span class="string">"*"</span> <span class="built_in">--bootnodes</span> <span class="string">"enode://20c9ad97c081d63397d7b685a412227a40e23c8bdc6688c6f37e97cfbc22d2b4d1db1510d8f61e6a8866ad7f0e17c02b14182d37ea7c3c8b9c2683aeb6b733a1@52.169.14.227:30303,enode://6ce05930c72abc632c58e2e4324f7c7ea478cec0ed4fa2528982cf34483094e9cbc9216e7aa349691242576d552a2a56aaeae426c5303ded677ce455ba1acd9d@13.84.180.240:30303"</span></span><br></pre></td></tr></table></figure>
<p>这将启动以太坊节点，连接到其他对等节点并开始下载区块链。下载区块链所需的时间取决于各种因素，例如您的网络连接速度，计算机上的RAM，硬盘驱动器的类型等等。在一台拥有8GB RAM和50Mbps连接的计算机上花了我10-15分钟时间。</p>
<p>在您正在运行的控制台中，您将看到如下所示的输出。寻找粗体的块号。当区块链完全同步时，区块编号和此页面上的区块编号接近：<a href="https://ropsten.etherscan.io/" target="_blank" rel="noopener">https://ropsten.etherscan.io/</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:15.116332</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>   <span class="selector-tag">32</span> <span class="selector-tag">blocks</span>,    <span class="selector-tag">49</span> <span class="selector-tag">txs</span> (  <span class="number">6.256</span> Mg) <span class="selector-tag">in</span> <span class="selector-tag">185</span><span class="selector-class">.716ms</span> (<span class="number">33.688</span> Mg/s). <span class="selector-id">#445097</span> <span class="selector-attr">[e1199364… / bce20913…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:20.267142</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">1</span> <span class="selector-tag">txs</span> (  <span class="number">0.239</span> Mg) <span class="selector-tag">in</span>  <span class="selector-tag">11</span><span class="selector-class">.379ms</span> (<span class="number">20.963</span> Mg/s). <span class="selector-id">#445097</span> <span class="selector-attr">[b4d77c46…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:21.059414</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">0</span> <span class="selector-tag">txs</span> (  <span class="number">0.000</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">7</span><span class="selector-class">.807ms</span> ( <span class="number">0.000</span> Mg/s). <span class="selector-id">#445098</span> <span class="selector-attr">[f990e694…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:34.367485</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">0</span> <span class="selector-tag">txs</span> (  <span class="number">0.000</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">4</span><span class="selector-class">.599ms</span> ( <span class="number">0.000</span> Mg/s). <span class="selector-id">#445099</span> <span class="selector-attr">[86b4f29a…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:42.953523</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">2</span> <span class="selector-tag">txs</span> (  <span class="number">0.294</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">9</span><span class="selector-class">.149ms</span> (<span class="number">32.136</span> Mg/s). <span class="selector-id">#445100</span> <span class="selector-attr">[3572f223…]</span></span><br></pre></td></tr></table></figure>
<h1 id="安装Truffle框架"><a href="#安装Truffle框架" class="headerlink" title="安装Truffle框架"></a>安装Truffle框架</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g truffle</span><br></pre></td></tr></table></figure>
<h1 id="建立voting合约"><a href="#建立voting合约" class="headerlink" title="建立voting合约"></a>建立voting合约</h1><p>首先建立一个truffle project</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir voting</span><br><span class="line">$ cd voting</span><br><span class="line">$ npm install -g webpack</span><br><span class="line">$ truffle unbox webpack</span><br><span class="line">$ ls</span><br><span class="line">README<span class="selector-class">.md</span>               contracts               node_modules            test                    webpack<span class="selector-class">.config</span><span class="selector-class">.js</span>       truffle.js</span><br><span class="line">app                     migrations              package<span class="selector-class">.json</span>            </span><br><span class="line">$ ls app/</span><br><span class="line">index<span class="selector-class">.html</span>  javascripts  stylesheets</span><br><span class="line">$ ls contracts/</span><br><span class="line">ConvertLib<span class="selector-class">.sol</span>  MetaCoin<span class="selector-class">.sol</span>  Migrations.sol</span><br><span class="line">$ ls migrations/</span><br><span class="line"><span class="number">1</span>_initial_migration<span class="selector-class">.js</span>  <span class="number">2</span>_deploy_contracts.js</span><br></pre></td></tr></table></figure>
<p><code>truffle</code>创建了运行<code>dapp</code>所需的必要文件和目录。<code>truffle</code>还创建了一个示例应用程序，让你快速上手（我们不会在本教程中使用它）。可以删除<code>contracts</code>目录中的<code>ConvertLib.sol</code>和<code>MetaCoin.sol</code>文件。</p>
<p><code>migrations</code>目录很重要。这些<code>migrations</code>里文件用于将合约部署到区块链。（在上一篇文章中，我们使用了<code>VotingContract.new</code>将合约部署到区块链，现在不需要这样做）。</p>
<p><code>1_initial_migration.js</code>将一个名为<code>Migrations</code>的合约部署到区块链中，并用于存储已部署的最新合约。每次运行<code>migration</code>时，<code>truffle</code>都会查询区块链以获取已部署的最后一个合约，然后部署尚未部署的任何合约。然后更新<code>Migrations</code>合约中的<code>last_completed_migration</code>字段，以指示部署的最新合约。可以简单地将其视为一个名为<code>Migration</code>的数据库表，其中名为<code>last_completed_migration</code>的列始终保持最新状态。<a href="http://truffleframework.com/docs/getting_started/migrations" target="_blank" rel="noopener">更多</a></p>
<p>现在用上面的教程中所写的所有代码更新项目，下面将对其进行一些更改。</p>
<p>首先，将<code>Voting.sol</code>从前一个教程复制到<code>contracts</code>目录（这个文件没有改变）。</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line"><span class="comment">// We have to specify what version of compiler this code will compile with</span></span><br><span class="line"></span><br><span class="line">contract Voting &#123;</span><br><span class="line">  <span class="comment">/* mapping field below is equivalent to an associative array or hash.</span></span><br><span class="line"><span class="comment">  The key of the mapping is candidate name stored as type bytes32 and value is</span></span><br><span class="line"><span class="comment">  an unsigned integer to store the vote count</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  mapping (bytes32 =&gt; uint8) <span class="keyword">public</span> votesReceived;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Solidity doesn't let you pass in an array of strings in the constructor (yet).</span></span><br><span class="line"><span class="comment">  We will use an array of bytes32 instead to store the list of candidates</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  bytes32[] <span class="keyword">public</span> candidateList;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This is the constructor which will be called once when you</span></span><br><span class="line"><span class="comment">  deploy the contract to the blockchain. When we deploy the contract,</span></span><br><span class="line"><span class="comment">  we will pass an array of candidates who will be contesting in the election</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Voting</span><span class="params">(bytes32[] candidateNames)</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    candidateList = candidateNames;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function returns the total votes a candidate has received so far</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">totalVotesFor</span><span class="params">(bytes32 candidate)</span> <span class="title">view</span> <span class="title">public</span> <span class="title">returns</span> <span class="params">(uint8)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(validCandidate(candidate));</span><br><span class="line">    <span class="keyword">return</span> votesReceived[candidate];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function increments the vote count for the specified candidate. This</span></span><br><span class="line">  <span class="comment">// is equivalent to casting a vote</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">voteForCandidate</span><span class="params">(bytes32 candidate)</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(validCandidate(candidate));</span><br><span class="line">    votesReceived[candidate] += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validCandidate</span><span class="params">(bytes32 candidate)</span> <span class="title">view</span> <span class="title">public</span> <span class="title">returns</span> <span class="params">(bool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">uint</span> i = <span class="number">0</span>; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (candidateList[i] == candidate) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls contracts/</span></span><br><span class="line">Migrations.sol  Voting.sol</span><br></pre></td></tr></table></figure>
<p>接下来，将<code>migrations</code>目录中的<code>2_deploy_contracts.js</code>的内容替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Voting = artifacts.require(<span class="string">"./Voting.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Voting, [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>], &#123;<span class="attr">gas</span>: <span class="number">6700000</span>&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也可以在<code>truffle.js</code>中将气体值设置为全局设置。继续添加如下所示的<code>gas</code>选项，如果忘记将<code>gas</code>设置为特定的迁移文件，则默认使用全局值。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'babel-register'</span>)</span></span></span><br><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">'localhost'</span>,</span><br><span class="line">      port: <span class="number">8545</span>,</span><br><span class="line">      network_id: <span class="string">'*'</span>,</span><br><span class="line">      gas: <span class="number">470000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用下面的内容替换<code>app/javascripts/app.js</code>的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Import the page's CSS. Webpack will know what to do with it.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../stylesheets/app.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import libraries we need.</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Web3&#125; <span class="keyword">from</span> <span class="string">'web3'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> contract &#125; <span class="keyword">from</span> <span class="string">'truffle-contract'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When you compile and deploy your Voting contract,</span></span><br><span class="line"><span class="comment"> * truffle stores the abi and deployed address in a json</span></span><br><span class="line"><span class="comment"> * file in the build directory. We will use this information</span></span><br><span class="line"><span class="comment"> * to setup a Voting abstraction. We will use this abstraction</span></span><br><span class="line"><span class="comment"> * later to create an instance of the Voting contract.</span></span><br><span class="line"><span class="comment"> * Compare this against the index.js from our previous tutorial to see the difference</span></span><br><span class="line"><span class="comment"> * https://gist.github.com/maheshmurthy/f6e96d6b3fff4cd4fa7f892de8a1a1b4#file-index-js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> voting_artifacts <span class="keyword">from</span> <span class="string">'../../build/contracts/Voting.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Voting = contract(voting_artifacts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> candidates = &#123;<span class="string">"Rama"</span>: <span class="string">"candidate-1"</span>, <span class="string">"Nick"</span>: <span class="string">"candidate-2"</span>, <span class="string">"Jose"</span>: <span class="string">"candidate-3"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.voteForCandidate = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> candidateName = $(<span class="string">"#candidate"</span>).val();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    $(<span class="string">"#msg"</span>).html(<span class="string">"Vote has been submitted. The vote count will increment as soon as the vote is recorded on the blockchain. Please wait."</span>)</span><br><span class="line">    $(<span class="string">"#candidate"</span>).val(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Voting.deployed() returns an instance of the contract. Every call</span></span><br><span class="line"><span class="comment">     * in Truffle returns a promise which is why we have used then()</span></span><br><span class="line"><span class="comment">     * everywhere we have a transaction call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;</span><br><span class="line">      contractInstance.voteForCandidate(candidateName, &#123;<span class="attr">gas</span>: <span class="number">140000</span>, <span class="attr">from</span>: web3.eth.accounts[<span class="number">0</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> div_id = candidates[candidateName];</span><br><span class="line">        <span class="keyword">return</span> contractInstance.totalVotesFor.call(candidateName).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">          $(<span class="string">"#"</span> + div_id).html(v.toString());</span><br><span class="line">          $(<span class="string">"#msg"</span>).html(<span class="string">""</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">"Using web3 detected from external source like Metamask"</span>)</span><br><span class="line">    <span class="comment">// Use Mist/MetaMask's provider</span></span><br><span class="line">    <span class="built_in">window</span>.web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">"No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask"</span>);</span><br><span class="line">    <span class="comment">// fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)</span></span><br><span class="line">    <span class="built_in">window</span>.web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Voting.setProvider(web3.currentProvider);</span><br><span class="line">  <span class="keyword">let</span> candidateNames = <span class="built_in">Object</span>.keys(candidates);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; candidateNames.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = candidateNames[i];</span><br><span class="line">    Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;</span><br><span class="line">      contractInstance.totalVotesFor.call(name).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#"</span> + candidates[name]).html(v.toString());</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>将<code>app/index.html</code>的内容替换为以下内容。即使这个文件与上一章几乎相同，除了包含的js文件是41行的<code>app.js</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World DApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans:400,700'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A Simple Hello World Voting Application<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Candidate<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Votes<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Rama<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Nick<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"candidate"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"voteForCandidate()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Vote<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.slim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="将合同部署到Ropsten-testnet"><a href="#将合同部署到Ropsten-testnet" class="headerlink" title="将合同部署到Ropsten testnet"></a>将合同部署到Ropsten testnet</h1><p>在部署合同之前需要一个账号和一些ether。当我们使用ganache时，它创建了10个测试帐户，并预装了100个测试用例。但是对于testnet和mainnet，我们必须创建帐户并自己添加一些ether。</p>
<p>在您的命令行终端中，执行以下操作：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.personal</span><span class="selector-class">.newAccount</span>(<span class="string">'verystrongpassword'</span>)</span><br><span class="line"><span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span></span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.eth</span><span class="selector-class">.getBalance</span>(<span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span>)</span><br><span class="line">&#123; [String: <span class="string">'0'</span>] s: <span class="number">1</span>, e: <span class="number">0</span>, c: [ <span class="number">0</span> ] &#125;</span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.personal</span><span class="selector-class">.unlockAccount</span>(<span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span>, <span class="string">'verystrongpassword'</span>, <span class="number">15000</span>)</span><br></pre></td></tr></table></figure>
<p>在之前的文章中，我们启动了一个节点控制台并初始化了web3对象。当我们执行<code>truffle</code>控制台，所有这一切都为我们完成，我们得到一个web3对象准备使用。我们现在有一个地址为<code>“0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1”</code>的帐户（您将在您的情况下有不同的地址），余额将为0。</p>
<p>可以通过传递一个额外的option<code>--mine</code>来运行geth节点来挖掘一些ether。建议更简单是从<a href="https://www.reddit.com/r/ethdev/" target="_blank" rel="noopener">reddit thread</a>获得ether 或<a href="twitter.com/cwBQ3A5cz3Jzso7">ping我</a>，我给你一些。再次尝试<code>web3.eth.getBalance</code>，以确保有ether。也可以在<code>ropsten.etherscan.io</code>上输入地址以查看帐户余额</p>
<p>现在你已经有了一些了，继续编译并将合约部署到区块链。下面是运行命令和输出</p>
<ul>
<li>在部署合同之前，记得解锁账户</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> truffle migrate</span><br><span class="line">Compiling Migrations.sol...</span><br><span class="line">Compiling Voting.sol...</span><br><span class="line">Writing artifacts to ./build/contracts</span><br><span class="line">Running migration: <span class="number">1</span>_initial_migration.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Migrations...</span><br><span class="line">Migrations: <span class="number">0x3cee101c94f8a06d549334372181bc5a7b3a8bee</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line">Running migration: <span class="number">2</span>_deploy_contracts.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Voting...</span><br><span class="line">Voting: <span class="number">0xd24a32f0ee12f5e9d233a2ebab5a53d4d4986203</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line"><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<h1 id="与voting合约交互"><a href="#与voting合约交互" class="headerlink" title="与voting合约交互"></a>与voting合约交互</h1><p>成功部署合同后，现在应该能够获取投票计数并通过<code>truffle</code>控制台进行投票。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ truffle <span class="built_in">console</span></span><br><span class="line">truffle(<span class="keyword">default</span>)&gt; Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;contractInstance.voteForCandidate(<span class="string">'Rama'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;<span class="built_in">console</span>.log(v)&#125;)&#125;)</span><br><span class="line"><span class="comment">// After a few seconds, you should see a transaction receipt like this:</span></span><br><span class="line">receipt:</span><br><span class="line">&#123; <span class="attr">blockHash</span>: <span class="string">'0x7229f668db0ac335cdd0c4c86e0394a35dd471a1095b8fafb52ebd7671433156'</span>,</span><br><span class="line">blockNumber: <span class="number">469628</span>,</span><br><span class="line">contractAddress: <span class="literal">null</span>,</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">truffle(<span class="keyword">default</span>)&gt; Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;contractInstance.totalVotesFor.call(<span class="string">'Rama'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;<span class="built_in">console</span>.log(v)&#125;)&#125;)</span><br><span class="line">&#123; [<span class="built_in">String</span>: <span class="string">'1'</span>] s: <span class="number">1</span>, <span class="attr">e</span>: <span class="number">0</span>, <span class="attr">c</span>: [ <span class="number">1</span>] &#125;</span><br></pre></td></tr></table></figure>
<p>现在启动服务器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></table></figure>
<p>应该在<code>localhost：8080</code>看到投票页面，并且能够投票并看到所有候选人的投票数量。由于我们正在处理一个真正的区块链，所以每次写入区块链（voteForCandidate）将需要几秒钟的时间（矿工必须将您的交易包括在区块中，区块中包含区块链）。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-26/0.png" width="700"><br></div>

<p>如果你看到这个页面并且能够投票，你就可以在公共测试网络上建立一个完整的以太坊应用程序，Congratulation！</p>
<p>由于所有的交易都是公开的，可以在这里查看：<code>https://testnet.etherscan.io/</code>。只需输入帐户地址，就会显示所有的交易与时间戳。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 1]]></title>
      <url>/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">上一篇文章</a>中，通过和传统的 web程序相比较解释了以太坊平台的结构。作为一个开发者，学习新技术的最好的方式就是构建一个玩具程序。</p>
<p>在这篇文章中构建一个简单的“hello word”程序，这个程序是一个投票程序。</p>
<p>这个程序非常简单，包括：<code>初始化一个参加者集合</code>，<code>让任何人为候选人投票</code>，<code>显示每一个候选人获得的投票数</code>。我们的目的不仅仅是编写一个应用，目的是学习应用编译，部署，交互的过程。</p>
<p>总的来说这章是对上一篇文章的延续，如果你是刚接触Ethereum，我建议你最好读一读上一篇文章。</p>
<p>练习目的：</p>
<ol>
<li>搭建开发环境</li>
<li>学习在开发环境下编写，编译，部署合约。</li>
<li>在区块链上通过node.js控制台利用合约进行交互。</li>
<li>通过一个简单的web页面利用合约来交互，通过这个页面显示投票数，以及每个候选人的获得的投票数。</li>
</ol>
<p>整个应用部署在<code>ubuntu 16.04</code>上，在<code>macos</code>上也行。</p>
<h1 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h1><div class="image-package"><br><img src="/assets/blog/img/2018-01-25/0.png" width="700"><br></div>

<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>这里不是基于活跃的区块链的开发app，而是使用一个叫做<code>testrpc</code>的内存区块链。在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们将会在真正的区块链上进行交互，<br>下面来<code>安装testrpc,web3js</code>以及<code>在linux环境中启动一个测试区块链</code>。对于<code>windows</code>来说可以使用下面的方式：<a href="https://medium.com/@PrateeshNanada/steps-to-install-testrpc-in-windows-10-96989a6cd594" target="_blank" rel="noopener">https://medium.com/@PrateeshNanada/steps-to-install-testrpc-in-windows-10-96989a6cd594</a></p>
<blockquote>
<p>注意：这个教程当前工作的<code>web3js</code>的版本是0.20.1，运行<code>npm install ethereumjs-testrpc web3@0.20.1</code><br>  而不是运行<code>npm install ethereumjs-testrpc web3</code> ，在web3js的1.0文档版发布之后我会更新这个教程。</p>
</blockquote>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-25/1.png" width="700"><br></div>

<p>注意<code>testrpc</code>在自动运行的时候会自动创建10个测试帐号。这些帐号都预装了100个假的以太网节点。</p>
<h2 id="简单的投票合约"><a href="#简单的投票合约" class="headerlink" title="简单的投票合约"></a>简单的投票合约</h2><p>用solidity语言来编写合约。</p>
<p>编写的智能合约叫做Voting（在你熟悉的面相对象语言中想象合约就是一个类），Voting有一个初始化候选人的数组结构。<br>有两个方法，一个是返回候选人获得的总选票，另一个是给候选人加票的方法。</p>
<blockquote>
<p>注意：把合约部署到区块链上的时候，构造函数只能被调用一次，和web世界不同，web世界中你的代码部署的时候你可以使用新代码来覆盖以前的老代码，但是在区块链上部署的代码是不可更改的。如果你更新合约重新部署代码，旧的合约以及数据依然在区块链上。新部署的将会创建一个新的合约实例。</p>
</blockquote>
<p>下面是一个投票合约的代码，每一行都有注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">// We have to specify what version of compiler this code will compile with</span><br><span class="line"></span><br><span class="line">contract Voting &#123;</span><br><span class="line">  /* mapping field below is equivalent to an associative array or hash.</span><br><span class="line">  The key of the mapping is candidate name stored as type bytes32 and value is</span><br><span class="line">  an unsigned integer to store the vote count</span><br><span class="line">  */</span><br><span class="line">  </span><br><span class="line">  mapping (bytes32 =&gt; uint8) public votesReceived;</span><br><span class="line">  </span><br><span class="line">  /* Solidity doesn&apos;t let you pass in an array of strings in the constructor (yet).</span><br><span class="line">  We will use an array of bytes32 instead to store the list of candidates</span><br><span class="line">  */</span><br><span class="line">  </span><br><span class="line">  bytes32[] public candidateList;</span><br><span class="line"></span><br><span class="line">  /* This is the constructor which will be called once when you</span><br><span class="line">  deploy the contract to the blockchain. When we deploy the contract,</span><br><span class="line">  we will pass an array of candidates who will be contesting in the election</span><br><span class="line">  */</span><br><span class="line">  function Voting(bytes32[] candidateNames) &#123;</span><br><span class="line">    candidateList = candidateNames;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // This function returns the total votes a candidate has received so far</span><br><span class="line">  function totalVotesFor(bytes32 candidate) returns (uint8) &#123;</span><br><span class="line">    if (validCandidate(candidate) == false) throw;</span><br><span class="line">    return votesReceived[candidate];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // This function increments the vote count for the specified candidate. This</span><br><span class="line">  // is equivalent to casting a vote</span><br><span class="line">  function voteForCandidate(bytes32 candidate) &#123;</span><br><span class="line">    if (validCandidate(candidate) == false) throw;</span><br><span class="line">    votesReceived[candidate] += 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function validCandidate(bytes32 candidate) returns (bool) &#123;</span><br><span class="line">    for(uint i = 0; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">      if (candidateList[i] == candidate) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拷贝下面代码到<code>hello_world_voting</code>目录的文件<code>Voting.sol</code>文件中，现在编译代码，并把它部署到<code>testrps</code>上面。</p>
<p>编译<code>solidity</code>代码，首先要通过<code>npm</code>安装<code>npm module</code>：<code>solc</code></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> solc</span><br></pre></td></tr></table></figure>
<p>用带有<code>node.js</code>控制台的包，来编译智能合约，从上一章知道，<code>web3js</code>是一个让你通过RPC来和区块链交互的包。<br>用<code>web3js</code>这个包来进行部署与交互。</p>
<p>首先，在控制台运行node命令来调用node控制台，并初始化solc和web3js对象。下面所有的代码片段，都需要在node的交互式环境下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Web3 = require(<span class="string">'web3'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> web3 = new Web3(new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span></span><br></pre></td></tr></table></figure>
<p>为了确保<code>web3js对象</code>被初始化了，并且可以和区块链通信，查询所有在区块链上的账户。你会看到类似下面的输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; web3.eth.accounts</span><br><span class="line">['0x9c02f5c68e<span class="number">0239</span>0a3ab81f<span class="number">6334</span>1edc1ba5dbb39e',</span><br><span class="line">'0x7d920be073e92a590dc47e4ccea2f28db3f218cc',</span><br><span class="line">'0xf8a9c7c65c4d1c0c21b06c06ee5da80bd8f074a9',</span><br><span class="line">'0x9d8ee8c3d4f8b1e<span class="number">0880</span>3da274bdaff80c<span class="number">2204</span>fc6',</span><br><span class="line">'0x26bb5d139aa7bdb<span class="number">1380</span>af0e1e8f<span class="number">9814</span>7ef4c406a',</span><br><span class="line">'0x622e557aad13c<span class="number">3645</span>9fac<span class="number">8324</span>0f25ae<span class="number">91882127</span>c',</span><br><span class="line">'0xbf8b<span class="number">1630</span>d<span class="number">5640</span>e272f<span class="number">3365</span>3e<span class="number">8309</span>2ce33d302fd2',</span><br><span class="line">'0xe37a<span class="number">3157</span>cb<span class="number">3081</span>ea7a96ba9f9e942c72cf7ad87b',</span><br><span class="line">'0x175dae<span class="number">8134</span>5f<span class="number">3677</span>5db285d368f0b1d49f61b2f8',</span><br><span class="line">'0xc26bda5f<span class="number">3370</span>bdd46e7c84bdb909aead4d8f35f3']</span><br></pre></td></tr></table></figure>
<p>编译智能合约：通过从<code>Voting.sol</code>文件中加载智能合约到一个字符串变量中，然后编译。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> code = fs.readFileSync(<span class="string">'Voting.sol'</span>).toString()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> solc = require(<span class="string">'solc'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> compiledCode = solc.compile(code)</span></span><br></pre></td></tr></table></figure>
<p>当你成功编译了代码，打印了合约对象（仅仅是在控制台中查看到的上面<code>compiledCode</code>类型的内容），你会发现这里有两个重要的字段，理解他们十分重要：</p>
<ol>
<li><code>compiledCode.contracts[‘:Voting’].bytecode</code>：<code>Voting.sol</code>编译得到的是二进制代码。这个就是将要部署到区块链上的代码。</li>
<li><code>compiledCode.contracts[‘:Voting’].interface</code>：这是一个智能合约接口或者是智能合约模版（叫做abi），他告诉合约使用者，合约中可以使用的方法。<br>在将来无论你在什么时候要与智能合约交互，你都会用到这个abi的定义。你可以在这里查看更多<a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI" target="_blank" rel="noopener">关于abi的详细描述</a></li>
</ol>
<p>现在来部署智能合约。首先你要创建一个合约对象（下面的<code>VotingContract</code>），这个合约对象用来在区块链上部署和初始化合约。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; abiDefinition = JSON.parse(compiledCode<span class="selector-class">.contracts</span>[<span class="string">':Voting'</span>].interface)</span><br><span class="line">&gt; VotingContract = web3<span class="selector-class">.eth</span><span class="selector-class">.contract</span>(abiDefinition)</span><br><span class="line">&gt; byteCode = compiledCode<span class="selector-class">.contracts</span>[<span class="string">':Voting'</span>].bytecode</span><br><span class="line">&gt; deployedContract = VotingContract.new([<span class="string">'Rama'</span>,<span class="string">'Nick'</span>,<span class="string">'Jose'</span>],&#123;data: byteCode, from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>], gas: <span class="number">4700000</span>&#125;)</span><br><span class="line">&gt; deployedContract.address</span><br><span class="line">&gt; contractInstance = VotingContract.at(deployedContract.address)</span><br></pre></td></tr></table></figure>
<p>上面的<code>VotingContract.new</code>用来在区块链上部署智能合约。<br>第一个参数是候选人数组，这些候选人在选举竞争中都是相对简单的。<br>第二个参数的hash：</p>
<ol>
<li><code>data</code>：这是在区块链上部署的编译后的二进制代码。</li>
<li><code>from</code>：区块链必须记录谁部署了这个智能合约。在这个例子中选择第一个账户来作为这个智能合约的拥有者（将会部署这个合约到区块链上）。<br>这第一个账户通过调用<code>web3.eth.accounts</code>来获取。上面代码<code>web3.eth.accounts</code>返回一个数组，数组里面包含10个由<code>testrpc</code>创建的测试账户，<br>这10个账户是在启动测试区块链的时候创建。在真实活跃的区块链中，在没创建之前，不能使用任何账户。必须在交易（通信／交流）前拥有这个账户，并解锁。<br>创建账户时要求填写密码，这个密码用来证明你和账户的关系。为了方便<code>testrpc</code>默认解锁了10个账户。</li>
<li><code>gas</code>：和区块链交互花费的钱，这些钱是给矿工的，矿工的所有工作是在区块链上引入你的代码。必须指定你会支付多少钱给把你的代码包含到区块链上的人。这些钱就是通过设置gas的值来指定的。你的上面代码from中的账户的以太坊余额可以用来购买gas。gas的价格由网络来设定。</li>
</ol>
<p>现在已经部署了智能合约并有了一个合约实例（上面的<code>contractInstance变量</code>）。可以使用这个合约来进行交互。<br>区块链上有成千上万的合约部署在上面。但是，在区块链上怎么辨别自己的合约呢？答案就是<code>deployedContract.address</code>。<br>当你利用你的合约进行交互的时候，你需要这个部署地址，以及上面提到的abi的描述。</p>
<h2 id="在nodes控制台和合约进行交互"><a href="#在nodes控制台和合约进行交互" class="headerlink" title="在nodes控制台和合约进行交互"></a>在nodes控制台和合约进行交互</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; contractInstance<span class="selector-class">.totalVotesFor</span><span class="selector-class">.call</span>(<span class="string">'Rama'</span>)</span><br><span class="line">&#123; [String: <span class="string">'0'</span>] s: <span class="number">1</span>, e: <span class="number">0</span>, c: [ <span class="number">0</span> ] &#125;</span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53'</span></span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0x02c054d238038d68b65d55770fabfca592a5cf6590229ab91bbe7cd72da46de9'</span></span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0x3da069a09577514f2baaa11bc3015a16edf26aad28dffbcd126bde2e71f2b76f'</span></span><br><span class="line">&gt; contractInstance<span class="selector-class">.totalVotesFor</span><span class="selector-class">.call</span>(<span class="string">'Rama'</span>).toLocaleString()</span><br><span class="line"><span class="string">'3'</span></span><br></pre></td></tr></table></figure>
<p>在你的node交互控制台上试试上面的命令，你将会看到投票的数量增加。每次当你为一个候选人投票，你就会获得一个交易的ID：<br>例如:上面的: <code>&#39;0xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53&#39;</code> 这个交易ID是交易发生的证据。<br>将来你可以在任何时间来返回去查看他（数据可追踪）。这个交易是不可更改的。这种不可更改的特性是以太坊这种区块链的很大优势之一。<br>在接下来的教程中，会用其不可更改性来构建应用。</p>
<h2 id="web页面链接区块链和投票"><a href="#web页面链接区块链和投票" class="headerlink" title="web页面链接区块链和投票"></a>web页面链接区块链和投票</h2><p>现在所有的工作都完成了，现在要做的就是构建一个包含候选人的简单的html文件。<br>并在一个js文件中调用投票命令（这个投票命令已经在前面的node控制台中测试过了）。下面你会看到html代码和js文件。</p>
<p>在<code>hello_world_voting</code>文件夹下复制，并在你的浏览器中打开<code>index.html</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World DApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans:400,700'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A Simple Hello World Voting Application<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Candidate<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Votes<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Rama<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Nick<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"candidate"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"voteForCandidate()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Vote<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.slim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>index.js</code>文件：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">web3 = new Web3(new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">abi = JSON.parse('[&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"totalVotesFor"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint8"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"validCandidate"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bool"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"votesReceived"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint8"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"x"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"bytes32ToString"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint256"</span>&#125;],<span class="string">"name"</span>:<span class="string">"candidateList"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"voteForCandidate"</span>,<span class="string">"outputs"</span>:[],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"contractOwner"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidateNames"</span>,<span class="string">"type"</span>:<span class="string">"bytes32[]"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"constructor"</span>&#125;]')</span><br><span class="line">VotingContract = web3.eth.contract(abi);</span><br><span class="line"><span class="comment">// In your nodejs console, execute contractInstance.address to get the address at which the contract is deployed and change the line below to use your deployed address</span></span><br><span class="line">contractInstance = VotingContract.at('<span class="number">0</span>x2a9c1d265d06d47e8f7b00ffa987c9185aecf672');</span><br><span class="line">candidates = &#123;<span class="string">"Rama"</span>: <span class="string">"candidate-1"</span>, <span class="string">"Nick"</span>: <span class="string">"candidate-2"</span>, <span class="string">"Jose"</span>: <span class="string">"candidate-3"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">voteForCandidate</span><span class="params">()</span> &#123;</span></span><br><span class="line">  candidateName = $(<span class="string">"#candidate"</span>).val();</span><br><span class="line">  contractInstance.voteForCandidate(candidateName, &#123;from: web3.eth.accounts[<span class="number">0</span>]&#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    <span class="built_in">let</span> div_id = candidates[candidateName];</span><br><span class="line">    $(<span class="string">"#"</span> + div_id).html(contractInstance.totalVotesFor.call(candidateName).toString());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  candidateNames = Object.keys(candidates);</span><br><span class="line">  <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; candidateNames.length; i++) &#123;</span><br><span class="line">    <span class="built_in">let</span> name = candidateNames[i];</span><br><span class="line">    <span class="built_in">let</span> val = contractInstance.totalVotesFor.call(name).toString()</span><br><span class="line">    $(<span class="string">"#"</span> + candidates[name]).html(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不知道还记得前面说过和任何合约进行交互必须需要abi和地址。在上面的<code>index.js</code>文件中可以看到是怎么使用合约来进行交互的</p>
<p>下面是你在浏览器中打开<code>index.html</code>文件。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-25/2.png" width="700"><br></div>

<p>如果你可以进入上面文本框的候选人名字，并投票并且会看到投票增加。你已经成功构建了你的第一个应用。Congratulation！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>搭建环境</li>
<li>编写简单合约</li>
<li>编译及部署合约到区块链上</li>
<li>能够通过nodejs控制台进行交互，同时也能通过web页面进行同样交互。</li>
</ul>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>会部署这个合约到一个公共的测试网络，这样整个世界都会看到并给候选人进行投票。</p>
<p><a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>使用truffle框架来开发（不要使用node的控制台来管理整个过程）。</p>
<p>参考：<br><a href="https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2" target="_blank" rel="noopener">https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2</a></p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 0]]></title>
      <url>/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>学以太坊区块链平台已经有一段时间了，网络上有很多关于以太坊的资料（文章，视频，平台官网），这些很容易就能找到。由于以太坊平台还在快速迭代，所以相关的资料内容普遍滞后。然后自己基于所学整理了一下关于<code>啥是以太坊</code>，以及<code>怎么搞以太坊</code>的图。在学习过程中遇到了很多问题，本文整理一下，顺便从一个web开发者的角度来解释以太坊。</p>
<h1 id="什么是webapp"><a href="#什么是webapp" class="headerlink" title="什么是webapp"></a>什么是webapp</h1><p>构架webapp的客户端以及服务端：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-24/0.png" width="700"><br></div>

<p>一个web应用托管在托管服务器上，像AWS，Heroku，VPS等，所有的客户端都是通过一个中心的应用程序进行交流。客户端可以是web浏览器，或者是其它的消费你程序的API等。当一个客户端像服务端发起一个请求，服务器会和数据库进行通信，对数据库进行增删改查，然后相应客户端请求。</p>
<p>这种结构大部分情况下都能很好的运行，但是如果数据库是公开的任何人都可以访问，那么有一些应用就会变得很有用，这样我就不用依赖上面的webapp来获取自己个人的数据了，也就是说我可以从其它渠道获取我的个人数据。</p>
<p>下面举例说明：例如eBay，如果你是一个超级卖家，已经获得了数百的好评。由于某些原因eBay封停了你的帐号。这事会严重的影响你的生意。如果你能够把这数百的好评与评分转移到其他平台（eBay的竞争者）的话，这就很爽了。eBay在买家和卖家之间提供了一个第三方信任服务。并且从买卖双方都要收取佣金。是否有这么一种方式买卖双方在交易的时候完全忽略eBay，这样双方也节省了佣金，同时你又可以访问到你的交易数据？这就是下面的图片提出的去中心化应用。以太坊让你很容易的创建Dapps(去中心化应用)。</p>
<h1 id="什么是以太坊Dapp"><a href="#什么是以太坊Dapp" class="headerlink" title="什么是以太坊Dapp"></a>什么是以太坊Dapp</h1><div class="image-package"><br><img src="/assets/blog/img/2018-01-24/1.png" width="700"><br></div>

<p>你是否发现，每一个客户端交流使用的都是它自己的应用实例。没有一个所有的客户端都链接到服务器上的中心化服务器。这就意味着，每一个想通过去中心化应用交互的人，需要在他们的电脑或者是手机上完整的拷贝区块链。这就意味着，在你可以使用应用之前，你需要下载完整的区块链，然后启动使用这个应用。第一次听说感觉很荒唐，但是他有一个好处就是不需要依赖一个中心化的服务，而且这个中心化的服务有可能明天就不存在了。</p>
<p>现实中你不需要花费很多的内存和硬盘，来下载完整的区块链。已经有了一些变通的方法或者是优化来使的应用去中心化，保证交互方便快捷。</p>
<h1 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h1><ol>
<li><p>Database(数据库)：在以太坊网络上每发生一个交易就会被包装到一个区块中，每一个区块都和下一个区块相连。这些包含所有交易数据相连的一系列的块就是区块链。如果我们返回去看刚才的eBay的例子，买卖双方无论是出售，退款还是纠纷都将会被记录在区块链上，并且每个人都可以看到。为了保证以太坊网络上的所以网络节点对这条信息都有同样的拷贝，而且为了确保非法数据写入的这个数据库中（区块链的区块中），以太坊使用一个叫做<a href="http://ethereum.stackexchange.com/questions/14/what-proof-of-work-function-does-ethereum-use" target="_blank" rel="noopener">proof的算法</a>来做这件工作。</p>
</li>
<li><p>Code：区块链的数据库部分只是存储了数据，但是像买，买，取消，退款等操作逻辑在什么地方呢？在以太坊的世界里，你可以使用一个叫做Solidity的语言来写应用（合约）代码。然后可以使用Solidity编译器来把代码编译成以太坊二进制文件，然后把这个二进制代码部署到区块链上。除此之外和Solidity很少有其他的交互，但是Solidity是目前开发合约最流行的开发语言。</p>
</li>
</ol>
<p>所以从根本上来说：区块链<code>存储数据</code>，<code>存储代码</code>，而且<code>运行EVM（Ethereum Virtual Machine）中的代码</code>。</p>
<h1 id="如何开发Dapp"><a href="#如何开发Dapp" class="headerlink" title="如何开发Dapp"></a>如何开发Dapp</h1><p>基于Dapps构建web，Ethereal有一个很好用的javascript包叫<code>web3.js</code>，这个包可以和你的区块链接点建立连接。所以只需在javascript框架（reactjs, angularjs等）中引入这个包，然后就可以开始构建应用了。</p>
<p>另一个大而重要的应用方面是平台的财务能力。因为在使用Dapp的时候，你就拥有了一个内置的银行帐户。事实上不只是一个银行帐户，你可以在一分钟内创建多个帐户。这些银行帐户被叫做钱包，你可以用来存钱（用在以太坊生态系统的货币）和交易。</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>有许多关于区块链的内部细节我故意没有讲，因为我想集中精力在<code>基于区块链的Dapp</code>和<code>中心化的webapp</code>进行比较。希望这篇文章可以很好的达到说明以太坊是什么，以及怎么去构建去中心化的应用。</p>
<p>请看接下来的3个指导教程来构建全栈的dapp</p>
<ol>
<li><a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<h1 id="延伸阅读："><a href="#延伸阅读：" class="headerlink" title="延伸阅读："></a>延伸阅读：</h1><ol>
<li><a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="noopener">Ethereum white paper</a></li>
<li><a href="http://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener">写智能合约的语言Solidity</a></li>
<li><a href="https://gitter.im/ethereum/web3.js" target="_blank" rel="noopener">https://gitter.im/ethereum/solidityand</a></li>
<li><a href="https://gitter.im/ethereum/web3.js" target="_blank" rel="noopener">https://gitter.im/ethereum/web3.js</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的4个阶段的撤销更改]]></title>
      <url>/2018/01/23/2018-01-23-Git%E7%9A%844%E4%B8%AA%E9%98%B6%E6%AE%B5%E7%9A%84%E6%92%A4%E9%94%80%E6%9B%B4%E6%94%B9/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="3个步骤"><a href="#3个步骤" class="headerlink" title="3个步骤"></a>3个步骤</h2><div class="image-package"><br><img src="/assets/blog/img/2018-01-23/0.png" width="700"><br></div>

<p>正常情况下，我们的工作流就是3个步骤，对应上图中的3个箭头线：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"comment"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<ol>
<li><code>git add .</code>把所有文件放入暂存区；</li>
<li><code>git commit</code>把所有文件从暂存区提交进本地仓库；</li>
<li><code>git push</code>把所有文件从本地仓库推送进远程仓库。</li>
</ol>
<h2 id="4个区"><a href="#4个区" class="headerlink" title="4个区"></a>4个区</h2><p>git之所以令人费解，主要是它相比于svn等等传统的版本管理工具，多引入了一个暂存区(Stage)的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么4个区就够了：</p>
<ul>
<li>工作区(Working Area)</li>
<li>暂存区(Stage)</li>
<li>本地仓库(Local Repository)</li>
<li>远程仓库(Remote Repository)</li>
</ul>
<h2 id="5种状态"><a href="#5种状态" class="headerlink" title="5种状态"></a>5种状态</h2><p>以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：</p>
<ul>
<li>未修改(Origin)</li>
<li>已修改(Modified)</li>
<li>已暂存(Staged)</li>
<li>已提交(Committed)</li>
<li>已推送(Pushed)</li>
</ul>
<h1 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h1><p>了解了基本概念之后，我们来谈一谈犯错误之后如何撤销的问题。首先，我们要了解如何检查这3个步骤当中每一个步骤修改了什么，然后才好判断有没有修改成功。检查修改的二级命令都相同，都是diff，只是参数有所不同。</p>
<h2 id="已修改，未暂存"><a href="#已修改，未暂存" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>首先，我们来看一下，如果我们只是简单地在浏览器里保存了一下文件，但是还没有做<code>git add .</code>之前，我们如何检查有哪些修改。我们先随便拿一个文件来做一下实验：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/1.png" width="700"><br></div>

<p>我们在文件开头的第2行胡乱加了4个数字1234，存盘，这时文件进入了已修改状态，但是还没有进入暂存区，我们运行<code>git diff</code>，结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/index.md b/index.md</span><br><span class="line">index 73ff1ba..1066758 100644</span><br><span class="line">--- a/index.md</span><br><span class="line">+++ b/index.md</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> ---</span><br><span class="line">-layout: main</span><br><span class="line">+1234layout: main</span><br><span class="line"> color: black</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>
<p><code>git diff</code>的结果告诉我们哪些文件已经做了哪些修改。</p>
<h2 id="已暂存，未提交"><a href="#已暂存，未提交" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
<p>现在我们把修改放入暂存区看一下。先执行<code>git add .</code>，然后执行<code>git diff</code>，你会发现没有任何结果：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/2.png" width="700"><br></div>

<p>这说明<code>git diff</code>这个命令只检查我们的工作区和暂存区之间的差异，如果我们想看到暂存区和本地仓库之间的差异，就需要加一个参数<code>git diff --cached</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/index.md b/index.md</span><br><span class="line">index 73ff1ba..1066758 100644</span><br><span class="line">--- a/index.md</span><br><span class="line">+++ b/index.md</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> ---</span><br><span class="line">-layout: main</span><br><span class="line">+1234layout: main</span><br><span class="line"> color: black</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>
<p>这时候我们看到的差异是暂存区和本地仓库之间的差异。</p>
<h2 id="已提交，未推送"><a href="#已提交，未推送" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff master origin/master</span><br></pre></td></tr></table></figure>
<p>现在，我们把修改从暂存区提交到本地仓库，再看一下差异。先执行<code>git commit</code>，然后再执行<code>git diff --cached</code>，没有差异，执行<code>git diff master origin/master</code>，可以看到差异：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/3.png" width="700"><br></div>

<p>在这里，<code>master</code>就是你的本地仓库，而<code>origin/master</code>就是你的远程仓库，<code>master</code>是主分支的意思，因为我们都在主分支上工作，所以这里两边都是<code>master</code>，而<code>origin</code>就代表远程。</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p>了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。</p>
<h2 id="已修改，未暂存-1"><a href="#已修改，未暂存-1" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h2><p>如果我们只是在编辑器里修改了文件，但还没有执行<code>git add .</code>，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<p>来进行撤销操作。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/4.png" width="700"><br></div>

<p>可以看到，在执行完<code>git checkout .</code>之后，修改已被撤销，<code>git diff</code>没有任何内容了。</p>
<h3 id="一对反义词"><a href="#一对反义词" class="headerlink" title="一对反义词"></a>一对反义词</h3><p><code>git add .</code>的反义词是<code>git checkout .</code>。做完修改之后，如果你想向前走一步，让修改进入暂存区，就执行<code>git add .</code>，如果你想向后退一步，撤销刚才的修改，就执行<code>git checkout .</code>。</p>
<h2 id="已暂存，未提交-1"><a href="#已暂存，未提交-1" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h2><p>你已经执行了<code>git add .</code>，但还没有执行<code>git commit -m &quot;comment&quot;</code>。这时候你意识到了错误，想要撤销，你可以执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<p><code>git reset</code>只是把修改退回到了<code>git add .</code>之前的状态，也就是说文件本身还处于已修改未暂存状态，你如果想退回未修改状态，还需要执行<code>git checkout .</code>。</p>
<p>或许你已经注意到了，以上两个步骤都可以用同一个命令<code>git reset --hard</code>来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到未修改的状态。</p>
<h2 id="已提交，未推送-1"><a href="#已提交，未推送-1" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h2><p>你的手太快，你既执行了<code>git add .</code>，又执行了<code>git commit</code>，这时候你的代码已经进入了你的本地仓库，然而你后悔了，怎么办？不要着急，还有办法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>还是这个<code>git reset --hard</code>命令，只不过这次多了一个参数<code>origin/master</code>，正如我们上面讲过的，<code>origin/master</code>代表远程仓库，既然你已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧。</p>
<h2 id="已推送"><a href="#已推送" class="headerlink" title="已推送"></a>已推送</h2><p>很不幸，你的手实在是太快了，你既<code>git add</code>了，又<code>git commit</code>了，并且还<code>git push</code>了，这时你的代码已经进入远程仓库。如果你想恢复的话，还好，由于你的本地仓库和远程仓库是等价的，你只需要先恢复本地仓库，再强制push到远程仓库就好了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/5.png" width="700"><br></div>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上4种状态的撤销我们都用到了同一个命令<code>git reset --hard</code>，前2种状态的用法甚至完全一样，所以只要掌握了<code>git reset --hard</code>这个命令的用法，从此你再也不用担心提交错误了。</p>
<h1 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h1><p><a href="https://segmentfault.com/a/1190000011910766" target="_blank" rel="noopener">独孤求败：Git中的各种后悔药</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 3.0及Gradle Plugin 3.0升级注意事项]]></title>
      <url>/2018/01/23/2018-01-23-Android-Studio-3.0%E5%8F%8AGradle-Plugin-3.0%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>最近终于有空升级了一下项目中的<code>Gradle</code>和<code>Gradle Plugin</code>的版本，还是踩了蛮多的坑。特别是依赖以及渠道编译这块变动较大，因此把遇到的一些问题点记录下来，分享给后人查阅~</p>
<h2 id="Gradle版本升级"><a href="#Gradle版本升级" class="headerlink" title="Gradle版本升级"></a>Gradle版本升级</h2><p>其实当AS升级到3.0之后，Gradle Plugin和Gradle不升级也是可以继续使用的，但很多新的特性如：Java8支持、新的依赖匹配机制、AAPT2等新功能都无法正常使用~  所以长期看来，最后还是得升的。</p>
<ul>
<li><p>Gradle Plugin升级到<code>3.0.0</code>及以上，修改<code>project/build.gradle</code>文件：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// You need to add the following repository to download the</span></span><br><span class="line">        <span class="comment">// new plugin.</span></span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Gradle升级到<code>4.1</code>及以上，修改<code>project/gradle/gradle-wrapper.properties</code>文件：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">4.1</span>-all.zip</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="生成APK文件名属性outputFile变为只读"><a href="#生成APK文件名属性outputFile变为只读" class="headerlink" title="生成APK文件名属性outputFile变为只读"></a>生成APK文件名属性<code>outputFile</code>变为只读</h2><p>改完第一步后会提示如下报错：</p>
<blockquote>
<p>Error:(88, 0) Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=appDebug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl.</p>
</blockquote>
<p>之前改apk名字的代码类似：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</span><br><span class="line">        <span class="keyword">def</span> <span class="keyword">file</span> = output.outputFile</span><br><span class="line">        <span class="keyword">def</span> apkName = <span class="string">'xxx-xxx-xxx-signed.apk'</span></span><br><span class="line">        output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="keyword">file</span>.parent, apkName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于<code>outputFile</code>属性变为只读，需要进行如下修改，直接对<code>outputFileName</code>属性赋值即可：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.all &#123;</span><br><span class="line">        <span class="keyword">def</span> apkName = <span class="string">'xxx-xxx-xxx-signed.apk'</span></span><br><span class="line">        outputFileName = apkName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="依赖关键字的改变"><a href="#依赖关键字的改变" class="headerlink" title="依赖关键字的改变"></a>依赖关键字的改变</h2><ul>
<li>api: 对应之前的<code>compile</code>关键字，功能一模一样。会传递依赖，导致gradle编译的时候遍历整颗依赖树</li>
<li>implementation: 对应之前的<code>compile</code>，与<code>api</code>类似，关键区别是不会有依赖传递</li>
<li>compileOnly: 对应之前的<code>provided</code>，依赖仅用于编译期不会打包进最终的apk中</li>
<li>runtimeOnly: 对应之前的’apk’，与上面的<code>compileOnly</code>相反</li>
</ul>
<p>关于<code>implementation</code>与<code>api</code>的区别，主要在依赖是否会传递上。如：A依赖B，B依赖C，若使用<code>api</code>则A可以引用C，而<code>implementation</code>则不能引用。</p>
<p>这里更推荐用<code>implementation</code>，一是不会间接的暴露引用，清晰知道目前项目的依赖情况；二是可以提高编译时依赖树的查找速度，进而提升编译速度。详见SO的这个回答，讲得非常详细了：<a href="https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration" target="_blank" rel="noopener">https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration</a></p>
<h2 id="渠道需要声明flavor-dimensions"><a href="#渠道需要声明flavor-dimensions" class="headerlink" title="渠道需要声明flavor dimensions"></a>渠道需要声明flavor dimensions</h2><p>刚开始Sync的时候应该会报错：</p>
<blockquote>
<p>Error:All flavors must now belong to a named flavor dimension. Learn more at <a href="https://d.android.com/r/tools/flavorDimensions-missing-error-message.html" target="_blank" rel="noopener">https://d.android.com/r/tools/flavorDimensions-missing-error-message.html</a></p>
</blockquote>
<p>也就是每个flavor渠道都必须归属一个dimension维度，若只有一个维度，渠道中可以不写dimension属性，默认分配到该维度。直接添加一个默认的维度即可，如：<code>flavorDimensions &quot;dimension&quot;</code>。当然<code>flavorDimensions</code>也可以设置多个维度，详见官方实例：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Specifies two flavor dimensions.</span></span><br><span class="line">flavorDimensions <span class="string">"mode"</span>, <span class="string">"minApi"</span></span><br><span class="line"></span><br><span class="line">productFlavors &#123;</span><br><span class="line">    free &#123;</span><br><span class="line">        <span class="comment">// Assigns this product flavor to the "tier" flavor dimension. Specifying</span></span><br><span class="line">        <span class="comment">// this property is optional if you are using only one dimension.</span></span><br><span class="line">        dimension <span class="string">"mode"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">        dimension <span class="string">"mode"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minApi23 &#123;</span><br><span class="line">        dimension <span class="string">"minApi"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minApi18 &#123;</span><br><span class="line">        dimension <span class="string">"minApi"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="库多variant依赖方式的修改"><a href="#库多variant依赖方式的修改" class="headerlink" title="库多variant依赖方式的修改"></a>库多variant依赖方式的修改</h2><p><code>Gradle plugin 3.0.0+</code>之后引入了新的variant自动匹配机制，也就是说app的flavorDebug变体会自动匹配library的flavorDebug变体。</p>
<p>回顾一下旧的方式，如果app在某个variant下需要依赖library相应的类型，需要按照下面的方式声明依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// This is the old method and no longer works for local</span></span><br><span class="line">    <span class="comment">// library modules:</span></span><br><span class="line">    debugCompile <span class="keyword">project</span>(path: <span class="string">':library'</span>, configuration: <span class="string">'debug'</span>)</span><br><span class="line">    releaseCompile <span class="keyword">project</span>(path: <span class="string">':library'</span>, configuration: <span class="string">'release'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新的方式，gradle会自动感知并匹配对应的variant（前提是app与library中有对应的variant类型）：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// Instead, simply use the following to take advantage of</span></span><br><span class="line">    <span class="comment">// variant-aware dependency resolution. You can learn more about</span></span><br><span class="line">    <span class="comment">// the 'implementation' configuration in the section about</span></span><br><span class="line">    <span class="comment">// new dependency configurations.</span></span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':library'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="处理app与lib的依赖匹配问题"><a href="#处理app与lib的依赖匹配问题" class="headerlink" title="处理app与lib的依赖匹配问题"></a>处理app与lib的依赖匹配问题</h2><p>上面我们了解到新的variant匹配机制，但若app或library中不存在对应的variant类型呢？匹配将如何进行？下面列出了可能出现的几种情形：</p>
<h3 id="情形1：app中有某个build-type但library却木有"><a href="#情形1：app中有某个build-type但library却木有" class="headerlink" title="情形1：app中有某个build type但library却木有"></a>情形1：app中有某个build type但library却木有</h3><p>可以通过<code>matchingFallbacks</code>属性来设置回退策略，提供可能的匹配列表，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;&#125;</span><br><span class="line">        release &#123;&#125;</span><br><span class="line">        staging &#123;</span><br><span class="line">            <span class="comment">// Specifies a sorted list of fallback build types that the</span></span><br><span class="line">            <span class="comment">// plugin should try to use when a dependency does not include a</span></span><br><span class="line">            <span class="comment">// "staging" build type. You may specify as many fallbacks as you</span></span><br><span class="line">            <span class="comment">// like, and the plugin selects the first build type that's</span></span><br><span class="line">            <span class="comment">// available in the dependency.</span></span><br><span class="line">            matchingFallbacks = [<span class="string">'debug'</span>, <span class="string">'qa'</span>, <span class="string">'release'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若希望可以针对app的每个build type都执行相同的回退策略（例如我们大量的library只有一个release的build type），则可以使用批量指令：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buildTypes.all &#123; type -&gt;</span><br><span class="line">    type.matchingFallbacks = [<span class="string">'release'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若library中有某个build type但app却木有，不会对app有任何影响）</strong></p>
<h3 id="情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有："><a href="#情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有：" class="headerlink" title="情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有："></a>情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有：</h3><p>同样可以通过<code>matchingFallbacks</code>属性来设置回退策略，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">    <span class="comment">// Do not configure matchingFallbacks in the defaultConfig block.</span></span><br><span class="line">    <span class="comment">// Instead, you must specify fallbacks for a given product flavor in the</span></span><br><span class="line">    <span class="comment">// productFlavors block, as shown below.</span></span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">'tier'</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        paid &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// Because the dependency already includes a "paid" flavor in its</span></span><br><span class="line">            <span class="comment">// "tier" dimension, you don't need to provide a list of fallbacks</span></span><br><span class="line">            <span class="comment">// for the "paid" flavor.</span></span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// Specifies a sorted list of fallback flavors that the plugin</span></span><br><span class="line">            <span class="comment">// should try to use when a dependency's matching dimension does</span></span><br><span class="line">            <span class="comment">// not include a "free" flavor. You may specify as many</span></span><br><span class="line">            <span class="comment">// fallbacks as you like, and the plugin selects the first flavor</span></span><br><span class="line">            <span class="comment">// that's available in the dependency's "tier" dimension.</span></span><br><span class="line">            matchingFallbacks = [<span class="string">'demo'</span>, <span class="string">'trial'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若library中有某个flavor但app却木有，不会对app有任何影响）</strong></p>
<h3 id="情景3：library中有某个dimension维度，但app中却没有"><a href="#情景3：library中有某个dimension维度，但app中却没有" class="headerlink" title="情景3：library中有某个dimension维度，但app中却没有:"></a>情景3：library中有某个dimension维度，但app中却没有:</h3><p>可以通过<code>missingDimensionStrategy</code>属性来设置选择策略，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">    <span class="comment">// Specifies a sorted list of flavors that the plugin should try to use from</span></span><br><span class="line">    <span class="comment">// a given dimension. The following tells the plugin that, when encountering</span></span><br><span class="line">    <span class="comment">// a dependency that includes a "minApi" dimension, it should select the</span></span><br><span class="line">    <span class="comment">// "minApi18" flavor. You can include additional flavor names to provide a</span></span><br><span class="line">    <span class="comment">// sorted list of fallbacks for the dimension.</span></span><br><span class="line">    missingDimensionStrategy <span class="string">'minApi'</span>, <span class="string">'minApi18'</span>, <span class="string">'minApi23'</span></span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">'tier'</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// You can override the default selection at the product flavor</span></span><br><span class="line">            <span class="comment">// level by configuring another missingDimensionStrategy property</span></span><br><span class="line">            <span class="comment">// for the "minApi" dimension.</span></span><br><span class="line">            missingDimensionStrategy <span class="string">'minApi'</span>, <span class="string">'minApi23'</span>, <span class="string">'minApi18'</span></span><br><span class="line">        &#125;</span><br><span class="line">        paid &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明：其中<code>missingDimensionStrategy</code>属性的第一个值为dimension维度，后面的Strings为该维度下的渠道flavors。我们可以看下它的函数原型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, String requestedValue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, String... requestedValues)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, List&lt;String&gt; requestedValues)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若app中有某个dimension维度，但library中却没有，不会对app有任何影响）</strong></p>
<h3 id="情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理"><a href="#情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理" class="headerlink" title="情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理~"></a>情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理~</h3><p>说了这么多种场景，是不是快被绕晕了？其实诸如dimension的声明以及提供匹配回退策略都是为了实现精确的variant匹配。但是这么多的场景咋看之下还是比较晕，在遇到具体的业务依赖场景后再回来看这一块的内容，你会更加的有收获~</p>
<h2 id="Java8特性的支持"><a href="#Java8特性的支持" class="headerlink" title="Java8特性的支持"></a>Java8特性的支持</h2><p>升级到Gradle Plugin 3.0.0之后，一直被诟病的<code>Jack</code>已经被官方弃用了，取而代之的是最新的<code>desugar</code>方案。</p>
<p>若项目之前用了类似<code>retrolambda</code>或者<code>Jack</code>这种旧方案的话，会出现以下提示告诉你移除相关的代码：</p>
<blockquote>
<p>Warning:One of the plugins you are using supports Java 8 language features. To try the support built into the Android plugin, remove the following from your build.gradle: apply plugin: ‘me.tatarka.retrolambda’ To learn more, go to <a href="https://d.android.com/r/tools/java-8-support-message.html" target="_blank" rel="noopener">https://d.android.com/r/tools/java-8-support-message.html</a></p>
</blockquote>
<p>启用最新的<code>desugar</code>也非常简单，设置一下<code>sourceCompatibility</code>和<code>targetCompatibility</code>即可：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Configure only for each module that uses Java 8</span></span><br><span class="line">  <span class="comment">// language features (either in its source code or</span></span><br><span class="line">  <span class="comment">// through dependencies).</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>目前所支持Java8的特性有：</p>
<ul>
<li>Lambda expressions</li>
<li>Method References</li>
<li>Type Annotations</li>
<li>Default and static interface methods</li>
<li>Repeating annotations</li>
</ul>
<p><strong>（注意：stream及function包下的api只能在API level 24+以上才可以使用）</strong></p>
<p>禁用该特性也是分分钟的事情：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableDesugar=<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<p>官方文档：<br><a href="https://developer.android.com/studio/write/java8-support.html" target="_blank" rel="noopener">https://developer.android.com/studio/write/java8-support.html</a></p>
<h2 id="android-apt相关的异常"><a href="#android-apt相关的异常" class="headerlink" title="android-apt相关的异常"></a>android-apt相关的异常</h2><p>最后的最后很多同学会遇到以下关于<code>android-apt</code>的报错：</p>
<p>解决方法：</p>
<ul>
<li><p>移除<code>android-apt</code>相关的plugin，如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖中的<code>apt</code>改成<code>annotationProcessor</code>，如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">annotationProcessor <span class="string">'com.android.databinding:compiler:3.0.0'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有用到类似Realm这种第三方的plugin，确保升级到最新版试试（旧版的Realm用的还是<code>android-apt</code>），突然发现升级到最新版后api接口被改了，泪奔中…</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:4.2.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>还有更多的迁移变化，由于项目中还没涉及到，就先不写了，大家可以参考官方文档：<br><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[update nodejs and npm]]></title>
      <url>/2018/01/22/2018-01-22-update-nodejs-and-npm/</url>
      <content type="html"><![CDATA[<h1 id="升级node-js和npm"><a href="#升级node-js和npm" class="headerlink" title="升级node.js和npm"></a>升级node.js和npm</h1><p>一行命令搞定npm和node.js的升级，省去了重新编译和安装的过程。具体如下：</p>
<h2 id="升级node-js"><a href="#升级node-js" class="headerlink" title="升级node.js"></a>升级node.js</h2><p>npm中有一个模块叫做“n”，专门用来管理node.js版本的。<br>更新到最新的稳定版只需要在命令行中打下如下代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure></p>
<p>如需最新版本则用<code>n latest</code></p>
<p>当然，n后面也可以跟具体的版本号：<code>n v6.2.0</code></p>
<p>node.js升级就是这么简单。</p>
<h2 id="升级npm"><a href="#升级npm" class="headerlink" title="升级npm"></a>升级npm</h2><p>npm升级就更简单了，只需要在终端中输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@next</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[running Ubuntu GUI in Windows10]]></title>
      <url>/2018/01/22/2018-01-22-running-Ubuntu-GUI-in-Windows10/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>先安装显示图形界面的程序<a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener">vcxsrv</a><br>然后运行以下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo "export DISPLAY=:0.0" &gt;&gt; ~/.bashrc</span><br><span class="line">export DISPLAY=:0.0</span><br><span class="line">sudo apt-get install dbus --reinstall</span><br><span class="line">sudo sed -i 's/&lt;listen&gt;.*&lt;\/listen&gt;/&lt;listen&gt;tcp:host=localhost,port=0&lt;\/listen&gt;/' /etc/dbus-1/session.conf</span><br><span class="line">sudo apt-get install ubuntu-desktop</span><br><span class="line">sudo apt-get install unity</span><br><span class="line">sudo apt-get install compiz-core</span><br><span class="line">sudo apt-get install compizconfig-settings-manager</span><br></pre></td></tr></table></figure></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>先启动<code>XLaunch</code>,选择<code>只启动一个大窗口</code>,把<code>-1</code>改为<code>0</code><br>这时候的窗口是黑的,因为没有视频输入<br>然后运行命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compiz</span><br></pre></td></tr></table></figure></p>
<p>这时又视频输入了，切到<code>XLaunch</code>就可以浪了</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/0.png" width="700"><br><br><br><div class="image-caption">0.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/1.png" width="700"><br><br><br><div class="image-caption">1.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/2.png" width="700"><br><br><br><div class="image-caption">2.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/3.png" width="700"><br><br><br><div class="image-caption">3.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/4.png" width="700"><br><br><br><div class="image-caption">4.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/5.png" width="700"><br><br><br><div class="image-caption">5.png</div><br></div>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex（二）完全卸载]]></title>
      <url>/2017/12/28/2017-12-28-latex%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BD/</url>
      <content type="html"><![CDATA[<ol>
<li><code>sudo apt-get purge texlive*</code></li>
<li><code>rm -rf /usr/local/texlive/*</code> and <code>rm -rf ~/.texlive*</code></li>
<li><code>rm -rf /usr/local/share/texmf</code></li>
<li><code>rm -rf /var/lib/texmf</code></li>
<li><code>rm -rf /etc/texmf</code></li>
<li><code>sudo apt-get remove tex-common --purge</code></li>
<li><code>rm -rf ~/.texlive</code></li>
<li><code>find -L /usr/local/bin/ -lname /usr/local/texlive/*/bin/* | xargs rm</code></li>
</ol>
<p>This finds all the files in <code>/usr/local/bin</code> which point to a location within <code>/usr/local/texlive/*/bin/*</code> and removes them; because we’ve already deleted all of <code>/usr/local/texlive</code>, these are dead links. To see which files are being deleted, replace <code>xargs rm</code> with <code>xargs -t rm</code> (or tee off to a log file, or whatever).</p>
]]></content>
      
        <categories>
            
            <category> Latex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex（一）安装与配置]]></title>
      <url>/2017/12/12/2017-12-12-latex%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>2017年不到20天就到2018年了，才开始把latex用在写论文上。<br>原来只是学了用latex写公式，嫌latex的配置太麻烦，总想拿mardown结合latex搞事情，结果啥也没做到。<br>只好亲自入用latex编译论文的坑了。</p>
<p>latex就是为写论文带来便利。一定不能在安装和配置上花太多时间，不然就舍本逐末了。</p>
<h1 id="Linux-发行版下原版-TeX-Live-2017-的安装"><a href="#Linux-发行版下原版-TeX-Live-2017-的安装" class="headerlink" title="Linux 发行版下原版 TeX Live 2017 的安装"></a>Linux 发行版下原版 TeX Live 2017 的安装</h1><blockquote>
<p>在安装前，TeX Live 2017 的手册可以在 TUG 的 TeX Live 目录下找到：<a href="https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf" target="_blank" rel="noopener">https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf</a>。可以先阅读其中的安装部分。<br>在 Linux 上安装原版 TeX Live 2017，与在 Windows 等其他系统下安装并无区别。<br>可以从 CTAN 镜象下载 ISO 文件，然后挂载到一个目录下，运行里面的 install-tl 脚本进行安装；也可以在 CTAN 的网站上只下载 install-tl 脚本运行，在线安装。<br>install-tl 是一个 Perl 脚本，在绝大多数发行版下都可以直接运行。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="通过系统仓库"><a href="#通过系统仓库" class="headerlink" title="通过系统仓库"></a>通过系统仓库</h2><p>首先，对于 Arch 等滚动更新发行版的用户来说，推荐使用官方仓库来安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S texlive-most texlive-lang</span><br></pre></td></tr></table></figure>
<p>但是 <code>Debian/Ubuntu</code> 等的软件源往往会比较旧，为了体验最新的 <code>TeX Live</code> （虽然并没有什么卵差别），因此还是要用 <code>ISO</code> 映像安装。</p>
<h2 id="通过iso文件"><a href="#通过iso文件" class="headerlink" title="通过iso文件"></a>通过iso文件</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><a href="http://mirror.lzu.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">官方镜像: texlive2017.iso</a></li>
<li><a href="https://mirrors.xjtu.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">XJTU 镜像: texlive2017.iso</a>（校内用户请选择该源）</li>
<li><a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">USTC 镜像: texlive2017.iso</a>（校内用户请选择该源）</li>
</ul>
<p>镜像站目录里的 <code>texlive.iso</code> 就是最新的 <code>texlive2017.iso</code>。</p>
<p>下载完成后可以选择进行校验避免出错，具体来说镜像站目录里会有 <code>md5</code> 和 <code>sha512</code> 两个 <code>hash</code> 文件以及一个 <code>GPG</code> 签名文件。<code>TeX Live 2016</code> 以后调整了基础架构，安装时会校验包的完整性，如果有 <code>GPG</code> 还会校验⽹络更新的签名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GnuPG 校验签名，不懂请跳过，根据我的校验应当无误</span></span><br><span class="line">gpg --verify texlive2017.iso.sha512.asc</span><br><span class="line"><span class="comment"># MD5 校验</span></span><br><span class="line">md5sum texlive2017.iso</span><br><span class="line"><span class="comment"># SHA-512 校验</span></span><br><span class="line">sha512sum texlive2017.iso</span><br><span class="line"><span class="comment"># 与官方提供的 Hash 对比</span></span><br><span class="line">cat texlive2017.iso.md5 texlive2017.iso.sha512</span><br></pre></td></tr></table></figure>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>如果之前系统里已经装过 TeX Live，建议先删除。</p>
<p>对于 Linux 来说比较简单，只需要把安装目录（默认为 <code>/usr/local/texlive</code> 里的文件夹丢进 trash 即可），此外用户目录里修改过的一些配置也不要忘记。</p>
<p>如果想把有关依赖也卸载了，参考<a href="https://linxueyuanstdio.github.io/2017/12/latex-二-完全卸载/" target="_blank" rel="noopener">下一篇blog</a></p>
<p>如果是包管理安装的方式，例如 Ubuntu 用户，可以按照这样卸载：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge texlive*</span><br></pre></td></tr></table></figure>
<p>因为 TeX Live 里的安装脚本是 Perl 写的，如果稍后要用图形界面安装，需要更新下依赖。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">sudo apt-get install perl-tk</span><br><span class="line"><span class="comment"># CentOS/Fedora/RHEL</span></span><br><span class="line">sudo yum install perl-Tk</span><br><span class="line"><span class="comment"># Fedora 22+</span></span><br><span class="line">sudo dnf install perl-Tk</span><br><span class="line"><span class="comment"># OpenSUSE</span></span><br><span class="line">sudo zypper install perl-tk</span><br></pre></td></tr></table></figure>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>如果能借助软件或文管等方式解决映像挂载问题就直接跳过，否则就在下载好的镜像目录执行以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -o loop texlive2017.iso /mnt</span><br><span class="line"><span class="built_in">cd</span> /mnt</span><br><span class="line"><span class="comment"># 在 shell 里直接安装</span></span><br><span class="line">sudo ./install-tl</span><br><span class="line"><span class="comment"># 以 GUI 方式安装</span></span><br><span class="line">sudo ./install-tl -gui=perltk</span><br></pre></td></tr></table></figure>
<p>图形界面大概长这样：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/2.png" width="700"><br><br><br><div class="image-caption"><br>图形界面<br></div><br></div>

<p>默认是安装在 <code>/usr/local/texlive</code> 目录下，可以更改为 <code>/home</code> 等，否则无脑下一步即可。</p>
<p>根据硬件性能不同，安装过程一般不会短于 3 分钟。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/3.png" width="700"><br><br><br><div class="image-caption"><br>安装过程<br></div><br></div>

<p>安装结束后可以卸载映像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure>
<h3 id="通过命令行边下载边安装"><a href="#通过命令行边下载边安装" class="headerlink" title="通过命令行边下载边安装"></a>通过命令行边下载边安装</h3><p>去这里<a href="https://www.tug.org/texlive/" target="_blank" rel="noopener">https://www.tug.org/texlive/</a>找对应的安装包，我下载的是<code>install-tl-unx.tar.gz</code>。</p>
<p>下载完后，随便找个临时目录解压。</p>
<p>默认是安装在 <code>/usr/local/texlive/</code> 路径下，需要以超级用户权限安装，在解压下的目录运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl</span><br></pre></td></tr></table></figure></p>
<p>然后在文本界面下按提示进行交互式安装。当然，也可以安装在本地的用户路径下（如 ~/texlive/），这样就不再需要特殊权限。</p>
<p>如果是进行网络安装，默认会自动选择一个 CTAN 镜象。</p>
<p>这种方法在国内安装很慢，1h才下300多个文件。</p>
<p>国内往往需要用 <code>-repository</code> 选项手工指定镜象服务器地址，URL 地址需要指定到 <code>texlive/tlnet/</code> 路径下。</p>
<p>推荐用清华的镜象：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -repository http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/</span><br></pre></td></tr></table></figure></p>
<p>这种方法安装快，1h轻松安装完毕。</p>
<p>更方便的方式则是在图形界面下进行安装，此时需要确保系统安装了 <code>perl-tk</code> 等相关 Perl 图形界面库。运行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -gui</span><br></pre></td></tr></table></figure>
<p>即可按界面中的提示安装。或者运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -gui=wizard</span><br></pre></td></tr></table></figure>
<p>使用图形界面的安装向导，向导方式比前面的方式配置项少一些，但更容易使用。</p>
<p>不过没啥用。还是建议用清华镜像那个命令快一点，不需要这么花俏。</p>
<h1 id="修改环境变量，使编辑器等能找到texlive"><a href="#修改环境变量，使编辑器等能找到texlive" class="headerlink" title="修改环境变量，使编辑器等能找到texlive"></a>修改环境变量，使编辑器等能找到texlive</h1><p>对于 <code>bash</code> 等 <code>Bourne</code> 兼容的 <code>shell</code>，在用户目录的 <code>~/.bashrc</code> 文件中添加一些环境变量，具体路径由安装的位置确定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TeX Live 2017</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux</span><br><span class="line"><span class="comment"># 如果是32位最后改为'i386-linux'</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$&#123;MANPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/man</span><br><span class="line"><span class="built_in">export</span> INFOPATH=<span class="variable">$&#123;INFOPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/info</span><br></pre></td></tr></table></figure>
<p>如果是 <code>csh</code> 或 <code>tcsh</code>，则在 <code>~/.cshrc</code> 中添加内容。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TeX Live 2017</span></span><br><span class="line">setenv PATH /usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux:<span class="variable">$PATH</span></span><br><span class="line">setenv MANPATH /usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/man:<span class="variable">$MANPATH</span></span><br><span class="line">setenv INFOPATH /usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/info:<span class="variable">$INFOPATH</span></span><br></pre></td></tr></table></figure>
<p>对于 <code>Debian/Ubuntu</code> 用户，可以安装下我根据 官方说明 制作的 <code>texlive-local_2017-1_all.deb</code> 来申明下包管理里的依赖关系，避免版本冲突。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i texlive-local_2017-1_all.deb</span><br><span class="line"><span class="comment"># 显示安装的 TeX Live 版本信息</span></span><br><span class="line">dpkg -l | grep texlive-local</span><br></pre></td></tr></table></figure>
<p>至于其他发行版的 <code>texlive-dummy</code> 可去 <code>CTAN</code> 搜索。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>安装完成后，如果一切都设置好，那么运行以下一些简单测试命令，在当前目录应该会得到正确的输出，如果有命令报错，请自行解决。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 TeX 版本应为 3.14159265</span></span><br><span class="line">tex --version</span><br><span class="line"><span class="comment"># 处理一个基本文件，显示无法找到说明环境变量设置有误</span></span><br><span class="line">latex sample2e.tex</span><br><span class="line"><span class="comment"># 预览上一步得到的 dvi 文件</span></span><br><span class="line">xdvi sample2e.dvi</span><br><span class="line"><span class="comment"># pdfTeX 编译直接输出一份 PDF</span></span><br><span class="line">pdftex sample2e.tex</span><br><span class="line"><span class="comment"># 测试 XeTeX 能否访问系统字体</span></span><br><span class="line">xetex opentype-info.tex</span><br></pre></td></tr></table></figure>
<p>安装之后就可以使用 texdoc 命令阅读安装在本地手册了，对 TeX Live 不甚熟悉的用户最好运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">texdoc texlive-zh</span><br></pre></td></tr></table></figure>
<p>命令再次阅读 TeX Live 2017 的手册。</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>TeX Live 的更新工具 <code>tlmgr</code>（TeX Live Manager）图形性能比较差，特别是在 <code>Windows</code> 上，故推荐终端里直接更新。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tlmgr 只能在 root 权限下运行</span></span><br><span class="line">su</span><br><span class="line"><span class="comment"># 更新 tlmgr 宏包管理器</span></span><br><span class="line">tlmgr update -self</span><br><span class="line"><span class="comment"># 更新所有宏包</span></span><br><span class="line">tlmgr update -all</span><br><span class="line"><span class="comment"># 官方的 CTAN 镜像源速度可能比较慢，校内用户推荐换成 XJTU，支持 http 或 https</span></span><br><span class="line">tlmgr update -all -repository https://mirrors.xjtu.edu.cn/CTAN/systems/texlive/tlnet/</span><br></pre></td></tr></table></figure>
<p>如果钟爱图形界面，带上 <code>-gui</code> 参数即可。校内用户记得把默认软件包仓库改为 <code>XJTU</code> 的镜像源地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"><span class="comment"># 指定图形界面语言为中文</span></span><br><span class="line">tlmgr -gui -gui-lang zh_CN</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul>
<li>关于 Linux 上的编辑器，理论上只要是文本编辑器均可。由于可选择的方案太多，取决于个人的使用习惯，这里只推荐两个适合入门的自由软件 <code>Texmaker</code> 和 <code>TeXstudio</code>（fork 自前者）。</li>
<li>关于 Linux 上的字体，因为版权问题，所以 <code>Times New Roman</code> 和<code>宋体</code>就成了很多 LaTeX 初学者的困扰。</li>
</ul>
<p>推荐的办法是 <code>ctex</code> 宏集处理中文，使用 <code>Fandol 开源字体</code>，默认效果好于 Windows 的<code>中易宋体</code>，另外也可使用<code>思源宋体</code>；而西文和数学字符则用 <code>mathptmx</code> 或 <code>newtx</code> 宏包处理，使用开源的 <code>Nimbus Roman No9 L</code> 字体代替 <code>Times New Roman</code>，差别不大。</p>
<p>对字体有严格要求，可以复制 Windows 下的字体到 <code>~/.fonts</code> 目录下，记得用 <code>fc-cache -fsv</code> 命令更新下字体缓存。</p>
<p>关于 LaTeX 教程或者说手册，推荐两本 <a href="http://www.dralpha.com/zh/index.htm" target="_blank" rel="noopener">包太雷的 lnotes2</a> 和 <a href="https://github.com/CTeX-org/lshort-cn/" target="_blank" rel="noopener">lshort 中文版</a>。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>按照 TeX Live 手册的说明，安装之后，还有一些工作需要做：</p>
<ul>
<li>如果在安装时没有选择在系统目录为可执行文件创建符号链接，就需要手工修改 ~/.profile 文件设置 PATH 环境变量。<ul>
<li>export MANPATH=”/usr/local/texlive/2017/texmf-dist/doc/man”</li>
<li>export INFOPATH=”/usr/local/texlive/2017/texmf-dist/doc/info”</li>
<li>export PATH=”/usr/local/texlive/2017/bin/x86_64-linux:$PATH”</li>
</ul>
</li>
<li>XeTeX 会使用 fontconfig 库来通过字体名搜索字体。TeX Live 的字体目录默认并不在 fongconfig 的搜索目录之列，因此需要按文档要求，将 TeX Live 安装目录下的 <code>texmf-var/fonts/conf/texlive-fontconfig.conf</code> 文件，复制到 <code>/etc/fonts/conf.d/09-texlive.conf</code>，然后运行 fc-cache，以确保 XeTeX 能搜索到字体。否则，TeX Live 自带的 OpenType 字体就只能以字体文件名的方式调用，非常不便。此外这样也能让系统的其他软件使用 TeX Live 安装的字体。<ul>
<li>建议先复制到临时文件夹，改名后，再<code>sudo mv</code></li>
</ul>
</li>
<li><p>如果需要以字体文件名调用 Linux 系统安装的字体，例如使用 CJK 宏包调用来自 Windows 的字体，那么还需要修改 TeX Live 安装目录的 texmf.cnf 文件，在其中设置 OSFONTDIR 变量，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OSFONTDIR = ~/.fonts//;/usr/share/fonts//;/usr/share/fonts-droid//</span><br></pre></td></tr></table></figure>
<p>可能需要用<code>sudo gedit texmf.cnf</code>才修改得了。当然，这一步骤对多数用户的用处并不大。</p>
</li>
<li>在<code>/usr/bin/</code>目录下创建符号链接才能用pdflatex进行编译<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux/pdflatex pdflatex</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="安装LaTeX编辑器：TeXstudio"><a href="#安装LaTeX编辑器：TeXstudio" class="headerlink" title="安装LaTeX编辑器：TeXstudio"></a>安装LaTeX编辑器：TeXstudio</h1><p>去官网下deb包然后安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i XXX.deb</span><br></pre></td></tr></table></figure></p>
<p>打开TeXstudio，在倒数第二个选项(o)配置一下。首先配置语言为中文，然后编译器选pdflatex，其他的千万不要动。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/0.png" width="700"><br><br><br><div class="image-caption"><br>配置语言为中文<br></div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/1.png" width="700"><br><br><br><div class="image-caption"><br>编译器选pdflatex<br></div><br></div>

<h1 id="其他宏包"><a href="#其他宏包" class="headerlink" title="其他宏包"></a>其他宏包</h1><h2 id="XeLatex"><a href="#XeLatex" class="headerlink" title="XeLatex"></a>XeLatex</h2><p><code>XeLatex</code> 是 <code>texlive-xetex</code> 包的一部分，用来支持中文。<br>安装的话需要运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install texlive-xetex</span><br></pre></td></tr></table></figure></p>
<p>加上依赖有1G大小。</p>
]]></content>
      
        <categories>
            
            <category> Latex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web App 相关技术]]></title>
      <url>/2017/12/10/2017-12-10-web-app/</url>
      <content type="html"><![CDATA[<p>把技能点点在移动前端…</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>参考： <a href="http://junmer.github.io/mobile-dev-get-started/" target="_blank" rel="noopener">移动 Web 开发入门</a></li>
</ul>
<p>上面这个 slide 资料讲的非常好，算是一个入门的介绍吧。带我们建立基本的移动 web 开发知识体系和常见问题的实践。包含以下几个方面：</p>
<ul>
<li><p>基本概念</p>
<ul>
<li><p>Native</p>
<p>  本地应用 使用 Java \ Objective-C \ Swift 开发</p>
</li>
<li><p>WebApp</p>
<p>  网页应用 html5 开发</p>
</li>
<li><p>Hybrid</p>
<p>  混合应用 ooxx(native, web)</p>
</li>
<li><p>对比</p>
</li>
</ul>
</li>
<li><p>视觉</p>
<ul>
<li>设备的像素</li>
<li>文字单位使用 rem</li>
<li>viewport 属性</li>
<li>横屏竖屏</li>
<li>Flex 伸缩布局</li>
<li>响应式设计</li>
<li>软键盘</li>
<li>隐藏地址栏</li>
<li>苹果设备添加到主屏图标</li>
</ul>
</li>
<li>交互<ul>
<li>Touch</li>
<li>click 延迟</li>
<li>Scroll</li>
<li>Gestures(hammer –A javascript library for multi-touch gestures)</li>
<li>手指友好设计</li>
<li>HTML5 APIS（图像，摇动，声音等）</li>
</ul>
</li>
<li>实践<ul>
<li>屏蔽点击元素时的阴影</li>
<li>图像（像素、矢量图标、base64 减少请求、lazyload）</li>
<li>CSS3（合理使用渐变/圆角/阴影、代替 js 动画、translate3d、解决动画闪烁）</li>
<li>localStorage</li>
<li>避免（iframe、fixed + input）</li>
<li>SPA 或 Multi page</li>
<li>can I use</li>
<li>压缩合并</li>
<li>@G/3G 下建立连接时间</li>
</ul>
</li>
<li><p>调试</p>
<ul>
<li>浏览器自己的调试工具，模拟手机设备</li>
<li><p>weinre</p>
<p>  关于 weinre 我写了一篇博客介绍它。<a href="http://gaohaoyang.github.io/2015/06/18/weinre/" target="_blank" rel="noopener">Weinre –WebApp 调试工具</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h2><p>参考：</p>
<ul>
<li><a href="http://www.css88.com/archives/5480" target="_blank" rel="noopener">移动前端不得不了解的html5 head 头标签</a></li>
</ul>
<p>上面的链接详细的讲解了：</p>
<ul>
<li>DOCTYPE</li>
<li>charset</li>
<li>lang属性</li>
<li>优先使用 IE 最新版本和 Chrome</li>
<li>360 使用Google Chrome Frame</li>
<li>SEO 优化部分：页面标题<code>&lt;title&gt;</code>标签(head 头部必须)，页面关键词 keywords，页面描述内容 description，定义网页作者 author，网页搜索引擎索引方式</li>
<li><p>为移动设备添加 viewport</p>
<p>  <code>viewport</code> 可以让布局在移动浏览器上显示的更好。 通常会写</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> =<span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>content 参数：</p>
<ul>
<li>width viewport 宽度(数值/device-width)</li>
<li>height viewport 高度(数值/device-height)</li>
<li>initial-scale 初始缩放比例</li>
<li>maximum-scale 最大缩放比例</li>
<li>minimum-scale 最小缩放比例</li>
<li>user-scalable 是否允许用户缩放(yes/no)</li>
</ul>
</li>
<li><p>ios 设备，iOS 图标，Android，Windows 8</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span> <span class="comment">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明文档使用的字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面关键词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"name, email@gmail.com"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no, email=no"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-57x57-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-114x114-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-144x144-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"768x1004"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1536x2008"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1024x748"</span> <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"2048x1496"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x960"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x960.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x1136"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x1136.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"icon.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"/rss.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="页面切换动画"><a href="#页面切换动画" class="headerlink" title="页面切换动画"></a>页面切换动画</h2><ul>
<li><a href="http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html" target="_blank" rel="noopener">移动端重构系列13——页面切换</a></li>
<li><a href="http://www.w3cplus.com/css3/css3-3d-transform.html" target="_blank" rel="noopener">CSS3 3D Transform</a></li>
</ul>
<p>关于 HammerJS 的一个中文文档</p>
<ul>
<li><a href="http://www.cnblogs.com/iamlilinfeng/p/4239957.html" target="_blank" rel="noopener">Hammer.js</a></li>
</ul>
<hr>
<h2 id="CSS-Processing"><a href="#CSS-Processing" class="headerlink" title="CSS Processing"></a>CSS Processing</h2><blockquote>
<p>CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。</p>
<p>这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。</p>
</blockquote>
<p>这里我尝试使用了 Sass，果然很好用。下面记录几个 sass 教程。</p>
<ul>
<li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">Sass入门-w3cplus</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南-阮一峰</a></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要有 ruby 环境。</p>
<p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 源，然后添加淘宝的源 <a href="https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入" target="_blank" rel="noopener">https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入</a> sass 安装命令 <code>gem install sass</code> 了。</p>
<pre><code>$ gem sources --remove https://rubygems.org/
$ gem sources -a https://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install sass
</code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre><code>sass --watch style.scss:style.css --style expanded
</code></pre><hr>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong><code>rem</code></strong></p>
<p>字体单位使用 rem，用户在手机上设置了字体大小时，不会打破布局，造成混乱。</p>
<ul>
<li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="noopener">CSS3的REM设置字体大小-w3cplus</a></li>
<li><a href="http://www.iyunlu.com/view/css-xhtml/76.html" target="_blank" rel="noopener">响应式十日谈第一日：使用 rem 设置文字大小-一丝</a></li>
</ul>
<hr>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><blockquote>
<p>安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>WEB基本攻击大致可以分为三大类：“资源枚举”、“参数操纵” 和 “其它攻击”</p>
<ul>
<li>资源枚举</li>
<li>参数操纵<ul>
<li>SQL注入</li>
<li>XPath注入</li>
<li>cgi命令执行</li>
<li>XXS（cross-site scripting跨域脚本攻击）其重点是“跨域”和“客户端执行”<ul>
<li>Reflected XSS ——基于反射的XSS攻击。主要依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击。</li>
<li>DOM-based or local XSS——基于DOM或本地的XSS攻击</li>
<li>Stored XSS——基于存储的XSS攻击</li>
</ul>
</li>
<li>会话劫持</li>
</ul>
</li>
<li>其它攻击<ul>
<li>CSRF（cross-site request forgery）跨站请求伪造</li>
<li>钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</li>
<li>拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</li>
</ul>
</li>
</ul>
<h3 id="关于-XSS"><a href="#关于-XSS" class="headerlink" title="关于 XSS"></a>关于 XSS</h3><blockquote>
<p><strong>跨网站脚本</strong>（Cross-site scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>
<p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>
<p>——维基百科</p>
</blockquote>
<h3 id="XSS-防护"><a href="#XSS-防护" class="headerlink" title="XSS 防护"></a>XSS 防护</h3><ol>
<li><p>浏览器解析顺序：</p>
<p> HTML Parser &gt;&gt; CSS Parser &gt;&gt; JavaScript Parser</p>
</li>
<li><p>浏览器解码顺序：</p>
<p> HTML Decoding &gt;&gt; URL Decoding &gt;&gt; JavaScript Decoding</p>
</li>
<li><p>具体的防护方式：</p>
<ul>
<li>验证输入并且基于语境和按照正确的顺序转义不可信数据<ul>
<li>HTML 中的字符串</li>
<li>HTML 属性中的字符串</li>
<li>事件句柄属性和 JavaScript 中的字符串</li>
<li>HTML 属性中的 URL 路径</li>
<li>HTML 风格属性和 CSS 中的字符串</li>
<li>JavaScript 中的 HTML</li>
</ul>
</li>
<li>始终遵循白名单优于黑名单的做法</li>
<li>使用 UTF-8 为默认的字符编码以及设置 content 为 text/html</li>
<li>不要将用户可以控制的文本放在<meta>标签前。通过使用不同的字符集注射可以导致 XSS。</li>
<li>使用 &lt;!DOCTYPE html&gt;</li>
<li>使用推荐的 HTTP 响应头进行 XSS 防护</li>
<li>防止 CRLF 注入/HTTP 响应拆分</li>
<li>禁止 TRACE 和其他非必要方法</li>
</ul>
</li>
</ol>
<p>对于 innerHTML 的方式输出的，我们可以采用如下的方式转码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转码 XSS 防护</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125; str 用户输入的字符串</span></span><br><span class="line"><span class="comment"> * @return &#123;String&#125;     转码后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#x27;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/\//g</span>, <span class="string">"&amp;#x2f;"</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://www.cnblogs.com/vajoy/p/4176908.html" target="_blank" rel="noopener">浅谈WEB安全性（前端向）</a></li>
<li><a href="http://www.freebuf.com/articles/web/40520.html" target="_blank" rel="noopener">XSS的原理分析与解剖</a></li>
<li><a href="http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/" target="_blank" rel="noopener">原创翻译：给开发者的终极XSS防护备忘录</a></li>
</ul>
<hr>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote>
<p>在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。</p>
<p>但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。</p>
<p>整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。</p>
</blockquote>
<p>这里就是网页的打开速度，如果你的网页打开速度很慢，那么一定会有用户的流失。所以性能优化很重要。</p>
<ul>
<li>网页内容<ul>
<li>减少http请求次数</li>
<li>减少DNS查询次数</li>
<li>避免页面跳转</li>
<li>缓存Ajax</li>
<li>延迟加载</li>
<li>提前加载</li>
<li>减少DOM元素数量</li>
<li>根据域名划分内容</li>
<li>减少iframe数量</li>
<li>避免404</li>
</ul>
</li>
<li>服务器<ul>
<li>使用CDN</li>
<li>添加Expires 或Cache-Control报文头</li>
<li>Gzip压缩传输文件</li>
<li>配置ETags</li>
<li>尽早flush输出</li>
<li>使用GET Ajax请求</li>
<li>避免空的图片src</li>
</ul>
</li>
<li>Cookie<ul>
<li>减少Cookie大小</li>
<li>页面内容使用无cookie域名</li>
</ul>
</li>
<li>CSS<ul>
<li>将样式表置顶</li>
<li>避免CSS表达式</li>
<li>用\<link\>代替@import</link\></li>
<li>避免使用Filters</li>
</ul>
</li>
<li>Javascript<ul>
<li>将脚本置底</li>
<li>使用外部Javascirpt和CSS文件</li>
<li>精简Javascript和CSS</li>
<li>去除重复脚本</li>
<li>减少DOM访问</li>
<li>使用智能事件处理</li>
</ul>
</li>
<li>图片<ul>
<li>优化图像</li>
<li>优化CSS Sprite</li>
<li>不要在HTML中缩放图片</li>
<li>使用小且可缓存的favicon.ico</li>
</ul>
</li>
<li>移动客户端<ul>
<li>保持单个内容小于25KB</li>
<li>打包组建成符合文档</li>
</ul>
</li>
</ul>
<p>具体细节参考文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html" target="_blank" rel="noopener">毫秒必争，前端网页性能最佳实践</a></li>
</ul>
<p>我在 ToDo 这个任务中主要使用了 CDN 来加载静态资源。比如我使用了 <a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源公共库</a>。引用了里面的 fontawesome，速度果然比在 GitHub 仓库里快很多。下一步是压缩我自己写的静态资源。</p>
<p>其他参考资料：</p>
<ul>
<li><a href="http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers#section:maximising-parallelisation" target="_blank" rel="noopener">给网页设计师和前端开发者看的前端性能优化</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/?p=3152" target="_blank" rel="noopener">梳理：提高前端性能方面的处理以及不足</a></li>
<li><a href="http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html" target="_blank" rel="noopener">css sprite原理优缺点及使用</a></li>
<li><a href="http://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/" target="_blank" rel="noopener">CSS Sprites：鱼翅还是三鹿？</a></li>
<li><a href="http://www.cnblogs.com/leefreeman/p/3998757.html" target="_blank" rel="noopener">大型网站的灵魂——性能</a></li>
<li><a href="http://web.jobbole.com/35339/" target="_blank" rel="noopener">编写高效的 CSS 选择器</a></li>
</ul>
<hr>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote>
<p>对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。</p>
</blockquote>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p>
<p>根据AMD规范，我们可以使用 <code>define</code> 定义模块，使用 <code>require</code> 调用模块。</p>
<p>目前，通行的 js 模块规范主要有两种：<code>CommonJS</code> 和 <code>AMD</code>。</p>
<h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p>AMD 即 Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是 CommonJS</p>
<p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<p>详细 API 如下：</p>
<ul>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">AMD（中文版）</a>)</li>
</ul>
<hr>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。Node.JS 首先采用了 js 模块化的概念。</p>
<p>根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 global 对象的属性。</p>
<p>输出模块变量的最好方法是使用 module.exports 对象。</p>
<hr>
<h3 id="为什么要用-requireJS"><a href="#为什么要用-requireJS" class="headerlink" title="为什么要用 requireJS"></a>为什么要用 requireJS</h3><p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>RequireJS就是为了解决这两个问题而诞生的：</p>
<blockquote>
<p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>
</blockquote>
<h4 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h4><ul>
<li><a href="http://requirejs.org/" target="_blank" rel="noopener">requireJS 官网</a></li>
<li><a href="http://www.requirejs.cn/" target="_blank" rel="noopener">requireJS 中文网</a></li>
</ul>
<hr>
<h3 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h3><p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p>
<blockquote>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
</blockquote>
<ul>
<li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD 模块定义规范</a></li>
</ul>
<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p>
<blockquote>
<p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）</p>
</blockquote>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程（一）：模块的写法–阮一峰</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="noopener">Javascript模块化编程（二）：AMD规范</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="noopener">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="http://segmentfault.com/a/1190000000733959" target="_blank" rel="noopener">详解 JavaScript 模块开发</a></li>
<li><a href="http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html?utm_source=tuicool" target="_blank" rel="noopener">浅谈模块化的JavaScript</a></li>
<li><a href="http://div.io/topic/430" target="_blank" rel="noopener">再谈 SeaJS 与 RequireJS 的差异</a></li>
<li>玩转AMD系列 by erik@EFE<ul>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-preface/" target="_blank" rel="noopener">玩转AMD - 写在前面</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-what/" target="_blank" rel="noopener">玩转AMD - 设计思路</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-how/" target="_blank" rel="noopener">玩转AMD - 应用实践</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-loader/" target="_blank" rel="noopener">玩转AMD - Loader</a>   </li>
</ul>
</li>
</ul>
<hr>
<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><blockquote>
<p>业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。</p>
<p>在EFE日常工作中，我们是基于EDP，完成项目开发过程中的项目构建、包管理、调试、单测、静态检测、打包、压缩、优化、项目部署等一系列所有工作。</p>
</blockquote>
<p>注：</p>
<p>如果网络不好，可以使用 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>。</p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://div.io/topic/439" target="_blank" rel="noopener">前端工程与模块化框架</a></li>
<li><a href="http://mweb.baidu.com/p/baidusearch-front-end-road.html" target="_blank" rel="noopener">手机百度前端工程化之路</a></li>
<li><a href="http://www.infoq.com/cn/articles/yunlong-on-fis" target="_blank" rel="noopener">对话百度前端工程师张云龙：F.I.S与前端工业化</a></li>
<li><a href="https://github.com/ecomfe/edp" target="_blank" rel="noopener">EDP</a></li>
<li><a href="http://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html" target="_blank" rel="noopener">Grunt教程——初涉Grunt</a></li>
<li><a href="http://www.open-open.com/lib/view/open1417068223049.html" target="_blank" rel="noopener">gulp入门指南</a></li>
<li><a href="http://www.w3ctech.com/topic/134" target="_blank" rel="noopener">Gulp开发教程（翻译）</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp 中文网</a></li>
<li><a href="https://github.com/ericdum/mujiang.info/issues/6" target="_blank" rel="noopener">npm的package.json中文文档</a></li>
</ul>
<hr>
<h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><p>在任务三中，做了一个 PC 端的 ToDo 应用。任务四是将它优化，以适应移动端设备。</p>
<h3 id="ToDo-WebApp-Version"><a href="#ToDo-WebApp-Version" class="headerlink" title="ToDo WebApp Version"></a>ToDo WebApp Version</h3><ul>
<li><a href="https://github.com/baidu-ife/ife/tree/master/task/task0004" target="_blank" rel="noopener">任务四要求</a></li>
<li><a href="https://github.com/Gaohaoyang/ToDo-WebApp" target="_blank" rel="noopener">源代码</a></li>
<li><a href="http://gaohaoyang.github.io/ToDo-WebApp/" target="_blank" rel="noopener">在线 demo</a></li>
<li><p>手机查看 ↓ 二维码 ↓</p>
<p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/task4-code-todoWebApp.png" alt="todoWebApp"></p>
</li>
<li><p><a href="http://gaohaoyang.github.io" target="_blank" rel="noopener">我的博客 HyG</a></p>
</li>
</ul>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><ul>
<li><p><strong>数据存储</strong></p>
<p>  以 JSON 模拟数据表的形式存储于 LocalStorage 中</p>
<pre><code>使用数据库的思想，构建3张表。
cateJson 分类
childCateJson 子分类
taskJson 任务

分类表 cate
----------------------
id* | name | child(FK)
----------------------

子分类表 childCate
--------------------------------
id* | pid(FK) | name | child(FK)
--------------------------------

任务表 task
----------------------------------------------
id* | pid(FK) | finish | name | date | content
----------------------------------------------
</code></pre></li>
<li><p><strong>使用 <code>Sass</code> 重构了 CSS 代码</strong></p>
<p>  使用分块、继承等方式，使得代码更加清晰明了。</p>
</li>
<li><p><strong>响应式布局</strong></p>
<p>  针对手机端细节做了很多调整，更符合手机上的视觉交互习惯。</p>
</li>
<li><p><strong>加入页面切换效果</strong></p>
<p>  使用 <code>translate3d()</code>，纯 CSS3 切换动画效果。</p>
</li>
<li><p><strong>处理了 XSS 防护</strong></p>
<p>  对可能造成破坏的字符进行转码。</p>
</li>
<li><p><strong>性能优化</strong></p>
<p>  使用 CDN 处理静态资源 fontAwesome，压缩静态资源等</p>
</li>
<li><p><strong>模块化</strong></p>
<p>  使用 requireJS 模块化 JavaScript 代码。重构 JavaScript 代码。优化之前写的耦合性高的绑定事件，重新绑定事件，降低耦合性。期间根据具体需求重写了事件代理的代码。</p>
</li>
<li><p><strong>前端工程化</strong></p>
<p>  使用 gulp，自动编译 Sass，压缩 CSS 和 JavaScript 代码。并且配置了自动流程。</p>
</li>
</ul>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="webkit-tap-highlight-color-属性"><a href="#webkit-tap-highlight-color-属性" class="headerlink" title="-webkit-tap-highlight-color 属性"></a><code>-webkit-tap-highlight-color</code> 属性</h3><p>感谢 <a href="https://github.com/fiona23" target="_blank" rel="noopener">fiona</a> 指出。</p>
<p>safari移动端点击的时候会闪一下加上 <code>-webkit-tap-highlight-color: transparent;</code> 就不会闪了。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.css88.com/webkit/-webkit-tap-highlight-color/" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code>  css88</a></li>
<li><a href="http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code> 属性</a></li>
</ul>
<hr>
<h3 id="textarea-标签-disabled-颜色"><a href="#textarea-标签-disabled-颜色" class="headerlink" title="textarea 标签 disabled 颜色"></a>textarea 标签 disabled 颜色</h3><ul>
<li><p>为什么用 disabled 属性？</p>
<p>  因为我发现仅仅使用 readonly 属性，在 IE 下是显示光标的。于是使用 disabled。</p>
</li>
<li><p>出现的问题</p>
<p>  各家浏览器对于 disabled 属性有自己的样式设定，比如 IE 下是灰色的。苹果设备下也是。改变这些样式的方法也不是统一的。如果要兼容 Safari 必须加上</p>
</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">-webkit-text-fill-<span class="attribute">color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">-webkit-<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>于是最终代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 1);</span><br><span class="line">    <span class="attribute">-webkit-opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参考：<a href="http://stackoverflow.com/a/4648315" target="_blank" rel="noopener">Disabled input text color 中的评论</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> Sass </tag>
            
            <tag> 移动端 </tag>
            
            <tag> XSS </tag>
            
            <tag> AMD </tag>
            
            <tag> requireJS </tag>
            
            <tag> CommonJS </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> WebApp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Tips]]></title>
      <url>/2017/12/09/2017-12-9-git-tips/</url>
      <content type="html"><![CDATA[<h2 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h2><h3 id="克隆库"><a href="#克隆库" class="headerlink" title="克隆库"></a>克隆库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/php/php-src.git</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/php/php-src.git <span class="comment"># 只抓取最近的一次 commit</span></span><br></pre></td></tr></table></figure>
<h2 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h2><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline filename <span class="comment"># 一行显示</span></span><br><span class="line">git show xxxx <span class="comment"># 查看某次修改</span></span><br></pre></td></tr></table></figure>
<h3 id="标签功能"><a href="#标签功能" class="headerlink" title="标签功能"></a>标签功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="comment"># 显示所有标签</span></span><br><span class="line">git tag -l <span class="string">'v1.4.2.*'</span> <span class="comment"># 显示 1.4.2 开头标签</span></span><br><span class="line">git tag v1.3 <span class="comment"># 简单打标签   </span></span><br><span class="line">git tag -a v1.2 9fceb02 <span class="comment"># 后期加注标签</span></span><br><span class="line">git tag -a v1.4 -m <span class="string">'my version 1.4'</span> <span class="comment"># 增加标签并注释， -a 为 annotated 缩写</span></span><br><span class="line">git show v1.4 <span class="comment"># 看某一标签详情</span></span><br><span class="line">git push origin v1.5 <span class="comment"># 分享某个标签</span></span><br><span class="line">git push origin --tags <span class="comment"># 分享所有标签</span></span><br></pre></td></tr></table></figure>
<h3 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset 9fceb02 <span class="comment"># 保留修改</span></span><br><span class="line">git reset 9fceb02 --hard <span class="comment"># 删除之后的修改</span></span><br></pre></td></tr></table></figure>
<h3 id="取消文件的修改"><a href="#取消文件的修改" class="headerlink" title="取消文件的修改"></a>取消文件的修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- a.php <span class="comment">#  取消单个文件</span></span><br><span class="line">git checkout -- <span class="comment"># 取消所有文件的修改</span></span><br></pre></td></tr></table></figure>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm a.php  <span class="comment"># 直接删除文件</span></span><br><span class="line">git rm --cached a.php <span class="comment"># 删除文件暂存状态</span></span><br></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv a.php ./<span class="built_in">test</span>/a.php</span><br></pre></td></tr></table></figure>
<h3 id="查看文件修改"><a href="#查看文件修改" class="headerlink" title="查看文件修改"></a>查看文件修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff          <span class="comment"># 查看未暂存的文件更新 </span></span><br><span class="line">git diff --cached <span class="comment"># 查看已暂存文件的更新</span></span><br></pre></td></tr></table></figure>
<h3 id="暂存和恢复当前staging"><a href="#暂存和恢复当前staging" class="headerlink" title="暂存和恢复当前staging"></a>暂存和恢复当前staging</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment"># 暂存当前分支的修改</span></span><br><span class="line">git stash apply <span class="comment"># 恢复最近一次暂存</span></span><br><span class="line">git stash list <span class="comment"># 查看暂存内容</span></span><br><span class="line">git stash apply stash@&#123;2&#125; <span class="comment"># 指定恢复某次暂存内容</span></span><br><span class="line">git stash drop stash@&#123;0&#125; <span class="comment"># 删除某次暂存内容</span></span><br></pre></td></tr></table></figure>
<h3 id="修改-commit-历史纪录"><a href="#修改-commit-历史纪录" class="headerlink" title="修改 commit 历史纪录"></a>修改 commit 历史纪录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 0580eab8</span><br></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop <span class="comment"># 只创建分支</span></span><br><span class="line">git checkout -b master develop <span class="comment"># 创建并切换到 develop 分支</span></span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master <span class="comment"># 切换到 master 分支</span></span><br><span class="line">git merge --no-ff develop <span class="comment"># 把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录</span></span><br><span class="line">git rebase develop <span class="comment"># rebase 当前分支到 develop</span></span><br><span class="line">git branch -d develop <span class="comment"># 删除 develop 分支</span></span><br></pre></td></tr></table></figure>
<h3 id="克隆远程分支"><a href="#克隆远程分支" class="headerlink" title="克隆远程分支"></a>克隆远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r <span class="comment"># 显示所有分支，包含远程分支</span></span><br><span class="line">git checkout origin/android</span><br></pre></td></tr></table></figure>
<h3 id="修复develop上的合并错误"><a href="#修复develop上的合并错误" class="headerlink" title="修复develop上的合并错误"></a>修复develop上的合并错误</h3><ol>
<li>将merge前的commit创建一个分之，保留merge后代码</li>
<li>将develop <code>reset --force</code>到merge前，然后<code>push --force</code></li>
<li>在分支中rebase develop</li>
<li>将分支push到服务器上重新merge</li>
</ol>
<h3 id="强制更新到远程分支最新版本"><a href="#强制更新到远程分支最新版本" class="headerlink" title="强制更新到远程分支最新版本"></a>强制更新到远程分支最新版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br><span class="line">git submodule update --remote -f</span><br></pre></td></tr></table></figure>
<h2 id="Submodule使用"><a href="#Submodule使用" class="headerlink" title="Submodule使用"></a>Submodule使用</h2><h3 id="克隆带submodule的库"><a href="#克隆带submodule的库" class="headerlink" title="克隆带submodule的库"></a>克隆带submodule的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/chaconinc/MainProject</span><br></pre></td></tr></table></figure>
<h3 id="clone主库后再去clone-submodule"><a href="#clone主库后再去clone-submodule" class="headerlink" title="clone主库后再去clone submodule"></a>clone主库后再去clone submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chaconinc/MainProject</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><p>Git的全局设置在<code>~/.gitconfig</code>中，单独设置在<code>project/.git/config</code>下。</p>
<p>忽略设置全局在<code>~/.gitignore_global</code>中，单独设置在<code>project/.gitignore</code>下。</p>
<h3 id="设置-commit-的用户和邮箱"><a href="#设置-commit-的用户和邮箱" class="headerlink" title="设置 commit 的用户和邮箱"></a>设置 commit 的用户和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"xx"</span></span><br><span class="line">git config user.email <span class="string">"xx@xx.com"</span></span><br></pre></td></tr></table></figure>
<p>或者直接修改config文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = xxx</span><br><span class="line">    email = xxx@xxx.com</span><br></pre></td></tr></table></figure>
<h3 id="查看设置项"><a href="#查看设置项" class="headerlink" title="查看设置项"></a>查看设置项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h3 id="设置git终端颜色"><a href="#设置git终端颜色" class="headerlink" title="设置git终端颜色"></a>设置git终端颜色</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.branch auto</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（三）代数方法求PageRank]]></title>
      <url>/2017/12/08/2017-12-08-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E4%BB%A3%E6%95%B0%E6%96%B9%E6%B3%95%E6%B1%82PageRank/</url>
      <content type="html"><![CDATA[<p>本文结合实例介绍如何用代数方法求PageRank。</p>
<p>博文<a href="https://linxueyuanstdio.github.io/2017/12/%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E4%B8%80-PageRank/" target="_blank" rel="noopener">《网页排序算法（一）PageRank》</a>介绍了PageRank，计算PageRank可以用迭代的方法也可以用代数的方法，其背后的数学基本运算是一样的，即：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d \sum</em>{p_j\in B(p_i)} \frac{PR(p_j)}{L(p_j)}$$</p>
<p>下文结合图1介绍如何用代数方法求PageRank。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia)</div><br></div>

<p>为了便于讨论，将图1下方的节点分别标上G, H, I, J, K，如下图所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/1.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 2: Draw Fig. 1 in NetworkX.<br></div><br></div>

<h1 id="代数方法"><a href="#代数方法" class="headerlink" title="代数方法"></a>代数方法</h1><p>根据1中的等式，把所有节点都放在一块，可以得到：</p>
<p>$$\begin{bmatrix}<br>PR(p_1) \<br>PR(p_2) \<br>\vdots \<br>PR(p_3)<br>\end{bmatrix} =<br>\begin{bmatrix}<br>{(1-d)/ N} \<br>{(1-d) / N} \<br>\vdots \<br>{(1-d) / N}<br>\end{bmatrix}</p>
<ul>
<li>d<br>\begin{bmatrix}<br>\ell(p_1,p_1) &amp; \ell(p_1,p_2) &amp; \cdots &amp; \ell(p_1,p_N) \<br>\ell(p_2,p_1) &amp; \ddots &amp;  &amp; \vdots \<br>\vdots &amp; &amp; \ell(p_i,p_j) &amp; \<br>\ell(p_N,p_1) &amp; \cdots &amp; &amp; \ell(p_N,p_N)<br>\end{bmatrix}<br>\begin{bmatrix}<br>PR(p_1) \<br>PR(p_2) \<br>\vdots \<br>PR(p_3)<br>\end{bmatrix}$$</li>
</ul>
<p>上述等式可以缩写为：</p>
<p>$$\mathbf{R} = d \mathcal{M}\mathbf{R} + \frac{1-d}{N} \mathbf{1}.       (**)$$</p>
<p>其中，1为N维的列向量，所有元素皆为1。以图1为例，该列向量为，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">N = len(G.nodes())      <span class="comment"># N = 11</span></span><br><span class="line">column_vector = np.ones((N, <span class="number">1</span>), dtype=np.int)</span><br><span class="line"> </span><br><span class="line">[[<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p>
<h2 id="Adjacency-function"><a href="#Adjacency-function" class="headerlink" title="Adjacency function"></a>Adjacency function</h2><p>邻接函数（adjacency function）$$\ell(p_1,p_2)$$组成了矩阵M，</p>
<p>$$\mathcal{M}_{ij} =\ell(pi,pj) =  \begin{cases} 1 /L(p_j) , &amp; \mbox{if }j\mbox{ links to }i\ L(pj)是指从pj链出去的网页数目\ 0, &amp; \mbox{otherwise} \end{cases}$$</p>
<p>这样矩阵每一行乘以R，就得到了新的PR值，比如第二行（图1的节点B），</p>
<p>$$\begin{align}<br>M_{2j}    &amp;=\ell(p_2,p_1)⋅PR(p_2)+\ell(p_2,p_2)⋅PR(p_2)+⋯+\ell(p_2,p_N)⋅PR(p_2)\<br>&amp;=0 (‘A’)+0 (‘B’)+1 (‘C’)+12 (‘D’)+13 (‘E’)+12 (‘F’) +12 (‘G’)+12 (`H’)+12 (‘I’)+0 (‘J’)+0 (‘K’)<br> \end{align}$$</p>
<p>以节点<code>G</code>为例，<code>G</code>给<code>B</code>和<code>E</code>投票，所以<code>B</code>得到<code>1/2</code>。</p>
<p>矩阵<code>M</code>每一列加起来都是<code>1</code>（值得注意的是，对于没有出链的节点，列加起来等于0，比如图1的节点<code>A</code>），即<br>$$\sum_{i=1}^{N}\ell(p_i,p_j)=1$$。事实上，M是一个转移矩阵transition matrix（也叫概率矩阵probability matrix，马尔可夫矩阵Markov matrix）。因此，PageRank是eigenvector centrality的一个变体。</p>
<h2 id="矩阵M"><a href="#矩阵M" class="headerlink" title="矩阵M"></a>矩阵M</h2><p>事实上，M可以被看成normalized的图邻接矩阵，即：</p>
<p>$$M=(K^{−1}A)^T$$<br>其中，A为图的邻接矩阵，以图1为例，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get adjacency matrix</span></span><br><span class="line">nodelist = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>]  <span class="comment"># sorted(G.nodes())</span></span><br><span class="line">A = nx.to_numpy_matrix(G, nodelist)</span><br><span class="line"> </span><br><span class="line">  <span class="string">'A'</span> <span class="string">'B'</span> <span class="string">'C'</span> <span class="string">'D'</span> <span class="string">'E'</span> <span class="string">'F'</span> <span class="string">'G'</span> <span class="string">'H'</span> <span class="string">'I'</span> <span class="string">'J'</span> <span class="string">'K'</span></span><br><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure></p>
<p>A是对角矩阵，对角线上的元素是对应节点的出度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nodelist = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>]  <span class="comment"># sorted(G.nodes())</span></span><br><span class="line">list_outdegree = map(operator.itemgetter(<span class="number">1</span>), sorted(G.out_degree().items()))</span><br><span class="line">K = np.diag(list_outdegree)</span><br><span class="line"> </span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p>
<p>K的逆矩阵$$K^{-1}$$为，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">K_inv = np.linalg.pinv(K)</span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>  ]]</span><br></pre></td></tr></table></figure></p>
<p>那么，根据公式$$M=(K^{−1}A)^T$$就可以求得M，如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">M = (K_inv * A).transpose()</span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.5</span>   <span class="number">0.33</span>  <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">1.</span>    <span class="number">1.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]]</span><br></pre></td></tr></table></figure></p>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>R是2.1等式的特征向量（eigenvector），求解等式得：</p>
<p>$$\mathbf{R} =  (\mathbf{I}-d \mathcal{M})^{-1}  \frac{1-d}{N}  \mathbf{1},$$</p>
<p>其中$$\mathbf{I}$$是单位矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="number">0.85</span></span><br><span class="line">I = np.identity(N)</span><br><span class="line">R = np.linalg.pinv(I - d*M) * (<span class="number">1</span>-d)/N * column_vector </span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.028</span>]</span><br><span class="line"> [ <span class="number">0.324</span>]</span><br><span class="line"> [ <span class="number">0.289</span>]</span><br><span class="line"> [ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.068</span>]</span><br><span class="line"> [ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]]</span><br></pre></td></tr></table></figure></p>
<p>咦，结果怎么跟图1不一样。得到R需要normalized，如此，所有节点的PR加起来才能等于1。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">R = R/sum(R)    <span class="comment"># normalized R, so that page ranks sum to 1.</span></span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.384</span>]</span><br><span class="line"> [ <span class="number">0.343</span>]</span><br><span class="line"> [ <span class="number">0.039</span>]</span><br><span class="line"> [ <span class="number">0.081</span>]</span><br><span class="line"> [ <span class="number">0.039</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]]</span><br></pre></td></tr></table></figure></p>
<p>用NetworkX作出来的图，是这样的：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/2.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 3: PageRanks for a simple network<br></div><br></div>

<h1 id="Python源代码"><a href="#Python源代码" class="headerlink" title="Python源代码"></a>Python源代码</h1><p>NetworkX实现了PageRank的代数计算方法<code>nx.pagerank_numpy</code>，源代码在这里。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagerank_numpy</span><span class="params">(G, alpha=<span class="number">0.85</span>, personalization=None, weight=<span class="string">'weight'</span>, dangling=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return the PageRank of the nodes in the graph.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> len(G) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    M = google_matrix(G, alpha, personalization=personalization,</span><br><span class="line">                      weight=weight, dangling=dangling)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># use numpy LAPACK solver</span></span><br><span class="line">    eigenvalues, eigenvectors = np.linalg.eig(M.T)</span><br><span class="line">    ind = eigenvalues.argsort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># eigenvector of largest eigenvalue at ind[-1], normalized</span></span><br><span class="line">    largest = np.array(eigenvectors[:, ind[<span class="number">-1</span>]]).flatten().real</span><br><span class="line">    norm = float(largest.sum())</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> dict(zip(G, map(float, largest / norm)))</span><br></pre></td></tr></table></figure></p>
<p>References:</p>
<ul>
<li>[1] <a href="http://stackoverflow.com/questions/42224302/incorrect-pagerank-calculation-result" target="_blank" rel="noopener">StackOverflow: Incorrect PageRank calculation result</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（二）迭代方法求PageRank]]></title>
      <url>/2017/12/07/2017-12-07-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95%E6%B1%82PageRank/</url>
      <content type="html"><![CDATA[<p>本文介绍如何用迭代的方法计算PageRank。</p>
<h1 id="PageRank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h1><p>博文<a href="https://linxueyuanstdio.github.io/2017/12/%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E4%B8%80-PageRank/" target="_blank" rel="noopener">《网页排序算法（一）PageRank》</a>介绍了PageRank，计算PageRank可以用迭代的方法也可以用代数的方法，其背后的数学基本运算是一样的，即：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d\sum</em>{p_j\in B(p_i)}\frac{PR(pj)}{L(p_j)}$$</p>
<p>下文结合图1介绍如何用迭代方法求PageRank。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia).</div><br></div>


<p>为了便于讨论，将图1下方的节点分别标上G, H, I, J, K，如下图所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/1.png" width="700"><br><br><br><div class="image-caption">Fig. 2: Label nodes in Fig. 1.</div><br></div>

<h1 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h1><h2 id="初始化节点PR值"><a href="#初始化节点PR值" class="headerlink" title="初始化节点PR值"></a>初始化节点PR值</h2><p>如果没有给节点指定PR初始值，那么每个节点的PR初始化为1/N (N为节点数目)，以图1为例，节点的PR初始值为<code>1/11</code>：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/2.png" width="700"><br><br><br><div class="image-caption">Fig. 3: The graph with starting value of PageRank iteration for each node.</div><br></div>

<p>相应源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step 1: Initiate PageRank</span></span><br><span class="line">N = G.number_of_nodes()                     <span class="comment"># N = 11</span></span><br><span class="line">node_and_pr = dict.fromkeys(G, <span class="number">1.0</span> / N)</span><br></pre></td></tr></table></figure></p>
<h2 id="创建随机图（stochastic-graph）"><a href="#创建随机图（stochastic-graph）" class="headerlink" title="创建随机图（stochastic graph）"></a>创建随机图（stochastic graph）</h2><p>随机图（stochastic graph）是一个有向带权图，边的权重被normalized，使得每个节点的outedges的权重加起来为1。事实上，边的权重即为$$1/L(p_j)$$，图1的随机图如下：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/3.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 4: The stochastic graph<br></div><br></div>


<p>比如，节点<code>D</code>有两条出链，<code>D --&gt; A</code>和<code>D --&gt; B</code>，所以他们的边权重都是0.5。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stochastic_graph = nx.stochastic_graph(G, weight=weight)    <span class="comment"># M = 1/L(pj)</span></span><br><span class="line"> </span><br><span class="line">print(stochastic_graph[<span class="string">'D'</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: &#123;<span class="string">'Edge Id'</span>: <span class="string">u'5'</span>, <span class="string">'weight'</span>: <span class="number">0.5</span>&#125;, <span class="string">'B'</span>: &#123;<span class="string">'Edge Id'</span>: <span class="string">u'6'</span>, <span class="string">'weight'</span>: <span class="number">0.5</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代计算"><a href="#迭代计算" class="headerlink" title="迭代计算"></a>迭代计算</h2><p>遍历所有节点，将每个节点的PR值平均分给其出链的节点，即$$\sun_{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$，乘以阻尼系数d，再加上(1−d)/N。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dangling_value = (<span class="number">1</span>-d)/N</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(max_iter):       <span class="comment"># for each iteration</span></span><br><span class="line">    node_and_prev_pr = node_and_pr</span><br><span class="line">    node_and_pr = dict.fromkeys(node_and_prev_pr.keys(), <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_and_pr:    <span class="comment"># for each node</span></span><br><span class="line">        <span class="keyword">for</span> out_node <span class="keyword">in</span> stochastic_graph[node]:     <span class="comment"># node --&gt; out_node</span></span><br><span class="line">            node_and_pr[out_node] += d * node_and_prev_pr[node] * stochastic_graph[node][out_node][weight]  <span class="comment"># PR(p_i) = d * PR(p_j)&#125;/L(p_j)</span></span><br><span class="line"> </span><br><span class="line">        node_and_pr[node] += dangling_value</span><br></pre></td></tr></table></figure></p>
<p>第一次迭代结果如下图所示（有些箭头没显示出来，NetworkX可视化很弱）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/4.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 5: PageRank after one ieration<br></div><br></div>


<p>那什么时候程序结束呢。将迭代后的PR值跟前一次比较，如果差别很少（如<code>PR′(A)−PR(A)&lt;1.0e−6PR′(A)−PR(A)&lt;1.0e−6）</code>，就可以停止迭代了。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check convergence, l1 norm</span></span><br><span class="line">err = sum([abs(node_and_pr[node] - node_and_prev_pr[node]) <span class="keyword">for</span> node <span class="keyword">in</span> node_and_pr])</span><br><span class="line"><span class="keyword">if</span> err &lt; N*tol:</span><br><span class="line">    <span class="keyword">return</span> node_and_pr</span><br></pre></td></tr></table></figure></p>
<p>在本例中，需要66次迭代，最后得到的PageRank，如下图：</p>
<p>wikipedia_pagerank_example_pr<br>Fig. 6: Stable PageRank values (66 iterations)</p>
<p>我在想一个问题，上面的方法，每次迭代都是基于上一次的PR值，能不能这样，迭代的时候使用最新的值，这样会不能减少迭代次数，如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">PA(D) = <span class="number">0.09</span></span><br><span class="line">PA(B) = <span class="number">0.09</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一次迭代</span></span><br><span class="line">PA(D)/2 --&gt; P(A), P(B)  # 此时， PB(B)=0.045</span><br><span class="line">PB(B) --&gt; P(C)          # 按上面的算法，PB(B)=0.09，那能不能使用刚更新的PR值0.045，这样会不会快一些？</span><br></pre></td></tr></table></figure></p>
<h1 id="NetworkX的pagerank"><a href="#NetworkX的pagerank" class="headerlink" title="NetworkX的pagerank"></a>NetworkX的pagerank</h1><p>nx.pagerank跟章节2差不多，区别在于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2中的算法</span></span><br><span class="line">node_and_pr[node] += (<span class="number">1.0</span> - d)/N</span><br><span class="line"> </span><br><span class="line"><span class="comment"># nx.pagerank</span></span><br><span class="line">danglesum = d * sum(node_and_prev_pr[node] <span class="keyword">for</span> node <span class="keyword">in</span> dangling_nodes)</span><br><span class="line">node_and_pr[node] += danglesum/N + (<span class="number">1.0</span> - d)/N  <span class="comment"># danglesum/N  + (1-d)/N</span></span><br></pre></td></tr></table></figure></p>
<p>nx.pagerank将图中所有悬挂节点（dangling nodes，没有出链的节点，图1只有节点A）的PR累加，并normalized，再加上(1.0–d)/N。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（二）部署并运行以太坊智能合约]]></title>
      <url>/2017/12/06/2017-12-06-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E9%83%A8%E7%BD%B2%E5%B9%B6%E8%BF%90%E8%A1%8C%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（零）概念入门]]></title>
      <url>/2017/12/06/2017-11-27-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E9%9B%B6%EF%BC%89%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>比特币地址（例如：1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV）由一串字符和数字组成，以阿拉伯数字“1”开头。就像别人向你的email地址发送电子邮件一样，他可以通过你的比特币地址向你发送比特币。</p>
<p>可以用 <a href="https://github.com/samr7/vanitygen" target="_blank" rel="noopener">vanitygen</a> 来生成包含一定字母的地址。</p>
<h2 id="BIP"><a href="#BIP" class="headerlink" title="BIP"></a>BIP</h2><p>比特币改进提议 （Bitcoin Improvement Proposals 的缩写），指比特币社区成员所提交的一系列改进比特币的提议。例如，BIP0021是一项改进比特币统一资源标识符（URI）计划的提议。</p>
<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><p>“比特币”既可以指这种虚拟货币单位，也指比特币网络或者网络节点使用的比特币软件。</p>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>一个区块就是若干交易数据的集合，它会被标记上时间戳和之前一个区块的独特标记。区块头经过哈希运算后会生成一份工作量证明，从而验证区块中的交易。有效的区块经过全网络的共识后会被追加到主区块链中。</p>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>区块链是一串通过验证的区块，当中的每一个区块都与上一个相连，一直连到创世区块。</p>
<h2 id="确认"><a href="#确认" class="headerlink" title="确认"></a>确认</h2><p>当一项交易被区块收录时，我们可以说它有一次确认。矿工们在此区块之后每再产生一个区块，此项交易的确认数就再加一。当确认数达到六及以上时，通常认为这笔交易比较安全并难以逆转。</p>
<h2 id="难度"><a href="#难度" class="headerlink" title="难度"></a>难度</h2><p>整个网络会通过调整“难度”这个变量来控制生成工作量证明所需要的计算力。</p>
<h2 id="难度目标"><a href="#难度目标" class="headerlink" title="难度目标"></a>难度目标</h2><p>使整个网络的计算力大致每10分钟产生一个区块所需要的难度数值即为难度目标。</p>
<h2 id="难度调整"><a href="#难度调整" class="headerlink" title="难度调整"></a>难度调整</h2><p>整个网络每产生2,106个区块后会根据之前2,106个区块的算力进行难度调整。</p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>二进制数据的一种数字指纹。</p>
<h2 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h2><p>创世区块指区块链上的第一个区块，用来初始化相应的加密货币。</p>
<h2 id="矿工"><a href="#矿工" class="headerlink" title="矿工"></a>矿工</h2><p>矿工指通过不断重复哈希运算来产生工作量证明的各网络节点。</p>
<h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>描述挖矿的一个好方法是将之类比为一个巨大的多人数独谜题游戏。一旦有人发现正解之后，这个数独游戏会自动调整困难度以使游戏每次需要大约10分钟解决。想象一个有几千行几千列的巨大数独游戏。如果给你一个已经完成的数独，你可以很快地验证它。然而，如果这个数独只有几个方格里有数字其余方格都为空的话，就会花费非常长的时间来解决。这个数独游戏的困难度可以通过改变其大小（更多或更少行列）来调整，但即使它非常大时验证它也是相当容易的。而比特币中的 “谜题” 是基于哈希加密算法的，其展现了相似的特性：非对称地，它解起来困难而验证很容易，并且它的困难度可以调整。</p>
<p>当区块一个个堆上来时，这个交易变得指数级地越来越难被推翻，因此它在网络中得到更多信任。</p>
<h2 id="矿工费"><a href="#矿工费" class="headerlink" title="矿工费"></a>矿工费</h2><p>交易的发起者通常会向网络缴纳一笔矿工费，用以处理这笔交易。大多数的交易需要0.5毫比特币的矿工费。</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>比特币网络是一个由若干节点组成的用以广播交易信息和数据区块的P2P网络。</p>
<h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>工作量证明指通过有效计算得到的一小块数据。具体到比特币，矿工必须要在满足全网目标难度的情况下求解SHA256算法。</p>
<h2 id="奖励"><a href="#奖励" class="headerlink" title="奖励"></a>奖励</h2><p>每一个新区块中都有一定量新创造的比特币用来奖励算出工作量证明的矿工。现阶段每一区块有25比特币的奖励。</p>
<h2 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h2><p>用来解锁对应（钱包）地址的一串字符，例如5J76sF8L5jTtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3ibVPxh。</p>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>简单地说，交易指把比特币从一个地址转到另一个地址。更准确地说，一笔“交易”指一个经过签名运算的，表达价值转移的数据结构。每一笔“交易”都经过比特币网络传输，由矿工节点收集并封包至区块中，永久保存在区块链某处。</p>
<p>转出是交易，转入也是交易。</p>
<ul>
<li>一般交易。一个地址转到另一个地址，用不完会“找零”。</li>
<li>集合型交易。多个地址转向一个地址，钱包用来汇合零钱。</li>
<li>分散型交易。一个转向多个，如发工资。</li>
</ul>
<p>交易的输出会被创建成为一个包含这笔数额的脚本的形式，只能被引入这个脚本的一个解答后才能兑换。</p>
<h2 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h2><p>钱包指保存比特币地址和私钥的软件，可以用它来接受、发送、储存你的比特币。</p>
<p>比特币地址以数字1或3开头。类似于电子邮件地址，这些地址可以分享给其他的比特币的用户，这样他们就可以直接通过这些地址发送比特币到你的钱包里。不同于电邮地址的是，你可以任意地创建新的比特币地址，这些地址都能成功地将资金转到你的钱包。</p>
<p>钱包是多个地址和解锁资金密钥的简单集合。每笔交易你都可以使用不同的地址，这有利于提高隐私的安全性。用户可创建地址的数量几乎不受限制。</p>
<p>一个地址对应一个秘钥，像支付宝的付款码，其在支付宝后台也有一个对应的秘钥，验证交易。</p>
<p>直到这个地址接收到在比特币账簿（区块链）中公布过的一笔交易时，才会成为众多可能“有效”的比特币地址之一。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>平均每10分钟就有人能验证过去这10分钟发生的交易，他将会获得新币作为工作回报。本质上，挖矿把央行的货币发行和结算功能进行分布式，用全球化的算力竞争来取代对中央发行机构的需求。</p>
<p>比特币系统包含调节挖矿难度的协议。挖矿——在比特币网络中成功写入一个区块交易——的难度是动态调整的，保证不管有多少矿工（多少CPU）挖矿，平均每10分钟只有一个矿工成功。</p>
<p>任何接受数字货币的人都面临的两个基本问题是：</p>
<p>我能相信这钱是真实可信的，而不是伪造的吗？<br>我能确定没人说这笔钱是他们的，而不是我的吗？（又名“双重支付”问题）</p>
<p>比特币代表了数十年的密码学和分布式系统的巅峰之作，这是一个独特而强大的组合，汇集了四个关键的创新点。比特币由这些构成：</p>
<ul>
<li>一个去中心化的点对点网络（比特币协议）</li>
<li>一个公共的交易账簿（区块链）</li>
<li>一个去中心化的数学的和确定性的货币发行（分布式挖矿）</li>
<li>一个去中心化的交易验证系统（交易脚本）</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="http://blockchain.info/" target="_blank" rel="noopener">http://blockchain.info/</a> 可以查看所有交易信息</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://zhibimo.com/read/wang-miao/mastering-bitcoin" target="_blank" rel="noopener">http://zhibimo.com/read/wang-miao/mastering-bitcoin</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（一）PageRank]]></title>
      <url>/2017/12/05/2017-12-05-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89PageRank/</url>
      <content type="html"><![CDATA[<p>参加数学建模的时候要研究一下PageRank，为了巩固3天从入门到精通的成果，把了解到的整理成文。</p>
<h1 id="直观理解"><a href="#直观理解" class="headerlink" title="直观理解"></a>直观理解</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>PageRank是以Google创始人Larry Page的姓命名的，于1999被提出来，用于测量网页的相对重要性（对网页进行排序），学术论文如下：</p>
<blockquote>
<p>Page, L., Brin, S., Motwani, R., &amp; Winograd, T. (1999). The PageRank citation ranking: Bringing order to the web. Stanford InfoLab. [PDF]</p>
</blockquote>
<p>PageRank的设计受到学术论文引用启发（两人的父亲都是大学教授）。衡量一篇学术论文质量高与否，最重要的一个指标是引用次数，高引用量的论文通常意味着高质量。同理，如果一张网页被引用（以超链接的形式）多了，那么这张网页就比较重要。总结起来，PageRank的核心思想有两点（结合图1说明）：</p>
<ul>
<li>越多的网页链接到一个网页（可以理解成投票，<code>D --&gt; B</code>，<code>D</code>给<code>B</code>投了一票），说明这个网页更加重要，如图1的<code>B</code>。(一篇论文被很多论文引用)</li>
<li>PageRank高的网页链接到一个网页，说明这张网页也很重要。如图1，尽管C只有一张网页B链接到它，但C的重要性高于E，尽管E有一堆小罗罗给它投票。（论文被大牛引用了，说明这篇论文很有价值）（也可以从话语权角度理解，重要的人说话份量重）</li>
</ul>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia)</div><br></div>

<p>整个万维网（World Wide Web）可以抽象成一张有向图，节点表示网页，连线$$p_i\to p_j$$表示网页$$p_i$$包含了超链接$$p_j$$（$$p_i$$指向了$$p_j$$）。如果能对图中每个节点重要性量化，那么就能对网页进行排序了。PageRank提出之初就是为了对网页进行排序。</p>
<p>搜索引擎的工作原理可以简化为：输入关键词，返回与该关键词相关的网页（一个集合，相当于得到一张子图），在该子图上计算每个节点的PageRank值，PR值高的网页排在前面，低的就排在后面。</p>
<h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h2><p>接下来的问题是，如何计算每个节点的PageRank。想要知道一个网页$$p_i$$的PR值，需要知道：</p>
<ul>
<li>有多少网页链接到了$$p_i$$</li>
<li>这些网页的PR值是多少<br>其他网页的PR值又很可能是依赖于$$p_i$$，这就陷入了“先有鸡还是先有蛋”的循环，要想知道$$p_i$$的PR值，就得知道链向$$p_i$$所有网页的PR值，而要知道其他网页的PR值，又得先知道$$p_i$$的PR值。</li>
</ul>
<p>为了打破这个循环，佩奇和布林采用了一个很巧妙的思路， 即分析一个虚拟用户在互联网上的漫游过程。 他们假定：虚拟用户一旦访问了一个网页，下一步将以相同的概率访问被该网页所链接的任何一个其它网页[3]。比如，网页$$p_i$$包含N个超链接，那么虚拟用户访问这N个页面中的任何一个的概率是1/N。那么，网页的排序就可以看成一个虚拟用户在万维网漫游了很长时间，页面被访问的概率越大，其PR值就越高，网页排名也越靠前。</p>
<p>先从简化的PageRank说起，以PageRank论文的例子为例，看看PageRank是怎么计算的，如下：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/1.png" width="700"><br><br><br><div class="image-caption">Fig. 2: Simplified PageRank calculation (image from [1])</div><br></div>

<p>每个节点初始化或者指定一个PageRank值（如<code>PR(A)=0.4</code>），网页<code>A</code>包含两个超链接，分别指向<code>B</code>和<code>C</code>（或者说<code>A</code>投票给<code>B</code>和<code>C</code>），<code>0.4</code>拆分成两份，每份<code>0.2</code>，所以<code>PR(B)=0.2</code>。<code>A</code>和<code>B</code>同时给<code>C</code>投票，所以<code>PR(C)=0.2+0.2=0.4</code>。如此，不断地迭代，最后每个节点的值会趋于稳定（或者说收敛），这样就求得了所有节点的PR值。事实上，在这个例子中，PageRank已收俭。</p>
<p>每个页面将其当前的PageRank值平均分配到本页面所有出链上，一个页面将所有入链的PR值累加起来就构成了该页面新的PR值。如此迭代下去，最后得到一个稳定值。用数学公式表达，如下：</p>
<p>$$PR(A)=\frac{PR(B)}{L(B)}+\frac{PR(C)}{L(C)}+\frac{PR(D)}{L(D)}+⋯$$</p>
<p>更一般化地（$$B(p_i)$$表示所有链向网页$$p_i$$的集合），</p>
<p>$$PR(pi)=\sum_{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$</p>
<p>但这样算存在两个问题：</p>
<ul>
<li>对于没有forward links (outedges)的网页，即只有别人给她投票，她从不给别人投票，那么她的PageRank每次迭代都会增加。</li>
<li>对于没有blacklinks (inedges)的网页，即没人给她投票，其PageRank永远等于0。</li>
</ul>
<p>对于第一个问题，给等式乘以一个小于1的常数d（damping factor，翻译成阻尼因数？）；对于第二个问题，给等式加上一个常数。新的等式如下（N表示网页总数，或者节点数目）：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d\sum</em>{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$</p>
<p>其中，</p>
<ul>
<li>$$B(p_i)$$：链接到网页pipi的集合（a set of pages link to pipi）</li>
<li>$$L(p_j)$$：从$$p_j$$链出去的网页数目（the number of outbound links）<br>这样，就确保所有节点的PR值加起来等于1。</li>
</ul>
<h2 id="一个简单实例"><a href="#一个简单实例" class="headerlink" title="一个简单实例"></a>一个简单实例</h2><p>以一个很简单的例子（<code>A &lt; --&gt; B</code>）来看PageRank是怎么收俭的。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/2.png" width="700"><br><br><br><div class="image-caption">Fig. 2: An illustration of PageRank calculation.</div><br></div>

<p>假设他们的初始PR值为1，第一次迭代后，PR(A)和PR(B)的值为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PR(A) = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*<span class="number">1.0</span>                   = <span class="number">0.9249999999999999</span></span><br><span class="line">PR(B) = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*<span class="number">0.9249999999999999</span>    = <span class="number">0.8612499999999998</span></span><br></pre></td></tr></table></figure></p>
<p>写个简单的Python脚本，得到每次迭代后的值，部分如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>: A=<span class="number">0.925000</span>     B=<span class="number">0.861250</span> </span><br><span class="line"> <span class="number">2</span>: A=<span class="number">0.807062</span>     B=<span class="number">0.761003</span> </span><br><span class="line"> <span class="number">3</span>: A=<span class="number">0.721853</span>     B=<span class="number">0.688575</span> </span><br><span class="line"> <span class="number">4</span>: A=<span class="number">0.660289</span>     B=<span class="number">0.636245</span> </span><br><span class="line"> <span class="number">5</span>: A=<span class="number">0.615808</span>     B=<span class="number">0.598437</span> </span><br><span class="line"> <span class="number">6</span>: A=<span class="number">0.583672</span>     B=<span class="number">0.571121</span> </span><br><span class="line"> <span class="number">7</span>: A=<span class="number">0.560453</span>     B=<span class="number">0.551385</span> </span><br><span class="line"> <span class="number">8</span>: A=<span class="number">0.543677</span>     B=<span class="number">0.537126</span> </span><br><span class="line"> <span class="number">9</span>: A=<span class="number">0.531557</span>     B=<span class="number">0.526823</span> </span><br><span class="line"><span class="number">10</span>: A=<span class="number">0.522800</span>     B=<span class="number">0.519380</span> </span><br><span class="line"><span class="number">11</span>: A=<span class="number">0.516473</span>     B=<span class="number">0.514002</span> </span><br><span class="line"><span class="number">12</span>: A=<span class="number">0.511902</span>     B=<span class="number">0.510116</span> </span><br><span class="line"><span class="number">13</span>: A=<span class="number">0.508599</span>     B=<span class="number">0.507309</span></span><br><span class="line"><span class="number">14</span>: A=<span class="number">0.506213</span>     B=<span class="number">0.505281</span> </span><br><span class="line"><span class="number">15</span>: A=<span class="number">0.504489</span>     B=<span class="number">0.503815</span> </span><br><span class="line"><span class="number">16</span>: A=<span class="number">0.503243</span>     B=<span class="number">0.502757</span> </span><br><span class="line"><span class="number">17</span>: A=<span class="number">0.502343</span>     B=<span class="number">0.501992</span> </span><br><span class="line"><span class="number">18</span>: A=<span class="number">0.501693</span>     B=<span class="number">0.501439</span> </span><br><span class="line"><span class="number">19</span>: A=<span class="number">0.501223</span>     B=<span class="number">0.501040</span> </span><br><span class="line"><span class="number">20</span>: A=<span class="number">0.500884</span>     B=<span class="number">0.500751</span></span><br><span class="line">...</span><br><span class="line"><span class="number">42</span>: A=<span class="number">0.500001</span>     B=<span class="number">0.500001</span> </span><br><span class="line"><span class="number">43</span>: A=<span class="number">0.500001</span>     B=<span class="number">0.500000</span> </span><br><span class="line"><span class="number">44</span>: A=<span class="number">0.500000</span>     B=<span class="number">0.500000</span> </span><br><span class="line"><span class="number">45</span>: A=<span class="number">0.500000</span>     B=<span class="number">0.500000</span></span><br></pre></td></tr></table></figure></p>
<p>可见，随着迭代次数的增加，PageRank越来越接近收俭值0.5。Python源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagerank_ab</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Calculate PageRank for A &lt;--&gt; B</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pr = &#123;<span class="string">'A'</span>:<span class="number">1.0</span>, <span class="string">'B'</span>:<span class="number">1.0</span>&#125;</span><br><span class="line">    max_iter = <span class="number">50</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">1</span>, max_iter+<span class="number">1</span>):</span><br><span class="line">        pr[<span class="string">'A'</span>] = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*pr[<span class="string">'B'</span>]</span><br><span class="line">        pr[<span class="string">'B'</span>] = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*pr[<span class="string">'A'</span>]</span><br><span class="line"> </span><br><span class="line">        s = <span class="string">'&#123;:3d&#125;: A=&#123;:&lt;10f&#125;\tB=&#123;:&lt;10f&#125;'</span>.format(idx, pr[<span class="string">'A'</span>], pr[<span class="string">'B'</span>])</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代次数"><a href="#迭代次数" class="headerlink" title="迭代次数"></a>迭代次数</h2><p>迭代次数越多，结果越准确，但花费时间也越长。出于效率考虑，在实际应用中，当PR值落在误差允许范围内（PR值跟前一次比较，如<code>PR′(A)−PR(A)&lt;1.0e−6PR′(A)−PR(A)&lt;1.0e−6</code>，想想浮点数在计算机的存储），就可以返回结果了。<br>Python实现的nx.pagerank相关源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check convergence, l1 norm</span></span><br><span class="line">err = sum([abs(x[n] - xlast[n]) <span class="keyword">for</span> n <span class="keyword">in</span> x])</span><br><span class="line"><span class="keyword">if</span> err &lt; N*tol: <span class="comment"># tol=1.0e-6</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></p>
<p>当然，对于超大型网络来说，有更复杂的计算方法，比如分布式。</p>
<h2 id="PR初始值"><a href="#PR初始值" class="headerlink" title="PR初始值"></a>PR初始值</h2><p>不管节点PR初始值怎么设置，最后节点的PR值都一样，但收俭速度不一样。可以修改上面Python代码的PR初始值，运行代码，自行感受下。NetworkX的pagerank实现是将PR值初始化为1/N。</p>
<h2 id="Damping-factor"><a href="#Damping-factor" class="headerlink" title="Damping factor"></a>Damping factor</h2><p>跟PR初始值类似，d的取值也会影响算法效率。根据Page的论文，d通常设为0.85。</p>
<h1 id="PageRank计算方法"><a href="#PageRank计算方法" class="headerlink" title="PageRank计算方法"></a>PageRank计算方法</h1><p>(1) 迭代方法</p>
<p>详情见另一篇博文<a href="https://linxueyuanstdio.github.io/2017/12/网页排序算法-二-迭代方法求PageRank/" target="_blank" rel="noopener">《网页排序算法（二）迭代方法求PageRank》</a>。</p>
<p>（2）代数方法</p>
<p>详情见另一篇博文<a href="https://linxueyuanstdio.github.io/2017/12/网页排序算法-三-代数方法求PageRank" target="_blank" rel="noopener">《网页排序算法（三）代数方法求PageRank》</a>。</p>
<p>（3）Power Method</p>
<p>待续。</p>
<h1 id="用NetworkX求PageRank"><a href="#用NetworkX求PageRank" class="headerlink" title="用NetworkX求PageRank"></a>用NetworkX求PageRank</h1><p>NetworkX提供3个求PageRank的API，如下：</p>
<ul>
<li>pagerank(…)</li>
<li>pagerank_numpy(…)</li>
<li>pagerank_scipy(…)</li>
</ul>
<p>详细API如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pagerank(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, max_iter=<span class="number">100</span>, tol=<span class="number">1e-06</span>, nstart=<span class="keyword">None</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br><span class="line"> </span><br><span class="line">pagerank_numpy(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br><span class="line"> </span><br><span class="line">pagerank_scipy(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, max_iter=<span class="number">100</span>, tol=<span class="number">1e-06</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<p>References:</p>
<ul>
<li>[1] <a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf" target="_blank" rel="noopener">Page, L., Brin, S., Motwani, R., &amp; Winograd, T. (1999). The PageRank citation ranking: Bringing order to the web. Stanford InfoLab. [PDF]</a></li>
<li>[2] <a href="http://www.sci.unich.it/~francesc/teaching/network/pagerank" target="_blank" rel="noopener">PageRank Centrality by Massimo Franceschet</a></li>
<li>[3] <a href="http://www.changhai.org/articles/technology/misc/google_math.php" target="_blank" rel="noopener">谷歌背后的数学 by 卢昌海</a></li>
<li>[4] <a href="https://en.wikipedia.org/wiki/PageRank" target="_blank" rel="noopener">Wikipedia: PageRank</a></li>
<li>[5] <a href="http://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm" target="_blank" rel="noopener">The Google Pagerank Algorithm and How It Works</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迪菲-赫尔曼密钥交换]]></title>
      <url>/2017/12/01/2017-12-01-%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E5%B0%94%E6%9B%BC%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="迪菲-赫尔曼密钥交换（英语：Diffie–Hellman-key-exchange，缩写为D-H）"><a href="#迪菲-赫尔曼密钥交换（英语：Diffie–Hellman-key-exchange，缩写为D-H）" class="headerlink" title="迪菲-赫尔曼密钥交换（英语：Diffie–Hellman key exchange，缩写为D-H）"></a>迪菲-赫尔曼密钥交换（英语：Diffie–Hellman key exchange，缩写为D-H）</h1><p>最简单，最早提出的这个协议使用一个质数$p$的整数模$n$乘法群以及其原根$g$。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-1/0.svg" width="700"><br><br><div class="image-caption">迪菲-赫尔曼密钥交换</div><br></div>

<p>算法如下（绿色表示非秘密信息, 红色粗体表示秘密信息）：</p>
<ul>
<li>爱丽丝与鲍伯协定使用 $$p=23$$以及base $$g=5$$.</li>
<li>爱丽丝选择一个秘密整数$$a=6$$, 计算$$A = g^a mod p$$并发送给鲍伯。</li>
</ul>
<p>$$A = 56 mod 23 = 8$$.</p>
<ul>
<li>鲍伯选择一个秘密整数$$b=15$$, 计算$$B = g^b mod p$$并发送给爱丽丝。</li>
</ul>
<p>$$B = 515 mod 23 = 19$$.</p>
<ul>
<li>爱丽丝计算$$s = B^a mod p$$</li>
</ul>
<p>$$196 mod 23 = 2$$.</p>
<ul>
<li>鲍伯计算$$s = A^b mod p$$</li>
</ul>
<p>$$815 mod 23 = 2$$.</p>
<p>以下是一个更为一般的描述:</p>
<ul>
<li>爱丽丝和鲍伯写上一个有限循环群 $$G$$ 和它的一个生成元 $$g$$。 （这通常在协议开始很久以前就已经规定好； $$g$$是公开的，并可以被所有的攻击者看到。）</li>
<li>爱丽丝选择一个随机自然数 $$a$$ 并且将$${\displaystyle g^{a}{\bmod {p}}} g^{a} \bmod{p}$$发送给鲍伯。</li>
<li>鲍伯选择一个随机自然数 $$b$$ 并且将$${\displaystyle g^{b}{\bmod {p}}} g^{b} \bmod{p}$$发送给爱丽丝。</li>
<li>爱丽丝 计算 $${\displaystyle \left(g^{b}\right)^{a}{\bmod {p}}} \left ( g^{b} \right )^{a} \bmod{p} $$。</li>
<li>鲍伯 计算 $${\displaystyle \left(g^{a}\right)^{b}{\bmod {p}}} \left ( g^{a} \right )^{b} \bmod{p} $$。</li>
</ul>
<p>爱丽丝和鲍伯就同时协商出群元素$$ {\displaystyle g^{ab}} g^{ab} $$，它可以被用作共享秘密。<br>$${\displaystyle \left(g^{b}\right)^{a}} \left ( g^{b} \right )^{a} = {\displaystyle \left(g^{a}\right)^{b}} \left ( g^{a} \right )^{b}$$因为群是乘法交换的。</p>
]]></content>
      
        <categories>
            
            <category> 密码学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（一）搭建环境-基于以太坊私有链]]></title>
      <url>/2017/11/30/2017-11-30-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83-%E5%9F%BA%E4%BA%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="安装Geth和Mist"><a href="#安装Geth和Mist" class="headerlink" title="安装Geth和Mist"></a>安装Geth和Mist</h1><h2 id="Ubuntu下安装Geth客户端"><a href="#Ubuntu下安装Geth客户端" class="headerlink" title="Ubuntu下安装Geth客户端"></a>Ubuntu下安装Geth客户端</h2><p>之所以采用Ubuntu，是因为以太坊的官方对Ubuntu支持的很好，是在各个linux系统中安装最简单。</p>
<blockquote>
<p>Geth官方安装指南：<br><a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum</a></p>
</blockquote>
<p>进入ubuntu命令行，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get installsoftware-properties-common</span><br><span class="line">$ sudo add-apt-repository -yppa:ethereum/ethereum</span><br><span class="line">$ sudo add-apt-repository -yppa:ethereum/ethereum-dev</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ethereum</span><br></pre></td></tr></table></figure></p>
<p>系统联网执行后，即完成了安装以太坊客户端，其中包括<code>geth</code>,<code>bootnode</code>,<code>evm</code>,<code>disasm</code>,<code>rlpdump</code>,<code>ethtest</code><br>此时如果输入 <code>geth</code> 命令，会出现启动以太坊启动的画面</p>
<p>也可以源码编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ethereum/go-ethereum</span><br><span class="line">$ sudo apt-get install -y build-essential golang</span><br><span class="line">$ <span class="built_in">cd</span> go-ethereum</span><br><span class="line">$ make geth</span><br></pre></td></tr></table></figure></p>
<h2 id="Windows下安装Geth客户端"><a href="#Windows下安装Geth客户端" class="headerlink" title="Windows下安装Geth客户端"></a>Windows下安装Geth客户端</h2><p>下载并安装 Geth for Windows.<br>Windows必须64位系统，从官方网站下载编译好的win64客户端，解压缩即可运行，下载地址如下（第二个地址备选）：</p>
<blockquote>
<p><a href="https://github.com/ethereum/go-ethereum/releases/" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/releases/</a><br><a href="https://geth.ethereum.org/downloads/" target="_blank" rel="noopener">https://geth.ethereum.org/downloads/</a></p>
</blockquote>
<p>下载后，只有一个<code>Geth.exe</code>的文件。</p>
<h2 id="MAC-OSX下安装Geth客户端"><a href="#MAC-OSX下安装Geth客户端" class="headerlink" title="MAC OSX下安装Geth客户端"></a>MAC OSX下安装Geth客户端</h2><p>首先确保已安装<code>homebrew</code>，没有安装过的可以在命令行下执行<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>进行安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap ethereum/ethereum</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install ethereum</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装图像化客户端Mist"><a href="#安装图像化客户端Mist" class="headerlink" title="安装图像化客户端Mist"></a>安装图像化客户端Mist</h2><p>依然是从官方地址下载编译好的客户端即可，下载地址：</p>
<blockquote>
<p><a href="https://github.com/ethereum/mist/releases/" target="_blank" rel="noopener">https://github.com/ethereum/mist/releases/</a></p>
</blockquote>
<p>下载解压缩后，Ethereum-Wallet 即为以太坊图形化界面。</p>
<h1 id="准备创世块文件"><a href="#准备创世块文件" class="headerlink" title="准备创世块文件"></a>准备创世块文件</h1><p>配置自己的创世块是为了区分公有链，同一个网络中，创世块必须是一样的，否则无法联通，此方法在windows和Ubuntu下通用。<br>新建文件<code>piccgenesis.json</code>,输入如下内容并保存<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"chainId"</span>: <span class="number">123456</span>,</span><br><span class="line">    <span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip158Block"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"nonce"</span>: <span class="string">"0x0000000000000042"</span>,</span><br><span class="line">  <span class="attr">"difficulty"</span>: <span class="string">"0x020000"</span>,</span><br><span class="line">  <span class="attr">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"0x00"</span>,</span><br><span class="line">  <span class="attr">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"extraData"</span>: <span class="string">"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"</span>,</span><br><span class="line">  <span class="attr">"gasLimit"</span>: <span class="string">"0x4c4b40"</span>,</span><br><span class="line">  <span class="attr">"alloc"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解释一下各个参数的作用：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>mixhash</td>
<td>与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。.</td>
</tr>
<tr>
<td>nonce</td>
<td>nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。</td>
</tr>
<tr>
<td>difficulty</td>
<td>设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度</td>
</tr>
<tr>
<td>alloc</td>
<td>用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。</td>
</tr>
<tr>
<td>coinbase</td>
<td>矿工的账号，随便填</td>
</tr>
<tr>
<td>timestamp</td>
<td>设置创世块的时间戳</td>
</tr>
<tr>
<td>parentHash</td>
<td>上一个区块的hash值，因为是创世块，所以这个值是0</td>
</tr>
<tr>
<td>extraData</td>
<td>附加信息，随便填，可以填你的个性信息</td>
</tr>
<tr>
<td>gasLimit</td>
<td>该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。</td>
</tr>
</tbody>
</table>
<h1 id="启动私有链节点"><a href="#启动私有链节点" class="headerlink" title="启动私有链节点"></a>启动私有链节点</h1><p>启动Geth即可以启动以太坊的区块链，为了构建私有链 ，需要在Geth启动时加入一些参数，Geth参数含义如下： </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>identity</td>
<td>区块链的标示，随便填写，用于标示目前网络的名字</td>
</tr>
<tr>
<td>init</td>
<td>指定创世块文件的位置，并创建初始块</td>
</tr>
<tr>
<td>datadir</td>
<td>设置当前区块链网络数据存放的位置</td>
</tr>
<tr>
<td>port</td>
<td>网络监听端口</td>
</tr>
<tr>
<td>rpc</td>
<td>启动rpc通信，可以进行智能合约的部署和调试</td>
</tr>
<tr>
<td>rpcapi</td>
<td>设置允许连接的rpc的客户端，一般为db,eth,net,web3</td>
</tr>
<tr>
<td>networkid</td>
<td>设置当前区块链的网络ID，用于区分不同的网络，是一个数字</td>
</tr>
<tr>
<td>console</td>
<td>启动命令行模式，可以在Geth中执行命令</td>
</tr>
</tbody>
</table>
<h2 id="在Ubuntu启动区块链节点"><a href="#在Ubuntu启动区块链节点" class="headerlink" title="在Ubuntu启动区块链节点"></a>在Ubuntu启动区块链节点</h2><p>在Ubuntu下，首先切换到打算运行的目录，目录下应该有配置好的<code>piccgenesis.json</code>文件，获取当前的目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure></p>
<p>创建数据存放地址并初始化创世块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth  --datadir <span class="string">"<span class="variable">$basepath</span>/chain"</span> init piccgenesis.json</span><br></pre></td></tr></table></figure></p>
<p>启动节点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth --identity <span class="string">"PICCetherum"</span>  --rpc  --rpccorsdomain <span class="string">"*"</span> --datadir <span class="string">"<span class="variable">$basepath</span>/chain"</span> --port <span class="string">"30303"</span>  --rpcapi <span class="string">"db,eth,net,web3"</span> --networkid 95518 console</span><br></pre></td></tr></table></figure></p>
<p>启动后界面如下，光标停留在最后的命令行上，可以执行以太坊命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">I0707 00:45:43.680087 ethdb/database.go:82]Alloted 128MB cache and 1024 file handles to /home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.726008ethdb/database.go:169] closed db:/home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.728913 ethdb/database.go:82]Alloted 128MB cache and 1024 file handles to /home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.908795 ethdb/database.go:82]Alloted 16MB cache and 16 file handles to /home/lihe/桌面/chain/dapp</span><br><span class="line">I0707 00:45:43.969506 core/genesis.go:92]Genesis block already <span class="keyword">in</span> chain. Writing canonical number</span><br><span class="line">I0707 00:45:43.980337 eth/backend.go:274]Successfully wrote custom genesis block:6e92f8b23bcdfdf34dc813cfaf1d84b71beac80530506b5d63a2df10fe23a660</span><br><span class="line">I0707 00:45:43.980618 eth/backend.go:184]Protocol Versions: [63 62], Network Id: 95518</span><br><span class="line">I0707 00:45:43.981567core/blockchain.go:204] Last header: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.981645core/blockchain.go:205] Last block: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.981677core/blockchain.go:206] Fast block: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.985253 p2p/server.go:313]Starting Server</span><br><span class="line">I0707 00:45:45.834488p2p/discover/udp.go:217] Listening,enode://134881790e54c803955715e3661c27f91caaf499be813e29c9f986e2eac62d47e02b13a8e51776c1caea554655614ed26ce0185d84e626da7ac48a83a60113ff@[::]:30303</span><br><span class="line">I0707 00:45:45.835853 node/node.go:366]HTTP endpoint opened: http://localhost:8545</span><br><span class="line">I0707 00:45:45.848008 p2p/server.go:556]Listening on [::]:30303</span><br><span class="line">I0707 00:45:45.849731 node/node.go:296] IPCendpoint opened: /home/lihe/桌面/chain/geth.ipc</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"> </span><br><span class="line">instance:Geth/v1.5.0-unstable/linux/go1.5.1/PICCetherum</span><br><span class="line">coinbase:0x93509a2f4b2b974b07ef0b52e07c3992601f5de1</span><br><span class="line">at block: 81 (Tue, 05 Jul 2016 21:02:25CST)</span><br><span class="line"> datadir: /home/lihe/桌面/chain</span><br><span class="line"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>Listening on [::]:30303</code>和<code>Welcome to the Geth JavaScript console!</code>的提示，说明已经启动成功</p>
<blockquote>
<p><strong>注意</strong>：如果想将Ubuntu作为永久区块链节点使用，当使用nohup命令时，Geth启动参数console必须去掉，否则Geth会自动停止。</p>
</blockquote>
<h2 id="在windows启动区块链节点"><a href="#在windows启动区块链节点" class="headerlink" title="在windows启动区块链节点"></a>在windows启动区块链节点</h2><p>进入Windows下<code>Geth</code>的目录 ，放置配置好的<code>piccgenesis.json</code>文件，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth  --datadir <span class="string">"%cd%\chain"</span> init piccgenesis.json</span><br></pre></td></tr></table></figure></p>
<p>创建数据存放地址并初始化创世块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth--identity <span class="string">"PICCetherum"</span> --rpc--rpccorsdomain <span class="string">"*"</span> --datadir <span class="string">"%cd%\chain"</span> --port<span class="string">"30303"</span>  --rpcapi<span class="string">"db,eth,net,web3"</span> --networkid 95518 console</span><br></pre></td></tr></table></figure></p>
<p>当看到<code>Listening on [::]:30303</code>和<code>Welcome to the Geth JavaScript console!</code>的提示，说明已经启动成功</p>
<h1 id="使用节点创建账号"><a href="#使用节点创建账号" class="headerlink" title="使用节点创建账号"></a>使用节点创建账号</h1><p>启动节点成功后，会进入Geth的命令行模式，输入如下命令<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.<span class="keyword">new</span><span class="type">Account</span>()</span><br></pre></td></tr></table></figure></p>
<p>系统会提示你输入账号密码，并确认，最后会显示一个新生成的账号。</p>
<h2 id="Geth-JavaScript控制台环境使用说明"><a href="#Geth-JavaScript控制台环境使用说明" class="headerlink" title="Geth JavaScript控制台环境使用说明"></a>Geth JavaScript控制台环境使用说明</h2><ul>
<li>创建新账号<br><code>personal.newAccount()</code><br>或者 <code>personal.newAccount(&quot;123456&quot;)</code></li>
<li>查看节点信息<br><code>admin.nodeInfo</code></li>
<li>挖矿<ul>
<li>开始挖矿<code>miner.start(1)</code></li>
<li>停止挖矿<code>miner.stop()</code></li>
</ul>
</li>
<li>查看当前矿工账号<br><code>eth.coinbase</code> 默认为第一个账户</li>
<li>修改矿工账号<br><code>miner.setEtherbase(eth.accounts[1])</code></li>
<li>查看账户信息<br><code>eth.accounts[0]</code></li>
<li>查看账户余额<br><code>eth.getBalance(eth.accounts[0])</code><br>或者 <code>web3.fromWei(eth.getBalance(eth.accounts[0]), &quot;ether&quot;)</code></li>
<li>解锁账号<br><code>personal.unlockAccount(eth.accounts[0])</code><br>使用账户资金前都需要先解锁账号</li>
<li>转账<code>eth.sendTransaction({from:eth.accounts[0],to:&quot;0x587e57a516730381958f86703b1f8e970ff445d9&quot;,value:web3.toWei(3,&quot;ether&quot;)})</code><br>使用 <code>txpool.status</code>可以看到交易状态</li>
<li>查看区块数据<ul>
<li><code>eth.blockNumber</code></li>
<li><code>eth.getTransaction(&quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot;)</code></li>
<li><code>eth.getBlock(1)</code> 通过区块号查看区块</li>
</ul>
</li>
</ul>
<h1 id="私有链图形节点"><a href="#私有链图形节点" class="headerlink" title="私有链图形节点"></a>私有链图形节点</h1><h2 id="启动Ubuntu下私有链图形节点"><a href="#启动Ubuntu下私有链图形节点" class="headerlink" title="启动Ubuntu下私有链图形节点"></a>启动Ubuntu下私有链图形节点</h2><p>首先按上面的步骤启动Geth并创建了账号，在geth运行的时候，再运行下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethereumwallet --gethpath /usr/bin/geth</span><br></pre></td></tr></table></figure></p>
<p><code>--gethpath</code>改成你实际安装的geth的路径</p>
<h2 id="启动Windows下私有链图形节点"><a href="#启动Windows下私有链图形节点" class="headerlink" title="启动Windows下私有链图形节点"></a>启动Windows下私有链图形节点</h2><p>首先按上面的步骤启动Geth并创建了账号，然后解压缩Ethereum-Wallet，运行<code>Ethereum-Wallet.exe</code>,即启动成功，如果区块链正常的话，会在右上角显示<code>“PRIVATE-NET”</code>，点击<code>“LAUNCH APPLICATION”</code>进入图形界面即可。</p>
<h1 id="连接其他节点"><a href="#连接其他节点" class="headerlink" title="连接其他节点"></a>连接其他节点</h1><p>首先要知道自己的节点信息，在Geth命令行界面下输入命令,注意大小写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span><span class="selector-class">.nodeInfo</span></span><br></pre></td></tr></table></figure></p>
<p>系统会显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enode:<span class="string">"enode://1e3c1727cd3bee9f25edeb5dbb3b880e03e41f8eec99566557f3ee0422734a8fcad17c161aa93d61bdbfb28ed152c143c7eb501db58bc63502a104a84b62d742@0.0.0.0:30303“</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>enode://1e3c1727cd3bee9f25edeb5dbb3b880e03e41f8eec99566557f3ee0422734a8fcad17c161aa93d61bdbfb28ed152c143c7eb501db58bc63502a104a84b62d742@0.0.0.0:30303</code><br>就是自己节点的信息，注意要把<code>0.0.0.0</code>换成你自己的IP。将这个信息发送给其他节点，在其他节点的命令行中输入：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(‘enode://<span class="number">1e3</span><span class="keyword">c</span><span class="number">1727</span>cd<span class="number">3</span>bee<span class="number">9</span>f<span class="number">25</span>edeb<span class="number">5</span>dbb<span class="number">3</span>b<span class="number">880e03</span>e<span class="number">41</span>f<span class="number">8</span>eec<span class="number">99566557</span>f<span class="number">3</span>ee<span class="number">0422734</span>a<span class="number">8</span>fcad<span class="number">17</span><span class="keyword">c</span><span class="number">161</span>aa<span class="number">93</span>d<span class="number">61</span>bdbfb<span class="number">28</span>ed<span class="number">152</span><span class="keyword">c</span><span class="number">143</span><span class="keyword">c</span><span class="number">7</span>eb<span class="number">501</span>db<span class="number">58</span>bc<span class="number">63502</span>a<span class="number">104</span>a<span class="number">84</span>b<span class="number">62</span>d<span class="number">742</span><span class="title">@192</span>.<span class="number">168.1</span>.<span class="number">101</span>:<span class="number">30303</span>’)</span><br></pre></td></tr></table></figure></p>
<p>如果添加成功，输入<code>admin.peers</code>会显示出新添加的节点。</p>
<h1 id="使用节点进行挖矿"><a href="#使用节点进行挖矿" class="headerlink" title="使用节点进行挖矿"></a>使用节点进行挖矿</h1><p>在Geth命令行界面下，输入<code>miner.start()</code>即启动挖矿，挖矿后，会不停刷屏，输入<code>miner.stop()</code>即停止，不用管刷屏导致的命令不全，命令会正常执行。<br>到这一步，已经组建一个私有链的网络，可以像其他区块链一样不停的扩充这个网络，下一篇文章，我会介绍如何在私有链上编写、调试和部署智能合约。</p>
<p>参考文章：</p>
<ol>
<li><a href="http://blog.csdn.net/sportshark/article/details/51855007" target="_blank" rel="noopener">http://blog.csdn.net/sportshark/article/details/51855007</a></li>
<li><a href="http://tech.lab.carl.pro/kb/ethereum/testnet_setup" target="_blank" rel="noopener">http://tech.lab.carl.pro/kb/ethereum/testnet_setup</a></li>
<li><a href="http://www.ethdocs.org/en/latest/network/test-networks.html#setting-up-a-local-private-testnet" target="_blank" rel="noopener">http://www.ethdocs.org/en/latest/network/test-networks.html#setting-up-a-local-private-testnet</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Mining" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Mining</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts</a></li>
<li><a href="https://github.com/janx/ethereum-bootstrap" target="_blank" rel="noopener">https://github.com/janx/ethereum-bootstrap</a></li>
<li><a href="https://forum.qtum.org/topic/127/以太坊私链与智能合约部署入门教程/2" target="_blank" rel="noopener">https://forum.qtum.org/topic/127/以太坊私链与智能合约部署入门教程/2</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu--apt-get update（由于没有公钥，无法验证下列签名）]]></title>
      <url>/2017/11/29/2017-11-29-apt-get-update-GPG%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>当 <code>apt-get update</code> 更新后，出现下面错误时的解决方法：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...bash</span><br><span class="line">正在读取软件包列表… 完成 </span><br><span class="line"><span class="string">W:</span> GPG 错误：<span class="string">http:</span><span class="comment">//ppa.launchpad.net trusty InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 2EA8F35793D8809A</span></span><br></pre></td></tr></table></figure></p>
<p>解决办法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9</span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Executing: gpg –ignore-time-conflict –no-options –no-default-keyring –secret-keyring /tmp/tmp.uxUmi4wF1r –trustdb-name /etc/apt/trustdb.gpg –keyring /etc/apt/trusted.gpg –primary-keyring /etc/apt/trusted.gpg –keyserver keyserver.ubuntu.com –recv-keys 2EA8F35793D8809A </span><br><span class="line">gpg: 下载密钥‘93D8809A’，从 hkp 服务器 keyserver.ubuntu.com </span><br><span class="line">gpg: 密钥 93D8809A：公钥“Launchpad PPA <span class="keyword">for</span> Martin Wimpress”已导入 </span><br><span class="line">gpg: 合计被处理的数量：1 </span><br><span class="line">gpg: 已导入：1 (RSA: 1)</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go 爬虫总结]]></title>
      <url>/2017/11/27/2017-11-27-go%E7%88%AC%E8%99%AB%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>爬虫目的：爬导航和爬商品</p>
<p>爬虫架构：</p>
<ul>
<li>electron虚拟浏览器</li>
<li>proxy代理ip</li>
<li>dashboard网页端调控</li>
<li>爬虫APP</li>
</ul>
<p>实现的功能：</p>
<ul>
<li>url拼接，过滤出商品</li>
<li>url翻页，点击翻页，无限流，loadmore按钮</li>
<li>过滤文本中包含某text的url，过滤url中包含某url的url，定点过滤特定的url，只爬文本中包含某text的url，只爬url中包含某url的url</li>
<li>失败移至末尾重试（次数，本次返回的状态码，延时）</li>
<li>控制爬取频率，控制递归爬取深度</li>
<li>用electron防止cookie或ajax动态加载页面，有WaitSelector，直到WaitSelector出现才返回渲染后的页面给spider，否则返回错误码</li>
<li>分布式，高并发</li>
<li>多个proxy负载均衡</li>
<li>proxy权限控制</li>
<li>dashboard网页端爬虫调度，导航log和简单报表分析，商品log和简单报表分析，服务器上当前所有配置一览</li>
</ul>
<p>我负责的模块：</p>
<ul>
<li>配置文件template</li>
<li>测试被反爬虫的条件，计算最大爬取频率</li>
<li>实现同时爬取多个网站，单线程和并发可选</li>
<li>默认 http client 不会缓存 DNS 记录，而爬虫会有大量的请求，所以自己专门对 DNS 做缓存</li>
<li>调查并分析站点请求不成功的url占比超过 20% 的原因并修复</li>
<li>发现并解决 ssl 证书问题</li>
<li>网站改版，及时更新配置文件</li>
<li>给timeout设一个下界</li>
</ul>
<p>返回408原因：<br>（1）商品Selector作为WaitSelector，有的页面是介绍页，没有商品，返回408<br>（2）翻页超过最大页数，没有商品，返回408。这个原因导致的408一般 <code>成堆</code> 出现<br>（3）无限流需要较长时间来翻页，timeout较小会408<br>（4）目标网站有的商品下架，没有商品，返回408<br>（5）目标网站反爬策略，封ip后也不返回500，只有提示性的html，等不到商品，返回408<br>（6）目标网站必须用https</p>
<p>解决方案：（这几个印象深刻，其他的想不起来了）</p>
<ul>
<li><p>商品Selector作为WaitSelector，有的页面是介绍页，没有商品，返回408</p>
<ul>
<li>有2个waitSelector，一个Selector做监督，一个选商品Selector，如果监督Selector出现了而商品Selector没出来，就判定没商品<ul>
<li>效果好</li>
<li>时间成本高</li>
</ul>
</li>
<li>只要1个errorSelector，出现提示性的error，判定为没有商品<ul>
<li>实现简单，时间成本低，逻辑清晰</li>
<li>不全面，有些站点如果没有商品，也不出现提示性文字</li>
</ul>
</li>
<li>electron不处理，无论是否408都把页面返回，交给spider处理<ul>
<li>electron端实现简单，效果好，易于扩展</li>
<li>spider端实现困难，给spider端挖坑，有隐患</li>
</ul>
</li>
</ul>
</li>
<li><p>ssl 证书问题</p>
<ul>
<li>请求时不检测证书</li>
</ul>
</li>
<li><p>http 请求</p>
<ul>
<li>换成https请求</li>
</ul>
</li>
<li><p>getsockopt: no route to host</p>
<ul>
<li>和firewall有关，我们对昂贵的proxy做权限控制，而我在本地没有这个proxy的权限，必须到服务器上搞</li>
</ul>
</li>
<li><p>getsockopt: connection time out</p>
<ul>
<li>需要特殊的header，不然在命令行是不能成功请求的</li>
</ul>
</li>
<li><p>DNS解析</p>
<ul>
<li>原来的每次都要new一个，修复后只要一个持久化</li>
</ul>
</li>
</ul>
<p>团队共享用到的软件（我们都是远程办公）</p>
<ul>
<li>slack:交流讨论</li>
<li>quip：共享文件</li>
<li>trello：任务管理</li>
<li>zoom：远程会议</li>
<li>google图表：共享文件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spider </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu中使用dpkg安装deb文件提示依赖关系问题，仍未被配置]]></title>
      <url>/2017/10/15/2017-10-11-dpkg-error/</url>
      <content type="html"><![CDATA[<p>使用dpkg时，提示：dpkg：处理软件包XXX时出错：<br>依赖关系问题，仍未被配置</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/0.png" width="700"><br><div class="image-caption">问题</div><br></div>

<p>出现上图时，使用如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/1.png" width="700"><br><div class="image-caption">解决</div><br></div>

<p>等分析完之后，重新使用dpkg –i XXX.deb，就可以了</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/2.png" width="700"><br><div class="image-caption">解决</div><br></div>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Tweepy 翻墙抓取Twitter信息]]></title>
      <url>/2017/10/13/2017-10-11-python-proxy/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/LinXueyuanStdio/PythonDataMining" target="_blank" rel="noopener">repo在此</a>，如果觉得做得好，给个star鼓励下吧！</p>
<p>在看《Python数据挖掘入门与实践》的时候，随书附带的代码已经过时几年了，现在边看书边修，很是辛苦</p>
<p>在学习第六章”使用朴素贝叶斯进行社交媒体挖掘”时，数据集需要通过twitter的API来获取</p>
<p>（玛蛋，为毛不随书附带数据集）</p>
<p>twitter在国内被墙了，只能翻墙</p>
<p>浏览器翻墙容易，弄个lantern或者shadowsockets就可以了</p>
<p>但是，由于ubuntu的代理不是全局代理，在命令行中翻墙要设proxy，在代码中翻墙也要设proxy</p>
<p>所以难处在于代码要就twitter的python接口翻墙</p>
<p>如果只是一个简单的加proxy网络请求，几行就可以搞定：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">proxy_support = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span> : <span class="string">'http://127.0.0.1:80'</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>可是twitter的python接口是自动发起请求的呀</p>
<p>懒得去改源码</p>
<p>只好看看怎么在代码中设置好翻墙</p>
<h1 id="账号准备"><a href="#账号准备" class="headerlink" title="账号准备"></a>账号准备</h1><p>首先需要在twitter官方注册twitter账号，并新建一个应用，链接：<a href="https://apps.twitter.com/app/new" target="_blank" rel="noopener">新建应用</a><br>如果新建应用不成功，国内大多数情况都是无法验证手机号，可以参考这个教程，亲测有效，链接：<a href="http://jingyan.baidu.com/article/cd4c2979e84b0a756e6e60b8.html" target="_blank" rel="noopener">验证手机号</a><br>注册成功后，可以查看自己的keys and access token，如下图： </p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/0.png" width="700"><br><div class="image-caption">Consumer Key and Consumer Secret</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/1.png" width="700"><br><div class="image-caption">Access Token and Access Token Secret</div><br></div>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>python3.5+</p>
<p>安装tweepy： 在命令行中输入：<code>pip install tweepy</code></p>
<h1 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tweepy</span><br><span class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> OAuthHandler</span><br><span class="line"></span><br><span class="line">consumer_key = <span class="string">'replace your own account consumer_key'</span></span><br><span class="line">consumer_secret = <span class="string">'replace your own account consumer_secret'</span></span><br><span class="line">access_token = <span class="string">'replace your own account access_token'</span></span><br><span class="line">access_secret = <span class="string">'replace your own account access_secret'</span></span><br><span class="line"></span><br><span class="line">auth = OAuthHandler(consumer_key,consumer_secret)</span><br><span class="line">auth.set_access_token(access_token,access_secret)</span><br><span class="line"></span><br><span class="line">api = tweepy.API(auth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> tweepy.Cursor(api.home_timeline).items(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (status.text)</span><br></pre></td></tr></table></figure>
<h1 id="报错一-挂代理翻墙"><a href="#报错一-挂代理翻墙" class="headerlink" title="报错一:挂代理翻墙"></a>报错一:挂代理翻墙</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: HTTPSConnectionPool(host='api.twitter.com', port=443): Max retries exceeded with url: /1.1/statuses/home_timeline.json (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x0000000002FC6E80&gt;: Failed to establish a new connection: [Errno 10061] ',)))</span><br></pre></td></tr></table></figure>
<p>主要原因就是twitter被墙了，twitter的api当然也被墙了。 </p>
<p>这时候就需要挂代理翻墙了，我使用的是自己搭建的shadowsockets。其它翻墙软件或者服务器网上有很多，请自行查找。 </p>
<p>代理打开了之后，在原代码中，将<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth)</span><br></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth,proxy=<span class="string">"127.0.0.1:1080"</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="报错二-请求的配置没有写对"><a href="#报错二-请求的配置没有写对" class="headerlink" title="报错二:请求的配置没有写对"></a>报错二:请求的配置没有写对</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Twitter error response: status code = 401</span><br></pre></td></tr></table></figure>
<p>原因：</p>
<ul>
<li>这几个发起请求的配置没有写对，仔细修改<ul>
<li>consumer_key</li>
<li>consumer_secret</li>
<li>access_token</li>
<li>access_secret</li>
</ul>
</li>
<li>改过了还是不对，刷新Regenerate Consumer Key and Secret和Regenerate My Access Token and Token Secret，重新填写请求</li>
</ul>
<h1 id="报错三"><a href="#报错三" class="headerlink" title="报错三"></a>报错三</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: HTTPSConnectionPool(host='api.twitter.com', port=443): Max retries exceeded with url: /1.1/statuses/home_timeline.json (Caused by ProxyError('Cannot connect to proxy.', timeout('timed out',)))</span><br></pre></td></tr></table></figure>
<p>原因是Shadowsocks使用的是socks5代理，并非是http代理。</p>
<p>emmm，简单，大手一挥，稍微修改一下即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth, proxy=<span class="string">"socks5://127.0.0.1:1080"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="报错四"><a href="#报错四" class="headerlink" title="报错四"></a>报错四</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: SOCKSHTTPSConnectionPool(host='api.twitter.com', port=443): Read timed out. (read timeout=60)</span><br></pre></td></tr></table></figure>
<p>原因是tweepy使用的是http代理，不能用socks5代理（我日）。</p>
<p>所以需要将socks5代理转换为http代理来支持tweepy访问twitter REST API,这里参考以下地址：<br><a href="http://blog.csdn.net/shaobo8910/article/details/53908639" target="_blank" rel="noopener">为终端设置Shadowsocks代理</a></p>
<p>最后不要忘记在代码里加上代理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth, proxy=<span class="string">"127.0.0.1:8123"</span>)</span><br></pre></td></tr></table></figure>
<p>还没完</p>
<p>tweepy 这个库的资料比较少,我自己摸索着试了试,把代码发上来</p>
<p>一.按照关键字搜索Twitter的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接上面的代码(q = 关键字 ,count = 返回的数据量 . 推特一次最多返回100条??)</span></span><br><span class="line">search_results = api.search(q=<span class="string">'python'</span>,count=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#对对象进行迭代</span></span><br><span class="line"><span class="keyword">for</span> tweet <span class="keyword">in</span> search_results:</span><br><span class="line">    <span class="comment">#tweet还是一个对象,推特的相关信息在tweer._json里</span></span><br><span class="line">    <span class="comment">#这里是检测消息是否含有'text'键,并不是所有TWitter返回的所有对象都是消息(有些可能是用来删除消息或者其他内容的动作--这个没有确认),区别就是消息对象中是否含有'text'键</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'text'</span> <span class="keyword">in</span> tweet._json:</span><br><span class="line">        print(tweet._json[<span class="string">'text'</span>])</span><br><span class="line">        <span class="comment">#这里是把内容给打印出来了,如果需要保存到文件需要用json库的dumps函数转换为字符串形式后写入到文件中</span></span><br><span class="line">        <span class="comment">#例如 :output_file.write(json.dumps(tweet._json))</span></span><br></pre></td></tr></table></figure>
<p>二.根据Twitter消息的ID批量获取消息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中id_list 是消息ID组成的list 长度也不要超过100</span></span><br><span class="line">search_result = api.statuses_lookup(id_list)</span><br></pre></td></tr></table></figure></p>
<p>这时，就可以成功访问了</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/2.png" width="700"><br><div class="image-caption">成功访问</div><br></div>


]]></content>
      
        <categories>
            
            <category> Proxy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[algorithms-Bit-Options]]></title>
      <url>/2017/10/11/2017-10-11-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>常用的一个等式：<code>-n = ~(n - 1) = ~n + 1</code></p>
<h2 id="获得int型最大值"><a href="#获得int型最大值" class="headerlink" title="获得int型最大值"></a>获得int型最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;<span class="comment">//2147483647,由于优先级关系,括号不可省略</span></span><br><span class="line">    <span class="keyword">return</span> ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);   <span class="comment">//2147483647</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; -<span class="number">1</span>) - <span class="number">1</span>;<span class="comment">//2147483647</span></span><br><span class="line">    <span class="keyword">return</span> ((unsigned <span class="keyword">int</span>) - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">//2147483647</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获得int型最小值"><a href="#获得int型最小值" class="headerlink" title="获得int型最小值"></a>获得int型最小值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;<span class="comment">//-2147483648</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; -<span class="number">1</span>;<span class="comment">//-2147483648</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获得long类型的最大值"><a href="#获得long类型的最大值" class="headerlink" title="获得long类型的最大值"></a>获得long类型的最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getMaxLong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((unsigned <span class="keyword">long</span>) - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">//2147483647　c语言版</span></span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">long</span>)<span class="number">1</span> &lt;&lt; <span class="number">127</span>) - <span class="number">1</span>;<span class="comment">//9223372036854775807  java版</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获得long最小值，和其他类型的最大值，最小值同理.</p>
<h2 id="2运算"><a href="#2运算" class="headerlink" title="2运算"></a>2运算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span>　<span class="comment">// 乘以2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span> <span class="comment">// 除以2</span></span><br><span class="line">n &lt;&lt; m <span class="comment">// 乘以2的m次方</span></span><br><span class="line">n &gt;&gt; m <span class="comment">// 除以2的m次方</span></span><br></pre></td></tr></table></figure>
<h2 id="判断一个数的奇偶性"><a href="#判断一个数的奇偶性" class="headerlink" title="判断一个数的奇偶性"></a>判断一个数的奇偶性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isOddNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不用临时变量交换两个数（面试常考）"><a href="#不用临时变量交换两个数（面试常考）" class="headerlink" title="不用临时变量交换两个数（面试常考）"></a>不用临时变量交换两个数（面试常考）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    (*a) ^= (*b) ^= (*a) ^= (*b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通用版（一些语言中得分开写）<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span><span class="regexp"> ^=</span> b;</span><br><span class="line"><span class="attribute">b</span><span class="regexp"> ^=</span> a;</span><br><span class="line"><span class="attribute">a</span><span class="regexp"> ^=</span> b;</span><br></pre></td></tr></table></figure></p>
<h2 id="取绝对值"><a href="#取绝对值" class="headerlink" title="取绝对值"></a>取绝对值</h2><p>（某些机器上，效率比n&gt;0  ?  n:-n 高）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n ^ (n &gt;&gt; <span class="number">31</span>)) - (n &gt;&gt; <span class="number">31</span>);</span><br><span class="line"><span class="comment">/* n&gt;&gt;31 取得n的符号，若n为正数，n&gt;&gt;31等于0，若n为负数，n&gt;&gt;31等于-1 </span></span><br><span class="line"><span class="comment">若n为正数 n^0=0,数不变，若n为负数有n^-1 需要计算n和-1的补码，然后进行异或运算， </span></span><br><span class="line"><span class="comment">结果n变号并且为n的绝对值减1，再减去-1就是绝对值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取两个数的最大值"><a href="#取两个数的最大值" class="headerlink" title="取两个数的最大值"></a>取两个数的最大值</h2><p>（某些机器上，效率比a&gt;b ? a:b高）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | a &amp; (~(a-b) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="comment">/*如果a&gt;=b,(a-b)&gt;&gt;31为0，否则为-1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C语言版<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ ((x ^ y) &amp; -(x &lt; y));</span><br><span class="line">    <span class="comment">/*如果x&lt;y x&lt;y返回1，否则返回0，</span></span><br><span class="line"><span class="comment">    与0做与运算结果为0，与-1做与运算结果不变*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="取两个数的最小值"><a href="#取两个数的最小值" class="headerlink" title="取两个数的最小值"></a>取两个数的最小值</h2><p>（某些机器上，效率比a&gt;b ? b:a高）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | b &amp; (~(a-b) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="comment">/*如果a&gt;=b,(a-b)&gt;&gt;31为0，否则为-1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C语言版<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ^ ((x ^ y) &amp; -(x &lt; y));</span><br><span class="line">    <span class="comment">/*如果x&lt;y x&lt;y返回1，否则返回0， </span></span><br><span class="line"><span class="comment">      与0做与运算结果为0，与-1做与运算结果不变*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="判断符号是否相同"><a href="#判断符号是否相同" class="headerlink" title="判断符号是否相同"></a>判断符号是否相同</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSameSign</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//有0的情况例外</span></span><br><span class="line">    <span class="keyword">return</span> (x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// true 表示 x和y有相同的符号， false表示x，y有相反的符号。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计算2的n次方"><a href="#计算2的n次方" class="headerlink" title="计算2的n次方"></a>计算2的n次方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFactorialofTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n &gt; 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> &lt;&lt; (n-<span class="number">1</span>);<span class="comment">//2的n次方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断一个数是不是2的幂"><a href="#判断一个数是不是2的幂" class="headerlink" title="判断一个数是不是2的幂"></a>判断一个数是不是2的幂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFactorialofTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/*如果是2的幂，n一定是100... n-1就是1111.... </span></span><br><span class="line"><span class="comment">       所以做与运算结果为0*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对2的n次方取余"><a href="#对2的n次方取余" class="headerlink" title="对2的n次方取余"></a>对2的n次方取余</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quyu</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为2的次方</span></span><br><span class="line">    <span class="keyword">return</span> m &amp; (n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*如果是2的幂，n一定是100... n-1就是1111.... </span></span><br><span class="line"><span class="comment">     所以做与运算结果保留m在n范围的非0的位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求两个整数的平均值"><a href="#求两个整数的平均值" class="headerlink" title="求两个整数的平均值"></a>求两个整数的平均值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x + y) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x ^ y) &gt;&gt; <span class="number">1</span>) + (x &amp; y);</span><br><span class="line">    <span class="comment">/*(x^y) &gt;&gt; 1得到x，y其中一个为1的位并除以2， </span></span><br><span class="line"><span class="comment">       x&amp;y得到x，y都为1的部分，加一起就是平均数了*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是三个最基本对二进制位的操作</p>
<h2 id="从低位到高位-取n的第m位"><a href="#从低位到高位-取n的第m位" class="headerlink" title="从低位到高位,取n的第m位"></a>从低位到高位,取n的第m位</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; (m-<span class="number">1</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从低位到高位-将n的第m位置设为1"><a href="#从低位到高位-将n的第m位置设为1" class="headerlink" title="从低位到高位.将n的第m位置设为1"></a>从低位到高位.将n的第m位置设为1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBitToOne</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; (m-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">/*将1左移m-1位找到第m位，得到000...1...000 </span></span><br><span class="line"><span class="comment">      n在和这个数做或运算*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从低位到高位-将n的第m位置设为0"><a href="#从低位到高位-将n的第m位置设为0" class="headerlink" title="从低位到高位,将n的第m位置设为0"></a>从低位到高位,将n的第m位置设为0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBitToZero</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; ~(<span class="number">1</span> &lt;&lt; (m-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">/* 将1左移m-1位找到第m位，取反后变成111...0...1111 </span></span><br><span class="line"><span class="comment">       n再和这个数做与运算*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）"><a href="#另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）" class="headerlink" title="另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）"></a>另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n+<span class="number">1</span> = -~n</span><br><span class="line">n-<span class="number">1</span> = ~-n</span><br><span class="line">-n  = ~n+<span class="number">1</span></span><br><span class="line">-n  = (n^-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">x = a ^ b ^ x &lt;=&gt; <span class="keyword">if</span>(x == a) x = b; <span class="keyword">if</span>(x == b) x = a;</span><br><span class="line">sign(x) = !!n - (((unsigned)n &gt;&gt; <span class="number">31</span>) &lt;&lt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取整数二进制表示中最右侧的1"><a href="#获取整数二进制表示中最右侧的1" class="headerlink" title="获取整数二进制表示中最右侧的1"></a>获取整数二进制表示中最右侧的1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &amp; (-n)  &lt;=&gt; n &amp; ~(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h2><p>用到了n &amp; (n - 1)<br>由x &amp; (x - 1)消去x最后一位的1可知。不断使用 x &amp; (x - 1) 消去x最后一位的1，计算总共消去了多少次即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOnes</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">        num = num &amp; (num-<span class="number">1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="function">unsigned <span class="keyword">int</span> <span class="title">Bit_Reverse</span><span class="params">(unsigned <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>) | ((v &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xaaaaaaaa</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) | ((v &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xcccccccc</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>) | ((v &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0f0f0f0</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00ff00ff</span>) | ((v &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xff00ff00</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0000ffff</span>) | ((v &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输入两个数A和B，输出将A转换为B所需改变的二进制的位数。"><a href="#输入两个数A和B，输出将A转换为B所需改变的二进制的位数。" class="headerlink" title="输入两个数A和B，输出将A转换为B所需改变的二进制的位数。"></a>输入两个数A和B，输出将A转换为B所需改变的二进制的位数。</h2><p>首先，A异或B得到的是A和B中不相同位数组成的数，然后再求这个数二进制表示中1的个数，即为所求。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countOnes(A^B);</span><br></pre></td></tr></table></figure></p>
<h2 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h2><p>用到了n &amp; (n - 1) 和 a ^ b ^ b = a</p>
<h3 id="数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数"><a href="#数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数" class="headerlink" title="数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数"></a>数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数</h3><p>因为只有一个数恰好出现一个，剩下的都出现过两次，所以只要将所有的数异或起来，就可以得到唯一的那个数。<br>参考文章：<a href="http://zhedahht.blog.163.com/blog/static/2541117420071128950682/" target="_blank" rel="noopener">http://zhedahht.blog.163.com/blog/static/2541117420071128950682/</a></p>
<h3 id="数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数"><a href="#数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数" class="headerlink" title="数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数"></a>数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数</h3><p>因为数是出现三次的，也就是说，对于每一个二进制位，如果只出现一次的数在该二进制位为1，那么这个二进制位在全部数字中出现次数无法被3整除。</p>
<p>膜3运算只有三种状态：00,01,10，因此我们可以使用两个位来表示当前位%3，对于每一位，我们让Two，One表示当前位的状态，B表示输入数字的对应位，Two+和One+表示输出状态。</p>
<p>参考文章：<a href="http://zhedahht.blog.163.com/blog/static/25411174201283084246412/" target="_blank" rel="noopener">http://zhedahht.blog.163.com/blog/static/25411174201283084246412/</a></p>
<h2 id="数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数"><a href="#数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数" class="headerlink" title="数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数"></a>数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数</h2><p>有了第一题的基本的思路，我们可以将数组分成两个部分，每个部分里只有一个元素出现一次，其余元素都出现两次。那么使用这种方法就可以找出这两个元素了。<br>不妨假设出现一个的两个元素是x，y，那么最终所有的元素异或的结果就是res = x^y。并且res！=0，那么我们可以找出res二进制表示中的某一位是1。对于原来的数组，我们可以根据这个位置是不是1就可以将数组分成两个部分。x，y在不同的两个子数组中。而且对于其他成对出现的元素，要么在x所在的那个数组，要么在y所在的那个数组。</p>
<h2 id="位操作实现加减乘除运算"><a href="#位操作实现加减乘除运算" class="headerlink" title="位操作实现加减乘除运算"></a>位操作实现加减乘除运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryAdd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> carry, add;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        add = a ^ b; <span class="comment">//该操作得到本位的加法结果  </span></span><br><span class="line">        carry = (a &amp; b) &lt;&lt; <span class="number">1</span>; <span class="comment">//该操作得到该位对高位的进位值  </span></span><br><span class="line">        a = add;  </span><br><span class="line">        b = carry;  </span><br><span class="line">    &#125; <span class="keyword">while</span> (carry != <span class="number">0</span>); <span class="comment">//循环直到某次运算没有进位，运算结束</span></span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BinaryAdd(a, BinaryAdd(~b, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*乘法 </span></span><br><span class="line"><span class="comment">该过程中的bit_map是为了快速得到乘法过程中某位相乘的中间结果S[i] </span></span><br><span class="line"><span class="comment">需要位移的位数。bit_map的键值是2^0, 2^1,2^2, ……之类的数，对应的 </span></span><br><span class="line"><span class="comment">值是0，1,2,……(即需要位移的位数)。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryMultiply</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> neg = (b &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">0</span>)</span><br><span class="line">        b = -b;  </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; bit_map;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        bit_map.insert(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; i, i));  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        b &amp; ~(b - 1)可以得到乘数b的二进制表示中最右侧1的位置 </span></span><br><span class="line"><span class="comment">        last_bit记录被乘数a需要位移的位数 </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">        <span class="keyword">int</span> last_bit = bit_map[b &amp; ~(b - <span class="number">1</span>)];  </span><br><span class="line">        <span class="comment">//将得到的乘法结果全部相加即为最后结果  </span></span><br><span class="line">        sum += (a &lt;&lt; last_bit);  </span><br><span class="line">        b &amp;= b - <span class="number">1</span>; <span class="comment">//每次将b的二进制表示的最右侧1去掉用于下一次乘法  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(neg)</span><br><span class="line">        sum = -sum;  </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryDivide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> neg = (a &gt; <span class="number">0</span>) ^ (b &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>)</span><br><span class="line">        a = -a;  </span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">0</span>)</span><br><span class="line">        b = -b;  </span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> msb = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//msd记录除数需要左移的位数</span></span><br><span class="line">    <span class="keyword">for</span>(msb = <span class="number">0</span>; msb &lt; <span class="number">32</span>; msb++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((b &lt;&lt; msb) &gt;= a)  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>; <span class="comment">//记录每次除法的商</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = msb; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>((b &lt;&lt; i) &gt; a)  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        q |= (<span class="number">1</span> &lt;&lt; i);  </span><br><span class="line">        a -= (b &lt;&lt; i);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(neg)</span><br><span class="line">        <span class="keyword">return</span> -q;  </span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><ul>
<li><a href="http://blog.csdn.net/zmazon/article/details/8262185" target="_blank" rel="noopener">优秀程序员不得不知道的20个位运算技巧</a><a href="http://blog.csdn.net/zmazon/article/details/8262185" target="_blank" rel="noopener">http://blog.csdn.net/zmazon/article/details/8262185</a></li>
<li><a href="http://blog.csdn.net/u013074465/article/details/42680239" target="_blank" rel="noopener">位操作实现加减乘除四则运算</a><a href="http://blog.csdn.net/u013074465/article/details/42680239" target="_blank" rel="noopener">http://blog.csdn.net/u013074465/article/details/42680239</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向过程，面向对象，函数式]]></title>
      <url>/2017/09/18/2017-9-18-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="如何把大象关进冰箱里？"><a href="#如何把大象关进冰箱里？" class="headerlink" title="如何把大象关进冰箱里？"></a>如何把大象关进冰箱里？</h3><h4 id="面向过程："><a href="#面向过程：" class="headerlink" title="面向过程："></a>面向过程：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把冰箱门打开 =&gt; 大象放冰箱里 =&gt; 冰箱门关上</span><br></pre></td></tr></table></figure>
<h4 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">冰箱.开门（）</span><br><span class="line">冰箱.放入（大象）</span><br><span class="line">冰箱.关门（）</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冰箱.开门().放入(大象).关门()</span><br></pre></td></tr></table></figure>
<h4 id="函数式："><a href="#函数式：" class="headerlink" title="函数式："></a>函数式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关进（冰箱，大象）:</span><br><span class="line">    关门（放入（开门（冰箱），大象））</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂思 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[terminal tips]]></title>
      <url>/2017/08/28/2017-08-28-Terminal-tips/</url>
      <content type="html"><![CDATA[<h1 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h1><ul>
<li>快捷键：<code>Ctrl+Alt-T</code></li>
<li>空白处右键：有选项<code>在终端打开</code></li>
<li>处于命令行窗口：<code>Ctrl+T</code>选项卡形式，<code>Ctrl+N</code>窗口形式</li>
</ul>
<h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><h2 id="颜色代码"><a href="#颜色代码" class="headerlink" title="颜色代码"></a>颜色代码</h2><hr>
<table>
<thead>
<tr>
<th>前景</th>
<th>背景</th>
<th>颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>30</td>
<td>40</td>
<td>黑色</td>
</tr>
<tr>
<td>31</td>
<td>41</td>
<td>紅色</td>
</tr>
<tr>
<td>32</td>
<td>42</td>
<td>綠色</td>
</tr>
<tr>
<td>33</td>
<td>43</td>
<td>黃色</td>
</tr>
<tr>
<td>34</td>
<td>44</td>
<td>藍色</td>
</tr>
<tr>
<td>35</td>
<td>45</td>
<td>紫紅色</td>
</tr>
<tr>
<td>36</td>
<td>46</td>
<td>青藍色</td>
</tr>
<tr>
<td>37</td>
<td>47</td>
<td>白色</td>
</tr>
<tr>
<td>——-</td>
<td>———–</td>
<td>———</td>
</tr>
<tr>
<td>1</td>
<td>透明色</td>
</tr>
</tbody>
</table>
<h2 id="——"><a href="#——" class="headerlink" title="——- "></a>——- </h2><table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>OFF</td>
</tr>
<tr>
<td>1</td>
<td>高亮显示</td>
</tr>
<tr>
<td>4</td>
<td>underline</td>
</tr>
<tr>
<td>5</td>
<td>闪烁</td>
</tr>
<tr>
<td>7</td>
<td>反白显示</td>
</tr>
<tr>
<td>8</td>
<td>不可见</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="序列说明"><a href="#序列说明" class="headerlink" title="序列说明"></a>序列说明</h2><p> | \a |  ASCII响铃字符（也可以键入 \007） |<br> | \d |  “Wed Sep 06”格式的日期 |<br> | \e |  ASCII转义字符（也可以键入 \033） |<br> | \h |  主机名的第一部分（如 “mybox”） |<br> | \H |  主机的全称（如 “mybox.mydomain.com”） |<br> | \j |  在此 shell中通过按 ^Z挂起的进程数 |<br> | \l | 此 shell的终端设备名（如 “ttyp4”） |<br> | \n |  换行符 |<br> | \r |  回车符 |<br> | \s |  shell的名称（如 “bash”） |<br> | \t |  24小时制时间（如 “23:01:01”） |<br> | \T |  12小时制时间（如 “11:01:01”） |<br> | \@ | 带有 am/pm的 12小时制时间 |<br> | \u | 用户名 |<br> | \v | bash的版本（如 2.04） |<br> | \V |  Bash版本（包括补丁级别） ?/td&gt;; |<br> | \w |  当前工作目录（如 “/home/drobbins”） |<br> | \W |  当前工作目录的“基名 (basename)”（如 “drobbins”） |<br> | ! |  当前命令在历史缓冲区中的位置 |<br> | # | 命令编号（只要您键入内容，它就会在每次提示时累加） |<br> | \$ |  如果您不是超级用户 (root)，则插入一个 “$”；如果您是超级用户，则显示一个 “#” |<br> | \xxx |  插入一个用三位数 xxx（用零代替未使用的数字，如 “/007”）表示的 ASCII 字符 |<br> | \  | 反斜杠 |<br> | [ | 这个序列应该出现在不移动光标的字符序列（如颜色转义序列）之前。它使 bash能够正确计算自动换行。 |<br> | ]  | 这个序列应该出现在非打印字符序列之后。 | </p>
<h2 id="颜色的设置公式"><a href="#颜色的设置公式" class="headerlink" title="颜色的设置公式"></a>颜色的设置公式</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色=\<span class="number">033</span>[代码<span class="comment">;前景;背景m</span></span><br></pre></td></tr></table></figure>
<p>如：<code>\033[1;32;40m</code>表示高亮显示字体为绿色，背景色为黑色（颜色定义见本文前面的表格）</p>
<blockquote>
<p>注意：<br>  要将全部非打印字符用专用的 bash 转义序列 “[“和 “]“括起来。这两个序列通知 bash，被括起来的字符不占用行上的任何空间，这样就使自动换行能够继续正常工作。<br>  这点很关键要不然等你设好了颜色，你的终端换行会乱七八糟</p>
</blockquote>
<hr>
<h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><p>默认的就很好看，打开<code>~/.bashrc</code>，其中有几行声明</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ "$color_prompt" = yes ]; then</span><br><span class="line">    PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '</span><br><span class="line">else</span><br><span class="line">    PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ '</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>下面这个就是默认的配色方案<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>要修改配色方案，在文件末尾加上<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=`balabala`</span><br></pre></td></tr></table></figure></p>
<h2 id="ROOT身份下的终端颜色"><a href="#ROOT身份下的终端颜色" class="headerlink" title="ROOT身份下的终端颜色"></a>ROOT身份下的终端颜色</h2><p>打开<code>/root/.bash.rc</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/<span class="selector-class">.bash</span><span class="selector-class">.rc</span></span><br></pre></td></tr></table></figure></p>
<p>按<code>i</code>进入插入字符模式，在文件末尾加上一行(把默认的贴过去)<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>按下<code>Esc</code>然后输入<code>:wq</code>保存修改</p>
<p>再输入<code>source ~/.bashrc</code>刷新</p>
<h2 id="SSH会话下的终端颜色"><a href="#SSH会话下的终端颜色" class="headerlink" title="SSH会话下的终端颜色"></a>SSH会话下的终端颜色</h2><p>通过在.bashrc文件中更改与ssh连接的每个主机名上的PS1值</p>
<p>在托管的机器上(lxy @ ubuntu)同样打开文件<code>~/.bashrc</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure></p>
<p>在文件末尾加上一行(把默认的贴过去)<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>按下<code>Esc</code>然后输入<code>:wq</code>保存修改</p>
<p>再输入<code>source ~/.bashrc</code>刷新</p>
<h1 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h1><p>安装zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure></p>
<p>安装oh-my-zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/tmplates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></p>
<p>Powerline 主题<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme ~/.ohmyzsh-powerline</span><br><span class="line">cd ~/.ohmyzsh-powerline</span><br><span class="line">cp powerline.zsh-theme ~/.oh-my-zsh/themes/powerline.zsh-theme</span><br><span class="line">rm -rf ~/.ohmyzsh-powerline</span><br></pre></td></tr></table></figure></p>
<p>把zsh设为默认<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></p>
<p>卸载zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove zsh</span><br></pre></td></tr></table></figure></p>
<p>今天手残装了zsh和oh-my-zsh后又卸载掉，导致<code>su</code>进不去<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无法执行 <span class="regexp">/usr/</span>bin/<span class="string">zsh:</span> 没有那个文件或目录</span><br></pre></td></tr></table></figure></p>
<p>只要把 <code>/usr/bin/zsh</code> 改成 <code>/bin/bash</code> 就可以了<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure></p>
<p>第一句改成<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure></p>
<p>或者直接运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/bashrc</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tips </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang程序配置方案小结]]></title>
      <url>/2017/08/28/2017-08-28-Golang-setting/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>无论使用任何编程语言开发应用，都离不开配置数据。配置数据提供的形式有多样，不外乎命令行选项(options)、参数（parameters)，环境 变量（env vars)以及配置文件等。Golang也不例外。Golang内置flag标准库，可以用来支持部分命令行选项和参数的解析；Golang通过os包提 供的方法可以获取当前环境变量；但Golang没有规定标准配置文件格式(虽说内置支持xml、json)，多通过第三方 包来解决配置文件读取的问题。Golang配置相关的第三方包邮很多，作者在本文中给出的配置方案中就包含了主流的第三方配置数据操作包。</p>
<p>一个良好的应用配置层次应该是这样的：</p>
<ol>
<li>程序内内置配置项的初始默认值</li>
<li>配置文件中的配置项值可以覆盖(override)程序内配置项的默认值。</li>
<li>命令行选项和参数值具有最高优先级，可以override前两层的配置项值。</li>
</ol>
<p>下面循序渐进探讨golang程序配置方案。</p>
<h1 id="解析命令行选项和参数"><a href="#解析命令行选项和参数" class="headerlink" title="解析命令行选项和参数"></a>解析命令行选项和参数</h1><p>这一节关注golang程序如何访问命令行选项和参数。</p>
<p>golang对访问到命令行参数提供了内建的支持：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cmdlineargs.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">//      "fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"I am "</span>, os.Args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    baseName := filepath.Base(os.Args[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"The base name is "</span>, baseName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The length of array a can be discovered using the built-in function len</span></span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Argument # is "</span>, <span class="built_in">len</span>(os.Args))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the first command line arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"The first command line argument: "</span>, os.Args[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">go</span> build cmdlineargs.<span class="keyword">go</span></span><br><span class="line">$cmdlineargs test one</span><br><span class="line">I <span class="keyword">am</span>  cmdlineargs</span><br><span class="line">The base name <span class="keyword">is</span>  cmdlineargs</span><br><span class="line">Argument # <span class="keyword">is</span>  <span class="number">3</span></span><br><span class="line">The <span class="keyword">first</span> <span class="keyword">command</span> <span class="built_in">line</span> argumen<span class="variable">t:</span>  test</span><br></pre></td></tr></table></figure></p>
<p>对于命令行结构复杂一些的程序，我们最起码要用到golang标准库内置的flag包：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cmdlineflag.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    <span class="comment">// main operation modes</span></span><br><span class="line">    write = flag.Bool(<span class="string">"w"</span>, <span class="literal">false</span>, <span class="string">"write result back instead of stdout\n\t\tDefault: No write back"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// layout control</span></span><br><span class="line">    tabWidth = flag.Int(<span class="string">"tabwidth"</span>, <span class="number">8</span>, <span class="string">"tab width\n\t\tDefault: Standard"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// debugging</span></span><br><span class="line">    cpuprofile = flag.String(<span class="string">"cpuprofile"</span>, <span class="string">""</span>, <span class="string">"write cpu profile to this file\n\t\tDefault: no default"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">usage</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Fprintf allows us to print to a specifed file handle or stream</span></span><br><span class="line">    fmt.Fprintf(os.Stderr, <span class="string">"\nUsage: %s [flags] file [path ...]\n\n"</span>,</span><br><span class="line">        <span class="string">"CommandLineFlag"</span>) <span class="comment">// os.Args[0]</span></span><br><span class="line">    flag.PrintDefaults()</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Before parsing the flags\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"T: %d\nW: %s\nC: '%s'\n"</span>,</span><br><span class="line">        *tabWidth, strconv.FormatBool(*write), *cpuprofile)</span><br><span class="line"></span><br><span class="line">    flag.Usage = usage</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There is also a mandatory non-flag arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag.Args()) &lt; <span class="number">1</span> &#123;</span><br><span class="line">        usage()</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    fmt.Printf(<span class="string">"Testing the flag package\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"T: %d\nW: %s\nC: '%s'\n"</span>,</span><br><span class="line">        *tabWidth, strconv.FormatBool(*write), *cpuprofile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, element := <span class="keyword">range</span> flag.Args() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"I: %d C: '%s'\n"</span>, index, element)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子中：</p>
<ul>
<li>说明了三种类型标志的用法：Int、String和Bool。</li>
<li>说明了每个标志的定义都由类型、命令行选项文本、默认值以及含义解释组成。</li>
<li>最后说明了如何处理标志选项(flag option)以及非option参数。</li>
</ul>
<p>不带参数运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line"></span><br><span class="line">Usage: CommandLineFlag [flags] file [path ...]</span><br><span class="line"></span><br><span class="line">  -cpuprofile="": write cpu profile to this file</span><br><span class="line">        Default: no default</span><br><span class="line">  -tabwidth=8: tab width</span><br><span class="line">        Default: Standard</span><br><span class="line">  -w=false: write result back instead of stdout</span><br><span class="line">        Default: No write back</span><br></pre></td></tr></table></figure></p>
<p>带命令行标志以及参数运行(一个没有flag，一个有两个flag)：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag aa bb</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">Testing the flag package</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">I: 0 C: 'aa'</span><br><span class="line">I: 1 C: 'bb'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag -tabwidth=2 -w aa</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">Testing the flag package</span><br><span class="line">T: 2</span><br><span class="line">W: true</span><br><span class="line">C: ''</span><br><span class="line">I: 0 C: 'aa'</span><br></pre></td></tr></table></figure></p>
<p>从例子可以看出，简单情形下，你无需编写自己的命令行parser或使用第三方包，使用go内建的flag包即可以很好的完成工作。但是golang的 flag包与命令行Parser的事实标准：Posix getopt（C/C++/Perl/Shell脚本都可用）相比，还有较大差距，主要体现在：</p>
<ol>
<li>无法支持区分long option和short option，比如：-h和–help。</li>
<li>不支持short options合并，比如：ls -l -h &lt;=&gt; ls -hl</li>
<li>命令行标志的位置不能任意放置，比如无法放在non-flag parameter的后面。</li>
</ol>
<p>不过毕竟flag是golang内置标准库包，你无须付出任何cost，就能使用它的功能。另外支持bool型的flag也是其一大亮点。</p>
<h1 id="TOML，Go配置文件的事实标准（这个可能不能得到认同）"><a href="#TOML，Go配置文件的事实标准（这个可能不能得到认同）" class="headerlink" title="TOML，Go配置文件的事实标准（这个可能不能得到认同）"></a>TOML，Go配置文件的事实标准（这个可能不能得到认同）</h1><p>命令行虽然是一种可选的配置方案，但更多的时候，我们使用配置文件来存储静态的配置数据。就像Java配xml，ruby配yaml，windows配 ini，Go也有自己的搭配组合，那就是TOML（Tom’s Obvious, Minimal Language）。</p>
<p>初看toml语法有些类似windows ini，但细致研究你会发现它远比ini强大的多，下面是一个toml配置文件例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a TOML document. Boom.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title</span> = <span class="string">"TOML Example"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[owner]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"Lance Uppercut"</span></span><br><span class="line"><span class="attr">dob</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span> # First class dates? Why not?</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">server</span> = <span class="string">"192.168.1.1"</span></span><br><span class="line"><span class="attr">ports</span> = [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</span><br><span class="line"><span class="attr">connection_max</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># You can indent as you please. Tabs or spaces. TOML don't care.</span></span><br><span class="line"><span class="section">  [servers.alpha]</span></span><br><span class="line">  ip = "10.0.0.1"</span><br><span class="line">  dc = "eqdc10"</span><br><span class="line"></span><br><span class="line"><span class="section">  [servers.beta]</span></span><br><span class="line">  ip = "10.0.0.2"</span><br><span class="line">  dc = "eqdc10"</span><br><span class="line"></span><br><span class="line"><span class="section">[clients]</span></span><br><span class="line"><span class="attr">data</span> = [ [<span class="string">"gamma"</span>, <span class="string">"delta"</span>], [<span class="number">1</span>, <span class="number">2</span>] ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line breaks are OK when inside arrays</span></span><br><span class="line"><span class="attr">hosts</span> = [</span><br><span class="line">  "alpha",</span><br><span class="line">  "omega"</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>看起来很强大，也很复杂，但解析起来却很简单。以下面这个toml 文件为例：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Age</span> = <span class="number">25</span></span><br><span class="line"><span class="attr">Cats</span> = [ <span class="string">"Cauchy"</span>, <span class="string">"Plato"</span> ]</span><br><span class="line"><span class="attr">Pi</span> = <span class="number">3.14</span></span><br><span class="line"><span class="attr">Perfection</span> = [ <span class="number">6</span>, <span class="number">28</span>, <span class="number">496</span>, <span class="number">8128</span> ]</span><br><span class="line"><span class="attr">DOB</span> = <span class="number">1987</span>-<span class="number">07</span>-<span class="number">05</span>T05:<span class="number">45</span>:<span class="number">00</span>Z</span><br></pre></td></tr></table></figure></p>
<p>和所有其他配置文件parser类似，这个配置文件中的数据可以被直接解析成一个golang struct：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">  Age <span class="keyword">int</span></span><br><span class="line">  Cats []<span class="keyword">string</span></span><br><span class="line">  Pi <span class="keyword">float64</span></span><br><span class="line">  Perfection []<span class="keyword">int</span></span><br><span class="line">  DOB time.Time <span class="comment">// requires `import time`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其解析的步骤也很简单：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conf Config</span><br><span class="line"><span class="keyword">if</span> _, err := toml.Decode(tomlData, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>是不是简单的不能简单了！</p>
<p>不过toml也有其不足之处。想想如果你需要使用命令行选项的参数值来覆盖这些配置文件中的选项，你应该怎么做？事实上，我们常常会碰到类似下面这种三层配置结构的情况：</p>
<ol>
<li>程序内内置配置项的初始默认值</li>
<li>配置文件中的配置项值可以覆盖(override)程序内配置项的默认值。</li>
<li>命令行选项和参数值具有最高优先级，可以override前两层的配置项值。</li>
</ol>
<p>在go中，toml映射的结果体字段没有初始值。而且go内建flag包也没有将命令行参数值解析为一个go结构体，而是零散的变量。这些可以通过第三方工具来解决，但如果你不想用第三方工具，你也可以像下面这样自己解决，虽然难看一些。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">func ConfigGet() *Config &#123;</span><br><span class="line">    <span class="built_in">var</span> err <span class="built_in">error</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">cf</span> *Config = NewConfig()</span><br><span class="line"></span><br><span class="line">    // set default <span class="built_in">values</span> defined <span class="keyword">in</span> the <span class="built_in">program</span></span><br><span class="line">    <span class="built_in">cf</span>.ConfigFromFlag()</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    // Load config file, from flag <span class="keyword">or</span> env (<span class="keyword">if</span> specified)</span><br><span class="line">    <span class="symbol">_</span>, err = <span class="built_in">cf</span>.ConfigFromFile(*configFile, os.Getenv(<span class="string">"APPCONFIG"</span>))</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">        <span class="built_in">log</span>.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    // Override <span class="built_in">values</span> from command line flags</span><br><span class="line">    <span class="built_in">cf</span>.ConfigToFlag()</span><br><span class="line">    flag.Usage = usage</span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="built_in">cf</span>.ConfigFromFlag()</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cf</span>.ConfigApply()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">cf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就像上面代码中那样，你需要：</p>
<ol>
<li>用命令行标志默认值设置配置(cf)默认值。</li>
<li>接下来加载配置文件</li>
<li>用配置值(cf)覆盖命令行标志变量值</li>
<li>解析命令行参数</li>
<li>用命令行标志变量值覆盖配置(cf)值。</li>
</ol>
<p>少一步你都无法实现三层配置能力。</p>
<h1 id="超越TOML"><a href="#超越TOML" class="headerlink" title="超越TOML"></a>超越TOML</h1><p>本节将关注如何克服TOML的各种局限。</p>
<p>为了达成这个目标，很多人会说：使用viper，不过在介绍viper这一重量级选手 之前，我要为大家介绍另外一位不那么知名的选手：multiconfig。</p>
<p>有些人总是认为大的就是好的，但我相信适合的还是更好的。因为：</p>
<ol>
<li>viper太重量级，使用viper时你需要pull另外20个viper依赖的第三方包</li>
<li>事实上，viper单独使用还不足以满足需求，要想得到viper全部功能，你还需要另外一个包配合，而后者又依赖13个外部包</li>
<li>与viper相比，multiconfig使用起来更简单。</li>
</ol>
<p>好了，我们再来回顾一下我们现在面临的问题：</p>
<ol>
<li>在程序里定义默认配置，这样我们就无需再在toml中定义它们了。</li>
<li>用toml配置文件中的数据override默认配置</li>
<li>用命令行或环境变量的值override从toml中读取的配置。</li>
</ol>
<p>下面是一个说明如何使用multiconfig的例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := multiconfig.NewWithPath(<span class="string">"config.toml"</span>) <span class="comment">// supports TOML and JSON</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get an empty struct for your configuration</span></span><br><span class="line">    serverConf := <span class="built_in">new</span>(Server)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Populated the serverConf struct</span></span><br><span class="line">    m.MustLoad(serverConf) <span class="comment">// Check for error</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"After Loading: "</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"%+v\n"</span>, serverConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> serverConf.Enabled &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to true"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to false"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子中的toml文件如下：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name</span>              = <span class="string">"koding"</span></span><br><span class="line"><span class="attr">Enabled</span>           = <span class="literal">false</span></span><br><span class="line"><span class="attr">Port</span>              = <span class="number">6066</span></span><br><span class="line"><span class="attr">Users</span>             = [<span class="string">"ankara"</span>, <span class="string">"istanbul"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[Postgres]</span></span><br><span class="line"><span class="attr">Enabled</span>           = <span class="literal">true</span></span><br><span class="line"><span class="attr">Port</span>              = <span class="number">5432</span></span><br><span class="line"><span class="attr">Hosts</span>             = [<span class="string">"192.168.2.1"</span>, <span class="string">"192.168.2.2"</span>, <span class="string">"192.168.2.3"</span>]</span><br><span class="line"><span class="attr">AvailabilityRatio</span> = <span class="number">8.23</span></span><br></pre></td></tr></table></figure></p>
<p>toml映射后的go结构如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    <span class="comment">// Server holds supported types by the multiconfig package</span></span><br><span class="line">    Server <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name     <span class="keyword">string</span></span><br><span class="line">        Port     <span class="keyword">int</span> <span class="string">`default:"6060"`</span></span><br><span class="line">        Enabled  <span class="keyword">bool</span></span><br><span class="line">        Users    []<span class="keyword">string</span></span><br><span class="line">        Postgres Postgres</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Postgres is here for embedded struct feature</span></span><br><span class="line">    Postgres <span class="keyword">struct</span> &#123;</span><br><span class="line">        Enabled           <span class="keyword">bool</span></span><br><span class="line">        Port              <span class="keyword">int</span></span><br><span class="line">        Hosts             []<span class="keyword">string</span></span><br><span class="line">        DBName            <span class="keyword">string</span></span><br><span class="line">        AvailabilityRatio <span class="keyword">float64</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>multiconfig的使用是不是很简单，后续与viper对比后，你会同意我的观点的。</p>
<p>multiconfig支持默认值，也支持显式的字段赋值需求。<br>支持toml、json、结构体标签（struct tags)以及环境变量。<br>你可以自定义配置源（例如一个远程服务器），如果你想这么做的话。<br>可高度扩展（通过loader接口），你可以创建你自己的loader。</p>
<p>下面是例子的运行结果，首先是usage help：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$cmdlinemulticonfig -help</span><br><span class="line">Usage of cmdlinemulticonfig:</span><br><span class="line">  -enabled=<span class="literal">false</span>: Change value of Enabled.</span><br><span class="line">  -name=koding: Change value of Name.</span><br><span class="line">  -port=<span class="number">6066</span>: Change value of Port.</span><br><span class="line">  -postgres-availabilityratio=<span class="number">8.23</span>: Change value of Postgres-AvailabilityRatio.</span><br><span class="line">  -postgres-dbname=: Change value of Postgres-DBName.</span><br><span class="line">  -postgres-enabled=<span class="literal">true</span>: Change value of Postgres-Enabled.</span><br><span class="line">  -postgres-hosts=[<span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>]: Change value of Postgres-Hosts.</span><br><span class="line">  -postgres-port=<span class="number">5432</span>: Change value of Postgres-Port.</span><br><span class="line">  -users=[ankara istanbul]: Change value of Users.</span><br><span class="line"></span><br><span class="line">Generated environment variables:</span><br><span class="line">   SERVER_NAME</span><br><span class="line">   SERVER_PORT</span><br><span class="line">   SERVER_ENABLED</span><br><span class="line">   SERVER_USERS</span><br><span class="line">   SERVER_POSTGRES_ENABLED</span><br><span class="line">   SERVER_POSTGRES_PORT</span><br><span class="line">   SERVER_POSTGRES_HOSTS</span><br><span class="line">   SERVER_POSTGRES_DBNAME</span><br><span class="line">   SERVER_POSTGRES_AVAILABILITYRATIO</span><br><span class="line"></span><br><span class="line">$cmdlinemulticonfig</span><br><span class="line">After Loading:</span><br><span class="line">&amp;&#123;Name:koding Port:<span class="number">6066</span> Enabled:<span class="literal">false</span> Users:[ankara istanbul] Postgres:&#123;Enabled:<span class="literal">true</span> Port:<span class="number">5432</span> Hosts:[<span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>] DBName: AvailabilityRatio:<span class="number">8.23</span>&#125;&#125;</span><br><span class="line">Enabled field is set to <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>检查一下输出结果吧，是不是每项都符合我们之前的预期呢！</p>
<h1 id="Viper"><a href="#Viper" class="headerlink" title="Viper"></a>Viper</h1><p>我们的重量级选手<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a>该出场了！</p>
<p>毫无疑问，viper非常强大。但如果你想用命令行参数覆盖预定义的配置项值，viper自己还不足以。要想让viper爆发，你需要另外一个包配合，它就是<a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a>。</p>
<p>不同于注重简化配置处理的multiconfig，viper让你拥有全面控制力。不幸的是，在得到这种控制力之前，你需要做一些体力活。</p>
<p>我们再来回顾一下使用multiconfig处理配置的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := multiconfig.NewWithPath(<span class="string">"config.toml"</span>) <span class="comment">// supports TOML and JSON</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get an empty struct for your configuration</span></span><br><span class="line">    serverConf := <span class="built_in">new</span>(Server)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Populated the serverConf struct</span></span><br><span class="line">    m.MustLoad(serverConf) <span class="comment">// Check for error</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"After Loading: "</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"%+v\n"</span>, serverConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> serverConf.Enabled &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to true"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to false"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是使用multiconfig时你要做的所有事情。现在我们来看看使用viper和cobra如何来完成同样的事情：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mainCmd.AddCommand(versionCmd)</span><br><span class="line"></span><br><span class="line">    viper.SetEnvPrefix(<span class="string">"DISPATCH"</span>)</span><br><span class="line">    viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      When AutomaticEnv called, Viper will check for an environment variable any</span></span><br><span class="line"><span class="comment">      time a viper.Get request is made. It will apply the following rules. It</span></span><br><span class="line"><span class="comment">      will check for a environment variable with a name matching the key</span></span><br><span class="line"><span class="comment">      uppercased and prefixed with the EnvPrefix if set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    flags := mainCmd.Flags()</span><br><span class="line"></span><br><span class="line">    flags.Bool(<span class="string">"debug"</span>, <span class="literal">false</span>, <span class="string">"Turn on debugging."</span>)</span><br><span class="line">    flags.String(<span class="string">"addr"</span>, <span class="string">"localhost:5002"</span>, <span class="string">"Address of the service"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-addr"</span>, <span class="string">"localhost:25"</span>, <span class="string">"Address of the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-user"</span>, <span class="string">""</span>, <span class="string">"User to authenticate with the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-password"</span>, <span class="string">""</span>, <span class="string">"Password to authenticate with the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"email-from"</span>, <span class="string">"noreply@example.com"</span>, <span class="string">"The from email address."</span>)</span><br><span class="line"></span><br><span class="line">    viper.BindPFlag(<span class="string">"debug"</span>, flags.Lookup(<span class="string">"debug"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"addr"</span>, flags.Lookup(<span class="string">"addr"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_addr"</span>, flags.Lookup(<span class="string">"smtp-addr"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_user"</span>, flags.Lookup(<span class="string">"smtp-user"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_password"</span>, flags.Lookup(<span class="string">"smtp-password"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"email_from"</span>, flags.Lookup(<span class="string">"email-from"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Viper supports reading from yaml, toml and/or json files. Viper can</span></span><br><span class="line">  <span class="comment">// search multiple paths. Paths will be searched in the order they are</span></span><br><span class="line">  <span class="comment">// provided. Searches stopped once Config File found.</span></span><br><span class="line"></span><br><span class="line">    viper.SetConfigName(<span class="string">"CommandLineCV"</span>) <span class="comment">// name of config file (without extension)</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">"/tmp"</span>)          <span class="comment">// path to look for the config file in</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">"."</span>)             <span class="comment">// more path to look for the config files</span></span><br><span class="line"></span><br><span class="line">    err := viper.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"No config file found. Using built-in defaults."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，你需要使用BindPFlag来让viper和cobra结合一起工作。但这还不算太糟。</p>
<p>cobra的真正威力在于提供了subcommand能力。同时cobra还提供了与posix 全面兼容的命令行标志解析能力，包括长短标志、内嵌命令、为command定义你自己的help或usage等。</p>
<p>下面是定义子命令的例子代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The main command describes the service and defaults to printing the</span></span><br><span class="line"><span class="comment">// help message.</span></span><br><span class="line"><span class="keyword">var</span> mainCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"dispatch"</span>,</span><br><span class="line">    Short: <span class="string">"Event dispatch service."</span>,</span><br><span class="line">    Long:  <span class="string">`HTTP service that consumes events and dispatches them to subscribers.`</span>,</span><br><span class="line">    Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        serve()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The version command prints this service.</span></span><br><span class="line"><span class="keyword">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"version"</span>,</span><br><span class="line">    Short: <span class="string">"Print the version."</span>,</span><br><span class="line">    Long:  <span class="string">"The version of the dispatch service."</span>,</span><br><span class="line">    Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(version)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有了上面subcommand的定义，我们就可以得到如下的help信息了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  dispatch [flags]</span><br><span class="line">  dispatch [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  version     Print the version.</span><br><span class="line">  help        Help about any command</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      –addr="localhost:5002": Address of the service</span><br><span class="line">      –debug=false: Turn on debugging.</span><br><span class="line">      –email-from="noreply@example.com": The from email address.</span><br><span class="line">  -h, –help=false: help for dispatch</span><br><span class="line">      –smtp-addr="localhost:25": Address of the SMTP server</span><br><span class="line">      –smtp-password="": Password to authenticate with the SMTP server</span><br><span class="line">      –smtp-user="": User to authenticate with the SMTP server</span><br><span class="line"></span><br><span class="line">Use "dispatch help [command]" for more information about a command.</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang并发]]></title>
      <url>/2017/08/28/2017-08-28-Golang-concurency/</url>
      <content type="html"><![CDATA[<h1 id="运行期线程"><a href="#运行期线程" class="headerlink" title="运行期线程"></a>运行期线程</h1><p>Go允许使用go语句开启一个新的运行期线程，即 goroutine，以一个不同的、新创建的goroutine来执行一个函数。同一个程序中的所有goroutine共享同一个地址空间。</p>
<p>Goroutine非常轻量，除了为之分配的栈空间，其所占用的内存空间微乎其微。并且其栈空间在开始时非常小，之后随着堆存储空间的按需分配或释放而变化。内部实现上，goroutine会在多个操作系统线程上多路复用。如果一个goroutine阻塞了一个操作系统线程，例如：等待输入，这个线程上的其他goroutine就会迁移到其他线程，这样能继续运行。开发者并不需要关心/担心这些细节。</p>
<p>下面所示程序会输出<code>“Hello from main goroutine”</code>。也可能会输出<code>“Hello from another goroutine”</code>，具体依赖于两个goroutine哪个先结束。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Println(<span class="string">"Hello from another goroutine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Hello from main goroutine"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 至此，程序运行结束，</span></span><br><span class="line">    <span class="comment">// 所有活跃的goroutine被杀死</span></span><br><span class="line">&#125;</span><br><span class="line">goroutine1.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></p>
<p>接下来的这个程序，多数情况下，会输出<code>“Hello from main goroutine”</code>和<code>“Hello from another goroutine”</code>，输出的顺序不确定。但还有另一个可能性是：第二个goroutine运行得极其慢，在程序结束之前都没来得及输出相应的消息。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Println(<span class="string">"Hello from another goroutine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Hello from main goroutine"</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second)        <span class="comment">// 等待1秒，等另一个goroutine结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//goroutine2.go</span></span><br></pre></td></tr></table></figure>
<p>下面则是一个相对更加实际的示例，其中定义了一个函数使用并发来推迟触发一个事件。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数Publish在给定时间过期后打印text字符串到标准输出</span></span><br><span class="line">   <span class="comment">// 该函数并不会阻塞而是立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">    &#125;()    <span class="comment">// 注意这里的括号。必须调用匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish1.go</span></span><br></pre></td></tr></table></figure></p>
<p>你可能会这样使用Publish函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Publish(<span class="string">"A goroutine starts a new thread of execution."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Let’s hope the news will published before I leave."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待发布新闻</span></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Ten seconds later: I’m leaving now."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish1.go</span></span><br></pre></td></tr></table></figure></p>
<p>这个程序，绝大多数情况下，会输出以下三行，顺序固定，每行输出之间相隔5秒。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go run publish1.go</span><br><span class="line">Let’s hope the news will published before I leave.</span><br><span class="line">BREAKING NEWS: A goroutine starts a new thread of execution.</span><br><span class="line">Ten seconds later: I’m leaving now.</span><br></pre></td></tr></table></figure></p>
<p>一般来说，通过睡眠的方式来编排线程之间相互等待是不太可能的。下一章节会介绍Go语言中的一种同步机制 - 管道，并演示如何使用管道让一个goroutine等待另一个goroutine。</p>
<h1 id="管道（channel）"><a href="#管道（channel）" class="headerlink" title="管道（channel）"></a>管道（channel）</h1><p>管道是Go语言的一个构件，提供一种机制用于两个goroutine之间通过传递一个指定类型的值来同步运行和通讯。操作符&lt;-用于指定管道的方向，发送或接收。如果未指定方向，则为双向管道。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> Sushi        <span class="comment">// 可用来发送和接收Sushi类型的值</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span>    <span class="comment">// 仅可用来发送float64类型的值</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>        <span class="comment">// 仅可用来接收int类型的值</span></span><br></pre></td></tr></table></figure></p>
<p>管道是引用类型，基于make函数来分配。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)    <span class="comment">// 不带缓冲的int类型管道</span></span><br><span class="line">wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work, <span class="number">10</span>)    <span class="comment">// 带缓冲的Work类型指针管道</span></span><br></pre></td></tr></table></figure></p>
<p>如果通过管道发送一个值，则将&lt;-作为二元操作符使用。通过管道接收一个值，则将其作为一元操作符使用：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic &lt;- <span class="number">3</span>        <span class="comment">// 往管道发送3</span></span><br><span class="line">work := &lt;-wc    <span class="comment">// 从管道接收一个指向Work类型值的指针</span></span><br></pre></td></tr></table></figure></p>
<p>如果管道不带缓冲，发送方会阻塞直到接收方从管道中接收了值。如果管道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。</p>
<p>关闭管道（Close）</p>
<p>close 函数标志着不会再往某个管道发送值。在调用close之后，并且在之前发送的值都被接收后，接收操作会返回一个零值，不会阻塞。一个多返回值的接收操作会额外返回一个布尔值用来指示返回的值是否发送操作传递的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="string">"Hello!"</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 输出字符串"Hello!"</span></span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 输出零值 - 空字符串""，不会阻塞</span></span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 再次打印输出空字符串""</span></span><br><span class="line">v, ok := &lt;-ch        <span class="comment">// 变量v的值为空字符串""，变量ok的值为false</span></span><br></pre></td></tr></table></figure></p>
<p>一个带有range子句的for语句会依次读取发往管道的值，直到该管道关闭：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 译注：要想运行该示例，需要先定义类型Sushi，如type Sushi string</span></span><br><span class="line">    <span class="keyword">var</span> ch &lt;-<span class="keyword">chan</span> Sushi = Producer()</span><br><span class="line">    <span class="keyword">for</span> s := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Consumed"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">Sushi</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> Sushi)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ch &lt;- Sushi(<span class="string">"海老握り"</span>)    <span class="comment">// Ebi nigiri</span></span><br><span class="line">        ch &lt;- Sushi(<span class="string">"鮪とろ握り"</span>) <span class="comment">// Toro nigiri</span></span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sushi.go</span></span><br></pre></td></tr></table></figure></p>
<h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>下一个示例中，我们让Publish函数返回一个管道 - 用于在发布text变量值时广播一条消息：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在给定时间过期时，Publish函数会打印text变量值到标准输出</span></span><br><span class="line"><span class="comment">// 在text变量值发布后，该函数会关闭管道wait</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">        <span class="built_in">close</span>(ch)    <span class="comment">// 广播 - 一个关闭的管道都会发送一个零值</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish2.go</span></span><br></pre></td></tr></table></figure></p>
<p>注意：我们使用了一个空结构体的管道：struct{}。这明确地指明该管道仅用于发信号，而不是传递数据。</p>
<p>我们可能会这样使用这个函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := Publish(<span class="string">"Channels let goroutines communicate."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Waiting for the news..."</span>)</span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(<span class="string">"The news is out, time to leave."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish2.go</span></span><br></pre></td></tr></table></figure></p>
<p>这个程序会按指定的顺序输出以下三行内容。最后一行在新闻（news）一出就会立即输出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run publish2.go</span></span><br><span class="line">Waiting for the news...</span><br><span class="line">BREAKING NEWS: Channels let goroutines communicate.</span><br><span class="line">The news is out, time to leave.</span><br></pre></td></tr></table></figure></p>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>现在我们在Publish函数中引入一个bug：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">        <span class="comment">// 译注：注意这里将close函数调用注释掉了</span></span><br><span class="line">        <span class="comment">//close(ch)</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>主程序还是像之前一样开始运行：输出第一行，然后等待5秒，这时Publish函数开启的goroutine会输出突发新闻（breaking news），然后退出，留下主goroutine独自等待。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := Publish(<span class="string">"Channels let goroutines communicate."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Waiting for the news..."</span>)</span><br><span class="line">    <span class="comment">// 译注：注意下面这一句</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(<span class="string">"The news is out, time to leave."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此刻之后，程序无法再继续往下执行。众所周知，这种情形即为死锁。</p>
<blockquote>
<p>死锁是线程之间相互等待，其中任何一个都无法向前运行的情形。</p>
</blockquote>
<p>Go语言对于运行时的死锁检测具备良好的支持。当没有任何goroutine能够往前执行的情形发生时，Go程序通常会提供详细的错误信息。以下就是我们的问题程序的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Waiting for the news...</span><br><span class="line">BREAKING NEWS: Channels let goroutines communicate.</span><br><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive]:</span><br><span class="line">main.main()</span><br><span class="line">    .../goroutineStop.go:11 +0xf6</span><br><span class="line"></span><br><span class="line">goroutine 2 [syscall]:</span><br><span class="line">created by runtime.main</span><br><span class="line">    .../go/src/pkg/runtime/proc.c:225</span><br><span class="line"></span><br><span class="line">goroutine 4 [timer goroutine (idle)]:</span><br><span class="line">created by addtimer</span><br><span class="line">    .../go/src/pkg/runtime/ztime_linux_amd64.c:73</span><br></pre></td></tr></table></figure></p>
<p>大多数情况下找出Go程序中造成死锁的原因都比较容易，那么剩下的就是如何解决这个bug了。</p>
<h1 id="数据竞争（data-race）"><a href="#数据竞争（data-race）" class="headerlink" title="数据竞争（data race）"></a>数据竞争（data race）</h1><p>死锁也许听起来令人挺忧伤的，但伴随并发编程真正灾难性的错误其实是数据竞争，相当常见，也可能非常难于调试。</p>
<blockquote>
<p>当两个线程并发地访问同一个变量，并且其中至少一个访问是写操作时，数据竞争就发生了。</p>
</blockquote>
<p>下面的这个函数就有数据竞争问题，其行为是未定义的。例如，可能输出数值1。代码之后是一个可能性解释，试图搞清楚这一切是如何发生得。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 译注：注意下面这一行</span></span><br><span class="line">        n++ <span class="comment">// 一次访问: 读, 递增, 写</span></span><br><span class="line">        <span class="built_in">close</span>(wait)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 译注：注意下面这一行</span></span><br><span class="line">    n++ <span class="comment">// 另一次冲突的访问</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(n) <span class="comment">// 输出：未指定</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<p>代码中的两个goroutine（假设命名为g1和g2）参与了一次竞争，我们无法获知操作会以何种顺序发生。以下是诸多可能中的一种：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g1 从 n 中获取值<span class="number">0</span></span><br><span class="line">g2 从 n 中获取值<span class="number">0</span></span><br><span class="line">g1 将值从<span class="number">0</span>增大到<span class="number">1</span></span><br><span class="line">g1 将<span class="number">1</span>写到 n</span><br><span class="line">g2 将值从<span class="number">0</span>增大到<span class="number">1</span></span><br><span class="line">g2 将<span class="number">1</span>写到 n</span><br><span class="line">程序输出 n 的值，当前为<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>“数据竞争（data race）”这名字有点误导的嫌疑。不仅操作的顺序是未定义的，其实根本没有任何保证（no guarantees whatsoever）。编译器和硬件为了得到更好的性能，经常都会对代码进行上下内外的顺序变换。如果你看到一个线程处于中间行为状态时，那么当时的场景可能就像下图所示的一样：</p>
<p>避免数据竞争的唯一方式是线程间同步访问所有的共享可变数据。有几种方式能够实现这一目标。Go语言中，通常是使用管道或者锁。（sync和sync/atomic包中还有更低层次的机制可供使用，但本文中不做讨论）。</p>
<p>Go语言中，处理并发数据访问的推荐方式是使用管道从一个goroutine中往下一个goroutine传递实际的数据。有格言说得好：“不要通过共享内存来通讯，而是通过通讯来共享内存”。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sharingIsCaring</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        n := <span class="number">0</span> <span class="comment">// 仅为一个goroutine可见的局部变量.</span></span><br><span class="line">        n++</span><br><span class="line">        ch &lt;- n <span class="comment">// 数据从一个goroutine离开...</span></span><br><span class="line">    &#125;()</span><br><span class="line">    n := &lt;-ch   <span class="comment">// ...然后安全到达另一个goroutine.</span></span><br><span class="line">    n++</span><br><span class="line">    fmt.Println(n) <span class="comment">// 输出: 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<p>以上代码中的管道肩负双重责任 - 从一个goroutine将数据传递到另一个goroutine，并且起到同步的作用：发送方goroutine会等待另一个goroutine接收数据，接收方goroutine也会等待另一个goroutine发送数据。</p>
<blockquote>
<p>Go语言内存模型 - 要保证一个goroutine中对一个变量的读操作得到的值正好是另一个goroutine中对同一个变量写操作产生的值，条件相当复杂，但goroutine之间只要通过管道来共享所有可变数据，那么就能远离数据竞争了。</p>
</blockquote>
<h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><p>有时，通过显式加锁，而不是使用管道，来同步数据访问，可能更加便捷。Go语言标准库为这一目的提供了一个互斥锁 - sync.Mutex。</p>
<p>要想这类加锁起效的话，关键之处在于：所有对共享数据的访问，不管读写，仅当goroutine持有锁才能操作。一个goroutine出错就足以破坏掉一个程序，引入数据竞争。</p>
<p>因此，应该设计一个自定义数据结构，具备明确的API，确保所有的同步都在数据结构内部完成。下例中，我们构建了一个安全、易于使用的并发数据结构，AtomicInt，用于存储一个整型值。任意数量的goroutine都能通过Add和Value方法安全地访问这个数值。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AtomicInt是一个并发数据结构，持有一个整数值</span></span><br><span class="line"><span class="comment">// 该数据结构的零值为0</span></span><br><span class="line"><span class="keyword">type</span> AtomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu sync.Mutex <span class="comment">// 锁，一次仅能被一个goroutine持有。</span></span><br><span class="line">    n  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add方法作为一个原子操作将n加到AtomicInt</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicInt)</span> <span class="title">Add</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    a.mu.Lock() <span class="comment">// 等待锁释放，然后持有它</span></span><br><span class="line">    a.n += n</span><br><span class="line">    a.mu.Unlock() <span class="comment">// 释放锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value方法返回a的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicInt)</span> <span class="title">Value</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    a.mu.Lock()</span><br><span class="line">    n := a.n</span><br><span class="line">    a.mu.Unlock()</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lockItUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">var</span> n AtomicInt</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        n.Add(<span class="number">1</span>) <span class="comment">// 一个访问</span></span><br><span class="line">        <span class="built_in">close</span>(wait)</span><br><span class="line">    &#125;()</span><br><span class="line">    n.Add(<span class="number">1</span>) <span class="comment">// 另一个并发访问</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(n.Value()) <span class="comment">// 输出: 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<h1 id="检测数据竞争"><a href="#检测数据竞争" class="headerlink" title="检测数据竞争"></a>检测数据竞争</h1><p>竞争有时非常难于检测。下例中的这个函数有一个数据竞争问题，执行这个程序时会输出55555。尝试一下，也许你会得到一个不同的结果。（sync.WaitGroup是Go语言标准库的一部分；用于等待一组goroutine结束运行。）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">// 译注：注意下面这行代码中的i++</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">// 注意下一行代码会输出什么？为什么？</span></span><br><span class="line">            fmt.Print(i) <span class="comment">// 6个goroutine共享变量i</span></span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有（5个）goroutine运行结束</span></span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<p>对于输出55555，一个貌似合理的解释是：执行i++的goroutine在其他goroutine执行打印语句之前就完成了5次i++操作。实际上变量i更新后的值为其他goroutine所见纯属巧合。</p>
<p>一个简单的解决方案是：使用一个局部变量，然后当开启新的goroutine时，将数值作为参数传递：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">correct</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123; <span class="comment">// 使用局部变量</span></span><br><span class="line">            fmt.Print(n)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<p>这次代码就对了，程序会输出期望的结果，如：24031。注意：goroutine之间的运行顺序是不确定的。</p>
<p>仍旧使用闭包，但能够避免数据竞争也是可能的，必须小心翼翼地让每个goroutine使用一个独有的变量。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alsoCorrect</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        n := i <span class="comment">// 为每个闭包创建一个独有的变量</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Print(n)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<h2 id="数据竞争自动检测"><a href="#数据竞争自动检测" class="headerlink" title="数据竞争自动检测"></a>数据竞争自动检测</h2><p>一般来说，不太可能能够自动检测发现所有可能的数据竞争情况，但Go（从版本1.1开始）有一个强大的数据竞争检测器。</p>
<p>这个工具用起来也很简单：只要在使用go命令时加上-race标记即可。开启检测器运行上面的程序会给出清晰且信息量大的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run -race raceClosure.go</span></span><br><span class="line">Race:</span><br><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">Read by goroutine 2:</span><br><span class="line">    main.func·001()</span><br><span class="line">      ../raceClosure.go:22 +0x65</span><br><span class="line"></span><br><span class="line">Previous write by goroutine 0:</span><br><span class="line">    main.race()</span><br><span class="line">        ../raceClosure.go:20 +0x19b</span><br><span class="line">    main.main()</span><br><span class="line">        ../raceClosure.go:10 +0x29</span><br><span class="line">    runtime.main()</span><br><span class="line">        ../go/src/pkg/runtime/proc.c:248 +0x91</span><br><span class="line"></span><br><span class="line">Goroutine 2 (running) created at:</span><br><span class="line">    main.race()</span><br><span class="line">      ../raceClosure.go:24 +0x18b</span><br><span class="line">    main.main()</span><br><span class="line">      ../raceClosure.go:10 +0x29</span><br><span class="line">     runtime.main()</span><br><span class="line">      ../go/src/pkg/runtime/proc.c:248 +0x91</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line">55555</span><br><span class="line">Correct:</span><br><span class="line">01234</span><br><span class="line">Also correct:</span><br><span class="line">01324</span><br><span class="line">Found 1 data race(s)</span><br><span class="line">exit status 66</span><br></pre></td></tr></table></figure></p>
<p>该工具发现一处数据竞争，包含：一个goroutine在第20行对一个变量进行写操作，跟着另一个goroutine在第22行对同一个变量进行了未同步的读操作。</p>
<p>注意：竞争检测器只能发现在运行期确实发生的数据竞争（译注：我也不太理解这话，请指导）</p>
<h1 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h1><p>select语句是Go语言并发工具集中的终极工具。select用于从一组可能的通讯中选择一个进一步处理。如果任意一个通讯都可以进一步处理，则从中随机选择一个，执行对应的语句。否则，如果又没有默认分支（default case），select语句则会阻塞，直到其中一个通讯完成。</p>
<p>以下是一个玩具示例，演示select语句如何用于实现一个随机数生成器：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RandomBits函数 返回一个管道，用于产生一个比特随机序列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomBits</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> ch &lt;- <span class="number">0</span>: <span class="comment">// 注意：分支没有对应的处理语句</span></span><br><span class="line">            <span class="keyword">case</span> ch &lt;- <span class="number">1</span>:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//randBits.go</span></span><br></pre></td></tr></table></figure></p>
<p>下面是相对更加实际一点的例子：如何使用select语句为一个操作设置一个时间限制。代码会输出变量news的值或者超时消息，具体依赖于两个接收语句哪个先执行：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> news := &lt;-NewsAgency:</span><br><span class="line">    fmt.Println(news)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Minute):</span><br><span class="line">    fmt.Println(<span class="string">"Time out: no news in one minute."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数 time.After 是Go语言标准库的一部分；它会在等待指定时间后将当前的时间发送到返回的管道中。</p>
<h1 id="综合所有示例"><a href="#综合所有示例" class="headerlink" title="综合所有示例"></a>综合所有示例</h1><p>花点时间认真研究一下这个示例。如果你完全理解，也就对Go语言中并发的应用方式有了全面的掌握。</p>
<p>这个程序演示了如何将管道用于被任意数量的goroutine发送和接收数据，也演示了如何将select语句用于从多个通讯中选择一个。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    people := []<span class="keyword">string</span>&#123;<span class="string">"Anna"</span>, <span class="string">"Bob"</span>, <span class="string">"Cody"</span>, <span class="string">"Dave"</span>, <span class="string">"Eva"</span>&#125;</span><br><span class="line">    match := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>) <span class="comment">// 为一个未匹配的发送操作提供空间</span></span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    wg.Add(<span class="built_in">len</span>(people))</span><br><span class="line">    <span class="keyword">for</span> _, name := <span class="keyword">range</span> people &#123;</span><br><span class="line">        <span class="keyword">go</span> Seek(name, match, wg)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> name := &lt;-match:</span><br><span class="line">        fmt.Printf(<span class="string">"No one received %s’s message.\n"</span>, name)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 没有待处理的发送操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数Seek 发送一个name到match管道或从match管道接收一个peer，结束时通知wait group</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Seek</span><span class="params">(name <span class="keyword">string</span>, match <span class="keyword">chan</span> <span class="keyword">string</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> peer := &lt;-match:</span><br><span class="line">        fmt.Printf(<span class="string">"%s sent a message to %s.\n"</span>, peer, name)</span><br><span class="line">    <span class="keyword">case</span> match &lt;- name:</span><br><span class="line">        <span class="comment">// 等待某个goroutine接收我的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//matching.go</span></span><br></pre></td></tr></table></figure></p>
<p>示例输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run matching.go</span></span><br><span class="line">Cody sent a message to Bob.</span><br><span class="line">Anna sent a message to Eva.</span><br><span class="line">No one received Dave’s message.</span><br></pre></td></tr></table></figure></p>
<h1 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h1><p>并发的一个应用是将一个大的计算切分成一些工作单元，调度到不同的CPU上同时地计算。</p>
<p>将计算分布到多个CPU上更多是一门艺术，而不是一门科学。以下是一些经验法则：</p>
<ul>
<li>每个工作单元应该花费大约100微秒到1毫秒的时间用于计算。如果单元粒度太小，切分问题以及调度子问题的管理开销可能就会太大。如果单元粒度太大，整个计算也许不得不等待一个慢的工作项结束。这种缓慢可能因为多种原因而产生，比如：调度、其他进程的中断或者糟糕的内存布局。（注意：工作单元的数目是不依赖于CPU的数目的）</li>
<li>尽可能减小共享的数据量。并发写操作的代价非常大，特别是如果goroutine运行在不同的CPU上。读操作之间的数据共享则通常不会是个问题。</li>
<li>数据访问尽量利用良好的局部性。如果数据能保持在缓存中，数据加载和存储将会快得多得多，这对于写操作也格外地重要。</li>
<li>下面的这个示例展示如何切分一个开销很大的计算并将其分布在所有可用的CPU上进行计算。先看一下有待优化的代码：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vector []<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数Convolve 计算 w = u * v，其中 w[k] = Σ u[i]*v[j], i + j = k</span></span><br><span class="line"><span class="comment">// 先决条件：len(u) &gt; 0, len(v) &gt; 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convolve</span><span class="params">(u, v Vector)</span> <span class="params">(w Vector)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(u) + <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    w = <span class="built_in">make</span>(Vector, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="number">0</span>; k &lt; n; k++ &#123;</span><br><span class="line">        w[k] = mul(u, v, k)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数mul 返回 Σ u[i]*v[j], i + j = k.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mul</span><span class="params">(u, v Vector, k <span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    n := min(k+<span class="number">1</span>, <span class="built_in">len</span>(u))</span><br><span class="line">    j := min(k, <span class="built_in">len</span>(v)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := k - j; i &lt; n; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        res += u[i] * v[j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>思路很简单：确定合适大小的工作单元，然后在不同的goroutine中执行每个工作单元。以下是并发版本的 Convolve：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convolve</span><span class="params">(u, v Vector)</span> <span class="params">(w Vector)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(u) + <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    w = <span class="built_in">make</span>(Vector, n)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 w 切分成花费 ~100μs-1ms 用于计算的工作单元</span></span><br><span class="line">    size := max(<span class="number">1</span>, <span class="number">1</span>&lt;&lt;<span class="number">20</span>/n)</span><br><span class="line"></span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    wg.Add(<span class="number">1</span> + (n<span class="number">-1</span>)/size)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n &amp;&amp; i &gt;= <span class="number">0</span>; i += size &#123; <span class="comment">// 整型溢出后 i &lt; 0</span></span><br><span class="line">        j := i + size</span><br><span class="line">        <span class="keyword">if</span> j &gt; n || j &lt; <span class="number">0</span> &#123; <span class="comment">// 整型溢出后 j &lt; 0</span></span><br><span class="line">            j = n</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些goroutine共享内存，但是只读</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">                w[k] = mul(u, v, k)</span><br><span class="line">            &#125;</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//convolution.go</span></span><br></pre></td></tr></table></figure></p>
<p>工作单元定义之后，通常情况下最好将调度工作交给运行时和操作系统。然而，对于Go 1.* 你也许需要告诉运行时希望多少个goroutine来同时地运行代码。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numcpu := runtime.NumCPU()</span><br><span class="line">    runtime.GOMAXPROCS(numcpu) <span class="comment">// 尝试使用所有可用的CPU</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理]]></title>
      <url>/2017/08/21/2017-08-21-%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-lantern"><a href="#1-lantern" class="headerlink" title="1.lantern"></a>1.lantern</h2><h4 id="浏览器代理"><a href="#浏览器代理" class="headerlink" title="浏览器代理"></a>浏览器代理</h4><p><a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">https://github.com/getlantern/lantern</a></p>
<h4 id="命令行代理"><a href="#命令行代理" class="headerlink" title="命令行代理"></a>命令行代理</h4><p>打开蓝灯后，终端下输入：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://127.0.0.1:8787</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://127.0.0.1:8787</span><br></pre></td></tr></table></figure>
<p>:8787是端口号，具体查看<code>系统设置</code>–<code>网络</code>–<code>网络代理</code></p>
]]></content>
      
        <categories>
            
            <category> Proxy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Lantern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GO的安装和配置]]></title>
      <url>/2017/08/21/2017-08-21-Go%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="0-Install-Go"><a href="#0-Install-Go" class="headerlink" title="0.Install Go"></a>0.Install Go</h2><blockquote>
<p>不要用<code>apt-get install golang</code>！这个目前只有1.6版，最新版已经到1.8+</p>
</blockquote>
<p>在linux 系统下，如ubuntu debian ，安装golang 最方便的方式是用apt-get install。</p>
<p>但不推荐这种方式安装，建议使用源码安装，如果你不小心用apt-get 等方式安装了，就先把它卸载：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> purge golang-<span class="built_in">go</span></span><br></pre></td></tr></table></figure></p>
<p>然后用源码安装，如果想升级也可以直接覆盖安装位置的原文件，golang 还算很干净。</p>
<p>套路:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -O https:<span class="comment">//storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -zxvf go1.<span class="number">7.3</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">mkdir -<span class="selector-tag">p</span> ~/go/src</span><br><span class="line">echo <span class="string">"export GOROOT=/usr/local/go"</span></span><br><span class="line">echo <span class="string">"export GOPATH=$HOME/go"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">echo <span class="string">"export PATH=$PATH:$GOPATH/bin:$GOROOT/bin"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">go version</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>GOROOT:根目录，设置了这个才指定解释器，也是标准库所在</p>
</li>
<li><p>GOPATH:工作目录，放你自己的代码．该目录下要有一定的结构，因为外来库要用<code>go get</code>安装在该目录下</p>
</li>
<li><p>PATH:系统环境变量，不破坏原来的环境变量的方法为<code>PATH=$PATH:/usr/local/go</code>表示在原来环境变量的基础上添加/usr/local/go</p>
</li>
</ul>
<p><code>Tips</code>:命令行下输入<code>export</code>可查看当前所有变量，包括PATH,GOROOT等等，方便确认是否设置成功</p>
<h2 id="1-GOROOT"><a href="#1-GOROOT" class="headerlink" title="1.GOROOT"></a>1.GOROOT</h2><p>GOROOT就是go的安装路径</p>
<p>在<code>~/.bash_profile</code>中添加下面语句:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br></pre></td></tr></table></figure>
<p>当然, 要执行go命令和go工具, 就要配置go的可执行文件的路径,操作如下:</p>
<p>在<code>~/.bash_profile</code>中配置如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></p>
<p>如果是windows需要使用;符号分割两个路径, mac和类unix都是用:符号分割</p>
<h2 id="2-GOPATH"><a href="#2-GOPATH" class="headerlink" title="2.GOPATH"></a>2.GOPATH</h2><p><code>go install</code>/<code>go get</code>和 go的工具等会用到GOPATH环境变量.</p>
<p>GOPATH是作为编译后二进制的存放目的地和import包时的搜索路径 (其实也是你的工作目录, 你可以在src下创建你自己的go源文件, 然后开始工作)。</p>
<p>GOPATH之下主要包含三个目录: bin、pkg、src</p>
<p>bin目录主要存放可执行文件; pkg目录存放编译好的库文件, 主要是*.a文件; src目录下主要存放go的源文件</p>
<p>不要把GOPATH设置成go的安装路径,</p>
<p>可以自己在用户目录下面创建一个目录, 如gopath</p>
<p>操作如下:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> gopath</span><br></pre></td></tr></table></figure></p>
<p>在<code>~/.bash_profile</code>中添加如下语句:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GOPATH</span>=/Users/username/gopath</span><br></pre></td></tr></table></figure></p>
<p>GOPATH可以是一个目录列表, go get下载的第三方库, 一般都会下载到列表的第一个目录里面<br>需要把GOPATH中的可执行目录也配置到环境变量中, 否则你自行下载的第三方go工具就无法使用了, 操作如下:<br>在<code>~/bash_profile</code>中配置,<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure></p>
<p>创建一个go项目, 并且编译运行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> goproject</span><br><span class="line"><span class="keyword">cd</span> goproject</span><br><span class="line">touch hello.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>hello.go</code>中输入:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Hello, GO !"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在项目根目录下执行<code>go build</code>命令来构建你的项目, 构建后会生成hello文件<br>运行生成的文件<code>./hello, terminal</code>中输出:<code>Hello, GO !</code><br>当然你也可以直接运行命令<code>go run hello.go</code>来执行程序.</p>
<h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><p>源：<code>https://dl.gocn.io/</code><br>查看其他GO相关的环境变量：<code>go env</code></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
            <tag> Install </tag>
            
            <tag> Settings </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jupyter-notebook-sen-usage]]></title>
      <url>/2017/08/20/2017-08-20-jupyter-notebook-sen-usage/</url>
      <content type="html"><![CDATA[<h2 id="安装jupyter-notebook"><a href="#安装jupyter-notebook" class="headerlink" title="安装jupyter-notebook"></a>安装jupyter-notebook</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="配置jupyter-notebook"><a href="#配置jupyter-notebook" class="headerlink" title="配置jupyter-notebook"></a>配置jupyter-notebook</h2><h3 id="配置可以同时使用python2和python3内核"><a href="#配置可以同时使用python2和python3内核" class="headerlink" title="配置可以同时使用python2和python3内核"></a>配置可以同时使用python2和python3内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ipython kernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -m ipykernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip2 install -U ipykernel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python2 -m ipykernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter-notebook  //运行，会自动web界面，可以同时运行python2，python3，ctrl+c结束</span></span><br></pre></td></tr></table></figure>
<h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd </span><br><span class="line">$ jupyter notebook --generate-config</span><br><span class="line">Writing<span class="built_in"> default config </span><span class="keyword">to</span>: /root/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><p>运行jupyter<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: from notebook.auth import passwd</span><br><span class="line">        passwd()</span><br><span class="line"></span><br><span class="line">    Enter password: ········</span><br><span class="line">    Verify password: ········</span><br><span class="line">        </span><br><span class="line">Out[<span class="number">1</span>]: 'sha1:c3a<span class="number">5226</span>4ad87:f6a2c<span class="number">3503</span>ee<span class="number">3370</span>c67da1f723ae1e8e<span class="number">7947</span>7f5f7'</span><br></pre></td></tr></table></figure></p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>将前面生成的一串密码替换到配置文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /root/.jupyter/jupyter_notebook_config.py </span><br><span class="line">c.NotebookApp.password=<span class="string">u'sha1:c3a52264ad87:f6a2c3503ee3370c67da1f723ae1e8e79477f5f7'</span>   //前面u表示转换成unicode字符，python2的时候需要带</span><br></pre></td></tr></table></figure></p>
<p>其它设置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.ip</span> = <span class="string">'*'</span>  <span class="comment">//访问ip限制</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.notebook_dir</span> = <span class="string">'/home/knmax/Desktop/Python/jupyter-project'</span>  <span class="comment">//工作目录,路径不能出现中文</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.open_browser</span> = False <span class="comment">//不自动打开浏览器</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.port</span> = <span class="number">88</span> <span class="comment">//运行监听的端口</span></span><br></pre></td></tr></table></figure></p>
<h3 id="以服务方式运行"><a href="#以服务方式运行" class="headerlink" title="以服务方式运行"></a>以服务方式运行</h3><p>每次运行打开都是终端交互的界面，关闭会话终端也结束了jupyter，很不方便，这里做成以systemctl方式启动，适用于Debain、CentOS 7、Ubuntu</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/jupyter.service  //这个目录不同发行版可能也不同</span><br><span class="line">[Unit]</span><br><span class="line">Description=jupyter </span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Tpye=forking</span><br><span class="line">EnvironmentFile=/usr/local/bin/jupyter-notebook</span><br><span class="line">ExecStart=/usr/local/bin/jupyter-notebook</span><br><span class="line">ExecStop=/usr/bin/pkill jupyter-notebook</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=30s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>创建好之后再操作下就行了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start jupyter</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> jupyter</span></span><br></pre></td></tr></table></figure></p>
<h3 id="局域网访问jupyter-notebook"><a href="#局域网访问jupyter-notebook" class="headerlink" title="局域网访问jupyter notebook"></a>局域网访问jupyter notebook</h3><p>用电脑开wifi，手机连上电脑的wifi，手机可以直接从电脑的局域网ip访问到电脑上的jupyter notebook</p>
<h3 id="安装额外插件或kernel"><a href="#安装额外插件或kernel" class="headerlink" title="安装额外插件或kernel"></a>安装额外插件或kernel</h3><p>显示稿插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install RISE </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install RISE </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter-nbextension install rise --py --sys-prefix </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextension <span class="built_in">enable</span> rise --py --sys-prefix</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装Jupyter Notebook extensions–&gt;Jupyter拓展插件!!!</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge jupyter_contrib_nbextensions</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_contrib_nbextensions</span></span><br><span class="line"></span><br><span class="line">还不行就把下面的都试一遍...</span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_nbextensions_configurator</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install jupyter_nbextensions_configurator</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter contrib nbextension install --user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextensions_configurator <span class="built_in">enable</span> --user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart jupyter</span></span><br><span class="line"></span><br><span class="line">还有......再试一试又不会怀孕...</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_nbextensions_configurator </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter contrib nbextension install –user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextensions_configurator <span class="built_in">enable</span> –user</span></span><br></pre></td></tr></table></figure>
<p>开启toc2插件<br>命令行输入jupyter notebook运行,在浏览器打开notebook的Home页面，多了一个Nbextensions,点进去就懂了<br>这个用起来很爽，可以增加许多功能，尤其是里面可以增加侧边栏，这个用起来对代码管理就看起来层次分明多了，找代码也更方便了~~</p>
<p>顺便note一下,代码折叠,生成目录，自动格式化很有用~~~</p>
<h3 id="安装主题、字体"><a href="#安装主题、字体" class="headerlink" title="安装主题、字体"></a>安装主题、字体</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade jupyterthemes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --upgrade jupyterthemes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jt -l  查看可用主题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jt -t grade3 -f ptmono -fs 115</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">参考地址</a></p>
<h3 id="jupyter支持的内核"><a href="#jupyter支持的内核" class="headerlink" title="jupyter支持的内核"></a>jupyter支持的内核</h3><p><a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">参考地址</a></p>
<h3 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h3><p>Jupyter支持多个指针同步编辑，类似Sublime Text编辑器。按下Alt键并拖拽鼠标即可实现。====这个我用着很不顺手，按住ctrl后用移动鼠标可实现一样的多次选中，我还是喜欢用这个。。</p>
<h3 id="隐藏代码只显示代码输出"><a href="#隐藏代码只显示代码输出" class="headerlink" title="隐藏代码只显示代码输出"></a>隐藏代码只显示代码输出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from IPython.display import HTML</span><br><span class="line"></span><br><span class="line">HTML('''<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">code_show=<span class="literal">true</span>; </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">if</span> (code_show)&#123;</span></span><br><span class="line"><span class="javascript"> $(<span class="string">'div.input'</span>).hide();</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"> $(<span class="string">'div.input'</span>).show();</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"> code_show = !code_show</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(code_toggle);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:code_toggle()"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Click here to toggle on/off the raw code."</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>''')</span><br></pre></td></tr></table></figure>
<p>也可以这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">code_show=<span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (code_show)&#123;</span><br><span class="line"> $(<span class="string">'div.input'</span>).hide();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> $(<span class="string">'div.input'</span>).show();</span><br><span class="line"> &#125;</span><br><span class="line"> code_show = !code_show</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$([IPython.events]).on(<span class="string">"app_initialized.NotebookApp"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#view_menu"</span>).append(<span class="string">"&lt;li id=\"toggle_toolbar\" title=\"Show/Hide code cells\"&gt;&lt;a href=\"javascript:code_toggle()\"&gt;Toggle Code Cells&lt;/a&gt;&lt;/li&gt;"</span>)</span><br></pre></td></tr></table></figure></p>
<p>或者这样:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> HTML</span><br><span class="line"><span class="keyword">import</span> IPython.core.display <span class="keyword">as</span> di <span class="comment"># Example: di.display_html('&lt;h3&gt;%s:&lt;/h3&gt;' % str, raw=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This line will hide code by default when the notebook is exported as HTML</span></span><br><span class="line">di.display_html(<span class="string">'&lt;script&gt;jQuery(function() &#123;if (jQuery("body.notebook_app").length == 0) &#123; jQuery(".input_area").toggle(); jQuery(".prompt").toggle();&#125;&#125;);&lt;/script&gt;'</span>, raw=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This line will add a button to toggle visibility of code blocks, for use with the HTML export version</span></span><br><span class="line">di.display_html(<span class="string">'''&lt;button onclick="jQuery('.input_area').toggle(); jQuery('.prompt').toggle();"&gt;Toggle code&lt;/button&gt;'''</span>, raw=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<p>这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$([IPython.events]).on(<span class="string">'notebook_loaded.Notebook'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    IPython.toolbar.add_buttons_group([</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="string">'label'</span>   : <span class="string">'toggle input cells'</span>,</span><br><span class="line">             <span class="string">'icon'</span>    : <span class="string">'icon-refresh'</span>, </span><br><span class="line">             <span class="string">'callback'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$(<span class="string">'.input'</span>).slideToggle()&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>甚至可以这样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># This is a cell to hide code snippets from displaying</span><br><span class="line"># This must be at first cell!</span><br><span class="line"></span><br><span class="line">from IPython.display import HTML</span><br><span class="line"></span><br><span class="line">hide_me = ''</span><br><span class="line">HTML('''<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">code_show=<span class="literal">true</span>; </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (code_show) &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      el = $(<span class="keyword">this</span>).find(<span class="string">'.cm-variable:first'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (id == <span class="number">0</span> || el.text() == <span class="string">'hide_me'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).hide();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.output_prompt'</span>).css(<span class="string">'opacity'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="keyword">this</span>).show();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.output_prompt'</span>).css(<span class="string">'opacity'</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  code_show = !code_show</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(code_toggle);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:code_toggle()"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"opacity:0"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Click here to toggle on/off the raw code."</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>''')</span><br></pre></td></tr></table></figure></p>
<p>惊不惊喜？刺不刺激？<br>[参考]：(<a href="http://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer" target="_blank" rel="noopener">http://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer</a>)</p>
<h3 id="全部显示"><a href="#全部显示" class="headerlink" title="全部显示"></a>全部显示</h3><p>有一点已经众所周知。把变量名称或没有定义输出结果的语句放在cell的最后一行，无需print语句，Jupyter也会显示变量值。当使用Pandas DataFrames时这一点尤其有用，因为输出结果为整齐的表格。</p>
<p>鲜为人知的是，你可以通过修改内核选项ast_node_interactivity，使得Jupyter对独占一行的所有变量或者语句都自动显示，这样你就可以马上看到多个语句的运行结果了。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: from IPython<span class="selector-class">.core</span><span class="selector-class">.interactiveshell</span> import InteractiveShell</span><br><span class="line"></span><br><span class="line">        InteractiveShell<span class="selector-class">.ast_node_interactivity</span> = <span class="string">"all"</span></span><br></pre></td></tr></table></figure>
<p>如果你想在各种情形下（Notebook和Console）Jupyter都同样处理，用下面的几行简单的命令创建文件~/.ipython/profile_default/ipython_config.py即可实现：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = get_config()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run all nodes interactively</span></span><br><span class="line"></span><br><span class="line">c.InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></table></figure></p>
<p>这个刚了解时用起来很开心，不过当用到matplotlib时会输出很多信息，看起来比较丑，我就弃用了…</p>
<h3 id="末句函数不输出"><a href="#末句函数不输出" class="headerlink" title="末句函数不输出"></a>末句函数不输出</h3><p>有时候不让末句的函数输出结果比较方便，比如在作图的时候，此时，只需在该函数末尾加上一个分号即可===这个用起来作的图看起来就清爽多了；</p>
<p>嘿嘿嘿…</p>
<h3 id="在notebook中作图"><a href="#在notebook中作图" class="headerlink" title="在notebook中作图"></a>在notebook中作图</h3><p>如果不想每次用matplotlib 作图后都要输入plt.show()来弹出显示图，可以如下：</p>
<ul>
<li>matplotlib （事实标准）（<a href="http://matplotlib.org/" target="_blank" rel="noopener">http://matplotlib.org/</a>），可通过%matplotlib inline 激活，（<a href="https://www.dataquest.io/blog/matplotlib-tutorial/" target="_blank" rel="noopener">https://www.dataquest.io/blog/matplotlib-tutorial/</a>） ===常用</li>
<li>%matplotlib notebook 提供交互性操作，但可能会有点慢，因为响应是在服务器端完成的。 ===需要调整图形时这个用着不错</li>
<li>mpld3（<a href="https://github.com/mpld3/mpld3" target="_blank" rel="noopener">https://github.com/mpld3/mpld3</a>） 提供matplotlib代码的替代性呈现（通过d3），虽然不完整，但很好。 ===没用过</li>
<li>bokeh（<a href="http://bokeh.pydata.org/en/latest/" target="_blank" rel="noopener">http://bokeh.pydata.org/en/latest/</a>） 生成可交互图像的更好选择。 ====没用过</li>
<li>plot.ly（<a href="https://plot.ly/" target="_blank" rel="noopener">https://plot.ly/</a>） 可以生成非常好的图，可惜是付费服务。===没用过</li>
</ul>
<h3 id="Jupyter-notebook的magic操作"><a href="#Jupyter-notebook的magic操作" class="headerlink" title="Jupyter notebook的magic操作"></a>Jupyter notebook的magic操作</h3><p>上面介绍的%matplotlib inline就是其中的一个魔术操作，作图时用起来流畅极了； </p>
<ul>
<li>%run ====用来运行代码脚本 </li>
<li>%store ====命令可以在两个notebook文件之间传递变量，没用过。。 </li>
<li>%who ====不加任何参数，命令可以列出所有的全局变量。加上参数 str 将只列出字符串型的全局变量</li>
</ul>
<p>有两种用于计时的jupyter magic命令：<br>当你有一些很耗时的代码，想要查清楚问题出在哪时，这两个命令非常给力。 </p>
<ul>
<li>%%time  会告诉你cell内代码的单次运行时间信息。 </li>
<li>%%timeit 使用了Python的 timeit 模块，该模块运行某语句100，000次（默认值），然后提供最快的3次的平均值作为结果。 </li>
<li>%prun+函数声明  会给你一个按顺序排列的表格，显示每个内部函数的耗时情况，每次调用函数的耗时情况，以及累计耗时。</li>
</ul>
<h3 id="Jupyter-有自己的调试界面The-Python-Debugger-pdb"><a href="#Jupyter-有自己的调试界面The-Python-Debugger-pdb" class="headerlink" title="Jupyter 有自己的调试界面The Python Debugger (pdb)"></a>Jupyter 有自己的调试界面The Python Debugger (pdb)</h3><p>===这个貌似很强大的样子，暂时还没用过，有机会我要试试~<br>（<a href="https://docs.python.org/3.5/library/pdb.html" target="_blank" rel="noopener">https://docs.python.org/3.5/library/pdb.html</a>），使得进入函数内部检查错误成为可能。<br>Pdb中可使用的命令见链接（<a href="https://docs.python.org/3.5/library/pdb.html#debugger-commands" target="_blank" rel="noopener">https://docs.python.org/3.5/library/pdb.html#debugger-commands</a>）</p>
<h3 id="运行Shell命令"><a href="#运行Shell命令" class="headerlink" title="运行Shell命令"></a>运行Shell命令</h3><p>在notebook中可以用<code>cd</code> 来切换目录；<br><code>ls</code>用来显示当前目录内容；<br><code>$ pip install</code>或者<code>$ conda install</code>用来使用cmd下的命令操作；</p>
<h3 id="Jupyter-Notebook-的快捷键"><a href="#Jupyter-Notebook-的快捷键" class="headerlink" title="Jupyter-Notebook 的快捷键"></a>Jupyter-Notebook 的快捷键</h3><p>Jupyter Notebook 有两种键盘输入模式。编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。</p>
<h4 id="命令模式-按键-Esc-开启"><a href="#命令模式-按键-Esc-开启" class="headerlink" title="命令模式 (按键 Esc 开启)"></a>命令模式 (按键 Esc 开启)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Enter : 转入编辑模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下个单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在其下插入新单元</span><br><span class="line">Y : 单元转入代码状态</span><br><span class="line">M :单元转入markdown状态</span><br><span class="line">R : 单元转入<span class="type">raw</span>状态</span><br><span class="line"><span class="number">1</span> : 设定 1 级标题</span><br><span class="line"><span class="number">2</span> : 设定 2 级标题</span><br><span class="line"><span class="number">3</span> : 设定 3 级标题</span><br><span class="line"><span class="number">4</span> : 设定 4 级标题</span><br><span class="line"><span class="number">5</span> : 设定 5 级标题</span><br><span class="line"><span class="number">6</span> : 设定 6 级标题</span><br><span class="line">Up : 选中上方单元</span><br><span class="line">K : 选中上方单元</span><br><span class="line">Down : 选中下方单元</span><br><span class="line">J : 选中下方单元</span><br><span class="line">Shift-K : 扩大选中上方单元</span><br><span class="line">Shift-J : 扩大选中下方单元</span><br><span class="line">A : 在上方插入新单元</span><br><span class="line">B : 在下方插入新单元</span><br><span class="line">X : 剪切选中的单元</span><br><span class="line">C : 复制选中的单元</span><br><span class="line">Shift-V : 粘贴到上方单元</span><br><span class="line">V : 粘贴到下方单元</span><br><span class="line">Z : 恢复删除的最后一个单元</span><br><span class="line">D,D : 删除选中的单元</span><br><span class="line">Shift-M : 合并选中的单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">S : 文件存盘</span><br><span class="line">L : 转换行号</span><br><span class="line">O : 转换输出</span><br><span class="line">Shift-O : 转换输出滚动</span><br><span class="line">Esc : 关闭页面</span><br><span class="line">Q : 关闭页面</span><br><span class="line">H : 显示快捷键帮助</span><br><span class="line">I,I : 中断<span class="type">Notebook</span>内核</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span> : 重启<span class="type">Notebook</span>内核</span><br><span class="line">Shift : 忽略</span><br><span class="line">Shift-Space : 向上滚动</span><br><span class="line">Space : 向下滚动</span><br></pre></td></tr></table></figure>
<h4 id="编辑模式-Enter-键启动"><a href="#编辑模式-Enter-键启动" class="headerlink" title="编辑模式 ( Enter 键启动)"></a>编辑模式 ( Enter 键启动)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Tab : 代码补全或缩进</span><br><span class="line">Shift-Tab : 提示</span><br><span class="line">Ctrl-] : 缩进</span><br><span class="line">Ctrl-[ : 解除缩进</span><br><span class="line">Ctrl-A : 全选</span><br><span class="line">Ctrl-Z : 复原</span><br><span class="line">Ctrl-Shift-Z : 再做</span><br><span class="line">Ctrl-Y : 再做</span><br><span class="line">Ctrl-Home : 跳到单元开头</span><br><span class="line">Ctrl-Up : 跳到单元开头</span><br><span class="line">Ctrl-<span class="keyword">End</span> : 跳到单元末尾</span><br><span class="line">Ctrl-Down : 跳到单元末尾</span><br><span class="line">Ctrl-Left : 跳到左边一个字首</span><br><span class="line">Ctrl-Right : 跳到右边一个字首</span><br><span class="line">Ctrl-Backspace : 删除前面一个字</span><br><span class="line">Ctrl-Delete : 删除后面一个字</span><br><span class="line">Esc : 进入命令模式</span><br><span class="line">Ctrl-M : 进入命令模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下一单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在下面插入一单元</span><br><span class="line">Ctrl-Shift<span class="comment">-- : 分割单元</span></span><br><span class="line">Ctrl-Shift-Subtract : 分割单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">Shift : 忽略</span><br><span class="line">Up : 光标上移或转入上一单元</span><br><span class="line">Down :光标下移或转入下一单元</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RNN]]></title>
      <url>/2017/08/09/2017-08-10-RNN/</url>
      <content type="html"><![CDATA[<blockquote>
<p>0.总结</p>
</blockquote>
<p>本文主要讲了N vs N，N vs 1、1 vs N、N vs M四种经典的RNN模型，以及如何使用Attention结构。</p>
<hr>
<blockquote>
<p>1.从单层网络谈起</p>
</blockquote>
<p>在学习RNN之前，首先要了解一下最基本的单层网络，它的结构如图：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0.jpeg" width="700"><br><div class="image-caption">单层网络</div><br></div>

<p>输入是x，经过变换Wx+b和激活函数f得到输出y</p>
<hr>
<blockquote>
<p>2.经典的RNN结构(N vs N)</p>
</blockquote>
<p>在实际应用中，我们还会遇到很多序列形的数据：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(1).jpeg" width="700"><br><div class="image-caption">序列形的数据</div><br></div>

<p>如：</p>
<ul>
<li>自然语言处理问题．x1可以看做是第一个单词，x2可以看做是第二个单词，依次类推。</li>
<li>语音处理．此时，x1、x2、x3……是每帧的声音信号。</li>
<li>时间序列问题．例如每天的股票价格等等</li>
</ul>
<p>序列形的数据就不太好用原始的神经网络处理了。</p>
<p>为了建模序列问题，RNN引入了隐状态h（hidden state）的概念，h可以对序列形的数据提取特征，接着再转换为输出。</p>
<p>先从h1的计算开始看：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(2).jpeg" width="700"><br><div class="image-caption">h1的计算</div><br></div>

<p>图示中记号的含义是：</p>
<ul>
<li>圆圈或方块表示的是向量</li>
<li>一个箭头就表示对该向量做一次变换。如上图中h0和x1分别有一个箭头连接，就表示对h0和x1各做了一次变换。</li>
</ul>
<p>在很多论文中也会出现类似的记号，初学的时候很容易搞乱，但只要把握住以上两点，就可以比较轻松地理解图示背后的含义。</p>
<p>h2的计算和h1类似。要注意的是，在计算时，每一步使用的参数U、W、b都是一样的，也就是说每个步骤的参数都是共享的，这是RNN的重要特点，一定要牢记。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(3).jpeg" width="700"><br><div class="image-caption">h2的计算</div><br></div>

<p>依次计算剩下来的（使用相同的参数U、W、b）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(4).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>我们这里为了方便起见，只画出序列长度为4的情况，实际上，这个计算过程可以无限地持续下去。</p>
<p>我们目前的RNN还没有输出，得到输出值的方法就是直接通过h进行计算：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(5).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>正如之前所说，一个箭头就表示对对应的向量做一次类似于f(Wx+b)的变换，这里的这个箭头就表示对h1进行一次变换，得到输出y1。</p>
<p>剩下的输出类似进行（使用和y1同样的参数V和c）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(6).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>OK！大功告成！这就是最经典的RNN结构，我们像搭积木一样把它搭好了。它的输入是x1, x2, …..xn，输出为y1, y2, …yn，也就是说，输入和输出序列必须要是等长的。</p>
<p>由于这个限制的存在，经典RNN的适用范围比较小，但也有一些问题适合用经典的RNN结构建模，如：</p>
<ul>
<li>计算视频中每一帧的分类标签:因为要对每一帧进行计算，因此输入和输出序列等长。</li>
<li>输入为字符，输出为下一个字符的概率。</li>
<li>这就是著名的Char RNN（详细介绍请参考：The Unreasonable Effectiveness of Recurrent Neural Networks，Char RNN可以用来生成文章，诗歌，甚至是代码，非常有意思）。</li>
</ul>
<hr>
<blockquote>
<p>3.N vs 1</p>
</blockquote>
<p>有的时候，我们要处理的问题输入是一个序列，输出是一个单独的值而不是序列，应该怎样建模呢？</p>
<p>实际上，我们只在最后一个h上进行输出变换就可以了：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(7).jpeg" width="700"><br><div class="image-caption">输出变换</div><br></div>

<p>这种结构通常用来处理序列分类问题。</p>
<ul>
<li>输入一段文字判别它所属的类别</li>
<li>输入一个句子判断其情感倾向</li>
<li>输入一段视频并判断它的类别等等。</li>
</ul>
<hr>
<blockquote>
<p>4.1 VS N</p>
</blockquote>
<p>输入不是序列而输出为序列的情况怎么处理？我们可以只在序列开始进行输入计算：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(8).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>还有一种结构是把输入信息X作为每个阶段的输入：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(9).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>下图省略了一些X的圆圈，是一个等价表示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(10).jpeg" width="700"><br><div class="image-caption">等价表示</div><br></div>

<p>这种1 VS N的结构可以处理的问题有：</p>
<ul>
<li>从图像生成文字（image caption），此时输入的X就是图像的特征，而输出的y序列就是一段句子</li>
<li>从类别生成语音或音乐等</li>
</ul>
<hr>
<blockquote>
<p>5.N VS M</p>
</blockquote>
<p>下面我们来介绍RNN最重要的一个变种：N vs M。</p>
<p>这种结构又叫Encoder-Decoder模型，也可以称之为Seq2Seq模型。</p>
<p>原始的N vs N RNN要求序列等长，然而我们遇到的大部分问题序列都是不等长的，如机器翻译中，源语言和目标语言的句子往往并没有相同的长度。</p>
<p>为此，Encoder-Decoder结构先将输入数据编码成一个上下文向量c：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(11).jpeg" width="700"><br><div class="image-caption">Encoder</div><br></div>

<p>得到c有多种方式，最简单的方法就是把Encoder的最后一个隐状态赋值给c，还可以对最后的隐状态做一个变换得到c，也可以对所有的隐状态做变换。</p>
<p>拿到c之后，就用另一个RNN网络对其进行解码，这部分RNN网络被称为Decoder。具体做法就是将c当做之前的初始状态h0输入到Decoder中：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(12).jpeg" width="700"><br><div class="image-caption">Decoder</div><br></div>

<p>还有一种做法是将c当做每一步的输入：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(13).jpeg" width="700"><br><div class="image-caption">输入</div><br></div>

<p>由于这种Encoder-Decoder结构不限制输入和输出的序列长度，因此应用的范围非常广泛，比如：</p>
<ul>
<li><code>机器翻译</code>:Encoder-Decoder的最经典应用，事实上这一结构就是在机器翻译领域最先提出的</li>
<li><code>文本摘要</code>:输入是一段文本序列，输出是这段文本序列的摘要序列。</li>
<li><code>阅读理解</code>:将输入的文章和问题分别编码，再对其进行解码得到问题的答案。</li>
<li><code>语音识别</code>:输入是语音信号序列，输出是文字序列。</li>
<li>…………</li>
</ul>
<hr>
<blockquote>
<p>6.Attention机制</p>
</blockquote>
<p>在Encoder-Decoder结构中，Encoder把所有的输入序列都编码成一个统一的语义特征c再解码。</p>
<p><code>因此， c中必须包含原始序列中的所有信息，它的长度就成了限制模型性能的瓶颈。</code></p>
<p>如机器翻译问题，当要翻译的句子较长时，一个c可能存不下那么多信息，就会造成翻译精度的下降。</p>
<p>Attention机制通过在每个时间输入不同的c来解决这个问题，下图是带有Attention机制的Decoder：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(14).jpeg" width="700"><br><div class="image-caption">Attention机制的Decoder</div><br></div>

<p>每一个c会自动去选取与当前所要输出的y最合适的上下文信息。</p>
<p>具体来说，我们用$$a_{ij}$$衡量Encoder中第j阶段的hj和解码时第i阶段的相关性，最终Decoder中第i阶段的输入的上下文信息$$c<em>i$$就来自于所有$$a</em>{ij}$$对的加权和。</p>
<p>以机器翻译为例（将中文翻译成英文）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(15).jpeg" width="700"><br><div class="image-caption">机器翻译</div><br></div>

<p>输入的序列是“我爱中国”，因此，Encoder中的h1、h2、h3、h4就可以分别看做是 “我” 、 “爱” 、 “中” 、 “国” 所代表的信息。</p>
<p>在翻译成英语时，第一个上下文c1应该和“我”这个字最相关，因此对应的就$$a<em>{11}$$比较大，而相应的$$ a</em>{12},a<em>{13},a</em>{14} $$就比较小。</p>
<p>c2应该和“爱”最相关，因此对应的$$ a<em>{22} $$就比较大。最后的c3和h3、h4最相关，因此 $$  a</em>{33},a_{34}  $$的值就比较大。</p>
<p>至此，关于Attention模型，我们就只剩最后一个问题了，那就是：</p>
<blockquote>
<p>这些权重$$ a_{ij} $$是怎么来的？</p>
</blockquote>
<p>事实上，$$ a_{ij} $$同样是从模型中学出的，它实际和Decoder的第i-1阶段的隐状态、Encoder第j个阶段的隐状态有关。</p>
<p>同样还是拿上面的机器翻译举例，$$ a_{1j} $$的计算（此时箭头就表示对h’和$$ h_j $$同时做变换）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(16).jpeg" width="700"><br><div class="image-caption">$ a_{1j} $计算</div><br></div>


<p>$$ a_{2j} $$的计算:</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(17).jpeg" width="700"><br><div class="image-caption">$ a_{2j} $计算</div><br></div>



<p>$$ a_{3j} $$的计算:</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(18).jpeg" width="700"><br><div class="image-caption">$ a_{3j} $的计算</div><br></div>



]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rnn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu的grub修复]]></title>
      <url>/2017/08/07/2017-08-07-Ubuntu%E7%9A%84grub%E4%BF%AE%E5%A4%8D/</url>
      <content type="html"><![CDATA[<h3 id="问题一：grub-rescue"><a href="#问题一：grub-rescue" class="headerlink" title="问题一：grub rescue"></a>问题一：grub rescue</h3><p>调整磁盘，利用工具分割出新分区后重启</p>
<p>开机后有引导，可以正常进入win7系统，但选择Linux系统进入时跳到grub rescue模式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GRUB loading</span><br><span class="line"></span><br><span class="line">error:unknow filesystem</span><br><span class="line"></span><br><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure>
<p>这是因为新分区导致grub混淆</p>
<p>在 grub rescue&gt;下输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt;ls</span><br><span class="line">(hd0,1),...,(hd0,msdos9),(hd0,msdos10),(hd0,msdos11)</span><br><span class="line">grub rescue&gt;set root=(hd0,msdos11)</span><br><span class="line">grub rescue&gt;set prefix=(hd0,msdos11)/grub</span><br><span class="line">grub rescue&gt;insmod normal</span><br><span class="line">grub rescue&gt;normal</span><br></pre></td></tr></table></figure>
<p>即可正常进入Ubuntu系统</p>
<p>但是问题依旧存在，下次要进入Ubuntu时还是先进入grub rescue，很烦</p>
<p>我们需要进入Linux中，对grub进行修复。</p>
<p>启动起来，进入ubuntu之后，在终端执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo grub-install /dev/sda</span><br></pre></td></tr></table></figure>
<p>（sda是你的硬盘号码，千万不要指定分区号码，例如sda1，sda5等都不对）</p>
<p>嗯，现在重启可以直接进入Ubuntu系统，不用进入grub rescue了</p>
<p>但是，有个问题…现在进不了win7了…win7的启动项弄没了，现在只能进ubuntu</p>
<h3 id="问题二：win7的启动项消失"><a href="#问题二：win7的启动项消失" class="headerlink" title="问题二：win7的启动项消失"></a>问题二：win7的启动项消失</h3><p>注意到“Windows 7 (loader) (on /dev/sda1)”条目</p>
<p>开机时点进去…假的，直接紫色花屏，mmp</p>
<p>我觉得还可以再抢救一下</p>
<p>直接改一下grub.cfg文件</p>
<p>先Ctrl+alt+T打开终端，输入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>再打开的grub.cfg文件尾部添加一段：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menuentry 'Win7' &#123;</span><br><span class="line">  set root=(hd0,1);</span><br><span class="line">  ntldr /bootmgr</span><br><span class="line">  boot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，退出。重启。也可以看到Win7启动条目了。</p>
<p>但这种做法不会像方法一那样更新了grub.cfg文件，删除掉了那条旧的“Windows 7 (loader) (on /dev/sda1)条目”。可以直接在grub.cfg文件中删除那一段则可。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> grub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LSTM]]></title>
      <url>/2017/08/04/2017-08-04-LSTM/</url>
      <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">Understanding LSTM Networks</a></p>
<p><a href="http://www.jianshu.com/p/9dc9f41f0b29" target="_blank" rel="noopener">(译)理解 LSTM 网络</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/nicodjimenez/lstm" target="_blank" rel="noopener">纯python实现</a></p>
<h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><p><img src="!--￼10--&gt;/assets/blog/img/2017-8-4/LSTM.png" alt="LSTM structure"></p>
<p>如图为LSTM的类图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_derivative</span><span class="params">(values)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> values*(<span class="number">1</span>-values)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh_derivative</span><span class="params">(values)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> - values ** <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>sigmoid(x) :=            $$ \sigma(x)=\frac{1}{1+e^x} $$</p>
<p>sigmoid_derivative(x) :=　$$ \sigma ‘(x)=x(1-x) $$</p>
<p>tanh_derivative(x) :=   　$$ \tanh ‘(x)=1-x^2 $$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># createst uniform random array w/ values in [a,b) and shape args</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand_arr</span><span class="params">(a, b, *args)</span>:</span> </span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> np.random.rand(*args) * (b - a) + a</span><br></pre></td></tr></table></figure>
<p>np.random.seed(0)设置随机数种子以便复现结果,rand_arr(a,b,*args)函数用于初始化</p>
<p>rand_arr(a,b):= $$ x, x \in [a,b) $$</p>
<p>rand_arr(a,b,$$\begin{bmatrix} 1 &amp; 2 \ 3 &amp; 4 \end{bmatrix}$$):=$$\begin{bmatrix} x_1 &amp; x_2 \ x_3 &amp; x_4 \end{bmatrix} ,x_1, x_2, x_3, x_4\in [a,b) $$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmParam</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mem_cell_ct, x_dim)</span>:</span></span><br><span class="line">        self.mem_cell_ct = mem_cell_ct</span><br><span class="line">        self.x_dim = x_dim</span><br><span class="line">        concat_len = x_dim + mem_cell_ct</span><br><span class="line">        <span class="comment"># weight matrices</span></span><br><span class="line">        self.wg = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        self.wi = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len) </span><br><span class="line">        self.wf = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        self.wo = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        <span class="comment"># bias terms</span></span><br><span class="line">        self.bg = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bi = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bf = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bo = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        <span class="comment"># diffs (derivative of loss function w.r.t. all parameters)</span></span><br><span class="line">        self.wg_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wi_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wf_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wo_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.bg_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bi_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bf_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bo_diff = np.zeros(mem_cell_ct) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_diff</span><span class="params">(self, lr = <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        lr:learningrate学习率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.wg -= lr * self.wg_diff</span><br><span class="line">        self.wi -= lr * self.wi_diff</span><br><span class="line">        self.wf -= lr * self.wf_diff</span><br><span class="line">        self.wo -= lr * self.wo_diff</span><br><span class="line">        self.bg -= lr * self.bg_diff</span><br><span class="line">        self.bi -= lr * self.bi_diff</span><br><span class="line">        self.bf -= lr * self.bf_diff</span><br><span class="line">        self.bo -= lr * self.bo_diff</span><br><span class="line">        <span class="comment"># reset diffs to zero</span></span><br><span class="line">        self.wg_diff = np.zeros_like(self.wg)</span><br><span class="line">        self.wi_diff = np.zeros_like(self.wi) </span><br><span class="line">        self.wf_diff = np.zeros_like(self.wf) </span><br><span class="line">        self.wo_diff = np.zeros_like(self.wo) </span><br><span class="line">        self.bg_diff = np.zeros_like(self.bg)</span><br><span class="line">        self.bi_diff = np.zeros_like(self.bi) </span><br><span class="line">        self.bf_diff = np.zeros_like(self.bf) </span><br><span class="line">        self.bo_diff = np.zeros_like(self.bo)</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-5.png" width="700"><br><div class="image-caption">LSTM基本结构</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-7.png" width="700"><br><div class="image-caption">决定丢弃信息</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-8.png" width="700"><br><div class="image-caption">确定更新的信息</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-9.png" width="700"><br><div class="image-caption">更新细胞状态</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-10.png" width="700"><br><div class="image-caption">输出信息</div><br></div>

<p>以上公式的符号与变量名对应表</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>mem_cell_ct</td>
<td>todo</td>
</tr>
<tr>
<td>x_dim</td>
<td>$$x_t$$的维数</td>
</tr>
<tr>
<td>wf</td>
<td>$$W_f$$</td>
</tr>
<tr>
<td>wi</td>
<td>$$W_i$$</td>
</tr>
<tr>
<td>wg</td>
<td>$$W_C$$</td>
</tr>
<tr>
<td>wo</td>
<td>$$W_o$$</td>
</tr>
<tr>
<td>bf</td>
<td>$$b_f$$</td>
</tr>
<tr>
<td>bi</td>
<td>$$b_i$$</td>
</tr>
<tr>
<td>bg</td>
<td>$$b_C$$</td>
</tr>
<tr>
<td>bo</td>
<td>$$b_o$$</td>
</tr>
<tr>
<td>wf_diff</td>
<td>$$W_f$$的误差</td>
</tr>
<tr>
<td>wi_diff</td>
<td>$$W_i$$的误差</td>
</tr>
<tr>
<td>wg_diff</td>
<td>$$W_C$$的误差</td>
</tr>
<tr>
<td>wo_diff</td>
<td>$$W_o$$的误差</td>
</tr>
<tr>
<td>bf_diff</td>
<td>$$b_f$$的误差</td>
</tr>
<tr>
<td>bi_diff</td>
<td>$$b_i$$的误差</td>
</tr>
<tr>
<td>bg_diff</td>
<td>$$b_C$$的误差</td>
</tr>
<tr>
<td>bo_diff</td>
<td>$$b_o$$的误差</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmState</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mem_cell_ct, x_dim)</span>:</span></span><br><span class="line">        self.g = np.zeros(mem_cell_ct)</span><br><span class="line">        self.i = np.zeros(mem_cell_ct)</span><br><span class="line">        self.f = np.zeros(mem_cell_ct)</span><br><span class="line">        self.o = np.zeros(mem_cell_ct)</span><br><span class="line">        self.s = np.zeros(mem_cell_ct)</span><br><span class="line">        self.h = np.zeros(mem_cell_ct)</span><br><span class="line">        self.bottom_diff_h = np.zeros_like(self.h)</span><br><span class="line">        self.bottom_diff_s = np.zeros_like(self.s)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>$$f_t$$</td>
</tr>
<tr>
<td>i</td>
<td>$$i_t$$</td>
</tr>
<tr>
<td>g</td>
<td>$$\widetilde{C}_t$$</td>
</tr>
<tr>
<td>o</td>
<td>$$o_t$$</td>
</tr>
<tr>
<td>s</td>
<td>$$C_t$$ (state的缩写)</td>
</tr>
<tr>
<td>h</td>
<td>$$h_t$$</td>
</tr>
<tr>
<td>bottom_diff_h</td>
<td>$$todo$$</td>
</tr>
<tr>
<td>bottom_diff_h</td>
<td>$$todo$$</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lstm_param, lstm_state)</span>:</span></span><br><span class="line">        <span class="comment"># store reference to parameters and to activations</span></span><br><span class="line">        self.state = lstm_state</span><br><span class="line">        self.param = lstm_param</span><br><span class="line">        <span class="comment"># non-recurrent input concatenated with recurrent input</span></span><br><span class="line">        self.xc = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>LSTM只有一个节点，该节点包含训练参数lstm_param和状态参数lstm_state</p>
<p>训练参数是模型的灵魂所在，网络学习的过程就是训练参数不断调整的过程，最好不要人为干预</p>
<p>状态参数可以根据不同的输入通过与训练参数计算而来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bottom_data_is</span><span class="params">(self, x, s_prev = None, h_prev = None)</span>:</span></span><br><span class="line">    <span class="comment"># if this is the first lstm node in the network</span></span><br><span class="line">    <span class="keyword">if</span> s_prev == <span class="keyword">None</span>: s_prev = np.zeros_like(self.state.s)</span><br><span class="line">    <span class="keyword">if</span> h_prev == <span class="keyword">None</span>: h_prev = np.zeros_like(self.state.h)</span><br><span class="line">    <span class="comment"># save data for use in backprop</span></span><br><span class="line">    self.s_prev = s_prev</span><br><span class="line">    self.h_prev = h_prev</span><br><span class="line"></span><br><span class="line">    <span class="comment"># concatenate x(t) and h(t-1)</span></span><br><span class="line">    xc = np.hstack((x,  h_prev))</span><br><span class="line">    self.state.g = np.tanh(np.dot(self.param.wg, xc) + self.param.bg)</span><br><span class="line">    self.state.i = sigmoid(np.dot(self.param.wi, xc) + self.param.bi)</span><br><span class="line">    self.state.f = sigmoid(np.dot(self.param.wf, xc) + self.param.bf)</span><br><span class="line">    self.state.o = sigmoid(np.dot(self.param.wo, xc) + self.param.bo)</span><br><span class="line">    self.state.s = self.state.g * self.state.i + s_prev * self.state.f</span><br><span class="line">    self.state.h = self.state.s * self.state.o</span><br><span class="line"></span><br><span class="line">    self.xc = xc</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>s_pre</td>
<td>$$C_{t-1}$$</td>
</tr>
<tr>
<td>h_pre</td>
<td>$$h_{t-1}$$</td>
</tr>
</tbody>
</table>
<p>bottom_data_is(x,s_prev,h_prev) 相当于前向传播</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_diff_is</span><span class="params">(self, top_diff_h, top_diff_s)</span>:</span></span><br><span class="line">    <span class="comment"># notice that top_diff_s is carried along the constant error carousel</span></span><br><span class="line">    ds = self.state.o * top_diff_h + top_diff_s</span><br><span class="line">    do = self.state.s * top_diff_h</span><br><span class="line">    di = self.state.g * ds</span><br><span class="line">    dg = self.state.i * ds</span><br><span class="line">    df = self.s_prev * ds</span><br><span class="line"></span><br><span class="line">    <span class="comment"># diffs w.r.t. vector inside sigma / tanh function</span></span><br><span class="line">    di_input = sigmoid_derivative(self.state.i) * di </span><br><span class="line">    df_input = sigmoid_derivative(self.state.f) * df </span><br><span class="line">    do_input = sigmoid_derivative(self.state.o) * do </span><br><span class="line">    dg_input = tanh_derivative(self.state.g) * dg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># diffs w.r.t. inputs</span></span><br><span class="line">    self.param.wi_diff += np.outer(di_input, self.xc)</span><br><span class="line">    self.param.wf_diff += np.outer(df_input, self.xc)</span><br><span class="line">    self.param.wo_diff += np.outer(do_input, self.xc)</span><br><span class="line">    self.param.wg_diff += np.outer(dg_input, self.xc)</span><br><span class="line">    self.param.bi_diff += di_input</span><br><span class="line">    self.param.bf_diff += df_input       </span><br><span class="line">    self.param.bo_diff += do_input</span><br><span class="line">    self.param.bg_diff += dg_input       </span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute bottom diff</span></span><br><span class="line">    dxc = np.zeros_like(self.xc)</span><br><span class="line">    dxc += np.dot(self.param.wi.T, di_input)</span><br><span class="line">    dxc += np.dot(self.param.wf.T, df_input)</span><br><span class="line">    dxc += np.dot(self.param.wo.T, do_input)</span><br><span class="line">    dxc += np.dot(self.param.wg.T, dg_input)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save bottom diffs</span></span><br><span class="line">    self.state.bottom_diff_s = ds * self.state.f</span><br><span class="line">    self.state.bottom_diff_h = dxc[self.param.x_dim:]</span><br></pre></td></tr></table></figure>
<p>计算误差,相当于后向传播</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmNetwork</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lstm_param)</span>:</span></span><br><span class="line">        self.lstm_param = lstm_param</span><br><span class="line">        self.lstm_node_list = []</span><br><span class="line">        <span class="comment"># input sequence</span></span><br><span class="line">        self.x_list = []</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-14.png" width="700"><br><div class="image-caption">一般的RNN网络结构</div><br></div>

<p>定义初始化网络</p>
<p>本实现中,Hidden Layer　和 Input Layer 和 Output Layer的长度都相同</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>lstm_node_list</td>
<td>Hidden Layer</td>
</tr>
<tr>
<td>x_list</td>
<td>Input Layer</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y_list_is</span><span class="params">(self, y_list, loss_layer)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Updates diffs by setting target sequence </span></span><br><span class="line"><span class="string">    with corresponding loss layer. </span></span><br><span class="line"><span class="string">    Will *NOT* update parameters.  To update parameters,</span></span><br><span class="line"><span class="string">    call self.lstm_param.apply_diff()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_list) == len(self.x_list)</span><br><span class="line">    idx = len(self.x_list) - <span class="number">1</span></span><br><span class="line">    <span class="comment"># first node only gets diffs from label ...</span></span><br><span class="line">    loss = loss_layer.loss(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">    diff_h = loss_layer.bottom_diff(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">    <span class="comment"># here s is not affecting loss due to h(t+1), hence we set equal to zero</span></span><br><span class="line">    diff_s = np.zeros(self.lstm_param.mem_cell_ct)</span><br><span class="line">    self.lstm_node_list[idx].top_diff_is(diff_h, diff_s)</span><br><span class="line">    idx -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### ... following nodes also get diffs from next nodes, hence we add diffs to diff_h</span></span><br><span class="line">    <span class="comment">### we also propagate error along constant error carousel using diff_s</span></span><br><span class="line">    <span class="keyword">while</span> idx &gt;= <span class="number">0</span>:</span><br><span class="line">        loss += loss_layer.loss(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">        diff_h = loss_layer.bottom_diff(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">        diff_h += self.lstm_node_list[idx + <span class="number">1</span>].state.bottom_diff_h</span><br><span class="line">        diff_s = self.lstm_node_list[idx + <span class="number">1</span>].state.bottom_diff_s</span><br><span class="line">        self.lstm_node_list[idx].top_diff_is(diff_h, diff_s)</span><br><span class="line">        idx -= <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure>
<p>根据y_list计算误差</p>
<p>y_list存的是target sequence </p>
<p>用index从最新的一个状态t=index到之前所有的状态进行遍历，累计误差</p>
<p>误差暂时储存在self.lstm_node_list[idx + 1].state.bottom_diff_h和self.lstm_node_list[idx + 1].state.bottom_diff_s</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_list_clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.x_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_list_add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    self.x_list.append(x)</span><br><span class="line">    <span class="keyword">if</span> len(self.x_list) &gt; len(self.lstm_node_list):</span><br><span class="line">        <span class="comment"># need to add new lstm node, create new state mem</span></span><br><span class="line">        lstm_state = LstmState(self.lstm_param.mem_cell_ct, self.lstm_param.x_dim)</span><br><span class="line">        self.lstm_node_list.append(LstmNode(self.lstm_param, lstm_state))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get index of most recent x input</span></span><br><span class="line">    idx = len(self.x_list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># no recurrent inputs yet</span></span><br><span class="line">        self.lstm_node_list[idx].bottom_data_is(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s_prev = self.lstm_node_list[idx - <span class="number">1</span>].state.s</span><br><span class="line">        h_prev = self.lstm_node_list[idx - <span class="number">1</span>].state.h</span><br><span class="line">        self.lstm_node_list[idx].bottom_data_is(x, s_prev, h_prev)</span><br></pre></td></tr></table></figure>
<p>(一个时间步一个时间步地)将(代表一个句子的一个单词的)向量加入x_list中,</p>
<p>最终x_list是一个矩阵</p>
<p>例如(假设每个单词向量是n维,这里n=4):</p>
<p>I——–&gt;[[1,2,3,4],</p>
<p>want—&gt; [5,7,8,9],</p>
<p>to——&gt; [1,5,8,7],</p>
<p>watch–&gt; [5,2,3,1],</p>
<p>movies– [4,8,2,6]]</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RNN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim tips]]></title>
      <url>/2017/07/01/2017-07-01-vim-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-vim基本设置"><a href="#1-vim基本设置" class="headerlink" title="1. vim基本设置"></a>1. vim基本设置</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span></span><br><span class="line"><span class="keyword">set</span> listchars=<span class="keyword">ta</span><span class="variable">b:</span>»\ ,<span class="built_in">extend</span><span class="variable">s:</span>›,precede<span class="variable">s:</span>‹,nbsp:·,trai<span class="variable">l:</span>·</span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">colorscheme</span> molokai</span><br></pre></td></tr></table></figure>
<p><strong>在windows下的gvim中，可能会出现使用backspace不能往左删除的问题</strong></p>
<blockquote>
<p>这个是因为在windows下的gvim是默认启用了vi兼容模式的，这种模式下backspace配置是空的，所以我们需要禁用vi兼容模式：</p>
</blockquote>
<p><code>set nocp</code></p>
<p>backspace键的默认模式有三种：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>same as “:set backspace=” (Vi compatible)</span><br><span class="line"><span class="symbol">1 </span>same as “:set backspace=indent,eol”</span><br><span class="line"><span class="symbol">2 </span>same as “:set backspace=indent,eol,start”</span><br></pre></td></tr></table></figure>
<p>indent,eol,start解释如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inden<span class="variable">t:</span> 如果用了:<span class="keyword">set</span> <span class="built_in">indent</span>,:<span class="keyword">set</span> ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项。否则不响应。</span><br><span class="line">eo<span class="variable">l:</span>如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。</span><br><span class="line">start：要想删除此次插入前的输入，需设置这个</span><br></pre></td></tr></table></figure>
<p>所以禁用vi兼容模式之后，我们可以设置backspace键为<code>set backspace=2</code>，然后不能使用backspace往左删除的问题消失。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用vim编写fortran代码的一些相关设置]]></title>
      <url>/2017/06/30/2017-07-01-%E4%BD%BF%E7%94%A8vim%E7%BC%96%E5%86%99fortran%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近开始干活了，实验室主流语言是fortran，一种很褒贬不一的语言。由于是Arch linux用户，所以需要对linux编写编译fortran代码做一些准备工作。</p>
</blockquote>
<p>1.首先，在linux下fortran编译器还是很多的，有很方便就能安装的gfortran，还有诸如intel或者PGI这些公司提供的编译器。intel家的编译器对学生免费，所以自然就成了首选。详情请去<a href="https://software.intel.com/en-us/intel-parallel-studio-xe" target="_blank" rel="noopener">这个链接</a>查看。</p>
<p>2.安装intel parallel studio的过程是图形化的，一般不会出现什么问题。安装之后设置一下路径就能使用ifort命令编译fortran文件了。</p>
<p>3.在linux编写fortran代码我还是按照习惯选择了vim，然后我们需要在<code>.vimrc</code>中加入如下设置项：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"语法高亮</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">"fortran语言制表符设置</span><br><span class="line">let fortran_have_tabs=1</span><br><span class="line">"设置制表符宽度</span><br><span class="line">set tabstop=4</span><br><span class="line">"解决中文注释乱码</span><br><span class="line">set fileencodings=urf-8,gb18030,utf-16,big5</span><br><span class="line">"设置代码折叠</span><br><span class="line">let fortran_fold=1</span><br><span class="line">set foldmethod=syntax</span><br><span class="line">"设置默认文件打开后所有折叠自动展开</span><br><span class="line">set foldlevelstart=99</span><br></pre></td></tr></table></figure>
<p>vim有关代码折叠的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zc：折叠代码</span><br><span class="line">zo：展开代码</span><br><span class="line">zC：折叠所有代码</span><br><span class="line">zO：展开所有代码</span><br></pre></td></tr></table></figure>
<p>最后效果图：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/vim_fortran.png" alt="效果图"></p>
<p>这里vim的配色主题为molokai。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 16.04安装jekyll]]></title>
      <url>/2017/06/26/2017-06-26-Ubuntu%E5%AE%89%E8%A3%85jekyll/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一直以来在github写博客习惯于直接git提交后在github pages看效果，这样来回修改就会繁琐的commit、push,所以还是搭建jekyll本地环境预览吧。</p>
</blockquote>
<p>1.安装ruby</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby-full ruby-bundler</span><br></pre></td></tr></table></figure>
<p><strong>这里如果下意识的使用<code>sudo apt install ruby</code>安装ruby会导致下一步安装jekyll的时候出现如下错误：</strong></p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/gem_install_jekyll_errors.png" alt="gem\_install\_error"></p>
<p>2.安装jekyll</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install jekyll</span><br></pre></td></tr></table></figure>
<p>3.检测jekyll是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jekyll -v</span><br><span class="line">jekyll new new-site</span><br><span class="line">cd new-site</span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure>
<p>在浏览器里打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>可以看到预览效果。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> jekyll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex tips]]></title>
      <url>/2017/06/26/2017-06-26-Latex-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-min的两种表示方法"><a href="#1-min的两种表示方法" class="headerlink" title="1.\min的两种表示方法"></a><strong>1.\min的两种表示方法</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\min\limits_&#123;a&#125;</span><br><span class="line">\min\nolimits&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>对应的显示效果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/4.png" alt="\min\limits\_{a}"><br><img src="http://oq782gkz3.bkt.clouddn.com/5.png" alt="\min\nolimits\_{a}"></p>
<hr>
<h3 id="2-latex插入python代码"><a href="#2-latex插入python代码" class="headerlink" title="2. latex插入python代码"></a><strong>2. latex插入python代码</strong></h3><blockquote>
<p>在latex里插入python代码需要使用包<code>pythonhighlight</code>,如果你使用tex live 2017的话，这个包已经安装了，可以直接使用；</p>
<p>如果你安装的latex版本默认没有这个包，你可以去<a href="https://github.com/olivierverdier/python-latex-highlighting" target="_blank" rel="noopener">这个地址</a>下载pythonhighlight.sty文件，然后放到自己的.tex文件目录下，就可以使用了。</p>
</blockquote>
<p>使用过程如下：</p>
<p>先在latex导言区输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;pythonhighlight&#125;</span><br></pre></td></tr></table></figure>
<p><strong>插入python代码有两种方式：</strong></p>
<p>然后在需要插入代码的地方：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\inputpython&#123;python_filename.py&#125;&#123;begin line number&#125;&#123;end line number&#125;</span><br><span class="line">%或者使用这种方式</span><br><span class="line">\begin&#123;python&#125;</span><br><span class="line">contents</span><br><span class="line">\end&#123;python&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu tips]]></title>
      <url>/2017/06/25/2017-06-25-ubuntu-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-更换pip源为阿里云的镜像源"><a href="#1-更换pip源为阿里云的镜像源" class="headerlink" title="1. 更换pip源为阿里云的镜像源"></a><strong>1. 更换pip源为阿里云的镜像源</strong></h3><p><a href="http://mirrors.aliyun.com/help/pypi" target="_blank" rel="noopener">官方帮助教程</a></p>
<p>编辑pip配置文件:</p>
<p><code>vim ~/.pip/pip.conf</code></p>
<p>然后写入如下内容：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p><strong>如果发现没有对应文件夹以及配置文件，请直接自行创建。</strong></p>
<hr>
<h3 id="2-Ubuntu将默认的python版本换为python3-X"><a href="#2-Ubuntu将默认的python版本换为python3-X" class="headerlink" title="2. Ubuntu将默认的python版本换为python3.X"></a><strong>2. Ubuntu将默认的python版本换为python3.X</strong></h3><p>Ubuntu 16.04自带了python2.7和python3.5，且默认版本为python2.7，最近一直使用python3.×版本所以需讲python默认版本修改为3.5。</p>
<p>可以使用<code>ls /usr/bin | grep python</code>来查看目前存在的python版本</p>
<p>然后设置软链接，讲python3.5设为默认：</p>
<p><code>sudo ln -s /usr/bin/python3.5 /usr/local/bin/python</code></p>
<p>此时python3.5已经成为默认。</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_008.png" alt="效果"></p>
<p><strong>然后此时需要注意的就是，如果以后主要在3.×的环境下工作，请安装对应3.×的包。</strong></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python3-pip</span><br><span class="line">pip3 <span class="keyword">install</span> package_name</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-Ubuntu设置ssh密钥登录并关闭ssh密码登录"><a href="#3-Ubuntu设置ssh密钥登录并关闭ssh密码登录" class="headerlink" title="3. Ubuntu设置ssh密钥登录并关闭ssh密码登录"></a><strong>3. Ubuntu设置ssh密钥登录并关闭ssh密码登录</strong></h3><p><strong>连网的机器安全第一，所以ssh的安全性就是重中之重了。使用ssh密钥登录，并关闭密码认证是有效的防止机器被入侵的方式。</strong></p>
<p>Ubuntu设置ssh密钥登录的步骤如下：</p>
<p>1.首先安装ssh</p>
<p><code>sudo apt install ssh</code></p>
<p>2.制作密钥对</p>
<p><code>ssh-keygen</code></p>
<p>你应该会看到如下的内容：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key <span class="built_in">pair</span>.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the key(/home/user/.ssh/id_rsa):</span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="params">...</span></span><br></pre></td></tr></table></figure>
<p>3.将公钥写入到对应文件里</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa<span class="selector-class">.pug</span> &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>然后确保对应文件的权限是正确的:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<p>4.设置ssh配置文件，打开密钥登录并关闭密码登录</p>
<p>编辑<code>/etc/ssh/sshd_config</code>文件，确定如下设置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">PubkeyAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>当你确定可以使用密钥方式登录成功之后，再禁用密码登录：</p>
<p><code>PasswordAuthentication no</code></p>
<p><strong>记得如果这些修改项是被注释掉的，记得把注释取消。</strong></p>
<p>5.重启ssh服务</p>
<p><code>service sshd restart</code></p>
<p>6.关于<a href="https://the.earth.li/~sgtatham/putty/latest/w64/putty-64bit-0.69-installer.msi" target="_blank" rel="noopener">putty</a>使用id_rsa的一点儿说明</p>
<blockquote>
<p>putty是不能直接使用id_rsa私钥的，需要使用<a href="https://the.earth.li/~sgtatham/putty/latest/w64/puttygen.exe" target="_blank" rel="noopener">puttygen</a>转换。</p>
</blockquote>
<p>首先从服务器下载id_rsa到本地，然后使用puttygen载入，然后选择Save private key讲私钥保存为putty能用的.ppk文件。然后就跟一般的putty使用key登录一样了。</p>
<h3 id="Linux下递归改变目录及其子目录属性"><a href="#Linux下递归改变目录及其子目录属性" class="headerlink" title="Linux下递归改变目录及其子目录属性"></a>Linux下递归改变目录及其子目录属性</h3><p>加上－R(大写, regression)参数即可。</p>
<p>比如，</p>
<p>改变文件或目录所属的组, - R 递归式地改变指定目录及其下的所有子目录和文件的属组</p>
<p>将当前目录及其子目录和文件的属组改为 gps<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R gps *</span><br></pre></td></tr></table></figure></p>
<p>改变文件或目录的访问权限, -R 递归式地改变指定目录及其下的所有子目录和文件的访问权限</p>
<p>将当前目录及其子目录和文件的访问权限改为属组下所有人可读，可写，可执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 *</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tips </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu常用软件]]></title>
      <url>/2017/06/23/2017-06-24-ubuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>习惯了Arch的yaourt之后再使用ubuntu ppa就有一种就怕货比货的感觉。</p>
<p>收集一下常用的ubuntu软件安装，便于下次无脑重装。</p>
<hr>
<p><strong>1.Albert</strong></p>
<p>这款软件是必装的了，一个很好用的Launcher。官方介绍如下：</p>
<blockquote>
<p>Access everything with virtually zero effort. Run applications, open files or their paths,open bookmarks in your browser, search the web, calculate things and a lot more …</p>
</blockquote>
<p><strong>Ubuntu-PPA(hotice/webupd8)</strong></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install albert</span><br></pre></td></tr></table></figure>
<p><strong>2.chrome</strong></p>
<p>1.将下载源添加到系统源：</p>
<p><code>sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</code></p>
<p>2.导入google软件公钥：</p>
<p><code>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</code></p>
<p>3.更新源然后安装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span></span><br><span class="line">sudo apt <span class="keyword">install</span> google-chrome-stable</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu以及Arch Linux更换清华源]]></title>
      <url>/2017/06/23/2017-06-23-ubuntu%E6%8D%A2%E6%BA%90%E4%BB%A5%E5%8F%8AArch-linux%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/</url>
      <content type="html"><![CDATA[<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><strong>Ubuntu</strong></h3><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">Ubuntu清华源更换网址</a></p>
<p>这个地址里同样有其他Linux发行版的源使用帮助信息。</p>
<p><strong>更换步骤</strong></p>
<p>1.在上述网址选择ubuntu版本，生成对应的源地址；</p>
<p>2.备份原始文件</p>
<p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</code></p>
<p>3.编辑源文件</p>
<p><code>sudo vim /etc/apt/sources.list</code></p>
<p>将<code>sources.list</code>中内容注释或者删除掉，然后将第一步中生成的源地址粘贴进去；</p>
<p>4.然后更新软件包缓存<code>sudo apt update</code></p>
<hr>
<h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a><strong>Arch Linux</strong></h3><p>编辑­<code>/etc/pacman.d/mirrorlist</code>,在文件最顶端添加：</p>
<p><code>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</code></p>
<p>然后更新软件包缓存<code>sudo pacman -Syy</code></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tips about git and jupyter]]></title>
      <url>/2017/05/24/2017-05-25-Tips/</url>
      <content type="html"><![CDATA[<h3 id="git-push-免密码"><a href="#git-push-免密码" class="headerlink" title="git push 免密码"></a>git push 免密码</h3><p>1.使用文件创建用户名和密码</p>
<p>文件创建在用户主目录下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch .git-credentials</span><br><span class="line">vim .git-credentials</span><br><span class="line">https://&#123;username&#125;:&#123;password&#125;@github.com</span><br></pre></td></tr></table></figure>
<p><strong>记得在真正输入的时候是没有大括号的。</strong></p>
<p>2.添加git config内容</p>
<p><code>git config --global credential.helper store</code></p>
<p>执行此命令后，用户主目录下的.gitconfig文件会多了一项：</p>
<p><code>[credential]</code></p>
<p><code>helper = store</code></p>
<p>重新git push就不需要用户名密码了。</p>
<hr>
<h3 id="git-add-使用tab键自动补全的中文文件名乱码"><a href="#git-add-使用tab键自动补全的中文文件名乱码" class="headerlink" title="git add 使用tab键自动补全的中文文件名乱码"></a>git add 使用tab键自动补全的中文文件名乱码</h3><p>文件名乱码如下所示：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_003.png" alt="乱码"></p>
<p><strong>解决方法为：</strong></p>
<p><code>git config --global core.quotepath false</code></p>
<p>效果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_004.png" alt="效果"></p>
<p>可以看出中文已经正确显示了。</p>
<hr>
<h3 id="jupyter-notebook-创建密码"><a href="#jupyter-notebook-创建密码" class="headerlink" title="jupyter notebook 创建密码"></a>jupyter notebook 创建密码</h3><p><strong>产生jupyter notebook的配置文件：</strong></p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></span><br></pre></td></tr></table></figure>
<p><strong>生成的配置文件位置为：~/.jupyter/jupyter_notebook_config.py</strong></p>
<p><strong>打开jupyter，新建一个notebook，创建密码以及生成密码的sha1密钥，所需代码如下：</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from notebook<span class="selector-class">.auth</span> import passwd</span><br><span class="line"><span class="function"><span class="title">passwd</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>输入一遍你想设置的密码，然后再输入一遍确认，记录下生成的sha1密钥值。形式如：‘sha1:xxxxxxx’</p>
<p>然后将这段值按如下格式粘贴到配置文件中对应的<code>c.NotebookApp.password = u&#39;sha1:xxxx&#39;</code>位置上，如果你不想寻找文件中的这个位置，你也可以在文件末尾新建一个。</p>
<p><strong>重启jupyter，密码生效。</strong></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Arch linux安装过程整理]]></title>
      <url>/2017/05/24/2017-05-24-Arch-Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>整理一下这个教程便于以后可以无脑重装Arch Linux，美滋滋啊。</strong></p>
<h3 id="准备以及分区"><a href="#准备以及分区" class="headerlink" title="准备以及分区"></a>准备以及分区</h3><p><strong>1.准备</strong></p>
<ul>
<li><p>准备内容</p>
<ol>
<li><p>USB stick</p>
</li>
<li><p>Arch Linux ISO image</p>
<p><a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">Arch Linux Download Addr</a></p>
</li>
</ol>
</li>
<li><p>创建启动盘</p>
<ol>
<li><p>On windows: Rufus</p>
</li>
<li><p>On linux: <figure class="highlight plain"><figcaption><span>dd if</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; sdx代表你的U盘，可以用lsblk命令查看得到。</span><br><span class="line"></span><br><span class="line">接下来就是设置bios启动方式，教程基于UEFI+GPT的引导启动方式。请自行设置。</span><br><span class="line"></span><br><span class="line">**设置USB为下一次的引导路径，然后重启之后我们就能进入Arch安装环境了**</span><br><span class="line"></span><br><span class="line">查看EFI mode是否开启</span><br><span class="line"></span><br><span class="line">`efivar -l`</span><br><span class="line"></span><br><span class="line">如果有输出，就说明已经开启。</span><br><span class="line"></span><br><span class="line">**2.分区**</span><br><span class="line"></span><br><span class="line">`lsblk`</span><br></pre></td></tr></table></figure></p>
</li>
</ol>
</li>
</ul>
<p>gdisk /dev/sdx (x representing your drive)<br>x          # into expert mode<br>z          # clear the disk<br>y          # confirm<br>y          # confirm<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">创建分区</span><br><span class="line"></span><br><span class="line">**分区设定如下：**</span><br><span class="line"></span><br><span class="line">sda</span><br><span class="line"></span><br><span class="line">-<span class="ruby"> sda1(boot partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda2(our swap partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda3(our root partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda4(our home partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">**使用cgdisk分区：**</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="string">`cgdisk /dev/sdx`</span></span></span><br></pre></td></tr></table></figure></p>
<p>[New] Press Enter<br>First Sector: Leave this blank -&gt;press Enter<br>Size in sectors: 1024MiB -&gt;press Enter<br>Hex Code: EF00 press Enter<br>Enter new partition name: boot -&gt;press Enter<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*boot分区*</span><span class="strong">*的Hex Code为*</span><span class="strong">*EF00*</span><span class="strong">*，千万不要弄错，有些资料会说是EF02，实测EF00才有效。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">arch wiki上说boot分区分配200-300mb就行了，但是为了以后的双系统等未知需求，分配1Gb。</span></span><br></pre></td></tr></table></figure></p>
<p>[New] Press Enter<br>First Sector: Leave this blank -&gt;press Enter<br>Size in sectors: 8GiB -&gt;press Enter<br>Hex Code: 8200 -&gt;press Enter<br>Enter new partition name: swap -&gt;press Enter<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**swap分区**</span>的Hex Code是<span class="strong">**8200**</span>。</span><br><span class="line"></span><br><span class="line">swap分区的开启与否以及大小设置一直是争论焦点。这里贴出参考：</span><br><span class="line"></span><br><span class="line">[<span class="string">askubuntu\_swap</span>](<span class="link">https://askubuntu.com/questions/49109/i-have-16gb-ram-do-i-need-32gb-swap/49130#49130</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">serverfault\_swap</span>](<span class="link">https://serverfault.com/questions/5841/how-much-swap-space-on-a-2-4gb-system</span>)</span><br><span class="line"></span><br><span class="line">下面建立root分区和home分区。两者Hex code都是默认的<span class="strong">**8300**</span>。</span><br><span class="line">如果不独立设置home分区，就可以直接把剩余空间都设置为root分区。</span><br><span class="line">如果设置独立的home分区，可以分配30G左右给root分区，剩余空间分配给home分区。</span><br><span class="line">分区全部建立完毕之后，我们就要设置分区格式了。</span><br><span class="line"></span><br><span class="line"><span class="code">```shell</span></span><br><span class="line"><span class="code">mkfs.fat -F32 /dev/sda1</span></span><br><span class="line"><span class="code">mkswap /dev/sda2</span></span><br><span class="line"><span class="code">swapon /dev/sda2</span></span><br><span class="line"><span class="code">mkfs.ext4 /dev/sda3</span></span><br><span class="line"><span class="code">mkfs.ext4 /dev/sda4</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-安装Arch-以及配置启动"><a href="#3-安装Arch-以及配置启动" class="headerlink" title="3.安装Arch 以及配置启动"></a>3.安装Arch 以及配置启动</h3><p>挂载分区</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br><span class="line">mount /dev/sda4 /mnt/home</span><br></pre></td></tr></table></figure>
<p>设置mirrorlist</p>
<blockquote>
<p>学校有ipv6的学生可以用清华的源，ipv6直连，美滋滋。</p>
</blockquote>
<p><code>nano /etc/pacman.d/mirrorlist</code></p>
<p>然后在最前面加上</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tsinghua</span></span><br><span class="line">Server = http:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/archlinux/</span><span class="variable">$repo</span><span class="regexp">/os/</span><span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后安装系统</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap -i /mnt <span class="keyword">base</span> <span class="keyword">base</span>-devel</span><br></pre></td></tr></table></figure>
<p>然后创建fstab文件到新安装系统：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U -p <span class="regexp">/mnt &gt;&gt; /m</span>nt<span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>
<p>可以通过<code>nano /mnt/etc/fstab</code>查看是否创建成功</p>
<p><strong>接下来就可以切换到我们新安装的系统了</strong></p>
<p><code>arch-chroot /mnt</code></p>
<p>接下来设置语言，linux下界面语言还是用英文吧。</p>
<p><code>nano /etc/locale.gen</code></p>
<p>然后取消掉<code>en_US.UTF-8</code>和<code>zh_CN.UTF-8</code>前面的注释。</p>
<p>使其生效：</p>
<p><code>locale-gen</code></p>
<p>接下来设置语言：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>设置时区：</p>
<p><code>ln -s /usr/share/zoneinfo/Asia/Shanghai &gt; /etc/localtime</code></p>
<p>请自觉使用tab补全以免出错。</p>
<p>设置硬件时钟：</p>
<p><code>hwclock --systohc --utc</code></p>
<p>设置主机名：</p>
<p><code>echo hostname &gt; /etc/hostname</code></p>
<p>然后编辑<code>pacman.conf</code>取消multilib前面的注释：</p>
<p>这个是为了在64位机器上运行32位程序</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[multilib]</span></span><br><span class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>然后强烈推荐添加的yaourt</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxfr]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Never</span><br><span class="line"><span class="attr">Server</span> = http://repo.archlinux.fr/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>一定要注意大小写。</p>
<p>必须添加的archlinuxcn源，里面有很多中国特色软件，比如网易云、有道词典之类的，同样推荐清华源。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxcn]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Optional TrustedOnly</span><br><span class="line"><span class="attr">Server</span> = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后安装<code>archlinuxcn-keyring</code>包以导入GPG key。</p>
<p>这个时候就可以保存<code>pacman.conf</code>文件了。</p>
<p>设置root账户的密码：</p>
<p><code>passwd</code></p>
<p>添加日常用户：</p>
<p><code>useradd -m -g users -G wheel,storage,power -s /bin/bash yourusername</code></p>
<p>设置密码：</p>
<p><code>passwd yourusername</code></p>
<p>然后是设置sudoers：</p>
<p><code>EDITOR=nano visudo</code></p>
<p>然后取消注释：</p>
<p><code>%wheel ALL=(ALL) ALL</code></p>
<p>然后让使用sudo命令的用户必须输入root密码：</p>
<p><code>Defaults rootpw</code></p>
<p>然后就可以保存文件了。</p>
<p>安装补全命令：</p>
<p><code>pacman -S bash-completion</code></p>
<ul>
<li>安装引导</li>
</ul>
<p>确保EFI变量被挂载</p>
<p><code>mount -t efivarfs efivarfs /sys/firmware/efi/efivars</code></p>
<p>使用Gummiboot作为我们的启动管理，这个已经整合到了bootctl/system-boot里，所以安装方式为：</p>
<p><code>bootctl install</code></p>
<p>下面，我需要把/root分区的PARTUUID加入到启动设置里：</p>
<p><code>blkid -s PARTUUID -o value /dev/sdxY</code></p>
<p>x代表设备代号，本次为a，Y是/root partition的排号，本次为3.</p>
<p>然后添加gummiboot manager配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nano /boot/loader/entries/arch.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是内容：</span></span><br><span class="line">title Arch Linux</span><br><span class="line">linux /vmlinuz-linux</span><br><span class="line">initrd /initramfs-linux.img</span><br><span class="line">options root=PARTUUID=上个命令得到的 rw</span><br></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>添加intel支持：</p>
<p><code>pacman -S intel-ucode</code></p>
<p>然后写入到启动管理设置里：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano /boot/loader/entries/arch.conf</span><br><span class="line">initrd /intel-ucode.img</span><br><span class="line">initrd /initramfs-linux.img</span><br></pre></td></tr></table></figure>
<p>这个时候基本的操作已经完成了，我们可以重启试试了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h3 id="5-安装xfce4桌面环境"><a href="#5-安装xfce4桌面环境" class="headerlink" title="5.安装xfce4桌面环境"></a>5.安装xfce4桌面环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mesa</span><br><span class="line">sudo pacman -S xorg-server xorg-server-common xorg-xinit</span><br><span class="line">sudo pacman -S xfce4</span><br><span class="line">sudo pacman -S xfce4-goodies</span><br><span class="line">sudo pacman -S sddm</span><br><span class="line">sudo systemctl enable sddm.service</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>安装完成，可以使用了。美滋滋。</p>
<h3 id="6-安装Tex-Live"><a href="#6-安装Tex-Live" class="headerlink" title="6.安装Tex Live"></a>6.安装Tex Live</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S texlive-most</span><br><span class="line">yaourt -S texlive-langchinese</span><br><span class="line">yaourt -S texstudio</span><br></pre></td></tr></table></figure>
<p>安装完成之后使用<code>tex --version</code>测试：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-&lt;%&gt;- tex <span class="comment">--version</span></span><br><span class="line">TeX <span class="number">3.14159265</span> (TeX Live <span class="number">2016</span>/Arch Linux)</span><br><span class="line">kpathsea <span class="built_in">version</span> <span class="number">6.2</span><span class="number">.2</span></span><br><span class="line">Copyright <span class="number">2016</span> D.E. Knuth.</span><br><span class="line">There is NO warranty.  Redistribution <span class="keyword">of</span> this software is</span><br><span class="line">covered <span class="keyword">by</span> <span class="keyword">the</span> terms <span class="keyword">of</span> both <span class="keyword">the</span> TeX copyright <span class="keyword">and</span></span><br><span class="line"><span class="keyword">the</span> Lesser GNU General Public License.</span><br><span class="line">For more information about these matters, see <span class="keyword">the</span> <span class="built_in">file</span></span><br><span class="line">named COPYING <span class="keyword">and</span> <span class="keyword">the</span> TeX source.</span><br><span class="line">Primary author <span class="keyword">of</span> TeX: D.E. Knuth.</span><br></pre></td></tr></table></figure>
<p>使用texstudio编写测试文件：</p>
<p>新建test.tex,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">  \includegraphics[width=\linewidth]&#123;favicon.jpg&#125;</span><br><span class="line">  \caption&#123;A boat.&#125;</span><br><span class="line">  \label&#123;fig:boat1&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">Figure \ref&#123;fig:boat1&#125; shows a boat.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>Build &amp; View查看运行结果，正常结果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/favicon.png" alt="results"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python Tips]]></title>
      <url>/2017/05/20/2017-9-18-python-require-install/</url>
      <content type="html"><![CDATA[<h1 id="自动生成和安装requirements-txt依赖"><a href="#自动生成和安装requirements-txt依赖" class="headerlink" title="自动生成和安装requirements.txt依赖"></a>自动生成和安装requirements.txt依赖</h1><p>requirements.txt可以通过pip命令自动生成和安装</p>
<ul>
<li><p>生成requirements.txt文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装requirements.txt依赖</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门笔记]]></title>
      <url>/2017/05/20/2017-05-20-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<hr>
<h4 id="这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。"><a href="#这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。" class="headerlink" title="这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。"></a>这是主要参考文献：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式入门</a>，本文只是做了修改以便于自己记忆。</h4><hr>
<h4 id="1-元字符-metacharater"><a href="#1-元字符-metacharater" class="headerlink" title="1. 元字符 metacharater"></a><strong>1. 元字符 metacharater</strong></h4><blockquote>
<p><strong>\b</strong> 代表着单词的开头或者结尾，也就是单词的分界处；</p>
<p><strong>.</strong> 匹配除了换行符以外的任意字符；</p>
<p><strong>\d</strong> 匹配一位数字；</p>
<p><strong>\s</strong> 匹配任意的空白符，包括空格，制表符，换行符，中文全角空格等；</p>
<p><strong>\w</strong> 匹配字母或数字或下划线或者汉字等；</p>
<p><strong>^</strong>  匹配字符串的开始；</p>
<p><strong>$</strong>  匹配字符串的结束；</p>
</blockquote>
<hr>
<p><strong>字符转义仍然是使用\</strong></p>
<hr>
<h4 id="2-限定"><a href="#2-限定" class="headerlink" title="2. 限定"></a><strong>2. 限定</strong></h4><blockquote>
<p><strong>+</strong> 指定前面的内容可以连续重复1次或者更多次；</p>
<p><strong>*</strong> 指定前面的内容可以连续重复任意次（包括0次)；</p>
<p><strong>?</strong> 重复零次或者一次；</p>
<p><strong>{n}</strong> 重复n次；</p>
<p><strong>{n,1}</strong> 重复n次或者更多次；</p>
<p><strong>{n,m}</strong> 重复n次到m次；</p>
</blockquote>
<hr>
<h4 id="3-字符类"><a href="#3-字符类" class="headerlink" title="3. 字符类"></a><strong>3. 字符类</strong></h4><p><em>可以利用方括号来匹配所需字符，[acb]代表可以匹配abc其中的一个，所以<strong>[]只用来匹配没有元字符对应的字符集中的单个字符</strong></em> </p>
<blockquote>
<p>比如[0-9],就跟\d是完全一致的，也就是匹配单个数字</p>
</blockquote>
<hr>
<h4 id="4-分支条件"><a href="#4-分支条件" class="headerlink" title="4.分支条件"></a><strong>4.分支条件</strong></h4><blockquote>
<p>正则表达式分支条件示例：\d{5}-\d{4}|\d{5}</p>
<p>这个例子含有一个小的tricky的地方，就是它说明了一个问题：<br><strong>用分支条件时，要注意各个条件的顺序</strong>。如果把这个表达式改为<strong>\d{5}|\d{5}-\d{4}</strong>，<br>那么就只会匹配五位的邮编以及9位邮编的前5位。</p>
<p><strong>原因是匹配分支条件时，将会从左到右地测试每个条件，如果满足了某个分支的话，就不会再管其它条件。</strong> </p>
</blockquote>
<hr>
<h4 id="5-分组"><a href="#5-分组" class="headerlink" title="5. 分组"></a><strong>5. 分组</strong></h4><p><em>上面所说的都是重复单个字符的方法，如果想要重复多个字符可以用小括号来指定子表达式（也叫作分组），这也是当我们需要（字符本身时需要对其进行转义的原因。</em></p>
<blockquote>
<p>(\d{1,3}.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p>
</blockquote>
<hr>
<h4 id="6-反义"><a href="#6-反义" class="headerlink" title="6.反义"></a><strong>6.反义</strong></h4><table>
<thead>
<tr>
<th>代码语法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W</td>
<td style="text-align:center">匹配任意不是字母、数字、下划线、汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td style="text-align:center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td style="text-align:center">匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td style="text-align:center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td style="text-align:center">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td style="text-align:center">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="7-后向引用"><a href="#7-后向引用" class="headerlink" title="7.后向引用"></a><strong>7.后向引用</strong></h4><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容）可以在表达式或者其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左到右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推。</p>
<blockquote>
<p>分组0对应整个正则表达式；</p>
<p>实际上组号分配过程是要从左到右扫描两遍：第一遍只给未命名组分配，第二遍只给命名组分配–因此所有的命名组的组号都大于未命名组的组号；</p>
<p>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权。</p>
<p>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p>
<p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
</blockquote>
<p><strong>常用分组语法：</strong></p>
<p><a href="">待补充</a></p>
<hr>
<h4 id="8-零宽断言"><a href="#8-零宽断言" class="headerlink" title="8. 零宽断言"></a><strong>8. 零宽断言</strong></h4>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Arch Linux时出现的问题]]></title>
      <url>/2017/05/19/2017-05-17-Problems-I-encountered-when-I-use-Arch-Linux/</url>
      <content type="html"><![CDATA[<p>使用了Arch快半年了，这个文章实在是写晚了。。</p>
<hr>
<h3 id="1-oh-my-zsh-安装使用"><a href="#1-oh-my-zsh-安装使用" class="headerlink" title="1. oh my zsh 安装使用"></a><strong>1. oh my zsh 安装使用</strong></h3><p><strong>首先安装Zsh</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br></pre></td></tr></table></figure>
<p><strong>安装oh my zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>
<p><strong>切换shell从bash到zsh</strong></p>
<p>首先查看可用shell列表：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  cat /etc/shells</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> End of file</span></span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure>
<p>切换到zsh</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-error-failed-to-commit-transaction-conflicting-files"><a href="#2-error-failed-to-commit-transaction-conflicting-files" class="headerlink" title="2. error: failed to commit transaction (conflicting files)"></a><strong>2. error: failed to commit transaction (conflicting files)</strong></h3><p><strong>问题描述：</strong>这个问题已经碰到了几次，原因暂未知。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: failed to commit transaction (conflicting files)</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/PKG-INFO exists in filesystem</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/SOURCES.txt exists in filesystem</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/dependency_links.txt exists in filesystem</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>首先，检测一下冲突文件有没有包在使用<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Qo /path/<span class="keyword">to</span>/<span class="built_in">file</span></span><br></pre></td></tr></table></figure></p>
<p>结果一般就是没有包在使用。。所以下面就rm掉所有引起冲突的文件就行了，问题解决。最近碰见了这个问题好几次，但是出现原因暂未知。。太烦了。</p>
<hr>
<h3 id="3-窗口撕裂"><a href="#3-窗口撕裂" class="headerlink" title="3. 窗口撕裂"></a><strong>3. 窗口撕裂</strong></h3><p><strong>问题描述：</strong>我不知道这个问题应不应该叫做窗口撕裂：在上下滚动内容的时候，滚动方向最下面的内容会出现重影，显得好像屏幕刷新有延迟。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/X11/xorg.conf.d/20-intel.conf</span><br></pre></td></tr></table></figure>
<p>然后添加如下内容：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Section</span> <span class="string">"Device"</span></span><br><span class="line">   Identifier  <span class="string">"Intel Graphics"</span></span><br><span class="line">   Driver      <span class="string">"intel"</span></span><br><span class="line">   <span class="meta">Option</span>      <span class="string">"TearFree"</span> <span class="string">"true"</span></span><br><span class="line">   <span class="meta">Option</span>      <span class="string">"AccelMethod"</span>  <span class="string">"uxa"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认的<code>AccelMethod</code>的值为<code>sna</code>，在我这里使用<code>sna</code>会出现滚动延迟的情况，但是使用<code>uxa</code>就没有这种现象。但是更改了这个值之后发现了一个新问题就是笔记本不合盖子屏幕自动关闭之后不能唤醒，只有切到tty之后再切回来才行。待解决。</p>
</blockquote>
<hr>
<h3 id="4-signature-from-xxx-is-marginal-trust"><a href="#4-signature-from-xxx-is-marginal-trust" class="headerlink" title="4. signature from xxx is marginal trust"></a><strong>4. signature from xxx is marginal trust</strong></h3><p><strong>问题描述：</strong></p>
<blockquote>
<p>error: archlinuxcn-keyring: signature from “Jiachen Yang \<farseerfc@gmail.com>“ is marginal trust<br>:: File /var/cache/pacman/pkg/archlinuxcn-keyring-20170522-1-any.pkg.tar.xz is corrupted (invalid or corrupted package (PGP signature)).</farseerfc@gmail.com></p>
</blockquote>
<p><strong>解决办法：</strong></p>
<p><code>sudo pacman-key --refresh-keys</code></p>
<p>代码运行结果就是新导入了很多PGP signature, 然后问题解决。</p>
<p><strong>解决方法二</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -R /etc/pacman.d/gnupg/</span><br><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinux</span><br><span class="line">pacman-key --populate archlinuxcn</span><br></pre></td></tr></table></figure>
<p>可以看出这也是走的更新key的路数。</p>
<p>但是出现这种问题执行<code>pacman -S archlinux-keyring</code>重装<code>archlinux-keyring</code>是没有用的。</p>
<p><strong><em>还有一种说法是系统时间不正确</em></strong></p>
<p>不知道这个系统时间是指哪个时间。</p>
<hr>
<h3 id="5-opt-sysmlink-file-conflicts"><a href="#5-opt-sysmlink-file-conflicts" class="headerlink" title="5. /opt sysmlink file conflicts"></a><strong>5. /opt sysmlink file conflicts</strong></h3><p><strong>问题描述：</strong>由于在安装Arch系统时，/home分区是独立于/root分区的，而yaourt安装的大型软件都是会安装到/opt下面，导致系统分区会被很快用光。所以我的解决方法是在/home分区下新建opt分区，然后建立软链接：</p>
<p><code>ln -s /home/opt /opt</code></p>
<p>但是这样做之后会导致在yaourt安装软件是出现<code>/opt already exists</code>的<code>file conflicts</code>错误。</p>
<p>官方解释如下：</p>
<blockquote>
<p>Directory Symlink Handling: Example time! Arch Linux has a /lib -&gt; /usr/lib symlink. Previously, if pacman was installing a package and it found files in /lib, it would follow the symlink and install it in /usr/lib. However the filelist for that package still recorded the file in /lib. This caused heaps of difficulty in conflict resolving – primarily the need to resolve every path of all package files to look for conflicts. That was a stupid idea! So now if pacman sees a /lib directory in a package, it will detect a conflict with the symlink on the filesystem. If you were using this feature to install files elsewhere, you probably need to look into what a bind mount is! Note that this change requires us to correct the local package file list for any package installed using this mis-feature, so we bumped the database version. Upgrade using pacman-db-upgrade. Thanks to Andrew! </p>
</blockquote>
<p><strong>解决方法：</strong></p>
<p>在<strong>/etc/fstab</strong>里加入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> solve the /opt sysbolink file conficts errors</span></span><br><span class="line">/home/opt	/opt	none	bind</span><br></pre></td></tr></table></figure>
<p><strong>problems solved, splendid!</strong></p>
<hr>
<p><strong>### 6. wine下TIM中文界面部分乱码</strong></p>
<p><strong>问题描述：</strong> 已经通过<code>winetricks corefonts cjkfonts</code>安装了字体，但是qq登录界面以及消息预览界面的中文都是方块。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim .wine/system.reg</span><br><span class="line">搜索： LogPixels</span><br><span class="line">找到的行应该是：[System\\CurrentControlSet\\Hardware Profiles\\Current\\Software\\Fonts]</span><br><span class="line">将其中的：</span><br><span class="line">“LogPixels”=dword:<span class="number">00000060</span></span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line">“LogPixels”=dword:<span class="number">00000070</span></span><br><span class="line"></span><br><span class="line">搜索： FontSubstitutes</span><br><span class="line">找到的行应该是：[Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</span><br><span class="line">将其中的：</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg”=”Tahoma”</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg <span class="number">2</span>″=”Tahoma”</span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg”=”SimSun”</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg <span class="number">2</span>″=”SimSun”</span><br></pre></td></tr></table></figure>
<p>SimSun代表windows下的simsun.ttc字体，这里提供下载：<a href="https://www.dropbox.com/s/78jt6smdorzqzpv/simsun.ttc?dl=0" target="_blank" rel="noopener">下载simsun.ttc</a></p>
<hr>
<h3 id="7-xfce4下开机时某些非自启应用会自动运行"><a href="#7-xfce4下开机时某些非自启应用会自动运行" class="headerlink" title="7. xfce4下开机时某些非自启应用会自动运行"></a><strong>7. xfce4下开机时某些非自启应用会自动运行</strong></h3><p><strong>问题描述：</strong>已经关闭了<code>auto save sessions</code>，但是在登录之后某些应用仍然会自动启动，具体表现为某次关机前系统的工作状态。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r .cache<span class="regexp">/sessions/</span>*</span><br></pre></td></tr></table></figure>
<p><strong>All clear!!!</strong></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
