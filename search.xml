<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[mac shadowsocks]]></title>
      <url>/2019/03/22/2019-03-22-mac-shadowsocks/</url>
      <content type="html"><![CDATA[<p><a href="http://16bing.com/2017/02/18/mac-shadowsocks/" target="_blank" rel="noopener">http://16bing.com/2017/02/18/mac-shadowsocks/</a></p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深度学习资料推荐]]></title>
      <url>/2019/03/14/2019-03-12-deeplearning_resources/</url>
      <content type="html"><![CDATA[<h1 id="深度学习资料推荐"><a href="#深度学习资料推荐" class="headerlink" title="深度学习资料推荐"></a>深度学习资料推荐</h1><p>深度学习火起来之后，网上关于深度学习的资料很多。但是其质量参差不齐。我从2013年开始就关注深度学习，见证了它从一个小圈子的领先技术到一个大众所追捧的热门技术的过程。也看了很多资料。我认为一个高质量的学习资料可以帮助你真正的理解深度学习的本质，并且更好地掌握这项技术，用于实践。</p>
<p>以下是我所推荐的学习资料</p>
<h2 id="1-视频课程"><a href="#1-视频课程" class="headerlink" title="1. 视频课程"></a>1. 视频课程</h2><h3 id="Yaser-Abu-Mostafa"><a href="#Yaser-Abu-Mostafa" class="headerlink" title="Yaser Abu-Mostafa"></a>Yaser Abu-Mostafa</h3><p>加州理工的Yaser Abu-Mostafa教授出品的机器学习网络课程，非常系统地讲解了机器学习背后的原理，以及主要的技术。讲解非常深入浅出，让你不光理解机器学习有哪些技术，还能理解它们背后的思想，为什么要提出这项技术，机器学习的一些通用性问题的解决方法（比如用正则化方法解决过拟合）。强烈推荐。</p>
<ul>
<li>课程名称：Machine Learning Course - CS 156</li>
<li>视频地址：<a href="https://www.youtube.com/watch?v=mbyG85GZ0PI&amp;list=PLD63A284B7615313A" target="_blank" rel="noopener">https://www.youtube.com/watch?v=mbyG85GZ0PI&amp;list=PLD63A284B7615313A</a></li>
</ul>
<h3 id="Geoffrey-Hinton"><a href="#Geoffrey-Hinton" class="headerlink" title="Geoffrey Hinton"></a>Geoffrey Hinton</h3><p>深度学习最重要的研究者。也是他和另外几个人（Yann LeCun，Yoshua Bengio等）在神经网络被人工智能业界打入冷宫，进入低谷期的时候仍然不放弃研究，最终取得突破，才有了现在的深度学习热潮。他在Coursera上有一门深度学习的课程，其权威性自不待言，但是课程制作的质量以及易于理解的程度，实际上比不上前面Yaser Mostafa的。当然，因为其实力，课程的干货还是非常多的。</p>
<ul>
<li>课程名称：Neural Networks for Machine Learning</li>
<li>课程地址：<a href="https://www.coursera.org/learn/neural-networks" target="_blank" rel="noopener">https://www.coursera.org/learn/neural-networks</a></li>
</ul>
<h3 id="UdaCity"><a href="#UdaCity" class="headerlink" title="UdaCity"></a>UdaCity</h3><p>Google工程师出品的一个偏重实践的深度学习课程。讲解非常简明扼要，并且注重和实践相结合。推荐。</p>
<ul>
<li>课程名称：深度学习</li>
<li>课程地址：<a href="https://cn.udacity.com/course/deep-learning--ud730" target="_blank" rel="noopener">https://cn.udacity.com/course/deep-learning--ud730</a></li>
</ul>
<h3 id="小象学院"><a href="#小象学院" class="headerlink" title="小象学院"></a>小象学院</h3><p>国内小象学院出品的一个深度学习课程，理论与实践并重。由纽约城市大学的博士李伟主讲，优点是包含了很多业内最新的主流技术的讲解。值得一看。</p>
<ul>
<li>课程名称：深度学习（第四期）</li>
<li>课程地址： <a href="http://www.chinahadoop.cn/classroom/45/courses" target="_blank" rel="noopener">http://www.chinahadoop.cn/classroom/45/courses</a></li>
</ul>
<h2 id="2-书"><a href="#2-书" class="headerlink" title="2. 书"></a>2. 书</h2><h3 id="《Deep-Learning-the-Book》"><a href="#《Deep-Learning-the-Book》" class="headerlink" title="《Deep Learning the Book》"></a>《Deep Learning the Book》</h3><p>这本书是前面提到的大牛Yoshua Begio的博士生Goodfellow写的。Goodfellow是生成式对抗网络的提出者，生成式对抗网络被Yann LeCun认为是近年最激动人心的深度学习技术想法。这本书比较系统，专业，偏重理论，兼顾实践。是系统学习深度学习不可多得的好教材。</p>
<ul>
<li>英文版见 <a href="http://deeplearningthebook.com" target="_blank" rel="noopener">http://deeplearningthebook.com</a></li>
<li>目前Github上已经有人翻译出了中文版<a href="https://github.com/exacity/deeplearningbook-chinese。" target="_blank" rel="noopener">https://github.com/exacity/deeplearningbook-chinese。</a></li>
</ul>
<h2 id="3-推荐路径"><a href="#3-推荐路径" class="headerlink" title="3.推荐路径"></a>3.推荐路径</h2><p>不同的人有不同的需求，有些人希望掌握好理论基础，然后进行实践，有些人希望能够快速上手，马上做点东西，有些人希望理论与实践兼顾。下面推荐几条学习路径，照顾到不同的需求。大家可以根据自己的特点进行选择。</p>
<h3 id="Hard-way"><a href="#Hard-way" class="headerlink" title="Hard way"></a>Hard way</h3><p><code>Yaser -&gt; Geoffrey Hinton -&gt; UdaCity -&gt; 小象学院 -&gt; Good Fellow</code><br>特点：理论扎实，步步为营。最完整的学习路径，也是最“难”的。<br>推荐指数 4星</p>
<h3 id="Good-way"><a href="#Good-way" class="headerlink" title="Good way"></a>Good way</h3><p><code>Yaser -&gt; UdaCity -&gt; 小象学院 -&gt; Good Fellow</code><br>特点：理论扎实，紧跟潮流，兼顾实战，最后系统梳理。比较平衡的学习路径。<br>推荐指数 5星</p>
<h3 id="“Fast”-way"><a href="#“Fast”-way" class="headerlink" title="“Fast” way"></a>“Fast” way</h3><p><code>UdaCity -&gt; Good Fellow</code><br>特点：快速上手，然后完善理论。<br>推荐指数 4星</p>
<h3 id="“码农”-way"><a href="#“码农”-way" class="headerlink" title="“码农” way"></a>“码农” way</h3><p><code>UdaCity</code><br>特点：快速上手，注重实践。<br>推荐指数 3星</p>
<p>以上路径按照从完整到精简的顺序排列。如果要我只推荐一条路径的话，那么就是2 <code>Good way（Yaser -&gt; UdaCity -&gt; 小象学院 -&gt; Good Fellow）</code>，完整同时又兼顾效率，理论与实践并进的学习路径。强烈推荐。</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> resource </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】ANR in com.time.cat]]></title>
      <url>/2019/03/14/2019-02-13-ANR/</url>
      <content type="html"><![CDATA[<p>E/ANRManager: ANR in com.time.cat, time=428313880<br>    Reason: Broadcast of Intent { act=android.appwidget.action.APPWIDGET_UPDATE flg=0x114 cmp=com.time.cat/com.timecat.module.master.mvp.ui.widgets.NoteWidgetProvider (has extras) }</p>
<p>引起这个错误的原因是，在一个BroadcastReceiver中的onReceive方法中的处理不能超过10秒，如果超过就会出现ANR错误。</p>
<p>所有尽量不要在onReceive中做耗时的处理，最好用Service来处理。（不要另外开启线程，因为这个线程会随着onReceive的返回而终止。）</p>
<p>以下在Google API中的原文：</p>
<p>so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows </p>
<p>before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your </p>
<h2 id="implementation-of-onReceive"><a href="#implementation-of-onReceive" class="headerlink" title="implementation of onReceive()."></a>implementation of onReceive().</h2><p>作者：huangliop<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/huangliop/article/details/7615262" target="_blank" rel="noopener">https://blog.csdn.net/huangliop/article/details/7615262</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ANR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于git的各种chrome拓展]]></title>
      <url>/2019/03/14/2019-03-14-git-extension/</url>
      <content type="html"><![CDATA[<p><a href="http://yifeng.studio/2017/09/06/recommended-extension-tools-about-github/" target="_blank" rel="noopener">http://yifeng.studio/2017/09/06/recommended-extension-tools-about-github/</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 解决魅族无法彻底卸载 app 问题]]></title>
      <url>/2018/10/29/2018-10-29-Android-TimeCat-%E8%A7%A3%E5%86%B3%E9%AD%85%E6%97%8FFlyme6%E6%97%A0%E6%B3%95%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDapp%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>卸载重装老是提示不能重复安装。<br>卸载了某些软件（例如通过开发者模式调试安装的应用）后，实际这个应用还残留在系统，当用低版本或者其他签名的apk覆盖安装的时候会提示“安装失败”，要求卸载后重新安装。但是就是不提示安装在哪里，反正已安装列表里已经不见了。无论从应用列表寻找还是清理垃圾，都根本找不到这个应用。<br>现在介绍的这个方法不需要ROOT，不需要任何第三方软件。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="1-进入手机的“设置”-“安全”-（指纹和安全）"><a href="#1-进入手机的“设置”-“安全”-（指纹和安全）" class="headerlink" title="1.进入手机的“设置”-“安全” （指纹和安全）"></a>1.进入手机的“设置”-“安全” （指纹和安全）</h2><div class="image-package"><br><img src="/assets/blog/img/2018-10-29/0.webp" width="700"><br><br><br><div class="image-caption"><br>1<br></div><br></div>

<h2 id="2-选择进入访客默认"><a href="#2-选择进入访客默认" class="headerlink" title="2.选择进入访客默认"></a>2.选择进入访客默认</h2><div class="image-package"><br><img src="/assets/blog/img/2018-10-29/1.webp" width="700"><br><br><br><div class="image-caption"><br>2<br></div><br></div>

<h2 id="3-打开访客模式，记住密码"><a href="#3-打开访客模式，记住密码" class="headerlink" title="3. 打开访客模式，记住密码"></a>3. 打开访客模式，记住密码</h2><p>默认密码一般是1234。如果你的密码是1234，那访客模式的密码是4321。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-10-29/2.webp" width="700"><br><br><br><div class="image-caption"><br>3<br></div><br></div>

<h2 id="4-锁屏，用刚刚的“访客密码”进入系统，记住是访客密码，不是你平时的密码"><a href="#4-锁屏，用刚刚的“访客密码”进入系统，记住是访客密码，不是你平时的密码" class="headerlink" title="4.锁屏，用刚刚的“访客密码”进入系统，记住是访客密码，不是你平时的密码"></a>4.锁屏，用刚刚的“访客密码”进入系统，记住是访客密码，不是你平时的密码</h2><div class="image-package"><br><img src="/assets/blog/img/2018-10-29/3.webp" width="700"><br><br><br><div class="image-caption"><br>4<br></div><br></div>

<h2 id="5-你会在访客模式中看到你要卸载的app，这里我们简称“幽灵App”，只要把对应的幽灵App删除，然后进入正常的模式就可以安装新的app了。"><a href="#5-你会在访客模式中看到你要卸载的app，这里我们简称“幽灵App”，只要把对应的幽灵App删除，然后进入正常的模式就可以安装新的app了。" class="headerlink" title="5.你会在访客模式中看到你要卸载的app，这里我们简称“幽灵App”，只要把对应的幽灵App删除，然后进入正常的模式就可以安装新的app了。"></a>5.你会在访客模式中看到你要卸载的app，这里我们简称“幽灵App”，只要把对应的幽灵App删除，然后进入正常的模式就可以安装新的app了。</h2><p>访客模式的桌面是使用了开源项目 <a href="https://github.com/LawnchairLauncher/Lawnchair" target="_blank" rel="noopener">LawnchairLauncher/Lawnchair</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/7717fb3df4e8" target="_blank" rel="noopener">解决魅族Flyme6无法彻底卸载app问题</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Keyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tensorflow GPU版安装问题]]></title>
      <url>/2018/10/29/2019-02-12-tensorflow%E5%92%8Ctensorflow-gpu%E5%88%87%E6%8D%A2%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="Step-0-Uninstall-protobuf"><a href="#Step-0-Uninstall-protobuf" class="headerlink" title="Step 0: Uninstall protobuf"></a>Step 0: Uninstall protobuf</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pip uninstall protobuf</span></span><br></pre></td></tr></table></figure>
<h3 id="Step-1-Uninstall-tensorflow"><a href="#Step-1-Uninstall-tensorflow" class="headerlink" title="Step 1: Uninstall tensorflow"></a>Step 1: Uninstall tensorflow</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">uninstall</span> tensorflow</span><br><span class="line">pip <span class="keyword">uninstall</span> tensorflow-gpu</span><br></pre></td></tr></table></figure>
<h3 id="Step-2-Force-reinstall-Tensorflow-with-GPU-support"><a href="#Step-2-Force-reinstall-Tensorflow-with-GPU-support" class="headerlink" title="Step 2: Force reinstall Tensorflow with GPU support"></a>Step 2: Force reinstall Tensorflow with GPU support</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">pip</span> <span class="comment">install</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">upgrade</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">force</span><span class="literal">-</span><span class="comment">reinstall</span> <span class="comment">tensorflow</span><span class="literal">-</span><span class="comment">gpu</span></span><br></pre></td></tr></table></figure>
<h3 id="Step-3-If-you-haven’t-already-set-CUDA-VISIBLE-DEVICES"><a href="#Step-3-If-you-haven’t-already-set-CUDA-VISIBLE-DEVICES" class="headerlink" title="Step 3: If you haven’t already, set CUDA_VISIBLE_DEVICES"></a>Step 3: If you haven’t already, set CUDA_VISIBLE_DEVICES</h3><p>So for me with 2 GPUs it would be<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">CUDA_VISIBLE_DEVICES</span>=0,1</span><br></pre></td></tr></table></figure></p>
<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">C:</span><span class="regexp">/Users/</span>dlink<span class="regexp">/AppData/</span>Local<span class="regexp">/Programs/</span>Python<span class="regexp">/Python35/</span>python.exe -m pip install tensorflow-gpu -i <span class="string">https:</span><span class="comment">//pypi.douban.com/simple/</span></span><br></pre></td></tr></table></figure>
<h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>国内安装时可用<code>-i https://pypi.douban.com/simple/</code>豆瓣源加速</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 解决 context.startforegroundservice() did not then call service.startforeground()]]></title>
      <url>/2018/10/25/2018-10-25-Android-TimeCat-context.startforegroundservice()didnotthencallservice.startforeground()/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因为这个适配没做好，被用户干了。。。</p>
<p>Android 8.0 有一项复杂功能；系统不允许后台应用创建后台服务。 因此，Android 8.0 引入了一种全新的方法，即 Context.startForegroundService()，以在前台启动新服务。<br>在系统创建服务后，应用有5秒的时间来调用该服务的 startForeground() 方法以显示新服务的用户可见通知。如果应用在此时间限制内未调用 startForeground()，则系统将停止服务并声明此应用为 ANR。</p>
<p>但是目前在调用：context.startForegroundService(intent)时报如下ANR，startForegroundService()文档说明在service启动后要调用startForeground()。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">android</span><span class="selector-class">.app</span><span class="selector-class">.RemoteServiceException</span>: <span class="selector-tag">Context</span><span class="selector-class">.startForegroundService</span>() <span class="selector-tag">did</span> <span class="selector-tag">not</span> <span class="selector-tag">then</span> <span class="selector-tag">call</span> <span class="selector-tag">Service</span><span class="selector-class">.startForeground</span>()</span><br></pre></td></tr></table></figure></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="第一步：使用Context-startForegroundService-启动服务后，在service的onCreate方法中调用startForeground-。"><a href="#第一步：使用Context-startForegroundService-启动服务后，在service的onCreate方法中调用startForeground-。" class="headerlink" title="第一步：使用Context.startForegroundService()启动服务后，在service的onCreate方法中调用startForeground()。"></a>第一步：使用<code>Context.startForegroundService()</code>启动服务后，在<code>service</code>的<code>onCreate</code>方法中调用<code>startForeground()</code>。</h2><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationChannel</span> channel = <span class="function"><span class="keyword">new</span> <span class="title">NotificationChannel</span>(<span class="type">CHANNEL_ID</span>,<span class="type">CHANNEL_NAME</span>,</span></span><br><span class="line"><span class="function">                <span class="type">NotificationManager</span>.<span class="type">IMPORTANCE_HIGH</span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">NotificationManager</span> <span class="title">manager</span> = (<span class="type">NotificationManager</span>) <span class="title">getSystemService</span>(<span class="type">Context</span>.<span class="type">NOTIFICATION_SERVICE</span>);</span></span><br><span class="line"><span class="function"><span class="title">manager</span>.<span class="title">createNotificationChannel</span>(channel);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Notification</span> <span class="title">notification</span> = <span class="title">new</span> <span class="title">Notification</span>.<span class="title">Builder</span>(getApplicationContext(),<span class="title">CHANNEL_ID</span>).<span class="title">build</span>();</span></span><br><span class="line"><span class="function"><span class="title">startForeground</span>(<span class="number">1</span>, notification);</span></span><br></pre></td></tr></table></figure>
<h2 id="第二步：在onStart里再次调用startForeground"><a href="#第二步：在onStart里再次调用startForeground" class="headerlink" title="第二步：在onStart里再次调用startForeground()"></a>第二步：在<code>onStart</code>里再次调用<code>startForeground()</code></h2><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><ol>
<li>Android 8.0 系统不允许后台应用创建后台服务，故只能使用<code>Context.startForegroundService()</code>启动服务</li>
<li>创建服务后，应用必须在5秒内调用该服务的 <code>startForeground()</code> 显示一条可见通知，声明有服务在挂着，不然系统会停止服务 + ANR 套餐送上。</li>
<li>Notification 要加 Channel，系统的要求</li>
<li>为什么要在<code>onStart</code>里再次调用<code>startForeground()</code>？答：这一条主要是针对后台保活的服务，如果在服务<code>A</code>运行期间，保活机制又<code>startForegroundService</code>启动了一次服务<code>A</code>，那么这样不会调用服务<code>A</code>的<code>onCreate</code>方法，只会调用<code>onStart</code>方法。如果不在<code>onStart</code>方法里再挂个通知的话，系统会认为你使用了 <code>startForegroundService</code> 却不在 5 秒内给通知，很傻地就停止服务 + ANR 套餐送上了。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/lylddingHFFW/article/details/78219327" target="_blank" rel="noopener">lyldding-HFFW 在Android O上启动Service遇到问题记录</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Keyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodejs 中同步异步多种写法]]></title>
      <url>/2018/09/04/2018-09-04-js-async-await/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>nodejs 的同步异步写起来真爽，特别是结合 typescript，简直上天！感觉可以取代 go 的异步呢，哈哈。</p>
<h2 id="同步循环"><a href="#同步循环" class="headerlink" title="同步循环"></a>同步循环</h2><p>传统 for 循环：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = array[i]</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进阶 forEach：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="异步循环"><a href="#异步循环" class="headerlink" title="异步循环"></a>异步循环</h2><h3 id="全部异步，不关心结果"><a href="#全部异步，不关心结果" class="headerlink" title="全部异步，不关心结果"></a>全部异步，不关心结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  array.forEach(<span class="keyword">async</span>(item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> doItem(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loop done! But each item is sitll doing'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依次同步"><a href="#依次同步" class="headerlink" title="依次同步"></a>依次同步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">await</span> doItem(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'every item done!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异步执行，同步等结果"><a href="#异步执行，同步等结果" class="headerlink" title="异步执行，同步等结果"></a>异步执行，同步等结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promises = array.map(<span class="function"><span class="params">item</span> =&gt;</span> doItem(item))</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'every item done!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 QTUM 的有限供应量 - 减半]]></title>
      <url>/2018/08/13/2018-08-13-%E7%BF%BB%E8%AF%91-QTUM%E7%9A%84%E6%9C%89%E9%99%90%E4%BE%9B%E5%BA%94%E9%87%8F-%E5%87%8F%E5%8D%8A/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/qtum-capped-supply-the-halving-b650b7fb955e" target="_blank" rel="noopener">https://medium.com/@jb395official/qtum-capped-supply-the-halving-b650b7fb955e</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="QTUM-的有限供应量-减半"><a href="#QTUM-的有限供应量-减半" class="headerlink" title="QTUM 的有限供应量 - 减半"></a>QTUM 的有限供应量 - 减半</h1><p>QTUM Capped Supply — The Halving</p>
<p>这是社区中常问的一个问题：QTUM 的供应量是否有限？有多少？</p>
<p>本报告回答了这个问题 - 是的，供应量是有限的 - 并给出了最大供应量。</p>
<p>TL;DR QTUM 的供应量上限为 107,822,406.25，约 31 年发完。</p>
<p>我是一名独立研究员，偶尔是博主，社交版主，并中意 Qtum 团队的技术指导和社区的高谈阔论。如果你对本文有任何意见或更正，请在社交媒体上联系我。</p>
<hr>
<h2 id="新资源管理器"><a href="#新资源管理器" class="headerlink" title="新资源管理器"></a>新资源管理器</h2><p>首先，让我安利一个新资源管理器：<a href="http://qtum.info" target="_blank" rel="noopener">qtum.info</a>.</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Jjcubf7UuFyVtC2f2jMGKQ.jpeg" alt=""></p>
<p>这个功能强大的资源管理器有干净的布局，可以轻松导航到地址的第一个交易，还有一个覆盖 98,345 个地址（有些不那么富有）的“富豪榜(Rich List)”。</p>
<h2 id="网络权重"><a href="#网络权重" class="headerlink" title="网络权重"></a>网络权重</h2><p>在 2018 年 2 月 26 日至 3 月 4 日期间，已知余额为 600 万以上的大钱包共赢得 712 块奖励，总计 4,185，即 17.01％，网络权重为 3520 万，年回报率为 2.49％。</p>
<hr>
<h2 id="有限供应量"><a href="#有限供应量" class="headerlink" title="有限供应量"></a>有限供应量</h2><p>一对情侣相距 50 米对视。作为大学数学系的学生，他们决定相互靠近一半，一直到25米，然后再一半接近12.5米，然后又一半，再接近一半，等等。作为数学家，他们知道每次他们减少一半的距离，但永远不会真正接触到彼此，但作为现实主义者，他们知道他们会<em>为了所有实际目的而足够接近</em>。</p>
<p>在研究之前，我认为 QTUM 没有上限，但事实证明 QTUM 的上限类似于比特币的上限。很多人都知道比特币的最大数量是 21,000,000。那 QTUM 的最大数量是多少？</p>
<h2 id="减半"><a href="#减半" class="headerlink" title="减半"></a>减半</h2><p>要计算出 QTUM 的最大数量，我们需要考虑减半（取一半）。我使用比特币作为参考，因为到目前为止它已经减半，所以每个人都知道这个数字是 2100 万。许多人都知道比特币的块奖励每 4 年下降一半（“减半”）。比特币开始时有 50 个代币用于区块奖励，减半到 25，到目前区块奖励是 12.5 个代币。</p>
<p>Qtum 遵循类似的减半模式，由钱包中的代码设置减半时间：</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*50l2ob3FhEsR5Pc973TpyQ.jpeg" alt=""></p>
<p>该代码表示​​减半间隔是 985,500 块，对当前块间距来说约为 4 年半。Qtum 的第一次减半将在块 990,501，大约在 2022 年 3 月 9 日，在 UTC 时间 07:48:48（在你的日历标记一下！）[2]。</p>
<p>我们在情侣中看到了“为了所有实际目的”的问题，在计算 Qtum 块奖励的源代码中也有一个硬限制（hard limit）。 在下面列出的参考文献[1]中计算比特币的上限（考虑一些不同的因素）。 要获得 QTUM 的最大数量，下表显示了块奖励如何连续减半以及未来 31 年总 QTUM 如何累积：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*IC-PtTp4JhDGBch9RsJO0g.jpeg" alt=""></p>
<p>这张表有一些解释。</p>
<p>创世块 <a href="http://qtum.info/block/1" target="_blank" rel="noopener">1</a>-5,000 创造了原始的 100,000,000 QTUM，每个块创造了 20,000 QTUM（像比特币那样的 coinbase 块奖励，而不是像 Qtum 那样的 coinstake 块奖励）。从块 5,001 开始，块奖励是 4.0 QTUM，并持续 985,500 块到块 990,500，这将增加 3,942,000 个新 QTUM。从块 990,501 开始，块奖励将减半至 2.0 QTUM，之后每隔 4 年块奖励将减半。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*0ZrZ5oRyysMGg1TrlUSr5g.jpeg" alt=""></p>
<hr>
<p>有关暗网的报道称，Satoshi 团队（Team Satoshi）的左侧臀部有 21,000,000 的数字纹身。我既不能证实也不否认 Qtum 团队的任何人也自豪地在他们的皮肤上 <a href="https://goo.gl/maps/PyjfAUDVq2Q2" target="_blank" rel="noopener">签上</a>数字 107,822,406.25 [4]。我希望现在每个人都能记住 107,822,406.25 这个数字，因为这是上限，永远不会有更多的 QTUM。</p>
<p>Jackson</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] 比特币维基，<a href="https://en.bitcoin.it/wiki/Controlled_supply" target="_blank" rel="noopener">控制供应量</a></p>
<p>[2] 日期计算：Epoch 和 Unix 时间戳<a href="https://www.epochconverter.com/" target="_blank" rel="noopener">转换器</a> - 每块使用144秒。</p>
<p>[3] Qtum 的 validations.cpp 代码:</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*rFRg5IkHZkLTNBKWa9HY3w.jpeg" alt=""></p>
<p>解释</p>
<p>1375行：对于前 5,000 个区块（nLastPOWBlock），区块奖励为 20,000 QTUM。 这些是创世块。</p>
<p>1378行：halfvings =（当前块 - 5,001）/ 985,500 的整数（忽略小数部分）</p>
<p>1380行：如果减半大于或等于7，则将块奖励设置为0。从块 6,903,501 开始。</p>
<p>1382，1385 行：否则，块奖励为4.0 QTUM 除以 2 x 减半数。</p>
<p>[4] 这些句子是个玩笑，但 107,822,406.25 是真的！</p>
<p>[5] 如果你同样痴迷于创世块创造世界的故事，你可能会喜欢 <a href="http://qtum.info/block/0" target="_blank" rel="noopener">0 区块</a>，它早于 Mainnet 的发布，并且似乎拥有 50.0 QTUM 的未花费区块奖励。事实上，这个地址在最近的空投中收到了 BOT。 我没有将这 50 QTUM 包括在上面的上限计算中，但是你可以自己加进去算一遍。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 调试日志，虚拟机日志]]></title>
      <url>/2018/08/13/2018-08-13-%E7%BF%BB%E8%AF%91-%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/the-debug-log-the-virtual-machine-log-march-13-2018-76ddbe568f2" target="_blank" rel="noopener">https://medium.com/@jb395official/the-debug-log-the-virtual-machine-log-march-13-2018-76ddbe568f2</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="调试日志，虚拟机日志，2018-年-3-月-13-日"><a href="#调试日志，虚拟机日志，2018-年-3-月-13-日" class="headerlink" title="调试日志，虚拟机日志，2018 年 3 月 13 日"></a>调试日志，虚拟机日志，2018 年 3 月 13 日</h1><p><img src="https://cdn-images-1.medium.com/max/2000/1*xcYyb6Iu9J6c-h1ZTVH9UQ.jpeg" alt=""></p>
<p>这个星期我们研究 debug.log。当你怀疑你的钱包有问题时（或者如果你只是对 Qtum 感到好奇的话），debug.log 就是你的好朋友。我们来看看如何找到调试日志（debug log），如何阅读它，以及如何从中发现问题。特别奖主题是虚拟机日志 vm.log。</p>
<p>我是一名独立研究员，偶尔是博主，社交版主，并中意 Qtum 团队的技术指导和社区的高谈阔论。如果你对本文有任何意见或更正，请在社交媒体上联系我。</p>
<hr>
<h2 id="网络权重，节点数"><a href="#网络权重，节点数" class="headerlink" title="网络权重，节点数"></a>网络权重，节点数</h2><p>从 3 月 4 日至 11 日，已知余额为 590.5 万的大钱包赢得了总 4,779 块奖励中的 709 块，或者说 14.84％，网络权重为 3980 万，年回报率为 2.20％。本计算用了大约 11 倍的数据点，并且用了比钱包计算网络权重更好的算法（IMHO），但这个数字是每周更新，而钱包计算的网络权重是每块更新。（编辑过）</p>
<hr>
<h2 id="调试日志文件"><a href="#调试日志文件" class="headerlink" title="调试日志文件"></a>调试日志文件</h2><blockquote>
<p>TL;DR debug.log 文件与 wallet.dat 文件位于同一 Qtum 目录中，是记录基本钱包操作和错误情况的文本日志。每行日志都带有 UTC 时间戳，并显示每个同步到钱包区块链的新区块，发送动作，接收动作和错误情况。Qtum 虚拟机日志记录了钱包添加到区块链的合约交易，是代币交易问题很好的参考文件。</p>
</blockquote>
<p>每次你更新钱包时，你只要重命名 debug.log 文件为当前日期，比如“debug-2018-03-13.log”，就能保留旧的调试日志，以供参考（或者不保留删掉）。重启新版本钱包就可以写入一个新的 debug.log 文件了。对于 qtumd，使用默认设置的话，debug.log 文件每周保存大约4 MB。</p>
<p>在与 wallet.dat 文件相同的目录下找 debug.log 文件。 debug.log 文件是纯文本文件，可以使用任何文本编辑器或 QT 钱包打开。</p>
<p>每条日志都以 UTC 时间戳开头（不是你当地的时间，不用担心夏令时转换）</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*XhNa5oRvsK7zVEI5jQ4ePA.jpeg" alt=""></p>
<p>这行日志表示在 3 月 7 日 14:27:34 UTC，钱包处理了一个区块并接受了这个区块。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*abPTNvRmGr6OUvKrEwEssQ.jpeg" alt=""></p>
<p>我一般在钱包运行时获取 debug.log 文件的副本。我不确定这在技术上是否正确，但也没有弄坏钱包。QT 钱包中点击帮助 - 调试窗口 - 信息，屏幕的右下角提供了一个按钮，用于打开 debug.log 文件。</p>
<h2 id="非常自然，非常健康"><a href="#非常自然，非常健康" class="headerlink" title="非常自然，非常健康"></a>非常自然，非常健康</h2><p>我们将从调试日志显示的正常钱包操作开始，包括钱包启动，正常同步以及发送和接收操作。</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动时，钱包在初始化节点和读取多个文件方面做了很多工作，也许最重要的是 wallet.dat 文件，它包含钱包私钥。初始化后，钱包开始与其他节点建立连接，加载区块，同步区块链。Qtum Core 钱包是一个全节点，需要完整的区块链副本。调试日志显示追赶块写入很快，每秒几个。钱包验证每个区块并将其写入本地的区块链副本。下面例子中，整个启动流程记录了 148 行。这里有摘录的一些要点，为了清晰起见缩短了一些行，黄色高亮是我标出的：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*uDH9_zohmqSH33LZHwd7fg.jpeg" alt=""></p>
<p>钱包初始化后，在 18:01:26 处它比当前区块链高度落后大约半天（350个区块），并开始从其他对等点快速下载它没有的区块。直到 18:09:27，区块同步更新完毕，继续正常同步新区块。</p>
<p>下面我会举一个钱包日志文件的例子，它无法连接到对等点来同步区块链，so sad。</p>
<h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><p>接受到交易后，日志会显示一个带有交易 ID 的 “AddToWallet” 交易：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*uabvv0iMVwHkjTM0Lg6_Ig.jpeg" alt=""></p>
<p>交易可以是支付区块奖励或其他接收交易。金额没有列出来，但可以使用交易 ID 在你喜欢的资源管理器中找到详细信息。</p>
<h2 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h2><p>发送日志稍微复杂一些。现在我发送 0.2 QTUM; 你可以看到金额和交易ID：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*84rRR0jDRu7OEiv9QZuJOQ.jpeg" alt=""></p>
<p>发送的简单解释是 Qtum（née bitcoin）未花费交易输出（UTXO）模型。钱包选择先前整个未花费交易，在本例子中，未花费交易是 1.00000000 QTUM （在日志中没显示，但你可以在资源管理器中查看详细信息）。钱包必须发送整个 1.00000000 交易，对应指令将 0.20000000 提供给新地址并将 0.79909600 返回到钱包控制的零钱地址。发送的  1.00000000，接收地址的 0.20000000 和零钱地址的 0.79909600 之间的差值是 0.00090400：</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*jhiasALQmf2D1XLp11-LuQ.jpeg" alt=""></p>
<p>这个差值是块奖励获奖钱包保留作为发布交易的“小费”，称为交易费用。</p>
<h2 id="其他调试模式"><a href="#其他调试模式" class="headerlink" title="其他调试模式"></a>其他调试模式</h2><p>如果你想研究内存池如何管理未确认交易，你可以在启动钱包时使用“-mempool”来记录有关 mempool 的调试记录详细信息。其他调试选项包括：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*moSoRYu3G7FIzFBCAZwmyQ.jpeg" alt=""></p>
<p>探索这些选项能产生什么有趣日志行留作练习，“miner”选项就看起来特别好玩。</p>
<hr>
<h2 id="坏事发生在好钱包"><a href="#坏事发生在好钱包" class="headerlink" title="坏事发生在好钱包"></a>坏事发生在好钱包</h2><p>如果你的钱包有问题，那你可能需要从 debug.log 文件中的错误报告中获得排除故障的提示，因为<em>调试文件是你的好朋友</em>。</p>
<h3 id="1-网络连接断开"><a href="#1-网络连接断开" class="headerlink" title="1. 网络连接断开"></a>1. 网络连接断开</h3><p>Testnet 钱包将新区块同步到＃99,479，这时钱包突然断开以太网，因为有人 “意外” 失去互联网连接。从 20:46:46 开始强行关闭8个对等连接（听起来很痛苦）（为清晰起见，缩短了几行）：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*pLKhietmDJdxROIeMQfDXg.jpeg" alt=""></p>
<p>19分钟后，互联网连接在 21:03:09 恢复，但当前的区块是＃99,485（钱包落后6个区块），钱包开始迅速同步区块 99480,99481,99482,99483等。如果你看到 debug.log 文件中的这些“强制关闭”，你绝对应该与你的Internet服务提供商沟通。</p>
<h3 id="2-时钟设置不正确"><a href="#2-时钟设置不正确" class="headerlink" title="2. 时钟设置不正确"></a>2. 时钟设置不正确</h3><p><img src="https://cdn-images-1.medium.com/max/960/1*35zGj9pklLSWSIf5Cgcrzg.jpeg" alt=""></p>
<p>我一直强调人们在社交媒体上要把时钟设置正确，但现在我认为这对钱包来说更是个问题。钱包的参考时间是相当宽容的，钱包从它连接的所有对等点收集参考时间，并与当地时间交叉验证。Qtum 中的参考时间（继承自比特币）非常灵活，如果你在糟糕的时间启动它（Qtumd 不太确定），QT钱包会抱怨。 如果你的计算机时区和时钟设置正确，你可以执行“getinfo”命令，可以看到“timeoffset”接近零。</p>
<p>如果你正在运行 qtumd 服务器钱包 - 它可以与许多对等点连接，那肯定会发现一些有错误时间戳的区块，记录有 “block timestamp too far in the future”。 成功挖到新区块但是搞错参考时间的钱包运气不太好。 debug.log 会显示 10 到 20 个或更多由其他对等点中继的相同坏区块。下面是来自 4 个节点的相同坏区块（为清楚起见，缩短了几行日志）：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*2e5XbG-WJXDUVwMRgcxW3g.jpeg" alt=""></p>
<p>qtumd 记录了网络所有或好或坏的行为。你可以把你的钱包想象成在吵闹聊天室里的一个公平而无情的管理员（向 Tony Sydney 大喊大叫），它必须拒绝，删除和禁止用户提供不适当的消息。钱包必须禁掉节点，断开不活动的节点，并拒绝具有错误请求头的区块。你的钱包和其他钱包都是被称为 Qtum Mainnet Ignition 网络节点的“聊天室”中的 24/7（7天24小时） 管理员。</p>
<h3 id="3-钱包不同步区块"><a href="#3-钱包不同步区块" class="headerlink" title="3. 钱包不同步区块"></a>3. 钱包不同步区块</h3><p>老实说，很难通过防火墙阻止我的钱包连接到网络;钱包总是不停地穿过防火墙。 最后，我弄坏了钱包中的网络，因此它无法连接到其他对等点来获取本次启动的调试日志文件。钱包记录了 77 行，调试日志在“dnsseed thread exit”之后停止，没有同步区块。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*r-x-uCZVbPYX_tjhleMrbA.jpeg" alt=""></p>
<hr>
<h2 id="特别奖主题：虚拟机日志"><a href="#特别奖主题：虚拟机日志" class="headerlink" title="特别奖主题：虚拟机日志"></a>特别奖主题：虚拟机日志</h2><p>每个节点都将每个合约交易保存到区块链的本地副本上。当节点验证包含了合约交易的新区块时，它会将区块链索引到存储合约的区块，再处理这些合约交易。节点将这些合约交易的结果记录到虚拟机日志 vm.log 中。</p>
<p>你可以在 Qtum 文件夹中找到 vm.log 文件，以及 wallet.dat 和 debug.log。 vm.log 文件很简洁。 它列出了 UTC 交易时间和合约地址。如果发生错误，合约交易失败，它会将原因和时间、地址记录在一起。</p>
<h2 id="好交易"><a href="#好交易" class="headerlink" title="好交易"></a>好交易</h2><p>这里有一些很好的合约交易，vm.log 中记录的：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*8xU8iJK0LApxD5N7XF7GYw.jpeg" alt=""></p>
<p>如何阅读：日志行通常比资源管理器时间戳晚几秒钟，而资源管理器每 16 秒显示一次。在 24 小时制 UTC 时间 12:49:54 显示有 <a href="https://explorer.qtum.org/block/528fd5c961ab9eae7c91d78b3a51ecd2fdec0982721c6e78863ae2cc8b34b7e9" target="_blank" rel="noopener">112,818</a> 块，这时资源管理器时间戳为 UTC 时间 12:49:52。合约地址 57931faffdec114056a49adfcaa1caac159a1a25 是区块链里的 <a href="https://explorer.qtum.org/token/57931faffdec114056a49adfcaa1caac159a1a25" target="_blank" rel="noopener">SpaceCash（SpaceChain）智能合约</a>，因此我们知道钱包处理了 SPC 代币交易，我们可以查看区块 112,818，可以看到有人交易了 3,960 个 SPC 代币：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*alHQQjPR1BBT5kZLEVWweA.jpeg" alt=""></p>
<hr>
<p>你的博主坚信在资源管理器上浏览加密交易，较小的测试量是最好的开始。 如何才能进行代币交易？</p>
<p>假设你是最近空投的接收者。你已将 QRC20 代币添加到钱包，现在你已准备好发送代币交易。你从之前的博客中了解到，所有代币交易都是通过将交易发送到智能合约来实现的，你可以观察所有智能合约交易的执行，包括你的交易。</p>
<p>当你从钱包发送一些代币时，你可以查看<a href="https://explorer.qtum.org/token/6b8bf98ff497c064e8f0bde13e0c4f5ed5bf8ce7" target="_blank" rel="noopener">合约交易页面</a>并观察你测试的小交易。在确认交易进入智能合约后，无需更改钱包的其他内容，就可以放心发送剩余代币的交易。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Td6nS76BGJbCoXEJ19spzQ.jpeg" alt=""></p>
<p>但是要是好的钱包发生了坏事 – 你的测试交易没有执行呢？</p>
<h2 id="不太好"><a href="#不太好" class="headerlink" title="不太好"></a>不太好</h2><p>以下是 vm.log 中记录的一些有问题的交易：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Fd2RoS8HkIcgF56FJ7gteA.jpeg" alt=""></p>
<p>如何阅读：在 06:30:16 的第一笔交易中，智能合约在执行交易前耗尽了gas。 有人将 gas 设置得太低，所以他们失去了那部分 gas，但有机会重试。</p>
<p>在 10:05:39 的第二个例子中，合约报告有一个错误指令。我没有分析过这类错误，但是我认为如果你试图在 ICO 售罄后进行购买，它们可能会产生。</p>
<p>对于失败的合约调用，资源管理器将显示该交易为空白（没有代币名称，没有交易金额），但据我所知，vm.log 是找出合约交易失败原因的唯一方法。 如果你在代币交易方面遇到问题，那虚拟机日志也是你的好朋友。</p>
<hr>
<p>我们今天在罗马这个永恒的城市写完博客。《总统杀局》(Ides of March)是在两天后的 3 月 15 日放映，但我不想等到那个时候才发布这个博客。根据 Nodemap，意大利有 6 个Qtum节点，其中一个在罗马。Qtum 真的是世界级的（甚至至少有一颗低地球轨道卫星） - 为什么不庆祝一下罗马的历史，大都会文化和 Qtum 节点呢？</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*OBYeHUd4YNI3b9-kqRWrLA.jpeg" alt=""></p>
<p>这里希望你所有的交易都顺利进行，如果不的话，调试日志和虚拟机日志就是你的好朋友。</p>
<p>保重，保持在线安全。</p>
<p>Jackson</p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p>研究调试日志时听的音乐：<a href="http://streema.com/radios/Easy_and_Italy" target="_blank" rel="noopener">Radio Easy＆Italy</a> - Rome </p>
</li>
<li><p><a href="https://youtu.be/B4GvcCWzZZg" target="_blank" rel="noopener">无人机在古罗马斗兽场</a>，Yuneec Q500无人机，4k观看.</p>
</li>
<li><p>通过以下主题查看我过去的报告</p>
</li>
</ol>
<p><a href="https://medium.com/@jb395official/qtum-capped-supply-the-halving-b650b7fb955e" target="_blank" rel="noopener">QTUM 的有限供应量</a> - 减半 - 2018年3月4日</p>
<p>如何减半，以及为什么永远不会超过 107,822,406.25 QTUM</p>
<p><a href="https://medium.com/@jb395official/qrc20-token-report-february-25-2018-ff397a1ac070" target="_blank" rel="noopener">QRC20 代币报告</a> - 2018年2月25日</p>
<p>QRC20 代币如何工作，最近的空投为例。 （阿姆斯特丹）</p>
<p><a href="https://medium.com/@jb395official/testnet-and-qtum-mainnet-performance-january-1-8-e7af03a5d430" target="_blank" rel="noopener">Testnet 和 Qtum Mainnet 性能 - 1月1日至8日</a></p>
<p>Qtum 测试网络（testnet）。 （巴西里约热内卢）</p>
<p>发布于2018年1月7日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-december-25-31-891680ee5a52" target="_blank" rel="noopener">Qtum Mainnet 成果 – 12月25日至31日</a></p>
<p>使用虚拟专用网络（VPN）进行 staking。（首尔）</p>
<p>发布于2017年12月31日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-december-18-24-8e43e51aca3b" target="_blank" rel="noopener">Qtum Mainnet 成果 – 12月18日至24日</a></p>
<p>交易费用。</p>
<p>发表于2017年12月24日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-dec-11-17-d5548947fa1f" target="_blank" rel="noopener">Qtum Mainnet 成果 – 12月11日-17日</a></p>
<p>Passphrases，一个密码短语猜测脚本。（日内瓦，瑞士）</p>
<p>发布于2017年12月17日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-dec-4-10-2d4bc438062d" target="_blank" rel="noopener">Qtum Mainnet 成果 – 12月4日至10日</a></p>
<p>内存池（mempool）和未确认交易处理。 （悉尼）</p>
<p>发布于2017年12月10日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-nov-27-dec-3-327c1e9bc59c" target="_blank" rel="noopener">Qtum Mainnet 成果 – 11月27日 - 12月3日</a></p>
<p>孤儿块（香港 - 大屿山）</p>
<p>发布于2017年12月3日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-20-26-ebde2cd0139" target="_blank" rel="noopener">Qtum Mainnet 成果 – 11 月 20 日至 26 日</a></p>
<p>QTUM.explorer.io 合约页面（柏林）</p>
<p>发布于2017年11月26日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-13-19-bfbf45d0c153" target="_blank" rel="noopener">Qtum Mainnet 成果 – 11月13日至19日</a></p>
<p>一个非常简单的 SHA-256 哈希算法示例（柏林 - 弗里德里希斯海因）</p>
<p>发布于2017年11月20日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-6-12-f59dd373ff3" target="_blank" rel="noopener">Qtum Mainnet 成果 – 11月6日至12日</a></p>
<p>分发钱包获得区块奖励 ，五大网络权重(Big Five Network Weight )（北京）</p>
<p>发布于2017年11月12日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-30-november-5-d58164b811db" target="_blank" rel="noopener">Qtum Mainnet 成果 – 10月30日 - 11月5日</a></p>
<p>SHA-256哈希算法，目标和难度（首尔）</p>
<p>发布于2017年11月5日</p>
<p><a href="https://medium.com/@jb395official/an-introduction-to-qtum-proof-of-stake-mining-a-racing-story-f11a3f48009f" target="_blank" rel="noopener">Qtum 权益证明挖矿 - 一个赛跑故事</a></p>
<p>关于 PoS 采矿的故事（柏林马拉松）</p>
<p>发布于2017年10月29日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-23-29-527cd4ab887a" target="_blank" rel="noopener">Qtum Mainnet 成果 – 10月23日至29日</a></p>
<p>基金会钱包的离开（柏林）</p>
<p>发布于2017年10月29日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-1-8-f413231c689a" target="_blank" rel="noopener">Qtum Mainnet 成果 – 10月1 - 8日</a></p>
<p>非正式的 staking 常见问题。</p>
<p>发布于2017年10月26日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-16-22-9202990b8e8d" target="_blank" rel="noopener">Qtum Mainnet 成果 – 10月16 - 22日</a></p>
<p>网络权重，奖励统计时间和节点图（2017年悉尼）</p>
<p>发布于2017年10月22日</p>
<p><a href="https://medium.com/@jb395official/simulating-proof-of-stake-mining-for-qtum-57401c08590a" target="_blank" rel="noopener">模拟 Qtum 的权益证明挖矿</a></p>
<p>为 PoS挖矿模拟选择正确的UTXO大小</p>
<p>发布于2017年10月21日</p>
<p><a href="https://medium.com/@jb395official/qtum-proof-of-stake-mining-439d2b82802d" target="_blank" rel="noopener">Qtum 权益证明挖矿</a></p>
<p>我的 1.0 版 PoS 挖矿模拟器</p>
<p>发布于2017年10月16日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-ignition-results-october-9-15-1efe30eb2658" target="_blank" rel="noopener">Qtum Mainnet 点火结果 – 10月9 - 15日</a></p>
<p>Mainnet 图表介绍（新加坡）</p>
<p>发布于2017年10月15日</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 测试网和 Qtum 主网性能]]></title>
      <url>/2018/08/06/2018-08-06-%E7%BF%BB%E8%AF%91-%E6%B5%8B%E8%AF%95%E7%BD%91%E5%92%8CQtum%E4%B8%BB%E7%BD%91%E6%80%A7%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/testnet-and-qtum-mainnet-performance-january-1-8-e7af03a5d430" target="_blank" rel="noopener">https://medium.com/@jb395official/testnet-and-qtum-mainnet-performance-january-1-8-e7af03a5d430</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="测试网和-Qtum-主网性能-1-月-1-日至-8-日"><a href="#测试网和-Qtum-主网性能-1-月-1-日至-8-日" class="headerlink" title="测试网和 Qtum 主网性能 1 月 1 日至 8 日"></a>测试网和 Qtum 主网性能 1 月 1 日至 8 日</h1><p><img src="https://cdn-images-1.medium.com/max/1600/1*NBzVZMM_MBTcQfbx0EKqig.jpeg" alt=""></p>
<p>以下是每周的 Qtum 主网性能的图表评估，包括常用的图和表，以及有关 Qtum 测试网（testnet）的教程。用已有的钱包你就能使用测试网来探索交易，区块奖励等等。测试网是很好的资源，不管是对新手还是对区块链开发者来说都是。那这个报告里，我们就玩一下测试网。</p>
<p>我是社区成员之一，也是独立研究者，还没加入量子团队，但非常欣赏他们的技术指导和社区中的高谈阔论。</p>
<hr>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>Qtum Mainnet 性能评估的数据来自 <a href="https://explorer.qtum.org/" target="_blank" rel="noopener">Qtum Explorer</a>，区块链(从 qtumd 服务器应用程序登录)以及来自 <a href="https://goo.gl/maps/qrhNumMaiRQ2" target="_blank" rel="noopener">Ipanema Beach.</a> 的加密电报消息。</p>
<h3 id="独立奖励地址数"><a href="#独立奖励地址数" class="headerlink" title="独立奖励地址数"></a>独立奖励地址数</h3><p>这一周，每日独立奖励地址数最高于 1 月 5 日达 292 个。一整周里有 1,094 个独立地址，上一周是 964 个。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Ga9v-FC6GxNSfUv60BsAAg.jpeg" alt=""></p>
<p>赢得多个区块的钱包数与上周基本持平。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*gqd_k6UM4MIQaH1cZIytkg.jpeg" alt=""></p>
<h3 id="每日活跃交易数"><a href="#每日活跃交易数" class="headerlink" title="每日活跃交易数"></a>每日活跃交易数</h3><p>1 月 5 日，每日交易数创下历史新高 17,043。这个高峰出现在周四，我们刚刚看到周五也有一个高峰。以太坊周四和周五的交易数最近都达到了峰值。比特币没有太明显的每周周期性，也没有智能合约。活跃交易为每个块提供的交易数高于保底交易数 2。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*VCF0YsLo1IN3XHzSfC_2yA.jpeg" alt=""></p>
<p>你还可以在 <a href="https://qtumexplorer.io/" target="_blank" rel="noopener">QTUM Explorer.io</a> 和 <a href="https://explorer.qtum.org/" target="_blank" rel="noopener">Qtum Explorer</a> 主页底部查看交易图表。</p>
<h3 id="块间​​距变化"><a href="#块间​​距变化" class="headerlink" title="块间​​距变化"></a>块间​​距变化</h3><p>从 1 月 1 日到 1 月 7 日，有 2 个区块有大于20 分钟的块间距，上个星期是 3 个。最大块间距是块 75,404，达 30 分 26 秒。平均块间距在 144 秒左右保持稳定。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*2eBQJ6QBvAb_J_xRioYZGg.jpeg" alt=""></p>
<h3 id="网络权重"><a href="#网络权重" class="headerlink" title="网络权重"></a>网络权重</h3><p>如下所示，每日“新网络权重”是基于计算每日获奖块的 10 天指数移动平均值和已知大钱包的余额：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Qkq7MyiA5Wv--fWHjc6ATg.jpeg" alt=""></p>
<p>目前的网络权重为 2030 万，年回报率为4.3％。</p>
<hr>
<h2 id="测试网"><a href="#测试网" class="headerlink" title="测试网"></a>测试网</h2><p>健康的区块链生态系统不断发展和升级的，具有更多新的功能，随着主网（主生产网络，mainnet）的发展，它们一般并行运行一个或多个测试网。这些测试网是给开发者和其他有兴趣的人来探索、测试、开发的。有多个测试网可用于各种加密。Qtum 的公共测试网称为 “testnet”。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*j3tmRvu8U_QNRgpuXarMyw.jpeg" alt=""></p>
<p>除非你正在测试新软件，否则你可以使用在 mainnet 上相同钱包应用程序（qtumd 服务器应用程序和 qtum-qt 桌面 GUI 钱包）连接到 testnet。 要在 testnet 上启动桌面 GUI 钱包 qtum-qt，只需打开开始菜单，点击它。</p>
<p>要启动服务器应用程序 qtumd 和命令行界面 qtumd-cli，请使用 “-testnet” 开关：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./qtumd –testnet</span><br><span class="line">./qtum-cli –testnet getstakinginfo</span><br></pre></td></tr></table></figure>
<p>Python 中可以这样写：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*xr2n3_tsXvdmW00nGPsotQ.jpeg" alt=""></p>
<h2 id="Testnet-问答"><a href="#Testnet-问答" class="headerlink" title="Testnet 问答"></a>Testnet 问答</h2><p>切换到问答模式。</p>
<p>问：testnet 与 mainnet 有什么不同？<br>答：Testnet 是一个独立的主网区块链。它有不同的块，不同的交易和不同的代币，但操作，协议和规格与主网相同（除非你正在测试新软件）。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*YvVgxUHRanWmn2x_F0lqQw.jpeg" alt=""></p>
<p>问：区块链在哪里？<br>答：在节点（钱包）的磁盘存储器中，在所有其他节点中具有相同的副本。</p>
<p>问：我的代币在哪里（测试网或主网）？<br>答：在钱包里，在区块里，以及在所有其他节点中这些相同区块的副本里。每个拥有区块链资源管理器或节点的人都可以看到你的代币，但只有你使用 wallet.dat 文件中的私钥才能发送或丢弃这些代币。即使你的计算机无法同步区块链，或者你的计算机爆炸，或者你删除了区块链文件，你的代币仍然在区块链里。你可以在将新钱包与 wallet.dat 文件的备份同步后检索。如果你丢失了 wallet.dat 文件（以及你对 wallet.dat 文件所做的所有备份），那么你的代币仍然会在区块链中永久可见，只是无法将它们发送出去。</p>
<p>问：testnet 和 mainnet 的钱包应用程序是否相同？<br>答：是的，testnet 和 mainnet 使用相同的钱包应用程序，可以在启动时切换到在 testnet 上运行。 注意 testnet 钱包 GUI 和徽标上有漂亮的紫色。 testnet 的另一个显着特征是地址，所有地址都以小写 “q” 开头，而主网地址则以大写 “Q” 开头。</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*4yl3-n3lEz-UE0qIlUJsBw.jpeg" alt=""></p>
<p>问：区块链是否相同？<br>答：不。测试网和主网是两条不同的区块链。这在上面的图里可以看得出来。 Mainnet 比 testnet 早大约三周，因此主网块高度比 testnet 高大约 13400 个块。如果在同一台计算机上运行 mainnet 和 testnet，则钱包（节点）会将区块链同步到计算机的磁盘存储器中。 testnet 区块链将加载到文件夹 “testnet3” - 表示这是继承比特币代码的第 3 个 testnet 引用。 mainnet 区块链占用更多内存，因为它比 testnet 更高并且拥有更多的交易。 在2018年1月7日，主网区块链为 404 MB，而testnet区块链为 131 MB。</p>
<p>问：wallet.dat文件是否相同？<br>答：不，testnet 和 mainnet 分别有各自的 wallet.dat 文件。 testnet 的 wallet.dat 文件在 testnet3 文件夹里。</p>
<p>问：testnet 上的活动节点是否相同？<br>答：不，节点要么在主网上，要么在测试网上。目前处于活动状态的节点主网上大约有 2,000 个， 测试网上大约有 40 个。 在这些节点中，大约 30 个是大钱包，为测试网提供基线容量，它们的数量和大小与去年夏天的天网（Skynet）相似，当时主网还只是帕特里克眼中闪烁的光芒。天网是 mainnet 推出之前的公共测试网络。  Qtum 团队可能会运行这 30 个节点来为 testnet 提供基本的基础架构。</p>
<p>问：测试网和主网上的 QTUM 代币是否相同？我可以将一些免费的测试网代币转移到我的主网钱包吗？<br>答：不，它们是不同的代币。回到图上，在每个主网和测试网的创世块中铸造了100,000,000个代币：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*oMsTR8ocJizv0zc0tDjhwA.jpeg" alt=""></p>
<p>虽然代币的工作方式相同（它们是双胞胎，在出生时分开 - 相隔三周），但是不可能将测试网代币移到主网上。 在每个区块链中，你只能在创世区块的区块链上发送代币。<br>主网地址以大写“Q”开头，例如“Qa93nb …”，而测试网地址以小写“q”开头，例如“qto45H …”在钱包中输错 Q 或 q 地址将导致错误。</p>
<p>问：是否有针对测试网的区块链资源管理器？<br>答：是的，在<a href="https://testnet.qtum.org/" target="_blank" rel="noopener">testnet.qtum.org</a>。除了Nodemap之外，它还有所有可用的 testnet 信息。你可以看到人们正在测试的内容，例如块59,159，它有许多合约调用，包括一个 2.0 币交易费。 好事是测试网代币是免费的。</p>
<p>问：测试网有水龙头(Faucet)吗？<br>答：是的。水龙头是一个免费提供代币的网站。你可以将其视为按需空投。 testnet水龙头是 <a href="http://testnet-faucet.qtum.info/" target="_blank" rel="noopener">testnet-faucet.qtum.info</a>，你可以每24小时取一次测试代币。 输入你的测试网钱包地址就可以使用水龙头，在下一个区块中可以收到多达100个测试代币。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*IsncAR16SggSeysw__jT6A.jpeg" alt=""></p>
<p>另外，我想分享一些有关主网水龙头的消息：向智能合约地址发送 10 个 QTUM：QdonTFalLfoR$uchaNObvioUSscam， 然后你可以从这个水龙头中获得高达 5000 mQTUM。 仅限今晚午夜UTC。</p>
<p>问：我可以练习将测试代币发送到其他显示在水龙头上的地址吗？<br>答：当然，为什么不呢？ 我一直在天网（Skynet）上这样做，也许没有烦到其他人。</p>
<p>问：这是否意味着我可以了解更改地址，向许多人发送诈骗信息，在另一台计算机上备份和恢复加密钱包等等，而且使用测试网代币没有风险？我可以上 testnet 蹦跶，尝试一些新类型的交易，确保我完全理解它，然后在 mainnet 上运行相同的交易吗？<br>答：是的。</p>
<p>问：我可以在testnet上获得块奖励吗？<br>答：是的，这非常简单，因为网络权重如此之低，目前还不到400万。如果你每天从水龙头获得测试代币持续一周，你将有足够的资金每周赢得奖励。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*pP-oIz-nSmIEJzxF5x_Htw.jpeg" alt=""></p>
<p>问：我可以在同一台计算机上运行 mainnet 和 testnet 的钱包吗？<br>答：是的。应用程序使用单独的区块链独立运行，所以这没有问题。它们可以同时运行，但我不推荐。</p>
<p>问：你能展示测试网性能的图表吗？<br>答：我以为你永远不会问。</p>
<hr>
<h2 id="图表-–-测试网络版"><a href="#图表-–-测试网络版" class="headerlink" title="图表 – 测试网络版"></a>图表 – 测试网络版</h2><p>测试网分析的数据源来自<a href="https://testnet.qtum.org/" target="_blank" rel="noopener">测试网块资源管理器</a>，测试网区块链(从testnet qtumd 登录)，以及来自Copacabana Beach的有关testnet的加密电报消息。</p>
<h3 id="独立奖励地址"><a href="#独立奖励地址" class="headerlink" title="独立奖励地址"></a>独立奖励地址</h3><p>测试网有 30 个核心钱包，并根据正在进行的测试动态地加入一些额外的节点。对于 12 月份的每日地址数，12 月 28 日达最高为 36，并且之前有很多天只有最低的 30 个独立地址：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*QLWqdqtrC8ILqnVr4jkhjg.jpeg" alt=""></p>
<h3 id="每日活跃交易数-1"><a href="#每日活跃交易数-1" class="headerlink" title="每日活跃交易数"></a>每日活跃交易数</h3><p>测试网上的交易很少。活跃交易是指每个块保底的两笔交易（coinbase和coinstake交易）之外的代币或合约的交易。例如，如果一天有 600 个块，就算没有人发送一个代币或合约交易，那么还是会有 1,200 个交易。活跃交易提供超过 1,200 保底的交易数。 这些交易适合使用水龙头，测试合约等的人。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*9VfnjjdmNC20wkT77q1gNg.jpeg" alt=""></p>
<p>你还可以在测试网块资源管理器主页的底部看到一个 14 天的交易图表。</p>
<h3 id="块间​​距变化-1"><a href="#块间​​距变化-1" class="headerlink" title="块间​​距变化"></a>块间​​距变化</h3><p>12 月平均块间距稳定在 145 秒左右：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*D_ibeistgR6gEXmXcVrFqg.jpeg" alt=""></p>
<p>对于 52,000 至 56,000（约一周）的区块，有 3 个区块间隔超过 20 分钟，区块 54,053 的块间距最大，为26分08秒。 这组测试网的块间距分布和主网差不多：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*pw3XLEuFEcb-WZPG4sOhig.jpeg" alt=""></p>
<h3 id="网络权重-1"><a href="#网络权重-1" class="headerlink" title="网络权重"></a>网络权重</h3><p>钱包网络权重的计算（随难度而变的平均值）显示测试网是随机变化的，类似于主网。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*FLVzg0mX_QLQfljVnhx8Ig.jpeg" alt=""></p>
<h3 id="年回报率"><a href="#年回报率" class="headerlink" title="年回报率"></a>年回报率</h3><p>网络权重为 394 万，测试网代币的年回报率为 22.2％。这是一些简单的 staking：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*q1EUeL4gqxk8PnB-3J4n-Q.jpeg" alt=""></p>
<hr>
<p>来吧！来测试网玩xue耍xi！它为你而生！</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*3B_vbb8AD2Pf9dlCNfNu6A.jpeg" alt=""></p>
<p>我们本周在里约写完报告。你可能想要去一个温暖，友好的地方，如巴西的里约热内卢（3 个节点的家），完败北半球的冬天。 海滩很漂亮，人们很友善（只是不要把你华丽的加密珠宝带到海滩）。在海滩上有一个新鲜的椰子，它们几乎和那些块奖励一样美味！</p>
<p>Obrigado，愿你的区块奖励像 <a href="https://goo.gl/maps/ixCp3L7xLTy" target="_blank" rel="noopener">Sugarloaf 山</a>（PãodeAçucar）的Copacabana海滩升起的太阳！</p>
<p>JB395</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*qHqzeqKkmojdrObKOMT4DA.jpeg" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://medium.com/@bodhitoken/bodhi-prediction-market-alpha-is-live-on-qtum-testnet-da60dc31fe1f" target="_blank" rel="noopener">Bodhi Prediction Market Alpha</a> 现已上线 Qtum Testnet！ 在这里查看 Bodhi 的测试合约。</p>
</li>
<li><p><a href="https://live.blockcypher.com/btc-testnet/" target="_blank" rel="noopener">测试网块浏览器</a>，支持比特币和以太坊Ropsten。</p>
</li>
<li><p>如果你只关注此报告中的一个链接，那一定是<a href="http://www.ethviewer.live/" target="_blank" rel="noopener">以太坊区块链可视化</a>，来自澳大利亚堪培拉的联邦科学与工业资源组织（CISRO，Commonwealth Scientific and Industrial Resource Organization）。这是一个令人惊叹的网站，可以实时显示以太坊区块链。未确认交易在云（mempool）中浮动，然后随着区块链的增长弹入块中。对于交易，你可以查看单个发送，合约调用和合约创建（单击这些浮动图标可以转到区块链资源管理器）。 叔块（以太坊独有）显示为红色，你可以看到主链与绿色标题和绿色链接一起增长。你参加加密派对的话，可以在电视大屏幕上显示这个网站。</p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*dAF7_KizBemD6UJ0mOL5tQ.jpeg" alt=""></p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*48e1QKE1gXbpAorWcw_6ug.jpeg" alt=""></p>
<ol>
<li><p>推荐一段关于隐秘(cryptic)和加密(crypto)的关系的音乐，来自挪威/英国 EDM 制作人 Alan Walker，用在现场表演的视频<a href="https://youtu.be/Tfaq4UTH7P0?t=1m43s" target="_blank" rel="noopener">YouTube Space NY</a>里，由 Alan，Noah Cyrus 和 Juliander 创作（歌词不宜在办公室浏览，nsfw，Not Safe For Work），以及对持有者的一些话：“当它全部倒下时，那么随你。”</p>
</li>
<li><p>有关里约热内卢<a href="https://youtu.be/_1uEy-n4IsU" target="_blank" rel="noopener">伊帕内玛海滩</a>的悲伤歌曲，创作于智能合约和空投之前的一段时间。</p>
</li>
</ol>
<hr>
<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p>来自 <a href="https://medium.com/@mahmoudalkarim?source=post_header_lockup" target="_blank" rel="noopener">Mahmoud Al-Karim</a> 的问题，2018年7月23日：</p>
<p>问：需要为 qrc token 准备测试网 qt 钱包。</p>
<p>答：</p>
<p>这个博客“QTUM 102：建立自己的QRC20 token ”会有帮助吗？<a href="https://medium.com/@IAMEIdentity/qtum-102-build-your-own-qrc20-token-59547654b518" target="_blank" rel="noopener">https://medium.com/@IAMEIdentity/qtum-102-build-your-own-qrc20-token-59547654b518</a></p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 Qtum Mainnet 成果]]></title>
      <url>/2018/07/30/2018-07-30-%E7%BF%BB%E8%AF%91-QtumMainnet%E6%88%90%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/newbie-wallets-april-1-2018-26ea7a06489c" target="_blank" rel="noopener">https://medium.com/@jb395official/newbie-wallets-april-1-2018-26ea7a06489c</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="Qtum-Mainnet-成果-12-月-25-日至-31-日"><a href="#Qtum-Mainnet-成果-12-月-25-日至-31-日" class="headerlink" title="Qtum Mainnet 成果 12 月 25 日至 31 日"></a>Qtum Mainnet 成果 12 月 25 日至 31 日</h1><p><img src="https://cdn-images-1.medium.com/max/2000/1*W8WwxhZCKQyshSbOSala2w.jpeg" alt=""></p>
<p>以下是每周的 Qtum Mainnet 性能的图表评估，包括常用的图和表，以及使用虚拟专用网络（VPN）和 Qtum staking rig 的教程。有一万个理由你应该使用 VPN 上网，甚至你应该使用 VPN 挖加密货币。这个星期我们就着眼于 VPN 以及 Qtum 节点如何（以及在​​何处）通过 VPN 连接吧。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*hz1WsRESrjaRUX4fYmK0EA.jpeg" alt=""></p>
<p>我是社区成员之一，也是独立研究者，还没加入量子团队，但非常欣赏他们的技术指导和社区中的高谈阔论，以及这些酷酷的贴纸。</p>
<hr>
<h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><p>Qtum Mainnet 性能评估的数据源来自 <a href="https://explorer.qtum.org/" target="_blank" rel="noopener">Qtum Explorer</a>，区块链(从 qtumd 服务器应用程序登录)以及来自 <a href="https://kojects.com/2015/08/03/pangyo-techno-valley-visit/" target="_blank" rel="noopener">Pangyo</a> 的加密电报消息。</p>
<h3 id="独立奖励地址"><a href="#独立奖励地址" class="headerlink" title="独立奖励地址"></a>独立奖励地址</h3><p>这一周，每日独立地址数最高在 12 月 28 日达 294 个。整个星期里有 964 个独立地址，上周是 946 个，表示中小钱包正常参与。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*4x59pN_0p2aov4MTUpIJPQ.jpeg" alt=""></p>
<p>赢得多个区块的钱包数与上周基本持平。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Epqt09iTodvvOgciSiJiUQ.jpeg" alt=""></p>
<h3 id="每日活跃交易数"><a href="#每日活跃交易数" class="headerlink" title="每日活跃交易数"></a>每日活跃交易数</h3><p>每日交易数从上周开始下滑，可能是因为放假。活跃交易为每个块提供的交易数高于保底交易数2。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*IsGgm3sTegVcqirPIxLfYg.jpeg" alt=""></p>
<p>你还可以在 <a href="https://qtumexplorer.io/" target="_blank" rel="noopener">QTUM Explorer.io</a> 和 <a href="https://explorer.qtum.org/" target="_blank" rel="noopener">Qtum Explorer</a> 主页底部查看交易图表。</p>
<h3 id="块间​​距变化"><a href="#块间​​距变化" class="headerlink" title="块间​​距变化"></a>块间​​距变化</h3><p>从 12 月 25 日到 12 月 31 日，有 3 个区块有大于20 分钟的块间距，上个星期是 6 个。最大块间距是块 71,003，达 24 分 34 秒。平均块间距在 144 秒左右保持稳定。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*ZP9yuGqgFdXUVByHF7NyoA.jpeg" alt=""></p>
<h3 id="新网络权重"><a href="#新网络权重" class="headerlink" title="新网络权重"></a>新网络权重</h3><p>如下所示，每日“新网络权重”是基于计算随每日获奖块的 10 天指数而变的平均值和已知大钱包的余额的：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Pf4mIN4oZxQgD3lDlDH4iA.jpeg" alt=""></p>
<p>如年度回报率表所示，网络权重为 1,990 万，年回报率为 4.4％：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*h3m0WfiO939826ltmotV7A.jpeg" alt=""></p>
<hr>
<h3 id="更多关于交易费用的信息"><a href="#更多关于交易费用的信息" class="headerlink" title="更多关于交易费用的信息"></a>更多关于交易费用的信息</h3><p>这是上周关于交易费用报告的后续。我做了一些额外分析，发现了从硬件钱包发送的低费用交易 - 其中有47个。 现在这些交易都在区块链上，所以有一个快乐的结局。 <a href="https://medium.com/@jb395official/qtum-mainnet-results-december-18-24-8e43e51aca3b" target="_blank" rel="noopener">上周的报告</a>已经用这个信息更新了。</p>
<h2 id="VPN-你能看见我嘛？"><a href="#VPN-你能看见我嘛？" class="headerlink" title="VPN - 你能看见我嘛？"></a>VPN - 你能看见我嘛？</h2><p>这周的教程我们研究虚拟专用网络（VPN），以及它们如何与 Qtum staking 钱包一起使用。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*kABDmEvHuU7qtlhXteDPhw.jpeg" alt=""></p>
<p>你可能需要考虑使用 VPN 的安全和隐私功能进行加密货币挖矿活动。有 VPN 的话你的网络对以下是不可见的 1) 你的Internet服务提供商（ISP）2）<a href="https://torrentfreak.com/vpn-server-seized-to-investigate-russian-ambassadors-assassination-1171219/" target="_blank" rel="noopener">老大哥(big brother)</a> 3）黑客（但是你可能获得恶意软件）。VPN提供商提供在你的计算机上运行的应用程序，以便与其远程服务器建立加密连接，从而将你的流量解密并上传到网络上。</p>
<blockquote>
<p>译者注：2）老大哥的梗是 Big Brother is Watching You（老大哥在看着你），是出自英国著名政治小说《一九八四》的金句。</p>
</blockquote>
<p>你的 ISP 无法解析 VPN 加密流量来看你正在浏览的网站（等等，我的 ISP 怎么知道我正在搜索<a href="https://youtu.be/-M0PJ_mTtRU" target="_blank" rel="noopener">可食用的内衣</a>？），你的 IP 地址也被隐藏，通过你的VPN服务转换为提供的远程服务器的 IP 地址。你还可以使用 VPN 绕过地理限制。</p>
<p>可能加密矿工也担心因为带宽使用情况的签名，将他们识别为持有比特币（Qtum）的矿工，这可能使他们成为黑客的目标。此外，有些应用程序可以监视节点对等 IP 地址并与区块链交易（发送）相关联，确定哪些 IP 地址赢得了块奖励。如果你通过 VPN 连接到网络，则不必担心任何这类问题，因为你的节点 IP 地址来自 VPN 服务器，而不是你的真实网络连接地址。</p>
<p>你能玩些使用 VPN 通过国际服务器连接到你的 staking 设备的游戏。比如，定位在Qtum Nodemap上未显示的国家/地区，突然有个节点出现在 Casablanca 等等。开启 VPN 后，你的节点应该在大约一周内从 Nodemap 删除。</p>
<p>我不会详细介绍如何选择VPN，但是在隐私和安全方面，有些服务比其他服务更好（在<a href="https://www.pcmag.com/article2/0,2817,2403388,00.asp" target="_blank" rel="noopener">这里</a>或<a href="https://www.cnet.com/best-vpn-services-directory/" target="_blank" rel="noopener">这里</a>阅读）。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*IStUSWYZxsg5JBvwR942fw.jpeg" alt=""></p>
<p>如果你确实安装了一个VPN，那你应该选择附近的服务器以减少与 Internet 连接的延迟。不要连接到首尔的服务器（除非你的是 ROC 中的 600 多个节点之一）。我不得不微调 VPN 设置来让它稳定一点：为特定城市选择“最佳服务器”，并设置为“自动重新连接”。 此外，我建议你在激活 VPN 之前有一个稳定的 staking 设置，因为故障排除更难，比如，通过 VPN <a href="http://canyouseeme.org/" target="_blank" rel="noopener">CanYouSeeMe.org</a> 无法检查端口 3888 是否打开。</p>
<p>我注意到的另一件事是打开 VPN 后，IPv6 连接都断了。你可能会担心甚至开着 VPN ，你的 IP 地址还是泄漏了。如果你返回到你的 ISP DNS（域名服务器）查找IP地址的话，则会发生这种情况，因此好的 VPN 应该提供自己的 DNS。另一个问题似乎是 IPv6 地址并不总是通过 VPN 路由，因此 VPN 可以将其切断。</p>
<p>监控节点也可以连接到其他许多个节点（你在 Qtum 网络里可以轻易做到这个 - 我在看着你，Nodemap），以及寻找第一个中继新块的节点并记录该节点的 IP 地址。<a href="https://blockchain.info/blocks" target="_blank" rel="noopener">Blockchain.info</a> 做的事类似，通过“Relayed By”信息，它们能够识别大型比特币挖矿池。下面的“addrlocal”字段显示节点的 IP 地址，即显示启用 VPN 的对等点的 VPN 出口服务器地址。注意，这些块不携带任何IP地址，但可以监视网络上的节点，将节点 IP 地址与 Qtum 钱包地址相关联。</p>
<h3 id="Ping-时间"><a href="#Ping-时间" class="headerlink" title="Ping 时间"></a>Ping 时间</h3><p>你知道，Qtum 权益证明（PoS）挖矿以 16 秒的增量慢慢运行，所以启用 VPN 的几毫秒延迟应该问题不大。我想通过查看 ping 时间来验证这一点。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">qtum-cli getpeerinfo</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "id": 1,</span><br><span class="line">        "addr": "42.33.140.123:3888",</span><br><span class="line">        "addrlocal": "135.23.65.157:23569",</span><br><span class="line">        "services": "000000000000000d",</span><br><span class="line">        "relaytxes": true,</span><br><span class="line">        "lastsend": 1563586912,</span><br><span class="line">        "lastrecv": 1563586910,</span><br><span class="line">        "bytessent": 204216,</span><br><span class="line">        "bytesrecv": 138312,</span><br><span class="line">        "conntime": 1563583815,</span><br><span class="line">        "timeoffset": 0,</span><br><span class="line">        "pingtime": 0.0781,</span><br><span class="line">        "minping": 0.068727,</span><br><span class="line">        "version": 70016,</span><br><span class="line">        "subver": "/Satoshi:0.14.8/",</span><br><span class="line">        "inbound": false,</span><br><span class="line">        "addnode": false,</span><br><span class="line">        "startingheight": 8607,</span><br><span class="line">        "banscore": 0,</span><br><span class="line">        "synced_headers": 75092,</span><br><span class="line">        "synced_blocks": 75092,</span><br><span class="line">        "inflight": [</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>
<p>Ping 表示 Packet Internet Groper，它表示你的计算机可以与 Internet 上另一个节点通信的速度，例如，上面的对等点信息显示的 ping 时间是 78.1 毫秒。 我在网上看到的其他 Qtum 节点上最快的 ping 大约是 15 毫秒，如果节点位于世界的另一端，ping可以延长到几百毫秒。你知道接下来我会写什么：我爬了一堆数据，在Excel中处理它，并可视化出一些图表。</p>
<p>我从使用 getpeerinfo 的对等连接列表开始，并在激活 VPN 之前获得了 ping 时间。对于这个节点，有 123 个连接，平均 ping 时间为 170 毫秒：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*l2L2jeAF7BPeUKvZuPm3gQ.jpeg" alt=""></p>
<p>启用 VPN（但不重新启动节点），连接计数降了一两个小时，然后平均 ping 时间为187毫秒。在 VPN 启用后，大约一半的对等点连接成功转移。但所有 IPv6 对等点连接都断了。</p>
<p>为了研究 ping 时间和网络的影响，我选择了韩国首尔的 VPN 出口服务器，根据Nodemap，这个服务器托管着 270 个节点。难道用 VPN 可以更快 ping 到首尔的所有节点么？有 123 个连接，平均 ping 时间为 204 毫秒（在下图中，最长两个 755 和 797 毫秒的 ping 被切断）：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*YBYJlAwNkNos-vNCepR4sA.jpeg" alt=""></p>
<p>再来看看对等点在首尔 VPN 的出口位置。节点应该参与区域网络图的形成。记住，节点是通过在它们之间中继未经确认的交易和新块来工作。</p>
<p>首先，这是今天早些时候 Nodemap 中前 10 个国家的分布：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*ZF_hafRnF0Q70Fuvx0U4Sg.jpeg" alt=""></p>
<p>韩国和美国领先。这两者谁第一几乎每天都在变化，现在中国（ROC，应该是Republic of China 中华民国）已经落后了。对于在首尔使用 VPN 服务器的节点，分布不会发生太大变化：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*_RN4G5AQE5bCMIy_21xByw.jpeg" alt=""></p>
<p>“其他”组里，这些国家都有一个节点：印度，印度尼西亚，伊朗，日本，马耳他，荷兰，挪威，波兰，俄罗斯，新加坡和瑞典。在你的家庭办公室或云托管服务提供商中运行节点，可以在全球范围内与全球各地的 Qtum 节点进行全球通信。</p>
<p>下一周：你是这个邻域的新手，技术上很好奇，那么你在量子链上应该怎样玩耍？一步步安装钱包，练习备份和恢复钱包，甚至免费获得测试代币？下周：所有关于<a href="https://testnet.qtum.org/" target="_blank" rel="noopener">测试网</a>的那些事。<br><img src="https://cdn-images-1.medium.com/max/960/1*AOwG3MFc5Cx0M-zEvN_OaA.jpeg" alt=""></p>
<p>我们在首尔与我们的 VPN 服务器一起写完报告，并祝大家健康快乐，享受有区块奖励的新年。干杯，2018 年！</p>
<p>새해 복 많이받으세요（新年快乐）</p>
<p>JB395</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*iX-Wrcjua3QlFp149HBoqQ.jpeg" alt=""></p>
<hr>
<p>参考：</p>
<p>“窃听”攻击可以曝光多达 60％ 的比特币用户，<a href="https://www.coindesk.com/eavesdropping-attack-can-unmask-60-bitcoin-clients/" target="_blank" rel="noopener">Coindesk</a>，2014年6月</p>
<p>如何查看比特币交易的IP地址？ <a href="https://bitcoin.stackexchange.com/questions/193/how-do-i-see-the-ip-address-of-a-bitcoin-transaction?" target="_blank" rel="noopener">StackExchange</a>，2012</p>
<p>韩国无人机4K - 早晨平静的土地（釜山，巨济，首尔），<a href="https://youtu.be/9Vo68cjwOgA" target="_blank" rel="noopener">YouTube</a>，2017年11月<br><img src="https://cdn-images-1.medium.com/max/1280/1*Cy0XVKeezr-d7_SIzx1ABw.jpeg" alt=""></p>
<p>请参阅我之前放在 <a href="https://medium.com/@jb395official/latest" target="_blank" rel="noopener">Medium</a> 上的报告。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 QRC20 token 报告]]></title>
      <url>/2018/07/24/2018-07-24-%E7%BF%BB%E8%AF%91-QRC20token%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/qrc20-token-report-february-25-2018-ff397a1ac070" target="_blank" rel="noopener">https://medium.com/@jb395official/qrc20-token-report-february-25-2018-ff397a1ac070</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="QRC20-token-报告-2018年2月25日"><a href="#QRC20-token-报告-2018年2月25日" class="headerlink" title="QRC20  token 报告 - 2018年2月25日"></a>QRC20  token 报告 - 2018年2月25日</h1><p><img src="https://cdn-images-1.medium.com/max/1600/1*JGGMMQFeumk3QOj8412xgQ.jpeg" alt=""></p>
<p>为了表达我对社区的感谢，这里有一个关于 Qtum QRC20  token 的教程：它们是什么，它们在哪里，如何与它们交互，如何查看它们以及如何创建和销毁它们，用最近的 token 空投为 Qtum 持有者解释 token 生命周期中的这些细节。</p>
<p>我是一名独立研究员，偶尔写博客和主持社交媒体，十分中意Qtum的技术指导以及社区讨论。如果你对本文有想法或批评，请在社交软件上发给我或在下面评论。</p>
<hr>
<h2 id="主网性能"><a href="#主网性能" class="headerlink" title="主网性能"></a>主网性能</h2><p>首先，简要回顾最近的 Qtum 主网性能。</p>
<h3 id="独立奖励地址"><a href="#独立奖励地址" class="headerlink" title="独立奖励地址"></a>独立奖励地址</h3><p>过去 7 天里，每日独立地址数最高于2月25日达 306 个，平均值是 291 个每天。这意味着每天 600 个区块的区块奖励中，几乎一半是小钱包赢得的。一周的独立地址数是 1,107。这些数字表示，与 10 天前相比，独立奖励地址数有略微增加，也暗示部署的小钱包更多了，这在我的<a href="https://medium.com/@jb395official/happy-new-year-qtum-mainnet-performance-february-9-15-a696e8e8396e" target="_blank" rel="noopener">新年报告</a>中有提到。</p>
<h3 id="节点数"><a href="#节点数" class="headerlink" title="节点数"></a>节点数</h3><p><img src="https://cdn-images-1.medium.com/max/960/1*TmK1vTY41-kiWn6hcU_sIQ.jpeg" alt=""></p>
<p><a href="https://qtum.org/en/nodemap" target="_blank" rel="noopener">节点地图(Nodemap)</a>显示，节点数在3,250左右，其中大约1,260个在中国。我想如果节点地图能跟上即将到来的节点数的数量级增加，其他区块链节点地图也能处理很多节点就好了，那么让我们祝愿节点地图更加健壮，足以应对这些增加的工作量吧！</p>
<h3 id="交易费用"><a href="#交易费用" class="headerlink" title="交易费用"></a>交易费用</h3><p>去年，交易费用只占每天区块奖励的百分之几。两个星期前，交易费用大约占区块奖励的一半。刚过去的一个星期里，<a href="https://explorer.qtum.org/stats" target="_blank" rel="noopener">资源管理器</a>显示有几个时间段是交易费用比区块奖励还多(每个时间段是24小时制)。如果资源管理器计算正确，这意味着网络内交易数有很大的增幅，尤其是智能合约调用( token 和DAPP)，这一般会带有 0.1 QTUM 费用。随着空投的部署，交易费用出现了一些大高峰。</p>
<h3 id="块间距"><a href="#块间距" class="headerlink" title="块间距"></a>块间距</h3><p>块间距稳定在 600 块每天附近。在2月11到2月24两个星期内，有14个区块，间隔超过20分钟，最长间隔是到区块 98,210 的 31 分 20 秒。</p>
<h3 id="网络权重"><a href="#网络权重" class="headerlink" title="网络权重"></a>网络权重</h3><p>我计算网络权重的方法依赖于具有已知余额的大钱包所获得的块奖励百分比。这种方法提供了比钱包计算估计的网络权重更稳定和准确的数字。在上周，这些总余额为 664 万的大型钱包获得了 26.4％ 的块奖励，网络权重为 2520 万。网络权重为2520万表示年度回报率为3.5％。</p>
<hr>
<h2 id="token-时间"><a href="#token-时间" class="headerlink" title="token 时间"></a>token 时间</h2><p>如果你只想要理解 QRC20  token ，下面是太长不看版：</p>
<p>QTUM QRC20  token 是标准化的数字资产，它们在 Qtum 智能合约中创建并活在这个智能合约中，永不离开合约。通过与合约交易可以将 token 分配给不同的所有者，合约存储 Qtum 地址列表和每个地址拥有的 token 。任何人都可以创建智能合约并创建 token ，而所有 token 的智能合约都存在于Qtum区块链中。 token 代表了区块链 2.0 平台的重要功能，性能和经济价值。</p>
<p>为了更深入地了解 token ，我们在发现之旅中的陪同者将是爱丽丝，一位 150 岁的文学角色，对加密货币有着天生的好奇心：</p>
<p>这时，爱丽丝跳了起来，她突然想到：从来没有见过穿着有口袋背心的兔子，更没有见到过兔子还能从口袋里拿出—块表来，她好奇地穿过田野，紧紧地追赶那只兔子，刚好看见兔子跳进了矮树下面的一个大洞。爱丽丝也紧跟着跳了进去，根本没考虑怎么再出来。爱丽丝梦游仙境，刘易斯卡罗尔，1865年。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*WV0uHmsnntYONJqpu9uwRw.jpeg" alt="1923年之前在美国出版"></p>
<p>爱丽丝想向 <a href="https://en.wikipedia.org/wiki/Alice_and_Bob" target="_blank" rel="noopener">鲍勃</a> 发送10个 Wonderland（WON） token 。 但是，当爱丽丝试图用她的钱包中进行交易时，事情变得越来越怪。爱丽丝决定学习关于 QRC20  token 的所有内容，并跟随一只名叫 Satoshi 的白兔，她最终从兔子洞落到一个充满了 token 和智能合约的另一个宇宙中。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*kAq8FdtMgY11yJVJTFMNAQ.jpeg" alt=""></p>
<p>如果你想加入爱丽丝并掉入兔子洞以了解关于 Qtum QRC20  token 的所有信息，请继续阅读，包括爱丽丝在吃完蘑菇后发现的两个秘密。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*QJCUoHDb6wZ1JAQWhZZ1XA.jpeg" alt="一些命运多舛的物理 token "></p>
<p>让我们从一些基本的解释开始。 QRC20 token 是可编程数字资产，创建于 Qtum 区块链的智能合约。 Qtum 区块链及其 EVM（以太坊虚拟机，Ethereum Virtual Machine）提供可执行代码和存储数据的智能合约。 使用Qtum Core 钱包，Qtum 手机钱包和 Qtum Web 钱包可以轻松创建带有 token 的基础智能合约。目前，更复杂的智能合约可以用编程语言 solidity 编写并发布在区块链上。</p>
<p>Qtum 继承了当前的虚拟机，用于执行来自以太坊有 token 的智能合约。 在以太坊中，基础 token 被称为 <a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">ERC20</a>，以Ethereum Request for Comments 20命名。这是添加 token 功能的协议，于 2015 年发布。 Qtum  token 命名为 QRC20，因为它遵循与 ERC20  token 相同的协议和标准。</p>
<p>爱丽丝知道可视化区块链模型 - 智能合约 -  token 架构是可行的（并且在进行交易时更安全），这也有助于解释 token 和空投如何运作。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*wd_2Plln8SKI-P3XBZi71Q.jpeg" alt=""></p>
<p>智能合约在合约创建交易中发布到网络，该交易包含在特定区块中，在这个区块里智能合约将永久存在。上图显示了一个智能合约（测试网区块 34,546 中的 Bodhi 合约）管理 QRC20  token ，合约将有存储空间来跟踪余额信息并提供六个功能来创建 token ，在地址之间转移 token ，查看余额等等。</p>
<h3 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h3><p>当合约创建交易发布到区块链时，智能合约在 Qtum 区块链上开始生效。 要看一下这样的合约创建交易，我们可以查看测试网上的 <a href="https://testnet.qtum.org/address/f6177bc9812eeb531907621af6641a41133dea9e" target="_blank" rel="noopener">Bodhi合约</a>（我在主网上找不到 Bodhi 合约）。</p>
<p>开发人员使用测试网来评估和测试他们的软件，这正是Bodhi对这个智能合约做的。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*bJ-89iOHGgtktwQlGJ2QQQ.jpeg" alt=""></p>
<p>Bodhi 测试智能合约开始生命周期于测试网块 35,456，2017年11月20.合约创建了 335,000 测试用的 BOT  token ，Bodhi 开发者能运行测试，确保代码准备好发布到主网了。</p>
<h3 id="交易所和钱包"><a href="#交易所和钱包" class="headerlink" title="交易所和钱包"></a>交易所和钱包</h3><p>下面，我们来看一个交易所和钱包的简化模型，这有利于了解空投如何运作。</p>
<p>注意，在下图中，为了清楚起见， Q 地址是有序的。实际上，块编号是有序的，但 Q地址是随机的。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*kqQq7jeQwAyhva8BwaQleg.jpeg" alt=""></p>
<p>如图所示，交易所客户可以自己买卖，不需要区块链交易。 交易所使用一个热钱包和一个冷钱包（可能是每个的倍数）保存余额。 对于这个例子，交易所具有6,000,000个币的余额，这些币作为交易存储在区块链中，但从不存储在交易所本身中。 后来，爱丽丝吃了蘑菇，并了解了这些币的秘密。</p>
<p>我们考虑两个交易。首先，一个账户从交易中提现 300 币到个人钱包。为了实现这个，客户输入钱包地址（这里是Q 12），交易热钱包（可能通过交易所的中间地址）发送 300 个币的交易。其次，对于存入交易所的存款，客户输入其交易账户的存款地址，并将交易（可能通过交易所的一些中间地址）发送到交易所热钱包。</p>
<p>现在让我们看看一些直接连接到区块链的钱包，而不是通过交易所。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Ryt8vgqj5bNTK2QVI01Osg.jpeg" alt=""></p>
<p>前面我将钱包描述为区块链上可以管理货币的浏览器。作为早期的加密货币使用者，爱丽丝可以向我们提供钱包角色的更多细节：</p>
<ul>
<li>浏览区块链并根据过去的交易计算余额</li>
<li>持有私钥并签署交易</li>
<li>设置交易费用（将随时间变化）</li>
<li>对于某些钱包，发布智能合约和合约调用（ token 交易等）</li>
</ul>
<p>只有全节点（含有整个区块链）可以将交易发送到网络以写进区块链中，因此上面使用简化支付验证的钱包（手机钱包）和其他轻量级钱包都必须通过全节点与区块链交互。</p>
<p>爱丽丝想要指出钱包本身并没有持有任何货币或代币，因为货币或代币总是存放在区块链上。 我们将在下面看到（扰流警报）即使在区块链上， token 也永远不会离开创建它们的智能合约。 它们该有多么无聊！</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*YkNZt1jTzxJCh7cPhvz6yg.jpeg" alt=""></p>
<p>当我们沿着兔子洞向下走时，爱丽丝有一个关于货币分享的秘密。 她说 Qtum 区块链上没有真正的货币。钱包为地址计算未花费的交易额总和，因此“货币”更像是Excel电子表格SUM公式的结果。 另一方面，QRC20 token 值是单独的金额，如Excel中单个单元格中的值。</p>
<hr>
<h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p><img src="https://cdn-images-1.medium.com/max/960/1*zq6vblhARhPm-SaJXJyisw.jpeg" alt=""></p>
<p>当我们跟着爱丽丝走下兔子洞时，我们决定采取自拍或者说快照。空投快照​​是特定时间，特定区块的区块链读数。对于Bodhi空投，快照是在 2013 年 2 月 2 日 23:40:16 UTC 的 <a href="https://explorer.qtum.org/block/b14805dbcf2652075b185ea46322416186a5319861e9a317b7f1671368868078" target="_blank" rel="noopener">93,333 块</a>。爱丽丝指出，数字 3 和 9 在中国被认为是幸运的，代表着生活，生命和永恒。</p>
<p>然后发生的（猜一猜……）是 Bodhi 取区块链中 0 到 93,333 块，解析所有交易，找到每个 Qtum 地址的余额。</p>
<h3 id="空投"><a href="#空投" class="headerlink" title="空投"></a>空投</h3><p>这一节爱丽丝告诉你谁领到了空投，答案是：所有人。真正的问题是你是否有通过钱包或交易所来访问 token 的方法。</p>
<p>Bodhi 报告称他们以 4：100 的比例为 Qtum 持有者空投了4,015,325.92 BOT 代币，这意味着他们空投了 100,383,148 QTUM（他们排除了少于 10 QTUM 的地址）。 根据流通图表中的QTUM，2月2日有 100,353,364 QTUM（到目前为止，创造了1亿+块奖励），这意味着几乎每个 Qtum 地址都收到了BOT</p>
<p>空投的简单公平的方法是给每个活动地址提供 token 。为了检查快照所看到的区块链历史记录有多长，爱丽丝使用时光机（Explorer）来查看最早的块奖励获奖者。 她找不到创世块（1-5000）中任何活跃的钱包地址，但是这个家伙 <a href="https://explorer.qtum.org/address/QaHAXr7eqXZMvUp5HUXDZh1Pk4GhNMCh5b" target="_blank" rel="noopener">…Ch5b</a> 在 2017 年 9 月 8 日赢得了 <a href="https://explorer.qtum.org/block/6dbc7316f94cebff1dc27e13d4e698b97675f9924989d57bbb92ef85976c3fde" target="_blank" rel="noopener">5,041 块</a>，这是一个真正的 <a href="https://www.urbandictionary.com/define.php?term=OG" target="_blank" rel="noopener">OG</a> 钱包，在 2017 年 10 月之前挖了点矿。…Ch5b 仍有余额并确实收到了 BOT 空投。在看到合约调用工作后，我们将在下面看到实际的空投交易。</p>
<p>我们可以从上面回到我们的图，看看空投如何填充各种区块链地址。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*4WY94A6c--VwqISR6ixeWA.jpeg" alt=""></p>
<p>现在我们可以在区块链的左侧看到 Bodhi 智能合约存储，其中 BOT 空投到所有的地址。例如，地址 Q2 的交易所冷钱包将有 200,000 个 BOT 空投。该图中有两个时序假设。1）如果 Q10 的存入发生在块 93,333 之后，那么该地址仍然有 10 个 BOT 来自空投。 2）如果 Q12 的提现发生在块 93,333 之前，那么它将收到空投。</p>
<p>让我们看一下钱包在空投中的行为。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*RYLM_ns6iOIUUG7zf6ssYQ.jpeg" alt=""></p>
<p>这与预期非常符合，因为 BOT 被空投到每个活动地址（大于10 QTUM）。如上所述，这个包罗万象的空投问题是钱包是否可以访问 token ，这意味着钱包必须有办法添加 token 合约地址，并能够创建和发送 token 合约调用，而不是上面所有的钱包都可以做到这一点。</p>
<h3 id="与智能合约交流"><a href="#与智能合约交流" class="headerlink" title="与智能合约交流"></a>与智能合约交流</h3><p>回到爱丽丝原来的问题，爱丽丝把我们带到了这个兔子洞，爱丽丝想要向鲍勃发送 10 个 WON  token 。 可以这样类似地想。如果爱丽丝想要向鲍勃发送 10 个 token ，她不能简单地将 10 个 token 从她的钱包发送到 Bob 的钱包，即他的 Q 地址。这种方法存在一些问题。首先，代币不在爱丽丝的钱包中，而是在智能合约中。其次， token 不会被发送到鲍勃的钱包，它们会被移到智能合约存储中的鲍勃的 Q 地址。</p>
<p>不用担心交叉，爱丽丝的钱包知道如何与智能合约交流，因为她添加了 token 并输入了她钱包里的智能合约地址。向鲍勃“发送” token 的交易实际上被发送到智能合约，并且鲍勃的 Q 地址以及要转移给鲍勃的 token 的数量都作为数据被包含在合约调用交易中。 我们等下将在合约调用中查看数据，这之前先修复另一个易混淆因素。</p>
<p>比特币地址和 Qtum Q 地址由人们显式输入为 Base58 编码的字母数字字符。你可能从未注意到它（爱丽丝从未这样做过）但比特币和Q地址从不包含数字零，大写字母O，大写字母 I 或小写字母 l。其他的数字和字母都还好，但是如果名叫 Satoshi 的白兔子发现未来的加密货币用户搞砸了，会完全输入 “0”“O”“I”“l”（这很难，是的），为了减少 Bithumb 和 Coinbase 痛苦的客户服务电话，当人们将他们的比特币发送到错误的地址的时候，他们只需忽略这些字符，这对于一只兔子来说是非常具有前瞻性的想法。 这是很复杂的因素。 人类可读的 Base58 地址被转换为更有效的十六进制地址，用于在合约调用交易中发送，以及在智能合约中存储。 要在Base58和十六进制之间进行转换，请使用此网页进行<a href="http://lenschulwitz.com/base58" target="_blank" rel="noopener">Base58编码，解码和验证</a>。</p>
<p>现在我们可以查看合约调用中的数据，这是一个典型的例子：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*5yaPFlbxtfjd_B4R1oMkhA.jpeg" alt=""></p>
<p>数据显示：</p>
<ul>
<li>a9059cbb 表示这是一个转移操作</li>
<li>e22843f9a4 …是要转给的地址，以十六进制表示</li>
<li>3956ed39 转移的数量，十六进制，satoshis</li>
</ul>
<p>你对实际完成的空投怎么看？Bodhi 基金会不得不发出这么多合约调用。一旦智能合约启动，它很高兴在区块链中坐等指令。对于空投，这些指令将 BOT 从 Bodhi 基金会地址转移给所有的空投接收者。 例如，你可以在 2 月 15 日早上看到这种空投，比如 <a href="https://explorer.qtum.org/block/1405ac26eb8107936299c3103bb47c5ccd2764b4987f2d28956c7265e246a8c0" target="_blank" rel="noopener">100,719</a> 这样的块，有这么多、大的合约调用，它收 20  QTUM 的交易费！ 这些块包含多个合约调用，每个调用最多 200 个交易，因为Bodhi 更新了合约存储来执行空投。 以下是一些 Q 地址的空投交易：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*pvkrR5sNL5UFERrlH3RAtA.jpeg" alt=""></p>
<p>所有这些更新 Bodhi 智能合约的交易都已发布到区块链的 100,719 块和其他区块，但区块链中的智能合约存储实际上是如何更新的？ 显然，块奖励获奖钱包在区块链的本地副本中处理这些智能合约调用，将更新填充到其本地存储适当的块中。</p>
<p>以下是爱丽丝想要分享的第二个秘密：所有的全节点验证新块，它们还在智能合约块的本地副本上处理智能合约交易。 爱丽丝的第二个秘密是 - 每个节点在发布块时执行每个合约调用。</p>
<p>我们可以看看这些数据如何存储在智能合约中（再次使用令人困惑的十六进制地址）：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*urwLCJ_jmRN_hIDdXDmhyg.jpeg" alt=""></p>
<p>你想要的话，你可以浏览这个存储，找到你的地址，以及你地址的 token 数。不过不要试这个，有一个更简单的方法来看你的 token 余额，爱丽丝将在下面向我们展示。不过你知道我无法看着这样一个丰富的数据表而不抓着它运行一些 Excel 分析。</p>
<p>在资源管理器的智能合约页面，点击“显示所有”按钮，然后等一杯咖啡的时间让你的浏览器加载 31,944 项。一些我看不懂的有趣数据：有许多地址有1或2个satoshis token （0.00000001或0.00000002 token ），在其他区块链上称为灰尘。忽略这些条目， token 分布是：</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*Flc-zyUqsIzrDo_o5hvG0Q.jpeg" alt=""></p>
<p>10个最大的代币持有量如在下图所示。爱丽丝猜测，4000 万那个位置是 Bodhi 基金会，其余的是交易所。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Pt-Y_YNWLmIrUzGrXAYEOg.jpeg" alt=""></p>
<h3 id="查看你的-token-余额很容易"><a href="#查看你的-token-余额很容易" class="headerlink" title="查看你的 token 余额很容易"></a>查看你的 token 余额很容易</h3><p>爱丽丝想要有一个超级简单的方式检查合约存储中的 token 余额。她说要导航到<a href="https://explorer.qtum.org/tokens/search" target="_blank" rel="noopener">代币</a> 页面</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*krUT59IAL2elF-47wX8R9g.jpeg" alt=""></p>
<p>我们找不到她的WON token ，所以在这个例子中会使用 BOT; 点击 “BOT - Bodhi Token” 这个名字</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*rgAnhE_efD0Nm6m2RZkl9g.jpeg" alt=""></p>
<p>选择“READ SMART CONTRACT”并将 Q 地址粘贴到 “BalanceOf” 字段中，然后选择“Query”。 将出现 satoshis 的余额。获取 token 中的余额，将小数点向左移动 8 位（仅这个 token ）。</p>
<p>如果你可以在资源管理器中查看 token ，也可以通过在资源管理器中单击地址的 token 收藏来获取此页面的快捷方式。</p>
<h3 id="资源管理器中的-token"><a href="#资源管理器中的-token" class="headerlink" title="资源管理器中的 token"></a>资源管理器中的 token</h3><p>空投后，爱丽丝感到很困惑，因为她无法在资源管理器中看到她的地址的代币，但有其他地址已经自豪地展示了他们的代币。</p>
<p>要理解为什么资源管理器感觉不到空投代币，请记住空投是如何工作的：快照，一些处理，然后空投合约调用智能合约，没有任何东西触及区块链上的 Q 地址。</p>
<p>资源管理器一直处于蒙蔽状态，直到你将 token 添加到钱包并使用你的 Q 地址进行 token 交易（无论多小）。或者重新加载你的钱包（爱丽丝必须与白兔核对这个），然后资源管理器才知道你拥有该 token ，查询智能合约并正确显示 token 余额。</p>
<p>以太坊资源管理器内置了最受欢迎的 ERC20  token ，因此你可以查看给定地址的 token 。 也许 Qtum 资源管理器未来的版本中会也有这个功能。</p>
<h3 id="烧币（Burning-Tokens）"><a href="#烧币（Burning-Tokens）" class="headerlink" title="烧币（Burning Tokens）"></a>烧币（Burning Tokens）</h3><p>现在我们已经到了爱丽丝兔子洞的底部，是时候讨论在它们的使用寿命结束时如何销毁或“烧毁” token 。例如，在 Qtum Mainnet Ignition 启动之前，Qtum  token 以Ethereum ERC20  token 的形式存在。 2017年10月初，各种交易所允许 Qtum 代币持有人提交他们的 Qtum ERC20 代币换成 QTUM Mainnet 代币，换掉的 Qtum ERC20 代币随后被烧毁。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*G-o_Li8O9erWSCtL4vN2Bw.jpeg" alt=""></p>
<p>为什么有人想要收购好的 token ？也许 token 会升级为新的代币或代币，就像 Qtum 的情况一样。此外，组织可以回收一些代币库存以减少供应，支持价格，类似于公司回购自己股票。</p>
<p>烧毁 token 你需要把他们发送给一个不存在的地址，将它们永久留在那里。例如，我们造个以太坊地址 0x1111111111111…，一个没有人拥有私钥的合法地址。我们告诉智能合约把 token 转移到那个地址，然后它们就被永久销毁了。我们可以在以太坊 Qtum ERC-20  token 页面查看这些可怜的 token ，并通过累计所有烧毁地址的百分比，看到 97.05％ 的旧 Qtum ERC20  token 已被烧毁：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*PYIvcJLrmpFiiOBumwdD9Q.jpeg" alt=""></p>
<p>如果你持有 Qtum ERC20 代币，那么建议在代币变得毫无价值之前，将这些 ERC20 代币转换为 Qtum Mainnet 代币。查一下社交媒体，看看是否还有可以完成这种交易的交易所。请快点，因为 Qtum ERC20  token 将永久埋葬在加密墓地，并且这些 token 将变成纪念品，因为不能再换成主网币。</p>
<hr>
<p>我不确定 Patrick 最近在哪儿环球旅行，但我认为 Earlz 最近参加完柏林的聚会，回到了阿姆斯特丹。我有几篇报告有柏林的照片，所以让我们在阿姆斯特丹完成。</p>
<p>阿姆斯特丹是一座历史悠久的城市，拥有美丽的运河，提供“咖啡”的咖啡馆，以及全年提供特殊照明的红灯区。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*m49FhTcFoPWjQ3F7ITB90g.jpeg" alt="高买高卖"></p>
<p>阿姆斯特丹是郁金香泡沫的家园（1637年内爆），有些人将其与所谓的加密货币泡沫相提并论。 但是，如果你做自己的研究（DYOR），你可以类比区块链2.0平台，如 Qtum（成立于2017年）类比荷兰东印度公司（成立于1602年），这是第一家具有重要新商业范例的全球性公司（第一家） ，在股票市场公开交易），在当时是世界上最有价值的公司。</p>
<p>我们不要在风车上谈论泡沫。在阿姆斯特丹附近看一些精美的风车吧。今天，这些风车是优雅的历史宝石，但在它们的荣耀中，它们是锯木材，磨面粉和提取亚麻籽油的工业机器。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*NjSFeijRaqW18QJ1efVEQA.jpeg" alt=""></p>
<p>我很高兴地报告说，爱丽丝确实爬出了兔子洞，如果你看到她和白兔说话，不要担心，他们可能只是讨论区块链治理和扩展。</p>
<p>我希望你和爱丽丝一起享受这段旅程，了解 token 以及你的代币将非常有用和有利可图。</p>
<p>Jackson (JB395)</p>
<hr>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol>
<li><p>官方 Qtum Core 和 QRC20 Token 指南：<a href="https://blog.qtum.org/qtum-core-qrc-20-tokens-1c2734d6290c" target="_blank" rel="noopener">Medium</a></p>
</li>
<li><p>来自社区的一些出色的QRC20 token 资源：</p>
</li>
</ol>
<ul>
<li>Silverminer, 如何评价 Bodhi  token 。<a href="https://steemit.com/qtum/@silverminer/how-to-claim-bodhi-tokens" target="_blank" rel="noopener">Steemit</a></li>
<li>Sam Suh，使用 QBao 钱包的 QTUM 钱包教程 - 用于 Bodhi（BOT）代币或其他 QRC20 代币。<a href="https://medium.com/@samsuh_33856/qtum-wallet-tutorial-for-bodhi-bot-tokens-qrc20-tokens-using-qbao-ac14f9445dc8" target="_blank" rel="noopener">Medium</a></li>
</ul>
<ol>
<li><p><a href="https://bodhiproject.github.io/wiki/" target="_blank" rel="noopener">优秀参考资料</a>，关于移动端，QBao，qtum-qt 和qtumd / qtum-cli 等钱包从 Bodhi 基金会添加代币和代币交易。</p>
</li>
<li><p><a href="https://github.com/bodhiproject/bodhi-core/tree/master/contracts/tokens" target="_blank" rel="noopener">Github</a> 上的 Bodhi  token 合约。</p>
</li>
<li><p>我最喜欢的以太坊ERC20 token ，<a href="https://uetoken.com/" target="_blank" rel="noopener">UET</a>。 对不起，我忘记这个 ICO 了。</p>
</li>
<li><p>爱丽丝梦游仙境，<a href="http://www.alice-in-wonderland.net/resources/chapters-script/alices-adventures-in-wonderland/" target="_blank" rel="noopener">全文</a>。<br> <img src="https://cdn-images-1.medium.com/max/960/1*OqydpnY8pNUqdn8_1poDCQ.jpeg" alt=""></p>
</li>
<li><p>区块链研究时听的音乐：Be In The Moment with Amsterdam DJ Armin Van Buren 和他的每周视频博客<a href="https://www.youtube.com/channel/UCu5jfQcpRLm9xhmlSd5S8xw" target="_blank" rel="noopener">A State of Trance</a><br> 东南亚的<a href="https://youtu.be/fMLmtl6cUaA" target="_blank" rel="noopener">Armin</a><br> <img src="https://cdn-images-1.medium.com/max/960/1*NFYaY4LPjvsXUraQmB-fwQ.jpeg" alt=""></p>
</li>
<li><p>阿姆斯特丹的<a href="https://youtu.be/6Y6uPhquJbI" target="_blank" rel="noopener">无人机镜头</a>（DJI Mavic Pro），以4k观看</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 新手钱包]]></title>
      <url>/2018/07/18/2018-07-18-%E7%BF%BB%E8%AF%91-%E6%96%B0%E6%89%8B%E9%92%B1%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/newbie-wallets-april-1-2018-26ea7a06489c" target="_blank" rel="noopener">https://medium.com/@jb395official/newbie-wallets-april-1-2018-26ea7a06489c</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="新手钱包-–-2018年4月1日"><a href="#新手钱包-–-2018年4月1日" class="headerlink" title="新手钱包 – 2018年4月1日"></a>新手钱包 – 2018年4月1日</h1><p><img src="https://cdn-images-1.medium.com/max/1600/1*CoZWPEKSdUvkruolCf5urg.jpeg" alt=""></p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*KFZfenJ-o8iR3x-il9r1qg.jpeg" alt=""></p>
<p>在本报告中，我们分析区块链，了解自今年年初以来新钱包对节点数增长的贡献。我们的区块链浏览器是<a href="https://qtum.info/" target="_blank" rel="noopener">qtum.info</a>，它本周增加了一个 <a href="https://qtum.info/misc/stake-calculator" target="_blank" rel="noopener">staking 奖励计算器</a>，需要输入地址或输入 stake 金额。这个新的资源管理器给我留下了深刻的印象，它具有明亮的背景，能够快速显示一个地址直到“出生日期”的所有交易。</p>
<p>TL;DR 1月下旬，大约有2000个 staking 钱包，每个有 500 个代币，这可能与宣布给中国的 50,000 个节点的视频流平台有关。</p>
<p>我是一名独立研究员，偶尔是博主，社交版主，并中意 Qtum 团队的技术指导和社区的高谈阔论。如果你对本文有任何意见或更正，请联系社交媒体。本博客假设你对Qtum 权益证明（Proof of Stake）和区块奖励机制有一些基本的了解，新的社区成员可以阅读我在以下参考文献中以前博客的链接来了解有关这些主题的更多信息。</p>
<hr>
<h2 id="网络权重（在家试试）"><a href="#网络权重（在家试试）" class="headerlink" title="网络权重（在家试试）"></a>网络权重（在家试试）</h2><p>经常看我博客的人知道我通过爬取资源管理器块奖励地址来计算网络权重的替代方法，识别具有稳定余额的大钱包，并使用这些大钱包赢得的总奖励和块奖励百分比来计算网络权重。在过去两周内，这个方法算的网络权重为 3340 万。</p>
<p>使用新的资源管理器，你可以用这些步骤在家里玩玩网络权重。将你喜欢的浏览器导航到新的资源管理器<a href="https://qtum.info/misc/biggest-miners" target="_blank" rel="noopener">Biggest Miners</a>页面：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*zMnbWpMRBMjx4EzlOsIlaw.jpeg" alt=""></p>
<p>爬取数据并保存到文本文件。然后恰好一周后，再次爬取数据。对那些在两次爬取之间具有大致相同余额的大钱包（考虑到增加的块奖励），计算总余额和本周开采的块。</p>
<p>网络权重 = 总余额 /（本周开采的块/每周4200块）。 如果你本周进行计算，你的应该接近我上面计算的网络权重（除非有人添加节点😊）</p>
<hr>
<h2 id="节点地图-Nodemap"><a href="#节点地图-Nodemap" class="headerlink" title="节点地图 Nodemap"></a>节点地图 Nodemap</h2><p>Nodemap 本周更新了，可以显示网络上超过 7,000 个节点。这里大事是 Qtum 节点在中国的增长，我不相信其他情况下所谓的“剧情反转”：目前 Qtum 在中国的节点数超过 4,400，是比特币或以太坊的中国节点的两倍多。下一步将是 Qtum 超过比特币的全球节点数，给它两个月。</p>
<p>去年，在韩国退出之前，节点数第一在韩国和美国之间来回切换。 2017年10月21日，你可以在此屏幕截图中看到，staking 大城市是加州山景城（Google Cloud的主页）和首尔。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*1S-VsFdLmsyBZS_mLyRxjg.jpeg" alt=""></p>
<p>截至2017年底，网络权重为 2000 万，节点数约为 1,200。但从那时起，节点部署和网络权重增加的速度有所加快。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*DkgJumuKWajuIYQSFEg_Jg.jpeg" alt=""></p>
<p>目前，中国有11个城市拥有 100 个以上节点，其中包括南京的1000个节点。看看今天这个屏幕截图，酷！南京是江苏省的省会，拥有 3000 万人口，感觉就像你走动的时候不可能不撞到 Qtum 节点，这可能就是正在发生的事情。这些新节点非常有趣，因此我有一个<a href="https://www.urbandictionary.com/define.php?term=scientific-wild-ass%20guess" target="_blank" rel="noopener">大胆的想法(SWAG，Scientific wild-ass guess)</a>，关于其目的的：位于便利店的终端/信息亭，允许人们在不使用银行或信用卡的情况下为视频流服务支付现金。但这是一个完整的猜测，如果实际情况和我想的不一样，这些句子将被神奇地编辑掉。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*8okLn8l_ptzc-YF1_8Gs3Q.jpeg" alt=""></p>
<p>下表显示，从2月中旬到本周末的节点数变化。每个国家的都有增长，韩国节点数今天刚刚达到四位数字，中国节点数的增长目前占总节点数的63％。</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*44a9XH-0tvlaG66U2Pn8bw.jpeg" alt=""></p>
<p>下面的饼图显示了节点位置百分比。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*4fl6MLjRDI7ajAi8sKqh1w.jpeg" alt=""></p>
<hr>
<h2 id="新手钱包"><a href="#新手钱包" class="headerlink" title="新手钱包"></a>新手钱包</h2><p>我们回到 Excel 表格分析，看看七天内块奖励获奖者。以下是它的工作原理：从资源管理器中删除块奖励获胜者的地址，在 Excel 中对独立地址排序，用宏记录程序将每个地址粘贴回资源管理器并爬取对应钱包余额和交易数。</p>
<p>staking 地址的交易数很有意思，它提供了有关钱包年龄的线索，因为每个区块奖励的支付时间在 10 次交易内。 如果你看到一个包含 50 到 5,000 笔交易的 staking 钱包地址，则那个钱包已经存在了一段时间。 但如果你看到一个钱包赢得区块奖励时少于 10 次交易，那么这正是它的第一次区块奖励体验（第一次是最好的时间！）</p>
<p>让我们进一步分析区块奖励获奖者。有趣的是一些新手钱包有500 QTUM，还有一些有400 QTUM。 人们喜欢整数，过去的研究显示，经常有 365,500,1000,2000 和 10000 QTUM 的钱包。但是现在有很多这种 500 QTUM 大小的新钱包。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*-A2lIHByL3PCkwSOBFuerw.jpeg" alt=""></p>
<p>上面的例子展示了<a href="https://qtum.info/address/QTkkpuhAdNddGEMp99v2BMdS3Qmo63TMm4" target="_blank" rel="noopener">这种钱包</a>中的一个，它有 500 QTUM，当时是 2018 年 1 月 30 日。你能看见转入 84, 854 QTUM 的交易和转出 84,354 QTUM 的交易。你能假定它下一次交易就是用这 84,354 QTUM 发送 500 QTUM 给<a href="https://qtum.info/address/Qjai23hm2YibnNL8JQWWbpUpAQMC24ARZ7/" target="_blank" rel="noopener">另一个钱包</a>，如此继续下去，造另外的 168 个钱包。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*vB2iPZEmh-OouhbBXxyUIQ.jpeg" alt=""></p>
<p>我保证这些 staker 喜欢这 168 份交易费用，对此我只想用一个词来形容，“盲目发送(sendmanywithdupes)”。这本来只需一笔交易费即可为多个地址转入代币。在这次分析里，我看到了很多 sendmanywithdupes 交易的例子，包括去年发送 365 个 QTUM 到多个地址的那个著名系列，后来用来挖矿。注意，将 QTUM 拆分为单独的挖矿地址并没有改变赢得区块奖励的可能性，因为钱包软件保证了在有 27,375 个代币的单个钱包地址和分别有365个代币（共27,375个代币）的 75 个地址之间，赢得区块奖励的概率都是一样的。</p>
<p>中国的节点增长源自哪里？一种可能是中国视频流媒体公司宣布他们将在商业网络中部署 50,000 个节点。 我们可以折腾区块链，看看是否可以发现有关新节点的什么模式或细节。我们截取 3 月 24 日至 3 月 30 日的获得区块奖励的钱包，其中对同时满足 QTUM 少于 600 且 2018 年 1 月 1 日之后有过代币交易的钱包进一步过滤：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*-Mi-J1oN2KhPHpIRoD7l1A.jpeg" alt=""></p>
<p>直方图显示的是在不同日期转入（创建）500 QTUM 的块奖励获奖钱包数。因为块奖励与钱包重量成正比（还有一些随机影响），我们可以反过来处理块奖励计算，并回答这个问题：如果网络权重为 3340 万，一周内赢得 129 块奖励所需的钱包大小是多少？ [参考1] 答案是大约100万枚代币。如果你按 500 QTUM 部署 100万个，那么你将有 2000 个钱包，这肯定在中国的增长范围内，甚至可能有点低。在任何情况下，概率论表明如果你有一个有着 100 万个代币的钱包，或者每个有 500 个代币的 2000 个钱包，都能在一周内赢得 129 个块奖励。</p>
<hr>
<p>我希望你能享受这次关于区块链操作的讨论，并学到点东西。4月1日是复活节星期天，如果你关注复活节，那我希望你复活节快乐。</p>
<p>今天是复活节，我们在梵蒂冈写完博客。这里是基督教(Catholic Christianity)，圣彼得大教堂(St. Peter’s Basilica)和西斯廷教堂(the Sistine Chapel)之家。在西斯廷教堂，文艺复兴时期的艺术天才米开朗基罗花了10年（1502-1512）亲自画天花板和墙壁。 创世纪的标志性形象 – 创造亚当（所以亚当必须是人类的“<a href="https://qtum.info/block/1" target="_blank" rel="noopener">第1块(block 1)</a>”？）并给出了加密货币创世块的名称。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*i9tS3hJOpurRxNIvv1eEjQ.jpeg" alt=""></p>
<p>注意在线安全，我会在社交媒体上看到你</p>
<p>Jackson</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*F4j_asy0MBUS2hb-Y5ByBw.jpeg" alt=""></p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>在一周内获得 129 份块奖励，每天 600 块，也就是 4,200 块。钱包重量为：</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*DVu4tRWb7_ivXfJgGOEkew.jpeg" alt=""></p>
<ol>
<li>看我之前写在<a href="https://medium.com/@jb395official" target="_blank" rel="noopener">Medium</a>上的博客</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/960/1*kuYpVPZtss0PO5Y2TbqyCw.jpeg" alt=""></p>
<ol>
<li>不是从无人机拍摄，而是一些<a href="https://www.youtube.com/watch?v=eMGL1_nSjIk" target="_blank" rel="noopener">不错的视频</a>,关于圣彼得广场和圣彼得大教堂的，1080P。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 钱包和密钥]]></title>
      <url>/2018/07/12/2018-07-12-%E7%BF%BB%E8%AF%91-%E9%92%B1%E5%8C%85%E5%92%8C%E5%AF%86%E9%92%A5/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/wallets-and-keys-july-23-2018-92abf2a2d2bf" target="_blank" rel="noopener">https://medium.com/@jb395official/wallets-and-keys-july-23-2018-92abf2a2d2bf</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<p>Wallets and Keys — July 25, 2018</p>
<h1 id="钱包和密钥-2018年7月25日"><a href="#钱包和密钥-2018年7月25日" class="headerlink" title="钱包和密钥-2018年7月25日"></a>钱包和密钥-2018年7月25日</h1><p>本文考虑钱包和密钥。先简要介绍，再上例子。大多数例子基于浏览器上的 <a href="https://qtumwallet.org/" target="_blank" rel="noopener">Qtum Web 钱包</a>，类似于以太坊钱包 MyEtherWallet和MyCrypto。 Qtum Web 钱包运行在浏览器上，并不需要下载区块链，而是通过专用全节点连接到区块链。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*sxyzaMzH1k1QMIM4WOmawA.jpeg" alt="变色龙示威，[Yathin S Krishnappa](https://commons.wikimedia.org/wiki/User:Yathin_sk)摄，裁剪过"></p>
<p>Web 钱包是一个强大的变色龙，提供了很多恢复其他类型Qtum钱包的方式。没有 Web 钱包恢复不了的钱包（如果你用本博客的技术的话）。注意Web钱包具有完整QRC20令牌功能。</p>
<p>注意事项：本博客和钱包恢复步骤包括处理私钥和种子词。在你尝试这些步骤前，确保你完全理解流程且电脑没有恶意软件和病毒。简单地发送QTUM或代币到一个新钱包比乱动私钥更安全，但有时无法发送代币，比如，你的手机钱包掉马桶或被忘在浴缸里一整夜。永远不要把你的私钥或种子词给别人因为他们能拿走你的币。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*2co82T2PlBqiWtajX0A4uA.jpeg" alt=""></p>
<p>我是一名独立研究员，偶尔写博客和主持社交媒体，十分中意Qtum的技术指导。如果你对本文有想法或批评，请在社交软件上发给我或在下面评论。</p>
<hr>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>TL;DR Qtum 钱包的安装使用了随机生成的私钥或种子词。通过导出私钥或种子词，你能在各种钱包之间转移你的 Qtum 地址。重要的是保证私钥和种子词安全–保持你的私人私密！</p>
</blockquote>
<p>你知道钱包在区块链建立它们的身份时使用了一个 Qtum地址 “Q…”。 这个地址生成自公钥，而公钥生成自私钥。</p>
<p>Satoshi 给比特币取了错误的名字 “钱包”， 因为钱包实际上不存任何币或代币，它们存在区块链里。“钱包”的正确名字应该是“密钥库”因为钱包的主要工作是保存和管理私钥，通过私钥来支持交易。</p>
<h1 id="私钥和种子词"><a href="#私钥和种子词" class="headerlink" title="私钥和种子词"></a>私钥和种子词</h1><p><img src="https://cdn-images-1.medium.com/max/960/1*zQsSpuPYc66g-_peB2qwDA.jpeg" alt=""></p>
<p>一个私钥是一个简陋的字符串，但它是通往王国的关键。私钥（不用密码）允许存储在由私钥生成的地址中的QTUM访问。你需要十分小心地使用私钥，因为如果任何一个人（黑客、恶意软件、甜言蜜语的热心人）拿了你的私钥，他们就可以拿了你的钱。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*r8NdMNvHsshagpqlV-agtg.jpeg" alt=""></p>
<p>私钥也能用种子词生成。典型的是，钱包使用的种子词有两种，桌面钱包使用 bip-039 种子词，手机钱包使用“字典”种子词。这两种不相容，这个差别由 Web 钱包管理，它两种都能接受，是 bip-039 种子词则使用 “从助记符中恢复” ，是“字典”种子词则使用“从手机钱包恢复”。</p>
<p>比特币改进协议（Bitcoin Improvement Protocol 39 （bip-039)）给出了规则，生成私钥要使用从 2,048 个单词列表中导出的 12 个种子词[参考文献1]。手机钱包使用的“字典”单词一列是 4,216个类似bip-039的单词[参考文献2]。</p>
<p>输入种子词来恢复钱包有风险，因为私钥是从种子词里精确地生成而来，多一个符号或一个空格都会生成一个完全不同的私钥和完全不同的 Qtum 地址。如果你错输了种子词，你会创建给钱包创建一个你不期望的 Qtum 地址。如果你发币给那个地址，你很有可能永远无法再输入那个错字恢复钱包地址，这就意味着你的币永久丢失了。</p>
<p>下图显示了用于创建钱包或恢复钱包的所有 Web 钱包选项： </p>
<ol>
<li><p>生成新钱包 – 创建一个随机地址，下载一个密钥文件</p>
</li>
<li><p>用助记符创建 – 创建 12 个种子词生成的一个随机地址</p>
</li>
<li><p>从助记符恢复 – 使用 12 个 bip-039 种子词从另一个钱包恢复一个地址</p>
</li>
<li><p>从 WIF 恢复 – 从一个密钥中恢复一个地址</p>
</li>
<li><p>从手机钱包恢复 – 使用 12 个 “字典” 种子词从一个 Qtum 手机钱包中恢复一个地址</p>
</li>
<li><p>从密钥文件恢复 – 从 Web 钱包创建的密钥文件中恢复一个地址</p>
</li>
<li><p>从 Ledger 恢复 - 允许使用安全存储在 Ledger 硬件钱包中的私钥进行交易</p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*jbZEYQ8-jqb70LjZTJ8ZuQ.jpeg" alt=""></p>
<p>让我们逐个详细地介绍这些选项。</p>
<ol>
<li>生成新钱包</li>
</ol>
<p>生成新钱包会创建一个随机地址并下载一个密钥文件，其名称由 unix 纪元时间（以毫秒为单位）给出，例如 “1532053935952.txt”，其中包含由密码加密的文本，例如：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;“<span class="keyword">version</span>”:”<span class="number">0.1</span><span class="comment">",”content”:”tFz3ctzaITRniFjD6lDm1m8Zyu7LeNjNm/j2ao/hxoIhYAwqlC9iZYZ9TCermbrxF2ljd/wTXnRq/Ca6nYPYZNJ4GC0=”&#125;</span></span><br></pre></td></tr></table></figure>
<p>将密钥文件保存在计算机上，并备份到多个USB设备。重新启动 / 恢复用“生成新钱包”选项创建的钱包的唯一方法是通过加载密钥文件并输入密码来“从密钥文件恢复”（请参阅​​下面的步骤6）。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*wIaJRnmbnL0uMZ0ceN1uUw.jpeg" alt=""></p>
<p>使用又长又强的密码，而不是像“12345”这样的简单密码。</p>
<ol>
<li>用助记符创建</li>
</ol>
<p>“用助记符创建” 创建 12 个种子词生成的一个随机地址。你必须重新输入那 12 个种子词，确保你以及保存好种子词了。</p>
<p>用这个选项你只要下面的 3 步就能从助记符（种子词）中恢复钱包。你也能（必须能）通过“转储为密钥文件”创建一个密钥文件来备份钱包。现在你有 2 种方式恢复钱包，使用种子词和密钥文件。这很有效地使你恢复钱包的能力翻倍，但也意味着你现在需要安全地存储三样东西（密码，种子词和密钥文件）。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*kVzIe1b-8C_WO3GPruXO7w.jpeg" alt=""></p>
<p>注意，助记符不同于 Core 钱包密码短语（这是一种自由格式的文本密码短语并且不是种子词）</p>
<ol>
<li>从助记符恢复</li>
</ol>
<p>“从助记符恢复”使用 12 个 bip-039 种子词从另一个钱包恢复一个地址。输入种子词时，他们必须和原种子词字字匹配。这意味着全部小写（永远没有大写字母）因为这是种子词生成的形式。任何差异或额外单词都会为钱包创建一个不同的随机的地址，也就是它会显示 0 零钱，这很危险，如果你发送 QTUM 给这个新地址的话。确保你检查过地址并确认那就是你要的地址。安全一点的是从助记符恢复以保存密钥文件，并使用密钥文件恢复钱包以打开钱包。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*3xqlhNWHTzGOt5X1U40CrQ.jpeg" alt=""></p>
<ol>
<li>从 WIF 恢复</li>
</ol>
<p>WIF 电子钱包导入格式（Wallet Import Format） 是私钥一种纠错和缩短的格式[参考文献3]。你遇到的大多数私钥都使用WIF，通常长度为52个字符，而本地私钥使用 64 个十六进制字符。 Web钱包和Core钱包提供私钥作为WIF，此选项将允许从WIF私钥恢复钱包地址。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Pr47C0oYLqIihq1LjbJxiQ.jpeg" alt=""></p>
<ol>
<li>从手机钱包恢复</li>
</ol>
<p>“从手机钱包恢复”使用 12 个 “字典” 种子词从一个 Qtum 手机钱包中恢复一个地址。要让这种恢复正常工作，必须为每个字符正确输入手机钱包种子词（现在这听起来熟悉吗？）。单词总是小写，永远不会有大写字符。 此外，请勿在任何单词后面输入尾随空格，否则生成一个非常危险的新随机地址。 请确认这个选项创建的地址与你手机钱包中的地址相匹配（否则你输入的种子词不正确）。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*hdW_vYwAWFOqlo_TMtSrfQ.jpeg" alt=""></p>
<p>选择 CONFIRM 后，选择要恢复的地址：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*-72KpXo1e-I1CAzME0bYaQ.jpeg" alt=""></p>
<ol>
<li>从密钥文件恢复</li>
</ol>
<p>“从密钥文件恢复”从 Web 钱包创建的密钥文件中恢复一个地址。从电脑加载密钥文件并输入密码来恢复钱包地址。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*NviSnaTLVTYbDunYyVGXhA.jpeg" alt=""></p>
<ol>
<li>从 Ledger 恢复</li>
</ol>
<p>这个选项与其他选项的工作方式不同。“从 Ledger 恢复”允许使用安全存储在 Ledger 硬件钱包中的私钥进行交易。对于这个选项来说，私钥不会离开硬件钱包，而是 Ledger 签署交易（允许手动验证）和批准交易。</p>
<p>要使用 Ledger 硬件钱包，请在 Web 钱包上选择“从 Ledger 恢复”，连接你的 Ledger，登录并启动 Qtum 应用程序，然后选择CONNECT 来让 Web 钱包连接到 Ledger。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*4t8J2AThaRn_wiRKSY7ddw.jpeg" alt=""></p>
<p>选择默认路径 m/44’/88’/0’/0 并单击绿色挂锁按钮：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*RtixVkMflh7ai-Z3O5ghFw.jpeg" alt=""></p>
<p>在屏幕上默认路径 m/44’/88’/0’/0 选择所需的地址，然后单击绿色挂锁按钮：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*dyuJxEWOqPHcsVwzUHe9yA.jpeg" alt=""></p>
<p>这仅仅会启动标准 Web 钱包页面，因为私钥仍然锁定在Ledger中，没有可用的私钥，并且“转储到密钥文件” 按钮不可用。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*0F1OkKnfXaNqlTOp1dMh-w.jpeg" alt=""></p>
<hr>
<h1 id="测试网例子"><a href="#测试网例子" class="headerlink" title="测试网例子"></a>测试网例子</h1><p><img src="https://cdn-images-1.medium.com/max/960/1*KrwCpKAiDIp_cWbzep2dEQ.jpeg" alt="测试网资源管理器"></p>
<p>接下来是在各种 Qtum 钱包之间转移私钥或种子词来恢复钱包的一些真实示例。在本练习中，我使用Qtum Testnet，如果你需要在 Testnet 上进行复习，请参阅<a href="https://medium.com/@jb395official/testnet-and-qtum-mainnet-performance-january-1-8-e7af03a5d430" target="_blank" rel="noopener">这个博客</a>。</p>
<p><img src="https://cdn-images-1.medium.com/max/960/1*3v9Agworepo_g-Paz5bAtQ.jpeg" alt=""></p>
<p>让我说我对 Testnet QTUM 的价格发展感到非常失望。似乎 <a href="https://testnet.qtum.info/misc/rich-list" target="_blank" rel="noopener">Testnet QTUM 大佬</a> 正在操纵这种币抑制价格，这对于 Testnet QTUM 持有者来说是很伤心。 没有价格升值，而且这种币似乎永远停留在 0 satoshis。 Testnet QTUM 在任何主要交易所，任何小型交易所或任何交易所都没有交易对。 它基本上是一个毫无价值的币，我们唯一可以做的就是在 Qtum Testnet 上进行测试，所以我们就这样做。</p>
<h2 id="A-手机到-Web-钱包"><a href="#A-手机到-Web-钱包" class="headerlink" title="A. 手机到 Web 钱包"></a>A. 手机到 Web 钱包</h2><p>要在网络钱包上恢复 Qtum 手机钱包，请在移动设备上转到个人资料 - 电子钱包备份并输入你的个人识别码以查看种子词（你之前也应保存它们）。 在 Web 钱包上，选择“从手机钱包恢复”，准确输入种子词，然后选择确认。 从 Qtum 地址列表中（除非你在移动设备上选择了其他地址，否则应该是最重要的地址）找到所需的 Qtum 地址并选择 CHOOSE。检查恢复的地址是否与你的移动钱包地址相同（如果没有，请重新输入种子词并仔细检查所有字符）。使用“转储作为密钥文件”成功还原后，你可能要备份密钥文件。</p>
<h2 id="B-Core-到-Web-钱包"><a href="#B-Core-到-Web-钱包" class="headerlink" title="B. Core 到 Web 钱包"></a>B. Core 到 Web 钱包</h2><p>在 Qtum Core 钱包（显示 qtum-qt）上，选择 “帮助” - “调试窗口” - “命令”，并输入 dumpprivkey 命令需要的所有地址（有关多个地址的信息，请参阅参考资料4）。 复制 WIF 私钥，这里是 “cPuz…”。 在 Web 钱包上选择“从 WIF 恢复”，粘贴私钥，然后单击确认。 使用“转储为密钥文件”成功还原后，你可能要备份密钥文件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*ujFP9icgoj1eEZ0-Fr2rVA.jpeg" alt=""></p>
<p>C. Web 到 Core 钱包</p>
<p>这与上面的 B 正好相反。 在 Web 钱包上选择“查看钱包信息”，查看私钥并复制私钥。 在 qtum-qt Core 钱包上选择“帮助” - “调试窗口” - “控制台”并输入命令 importprivkey 并粘贴私钥：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*0Rc6meMnP-lpORRXl8fyFg.jpeg" alt=""></p>
<p>Core 钱包将扫描区块链一两分钟，调试窗口标题将显示（Not Responding），Console 响应为“null”，你应该看到新地址加了 QTUM 余额。 你应该对 wallet.dat 文件重新备份，因为它包含一个新的私钥。 </p>
<p>D. 手机到 Core 钱包</p>
<p>显然，做 A - 手机到 Web 钱包再做 C - Web 到 Core 钱包。</p>
<p>E. Qbao 到 Web 钱包</p>
<p>在Qbao上转到“我” - “助记符导出” - 输入你的 PIN（密码）并复制助记符（12个种子词 - 你之前应该保存这些）。 在 Web 钱包上，选择“从手机钱包恢复”，并仔细输入12个种子字（无额外空格）并选择确认。 通过选择 CHOOSE 从“从手机钱包恢复”列表中选择所需的地址。 你可能要使用“转储为密钥文件”来保存密钥文件。</p>
<p>F. Electrum 到 Web 钱包</p>
<p>要使用种子词将地址从 Electrum 钱包转移到 Web 钱包，你需要在初始安装中将 Electrum 设置为与 Qtum 手机种子词兼容（然后使用手机钱包种子词来恢复 Electrum 上的手机钱包 ）。这个设置的 Electrum 配置截屏为：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*3pODwbYSz0uYGPaesLpgaQ.jpeg" alt=""></p>
<p>在这个截图之后，你输入手机钱包种子词（这些单词也与“从手机钱包中恢复”的 Web 钱包选项兼容）。</p>
<p>如果你尚未将 Electrum 钱包设置为与手机钱包兼容，则可以使用私钥恢复 Web 钱包上的 Electrum 钱包。 在 Electrum 钱包上选择“钱包” - “私钥” - “导出”，你将导出文件 qtum-electrum-private-keys.csv 或只复制一个私钥。 在 Web 钱包上选择“从 WIF 恢复”，粘贴私钥并选择确认。 检查钱包地址是否正确。 你可能需要使用“转储为密钥文件”来保存密钥文件。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*4q46uLQwpBZ-X4u2t6OX9w.jpeg" alt=""></p>
<p>F. Core 到 Core</p>
<p>见下面的参考文献4。</p>
<hr>
<p>我希望这个关于私钥和种子词的解释有助于你理解钱包。请记住，钱包不会存储硬币或代币。 硬币和代币总是存储在区块链中，但钱包存储私钥并使用私钥管理交易。 直接使用私钥和种子词时请务必小心。 确保你的计算机不含病毒和恶意软件，并且永远不要使用在线存储来存储私钥，种子词或密码</p>
<p>保持在线安全。</p>
<p>Jackson</p>
<hr>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol>
<li><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki" target="_blank" rel="noopener">bip-039 参数</a>。 <a href="https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt" target="_blank" rel="noopener">bip-039种子词 英语单词表</a>。 如果你的 bip-039 种子词不在这个表中，那么你写错了！</p>
</li>
<li><p><a href="https://github.com/qtumproject/qtum-android/blob/5a14b25a82fe04d9436147d776d1482e7f7ad242/app/src/main/java/org/qtum/wallet/utils/DictionaryWords.java" target="_blank" rel="noopener">“字典”种子词列表</a>。 如果你的种子词不在这个列表中，你就错了！</p>
</li>
<li><p>钱包导入格式（Wallet Import Format），比特币的一个<a href="https://en.bitcoin.it/wiki/Wallet_import_format" target="_blank" rel="noopener">例子</a>。</p>
</li>
<li><p>转移私钥 - Core 到 Core 钱包（显示为 qtum-qt Desktop GUI Core 钱包）</p>
</li>
</ol>
<p>在导出私钥之前，最好更新防病毒软件并运行完整的防病毒扫描。 永远不要把私钥给任何人，他们可以拿走你的 QTUM。</p>
<ol>
<li>如果你有加密钱包，请解锁钱包（而不是仅用于 staking）</li>
</ol>
<ul>
<li>转到“设置” - “解锁钱包”，取消选中“仅限 staking”，输入你的密码并按“确定” </li>
<li>你应该看到小挂锁符号搭扣打开了 </li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*AIswxXEdSuAIpFnoPEfjAg.png" alt=""></p>
<ol>
<li>选择要导出私钥的 Qtum 地址</li>
</ol>
<ul>
<li><p>转到“文件” - “接收地址…”，然后复制 Qtum 地址以导出私钥</p>
</li>
<li><p>选择地址并按 COPY，关闭该窗口 </p>
</li>
<li><p>如果你的钱包有多个持有 QTUM 的接收地址，你可以找到哪些地址持有 QTUM，请转到“文件” - “调试窗口” - “控制台”并输入命令 listaddressgroupings 。</p>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*vTy9q9TrXS5QHJEt9KknMQ.png" alt=""></p>
<p>滚动列表并复制保存 QTUM 的地址以导出这些私钥</p>
</li>
</ul>
<ol>
<li>打开控制台并输入命令以导出私钥</li>
</ol>
<ul>
<li><p>转到“文件” - “调试窗口” - “控制台”</p>
</li>
<li><p>在控制台底部，开始输入命令dumpprivkey</p>
</li>
<li><p>然后粘贴你刚刚复制的地址。 这个命令看起来像这样：</p>
<p><code>dumpprivkey QskjfhGF28374Daskfjh238742837482374</code><br><img src="https://cdn-images-1.medium.com/max/1280/1*DaZMckv-xWHur4FZNLFAtA.png" alt=""></p>
</li>
<li><p>输入命令</p>
</li>
</ul>
<ol>
<li>私钥将作为包含 52 个字符的文本字符串显示在控制台上</li>
</ol>
<ul>
<li>将私钥复制到文本文件中并保证其安全。这是一个未加密的私钥，任何拥有这个私钥的人都可以使用你的 QTUM。 切勿将私钥交给任何人。</li>
</ul>
<ol>
<li><p>要在第二个 Qtum Core 钱包上导入这个私钥，请启动该钱包并将其解锁（如果已加密）</p>
</li>
<li><p>在控制台中输入 importprivkey 命令</p>
</li>
</ol>
<ul>
<li><p>转到“文件” - “调试窗口” - “控制台”，并在底部开始输入命令importprivkey </p>
</li>
<li><p>复制并粘贴先前转储的私钥。 该命令看起来像这样：<br><code>importprivkey Siufy238746FGasj127356asjdhYTVss93845kajsfmyQTUM</code><br><img src="https://cdn-images-1.medium.com/max/1280/1*zQ60gUGNG0AGvu5X4wgUXw.png" alt=""></p>
</li>
<li><p>输入命令</p>
</li>
<li><p>钱包将重新扫描本地区块链大约两分钟，以查找此新地址的交易，在此期间，调试窗口标题将显示“无响应(Not Responding）”</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*Nx79UjkLWp6vezmBGlT-Qg.png" alt=""></p>
<ul>
<li>然后响应 “null”</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1280/1*jCEK9RvFGL9PWx6kc_pqjw.png" alt=""></p>
<ul>
<li>你应该看到新私钥的未花费的交易的值已添加到钱包的总余额中。</li>
</ul>
<p>你可能要将所有转移过的私钥（它将与你在步骤 2 中开始的地址）中的所有 QTUM 发送到另一个地址，因为私钥已导出并暴露在加密钱包之外（丢弃这个私钥）。 </p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 以太坊的挑战者：量子链（QTUM）]]></title>
      <url>/2018/07/06/2018-07-06-%E7%BF%BB%E8%AF%91-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E6%8C%91%E6%88%98%E8%80%85-%E9%87%8F%E5%AD%90%E9%93%BE(QTUM)/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://strategiccoin.com/the-ethereum-challengers-qtum/" target="_blank" rel="noopener">https://strategiccoin.com/the-ethereum-challengers-qtum/</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="以太坊的挑战者：量子链（QTUM）"><a href="#以太坊的挑战者：量子链（QTUM）" class="headerlink" title="以太坊的挑战者：量子链（QTUM）"></a>以太坊的挑战者：量子链（QTUM）</h1><p>– Guest Contributor</p>
<p><a href="https://twitter.com/bitgenstein" target="_blank" rel="noopener">Peter Keay</a> 是 <a href="https://twitter.com/icoalert" target="_blank" rel="noopener">ICO Alert</a> 的全球化总监，也是 Bitgenstein’s Table加密哲学播客节目的主持人。他是“以太坊的挑战者”系列作者。 这篇文章最初发表在<a href="https://blog.icoalert.com/the-ethereum-challengers-ep-6-qtum-qtum-d3278493c61d" target="_blank" rel="noopener">这里</a>。 该系列涵盖的其他竞争对手包括 <a href="https://bitgenste.in/rsk" target="_blank" rel="noopener">RSK</a>，<a href="https://bitgenste.in/eos" target="_blank" rel="noopener">EOS</a>和<a href="https://bitgenste.in/ada" target="_blank" rel="noopener">Cardano</a>。</p>
<p>很多加密货币用户和投资者都十分支持比特币或以太坊，甚至达到了“极端主义者”的程度。</p>
<p>极端主义者们认为，他们喜欢的币将占据市场主导地位并广泛应用，而所有其他加密货币最终都会消亡 - 或者只是作为主导币的测试网络。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*WFAo_yOnaJnRnQNweUymow.jpeg" alt="有些人只看到辩论的幽默。"></p>
<p>实际上，BTC和ETH货币是当今最重要的数字资产，而且在可预见的未来可能也是如此。 然而比特币和以太坊是完全不同的，它们的优点和缺点都不一样。</p>
<p>所以，在2016年，一个简单的想法诞生了：</p>
<p>如果加密货币同时拥有比特币和以太坊的优点会怎样？</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*SXhk8TmWZlFV805WmRVgmw.png" alt="以太坊经典和比特币现金的优势，个人看法。（The Cryptos漫画）"></p>
<h2 id="遇见-Qtum。发音为“Quantum”"><a href="#遇见-Qtum。发音为“Quantum”" class="headerlink" title="遇见 Qtum。发音为“Quantum”"></a>遇见 Qtum。发音为“Quantum”</h2><blockquote>
<p>译者注：发音和中文“狂腾”相近</p>
</blockquote>
<p>Qtum 结合了比特币技术和以太坊技术。</p>
<p>在“以太坊的挑战者”的系列中，我已经为大多数挑战者做了一些相关概念的总结。 例如，我们讨论了<a href="https://bitgenste.in/rsk" target="_blank" rel="noopener">图灵完整性和侧链与RSK</a>，<a href="https://bitgenste.in/eos" target="_blank" rel="noopener">PoS和DPoS与EOS</a>，以及<a href="https://bitgenste.in/ada" target="_blank" rel="noopener">用Cardano的形式验证</a>。</p>
<p>自从 Qtum（请记住：在你的心里请读作“Quantum”）将其平台作为比特币和以太坊的结合来推广时，让我们来谈谈两个主要的区块链交易模型。 然后，我们将讨论 Qtum 的其他功能，包括一些近期的公告，并看看它如何处理我们的七大问题。</p>
<p>所以，首先是交易模型。比特币使用 UTXO 模型。 以太坊使用帐户模型。 Qtum 想两者都要。</p>
<h2 id="UTXO-模型（BTC）vs-账户模型"><a href="#UTXO-模型（BTC）vs-账户模型" class="headerlink" title="UTXO 模型（BTC）vs. 账户模型"></a>UTXO 模型（BTC）vs. 账户模型</h2><p>你是否曾把 BTC 从一个地址发送到另一个地址，结果在块浏览器中看到你的帐户实际发送了更多的BTC？</p>
<p>这是 UTXO 模型的工作原理决定的，但对于习惯帐户模型的人来说，这并不直观。 事实上，看你的地址，显然发送的 BTC 比告诉你的要多得多，这十分可怕。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*-SBxQwqWIf1V5G94Uz1uCw.gif" alt="我把它交给了美联储。"></p>
<p>你习惯帐户模型，在那里你的帐户有余额。</p>
<p>例如，你的以太坊地址也是你的以太坊帐户。 你可以从余额中支出并接收余额付款。</p>
<p>虽然建议仅使用一次地址 - 出于隐私和安全的原因 - 实际上帐户模型会激励用户重复使用地址，因为这是最简单的用钱方式。</p>
<blockquote>
<p>以太坊账户类型：以太坊有两种账户：由私钥控制的账户 - 如果你使用ETH，则为你所有 - 以及由合约代码控制的账户。<br>私钥帐户制作并签署要发送给其他帐户的信息，而合约帐户会在收到信息时激活其代码以执行各种交易（包括发送其他信息，签订合约以及读取或写入自己的存储）。请注意，区块链中的“信息”包括交易。</p>
</blockquote>
<p>帐户模型使用类似于银行帐户的余额管理系统。</p>
<p>但是像比特币这样的 UTXO（Unspent Transaction Output，未花费的交易输出）模型是不同的。</p>
<p>用 UTXO 模型的感觉类似于你只用支票付款，一直持有直到你需要用掉它。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*xY4xGhypSmxWvPgpdhwCPA.png" alt="比特币是你最卑微的仆人。 并且把财富作为支票的内容。"></p>
<p>正如你不能在银行只兑现支票的某一部分，而是必须兑现全部。在比特币里，一个地址收到一定钱后又只想只花掉其中一点，这样不行，它必须花掉所有的钱。</p>
<p>当你发送 BTC 时，你会花费 “vins” 并生成新的 “vouts”. UTXO 无法重复使用，所以通过花费 vins 并生成 vouts 后 UTXO 就被销毁了。</p>
<p>因此，如果你收到一个声称有 3.152 BTC 的 UTXO vin，然后发送 2.1 BTC，你实际上必须发送整个 3.152 BTC - 在这种情况下，作为两个 vouts：〜2.1给你的收件人和~1.052给你自己。 （小的采矿费会略微降低实际数量。）你收到的 3.152 BTC的 UTXO 已完成使命且无法重复使用，但 BTC 仍然存在于新的 UTXO 中。</p>
<p>在后台，你创建的 vout 脚本（发送）需要vin脚本的许可。 换句话说，为了花钱，你必须有一张有效的支票或多张支票，证明你过去收到过这笔钱（或者更多），并且支票一定不能撕掉。</p>
<p>因此，在帐户模型中，你的余额会被检查并借记和贷记，这不是比特币的工作方式。</p>
<p>如果你将BTC从Ledger钱包发送给其他人并在一个块代理商上检查交易，你可能已经注意到了这一点。</p>
<p>看似任意数量的BTC会被发送出去。 但你发送的实际金额将发送给收件人，剩余部分将转到一个你能控制的新地址。 你没有发送给收件人的BTC仍然是你的，但会被发送到新地址。</p>
<p>这是 UTXO 的工作原理决定的。 同样，如果你收到了两个分别为 1.1 BTC 和 0.8 BTC 的 UTXO，并且你想花费 1.3 BTC，那么两个 UTXO 都将 “被花费”，其余的将作为新的 UTXO 发送给你 - 在这种情况下，有 0.6 BTC，减去交易费用。</p>
<p>为什么这可能比简单的账户余额系统更好？</p>
<p>UTXO 模型激励用户限制他们对地址的重复使用，因为每次花费时 BTC 都会自动发送到新地址。</p>
<p>这样更安全，即使是对于<a href="https://bitgenste.in/quantum" target="_blank" rel="noopener">量子计算（quantum computing）</a>这样的进步也是如此，因为在你的地址开始使用之前，你的公钥不会泄露。 你的公共地址是公钥的哈希，而不是你的公钥本身，即使很多人错误地使用这些术语。 公钥和地址是相关但不同的东西。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*9HAqy2m1Y0WHtSx2UQPvvw.png" alt="仅仅因为有人知道你的地址并不意味着他们有你的公钥。 除非你透露了它。"></p>
<p>但是，一旦地址开始花钱，该地址的公钥就会发布到区块链，因此理论上容易受到攻击，立刻就暴露了。 但是，如果地址的余额为空，即使成功攻击你的公钥也毫无价值 - 它发送到了你控制的新地址，并带有未公开的公钥 - 因此当BTC将“零钱”发送到新地址时，你将重新获得未知公钥安全上的好处。</p>
<p>一次性地址也具有隐私优势。 这种从地址到地址发送 BTC 的行为使得跟踪个人变得更加困难。 BTC 本身仍然可以很容易被跟踪，但在许多情况下，很难确定所涉及的大量地址的所有权。</p>
<p>其他代币以其他方式实现了类似或更高级别的隐私优势和安全性，不仅拥有这些优点，同时还保留了重复使用地址的便利性。 然而，这些代币在测试时间上没有比特币长，或者程度上没有比特币剧烈，并且他们的解决方案可能存在无法预料的复杂情况。</p>
<p>如果像以太坊这样的帐户模型加密货币的用户遵循仅使用每个地址一次的推荐做法，他们享有与UTXO提供的相同的安全和隐私权益。 但在比特币中，用户更有可能遵循这一最佳实践，因为它是默认行为。</p>
<blockquote>
<p>附注：这些优点不适用于不再受欢迎的单地址钱包。 单地址钱包将UTXO的“零钱”发送回同一地址。<br>它们适用于其他两种主要类型：<br>1）随机生成新地址的钱包，现在也不常见。 当发送BTC时，用过的UTXO的“零钱”被发送到新的随机地址。 这是有风险的，因为如果钱包丢失，自上次备份以来生成的随机地址也将丢失。</p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/640/1*aRc8XGDo6I7T_P0xmjMftw.jpeg" alt="而且，在至少一种情况下，密钥实际上不是随机生成的而是后来被盗。"></p>
<blockquote>
<p>2）能生成确定地址的钱包。 你今天用BTC的钱包可能会确定性地创建地址。 例如，硬件钱包和Electrum桌面钱包都是确定性的。 它们包含几乎无限的数学生成地址池。 无论何时发送BTC，这些钱包都会将用过的UTXO发送的“零钱”发送到新生成的地址。 确定性地址生成优于随机地址生成，因为一个种子可以重新生成所有相同的地址，从而提供更好的备份和恢复功能。</p>
</blockquote>
<h2 id="比特币的简单支付验证"><a href="#比特币的简单支付验证" class="headerlink" title="比特币的简单支付验证"></a>比特币的简单支付验证</h2><p>UTXO模型的一个优点是 SPV，(Simplified Payment Verification，简单支付验证），允许客户端验证一个交易是否包含在一个块中，而无需下载和验证整个区块链。</p>
<p>简而言之，希望下载的数据更少，因为任何人一旦把钱用出去，UTXO输出就会被遗忘。</p>
<p>块标题足以进行验证，因为它们可以提供 <a href="https://hackernoon.com/merkle-trees-181cb4bc30b4" target="_blank" rel="noopener">Merkle branchas</a> “包含证明（proof of inclusion）”在 Satoshi 的<a href="https://bitcoin.org/bitcoin.pdf" target="_blank" rel="noopener">原白皮书</a>中描述了 SPV 背后的想法，尽管不是所有的功能。</p>
<p>这种轻量级验证方法确实存在一些风险，但是 <a href="https://bitcoin.org/en/developer-guide#application-of-bloom-filters" target="_blank" rel="noopener">Bloom 过滤器</a>和连接到多个节点而不是一个节点的各种措施用于缓解此方法带来的安全问题。否则，轻型比特币客户端联系的完整节点可能会有<br>1) 通过假装不存在的交易欺骗用户或<br>2）获得所需的数据轻松跟踪比特币用户。</p>
<h2 id="结合两种模型：Qtum"><a href="#结合两种模型：Qtum" class="headerlink" title="结合两种模型：Qtum"></a>结合两种模型：Qtum</h2><p>Qtum 以 UTXO 模型及其 SPV 功能为基础运行，但增加了以太坊虚拟机 - 并且还支持其他虚拟机，我们稍后会介绍。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*xRqWbdSxhH6PKQOk4BLd5g.png" alt=""></p>
<p>此外，尽管 UTXO 模型（BTC，BCH，LTC和DGB都是UTXO代币的例子）不支持退款，但 Qtum 可以通过创建新输出来退款。 在以太坊设置 “gas 限制” 并获得所有未使用的有作用的 gas 退款，因为以太坊没有运行在 UTXO 模型上。 但Qtum已成功启用此退款功能，即使它基于比特币的交易模式。</p>
<p>使用比特币运行，Qtum 可以轻松采用比特币开发，如 SegWit 和闪电网络（Lightning Network），以及之后的<a href="https://github.com/bitcoin/bips" target="_blank" rel="noopener">比特币改进建议</a>。</p>
<p>使用以太坊的虚拟机运行，允许 Qtum 支持 Turing 完整的智能合约，这是比特币无法支持的。</p>
<h2 id="为什么比特币脚本不够用"><a href="#为什么比特币脚本不够用" class="headerlink" title="为什么比特币脚本不够用"></a>为什么比特币脚本不够用</h2><p>比特币的智能合约能力非常有限 - 尽管 RSK 和 CounterParty 正致力于以不同的方式在比特币区块链上实现智能合约。</p>
<p>特别是，比特币的脚本语言没有循环功能。 根据给定的变量，代码不能执行多次。 这一点或其他因素使比特币语言只能完成最简单的任务。</p>
<p>因此，Qtum 通过在比特币代码之上允许以太币虚拟机，在比特币代码库上实现图灵完备脚本 - 尽管不在实际比特币区块链上。</p>
<p>为了做到这一点，它中间需要多一层。</p>
<h2 id="Qtum-帐户抽象层"><a href="#Qtum-帐户抽象层" class="headerlink" title="Qtum 帐户抽象层"></a>Qtum 帐户抽象层</h2><p>为了使智能合约虚拟机及帐户模型适用于比特币的无帐户UTXO模型，Qtum包含了一个“帐户抽象层”。正如你可能想象的那样，让基于帐户的系统在无帐户底层上运行需要在 AAL（Account Abstract Layer，用户抽象层） 做一些复杂工作。</p>
<p>最终结果是为用户提供了 UTXO 和开发人员优势的图灵完备的以太坊虚拟机的优势。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*VxxBCg15Nx_u7YLmPn06vg.png" alt="和区块链一样，它并不那么简单，但你 get 到了要点。"></p>
<h2 id="新操作码"><a href="#新操作码" class="headerlink" title="新操作码"></a>新操作码</h2><blockquote>
<p>操作码：代码行的一部分，用于标识将要执行的操作。 有关其他示例，请查看比特币的可用操作码。 这些操作码是比特币脚本语言的所有功能。</p>
</blockquote>
<p>寻求为比特币添加智能合约功能的解决方案，例如 RSK，通常需要一些新的操作码，且需要比特币来升级其代码。</p>
<p>Qtum 不需要比特币分支来添加新的操作码，因为它已经将比特币的代码分配到一个新项目中，因此能够简单地添加新的操作码。</p>
<blockquote>
<p>技术说明：Qtum仍然使用比特币脚本语言，但是三个新的操作码使虚拟机能够在此基础上运行</p>
<ul>
<li>OP_EXEC：执行特定的以太坊虚拟机字节码。</li>
<li>OP_EXEC_ASSIGN：与上述相同，可以包含合约地址和合约数据。它可选择将资金转移到智能合约上。</li>
<li>OP_TXHASH：推送当前执行的交易的ID哈希。<br>Qtum 必须允许智能合约在添加到区块链时立即执行，因此前两个操作码将以特殊优先级进行处理。</li>
</ul>
</blockquote>
<p>通过添加这些操作码及帐户抽象层，Qtum 成功允许比特币代码库支持以太坊虚拟机。</p>
<p>现在，任何以太坊应用程序都可以在Qtum上运行，并享受UTXO基础带来的好处。</p>
<p>但是等等……还有更多。</p>
<h2 id="权益证明，模板和向后兼容性"><a href="#权益证明，模板和向后兼容性" class="headerlink" title="权益证明，模板和向后兼容性"></a>权益证明，模板和向后兼容性</h2><p>Qtum对以太坊虚拟机的实现并不意味着它包含了以太坊的局限性。</p>
<p>像比特币一样，以太坊是建立在工作量证明之上的。节点消耗大量能量，首先解决非常困难的难题，并声称采矿奖励。我们在<a href="https://bitgenste.in/eos" target="_blank" rel="noopener">EOS第2章中</a>里讨论了的共识模型，包括工作量证明。</p>
<p>Qtum取而代之的是建立在 Peercoin（PPC）之上的 Proof of Stake 模型，这是第一个使用赌注模型生效的加密货币。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*RyqgUQ-pGjYU47LX7LasHw.png" alt="Qtum延续了用权益证明征服强大神仙的悠久传统。"></p>
<p>Stof of Stake共识模型允许Qtum在没有高计算能力需求和每秒更多交易数的情况下运行。</p>
<p>如果您想详细阅读有关权益证明的信息，特别是与工作量证明相比较，我推荐以太坊团队成员撰写的<a href="https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ" target="_blank" rel="noopener">文章</a>。 不可否认，许多其他货币已经转移到了权益证明，以太坊计划在某些时候部分或全部这样做。</p>
<p>Qtum 还在实施模板以简化 dApp 开发 - 这是 NEM 等备选方案的重点，也是通过Crowd Machine 等项目引入以太坊的。</p>
<p>Qtum确实提供了一项功能，与 PoS 和模板不同，以太坊很可能永远不具备：向后兼容性。 Qtum 节点即使没有完全更新到最新版本的 Qtum，也可以参与共识。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*137VSsgkWHEwgn6lxK0tNA.png" alt=""></p>
<h2 id="Qtum-X86-虚拟机"><a href="#Qtum-X86-虚拟机" class="headerlink" title="Qtum X86 虚拟机"></a>Qtum X86 虚拟机</h2><p>Qtum AAL最着名的是允许使用以太坊虚拟机，但它也允许用其他虚拟机。</p>
<p>在5月23号，即本文发布的几个星期前，Qtum在<a href="https://blog.qtum.org/qtum-x86-virtual-machine-qtum-enterprise-version-progress-update-2ff249968e2b" target="_blank" rel="noopener">韩国 Qtum X86 虚拟机会议</a>上做了一个演讲。X86 VM 允许开发人员使用许多不同的编程语言。提到的C和C++已经支持了，其他像Rust, Python 和 Go 正在路上。</p>
<p>目前的Qtum路线图将 X86 集成放在 2018 年末。</p>
<h2 id="Qtum-Enterprise（Qtum-X）"><a href="#Qtum-Enterprise（Qtum-X）" class="headerlink" title="Qtum Enterprise（Qtum X）"></a>Qtum Enterprise（Qtum X）</h2><p>Qtum Enterprise（Qtum X）也在同一个5月23日的会议中描述，是一项旨在吸引企业的新举措。 Qtum X 将是一个权威证明（Proof of Authority）系统，允许每秒更多的交易。</p>
<p>Qtum X 和 Qtum 是独立的产品，至少目前是这样。 我还没有找到关于这两种产品是否可以互通的任何信息，即它们是否将共享相同的货币。</p>
<p>宣布之后可能还需要很长时间才能获得许多细节，特别是英语版，所以如果有读者有更多信息，我会十分感谢分享。</p>
<h2 id="连接到世界"><a href="#连接到世界" class="headerlink" title="连接到世界"></a>连接到世界</h2><p>除了Qtum X和X86虚拟机之外，Qtum还有许多其他项目正在开发中，旨在吸引开发人员和企业加入Qtum生态系统。</p>
<p>API。 模板。 功能齐全的SDK。 原子交换。 Qtum 卫星。</p>
<p>原子交换：将一种加密货币交易给另一种货币而不涉及任何第三方。 在典型的原子交换中，在一个区块链上启动时间锁定的智能合约。 如果另一方未在规定时间内交付所交易的货币，则该交易将被取消。</p>
<p>是的，我不是在开玩笑说卫星。 与Nexus一样，Qtum计划与SpaceChain合作发射卫星。 看来，与前者相比，Qtum在审查阻力之后，主要是在现阶段拉动宣传噱头 - 正如他们所说的那样，“无可争议地证明了我们决心成为世界领先的加密货币和区块链平台。”</p>
<p>好吧，让我们把话题带回地球。</p>
<h2 id="Qtum如何回答我们的七大问题？"><a href="#Qtum如何回答我们的七大问题？" class="headerlink" title="Qtum如何回答我们的七大问题？"></a>Qtum如何回答我们的七大问题？</h2><p><img src="https://cdn-images-1.medium.com/max/800/1*u1FBYguBW9JqCVrAL6l1JQ.png" alt=""></p>
<p>1.可扩展性</p>
<p>由于它是从比特币和以太坊构建的，因此Qtum每秒没有大量的交易。 权益证明（Proof of Stake）有助于实现 SegWit，将 TPS 提升至 60 左右。截至我看到的最新信息，Qtum 未来的可扩展性开发可能包括脱链渠道抑或类似于以太坊提议的分片的功能。 Qtum Enterprise（Qtum X）将使用授权证书来实现更高的交易吞吐量。 目前尚不清楚Qtum X和Qtum将如何或是否将在此时集成，但由于其可扩展性优势，企业可能对Qtum X感兴趣。</p>
<p><img src="https://cdn-images-1.medium.com/max/480/0*-sNt1eVMIsXAVRif" alt=""></p>
<p>2.治理</p>
<p>Qtum的股权证明，最初建立在PeerCoin开创性的PoS代码之上。Qtum确实有一个分散治理协议（DGP）。 Qtum X 将在权威证明上运行。</p>
<p>Qtum区块链基金会指导DGP范围之外的决策。</p>
<p>3.开发复杂性</p>
<p>虽然Qtum可以使用以太坊的EVM和Solidity，但新的Qtum X86虚拟机还是会允许 C 和 C++ 和之后其他语言比如 Ruby, Go, Python. 与以太坊不同，Qtum的EVM始终向后兼容。</p>
<p>eSML是Qtum的计划语言，具有正式的验证能力。我们在<a href="https://bitgenste.in/ada" target="_blank" rel="noopener">episode #3 (Cardano)</a>讨论了正式验证。正式验证是 Cardano 的主要关注点。 公平地说，一些第三方解决方案以及可能即将推出的 Casper 也将为以太坊引进正式验证。</p>
<p>4.时间轴</p>
<p>Qtum 很活跃，新的 X86 虚拟机将在今年晚些时候集成。 Qtum X（Qtum Enterprise）项目时间表在撰写本文时尚不清楚。</p>
<p>5.广义特征</p>
<p>如上所述，模板计划为应用程序开发人员提供通用功能，减少重复性工作和错误倾向。 除此之外，尚未出现广义特征。 随着X86虚拟机的集成，我不会惊讶于看到许多有趣的功能。</p>
<p>6.可采纳性</p>
<p>几个基本的 Qtum 可采用性功能已经到位，例如 Ledger 钱包集成，但由于以业务为中心的 Qtum X 仍处于早期开发阶段，我怀疑我们不会知道最终的 Qtum dApp 生态系统以及后来的游戏有多么对用户友好。</p>
<p>Qtum 确实有交易费用，但是像以太坊的费用一样，它们可能最终会被企业从用户那里抽象出来。 我没有找到有关 Qtum 上人类可读的地址计划的信息。</p>
<p>7.市场地位</p>
<p>据我所知，Qtum没有像我们迄今为止讨论过的大多数解决方案那样大的开发者社区。 然而，在Qtum上运行了一些dApp和ICO。 如果Qtum区块链基金会能够在加强Qtum营销的同时快速实现计划中的X86 VM，Qtum X和更多功能，那么它可能会使它们成为强大的以太坊挑战者。</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*YbD8z2mQTGnDUvETLRg_WA.png" alt=""></p>
<p>当然，随着我们通过市值进一步向下移动，我们应该期待看到处于早期阶段的项目。 他们根本没有顶级项目那么多的嗡嗡声 - 也没有多少钱。</p>
<p>Qtum带来了其他智能合约平台的许多优势，以及它自己的一些重点。 因此，尽管我大声地认为Qtum确实需要一个新的标识，但我很高兴看到该项目的去向。</p>
<p>毕竟，在<a href="https://bitgenste.in/neo" target="_blank" rel="noopener">NEO的第4集</a>中，我们讨论了中国项目在中国的表现如何比外国项目更好。 事实上，好多了。 中国的强大优势可能会使Qtum成为以太坊的严峻挑战者。</p>
<p><img src="https://cdn-images-1.medium.com/max/640/1*8-ezmr50c9Frcnkc0ppQOg.gif" alt=""></p>
<p>与本系列中的所有平台一样，我将密切关注 Qtum 及 X86 VM 和 Qtum X 的发布。</p>
<p><a href="https://twitter.com/bitgenstein" target="_blank" rel="noopener">让我知道你对Twitter上Qtum的看法</a></p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 深入理解以太坊虚拟机 - 如何解释一个智能合约的方法调用]]></title>
      <url>/2018/06/30/2018-06-30-%E7%BF%BB%E8%AF%91-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E6%9C%BA-EVM%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@hayeah/how-to-decipher-a-smart-contract-method-call-8ee980311603" target="_blank" rel="noopener">https://medium.com/@hayeah/how-to-decipher-a-smart-contract-method-call-8ee980311603</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="如何解释一个智能合约的方法调用"><a href="#如何解释一个智能合约的方法调用" class="headerlink" title="如何解释一个智能合约的方法调用"></a>如何解释一个智能合约的方法调用</h1><hr>
<p>在本系列的前几篇文章中，我们已经看到了 Solidity 如何在 EVM 存储中表示复杂的数据结构。但是如果没有办法与数据交互，数据就毫无用处。智能合约是数据与外部世界交互的中介。</p>
<p>在本文中，我们将看到 Solidity 和 EVM 如何使外部程序能够调用合约的方法并使其状态发生变化。</p>
<p>“外部程序” 不限于 DApp / JavaScript。 任何可以使用 HTTP RPC 与以太坊节点进行通信的程序都可以通过创建交易来与部署在区块链上的任何合约进行交互。</p>
<p>创建一个交易就像创建一个 HTTP 请求。 Web 服务器可以接受你的 HTTP 请求并更改数据库。同理，网络将接受一个交易，然后底层区块链扩展以包括状态的改变。</p>
<p>交易对于智能合约来说就像是 HTTP 请求对于 Web 服务。</p>
<p>如果对 EVM 汇编和 Solidity 的数据表示不熟悉，请参阅本系列以前的文章以了解更多信息：</p>
<ul>
<li><a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-6e8d5d2f3c30" target="_blank" rel="noopener">EVM汇编代码简介</a></li>
<li><a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7" target="_blank" rel="noopener">如何表示固定长度的数据类型</a></li>
<li><a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-the-hidden-costs-of-arrays-28e119f04a9b" target="_blank" rel="noopener">如何表示动态数据类型</a></li>
</ul>
<h1 id="合约交易"><a href="#合约交易" class="headerlink" title="合约交易"></a>合约交易</h1><p>我们来看一个将状态变量设置为 <code>0x1</code> 的交易。与之交互的合约有变量 <code>a</code> 的一个 setter 和一个 getter：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">  uint256 a;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setA</span><span class="params">(uint256 _a)</span> </span>&#123;</span><br><span class="line">    a = _a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getA</span><span class="params">()</span> <span class="title">returns</span><span class="params">(uint256)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该合约部署在测试网络Rinkeby上。可以使用 Etherscan 查看地址<a href="https://rinkeby.etherscan.io/address/0x62650ae5c5777d1660cc17fcd4f48f6a66b9a4c2#code" target="_blank" rel="noopener">0x62650ae5….</a></p>
<p>我创建了一个可以调用 <code>setA(1)</code> 的交易。可以在地址<a href="https://rinkeby.etherscan.io/tx/0x7db471e5792bbf38dc784a5b983ee6a7bbe3f1db85dd4daede9ee88ed88057a5" target="_blank" rel="noopener">0x7db471e5….</a>处查看此交易</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*IkWyWsud_E7DD6QfpPoKHQ.jpeg" alt=""></p>
<p>交易的输入数据是：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>xee919d5000000000000000000000000000000000000000000000000000000<span class="number">00000000001</span></span><br></pre></td></tr></table></figure></p>
<p>对 EVM 来说，这仅仅是 36 个字节的原始数据。将它作为 <code>calldata</code> 传给未经处理的智能合约。如果智能合约是一个 Solidity 程序，那么它将这些输入字节解释为一个方法调用，并为 <code>setA(1)</code> 执行相应的汇编代码。</p>
<p>输入数据可以分解为两个子部分：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法选择器 (4 bytes)</span></span><br><span class="line"><span class="number">0xee919d5</span></span><br><span class="line"><span class="comment"># 第一个参数 (32 bytes)</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000001</span></span><br></pre></td></tr></table></figure>
<p>前四个字节是方法选择器，其余部分是 32 字节块的方法参数。在这个例子里只有 1 个参数，值 <code>0x1</code>。</p>
<p>方法选择器是方法签名的 kecccak256 哈希。在这个例子里，方法签名是 <code>setA(uint256)</code> ，它是方法的名称和参数的类型。</p>
<p>我们用 Python 来计算一下方法选择器。首先，散列方法签名：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 pyethereum https://github.com/ethereum/pyethereum/#installation</span></span><br><span class="line">&gt; <span class="keyword">from</span> ethereum.utils <span class="keyword">import</span> sha3</span><br><span class="line">&gt; sha3(<span class="string">"setA(uint256)"</span>).hex()</span><br><span class="line"><span class="string">'ee919d50445cd9f463621849366a537968fe1ce096894b0d0c001528383d4769'</span></span><br></pre></td></tr></table></figure>
<p>然后获取哈希的前4个字节：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sha3(<span class="string">"setA(uint256)"</span>)[<span class="number">0</span>:<span class="number">4</span>].hex()</span><br><span class="line"><span class="string">'ee919d50'</span></span><br></pre></td></tr></table></figure>
<h1 id="应用程序二进制接口（ABI）"><a href="#应用程序二进制接口（ABI）" class="headerlink" title="应用程序二进制接口（ABI）"></a>应用程序二进制接口（ABI）</h1><p>就 EVM 而言，交易的输入数据（<code>calldata</code>）只是一个字节序列。EVM 没有内置的方法调用的支持。</p>
<p>智能合约可以选择通过结构化方式来处理输入数据以模拟方法调用，如前一节所述。</p>
<p>如果 EVM 上的语言对输入数据的解释达成一致，那么它们可以很容易地进行交互。<a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding" target="_blank" rel="noopener">合约应用程序二进制接口</a>（ABI）指定了一种通用的编码方案。</p>
<p>我们已经知道 ABI 如何编码一个简单的方法调用，如 <code>setA(1)</code>。在后面的章节中，我们将看到有更复杂参数的方法调用是如何编码的。</p>
<h1 id="调用-Getter"><a href="#调用-Getter" class="headerlink" title="调用 Getter"></a>调用 Getter</h1><p>如果调用的方法改变了状态，那么整个网络都必须同意。这将需要一笔交易，并且会耗费 gas。</p>
<p>像 <code>getA()</code> 这样的 getter 方法不会改变任何东西。我们可以将方法调用发送到本地以太坊节点，而不是要求整个网络进行计算。 <code>eth_call</code> RPC 请求允许在本地模拟交易。这对只读方法或 gas 的使用评估非常有用。</p>
<p><code>eth_call</code> 就像缓存的 HTTP GET请求。</p>
<ul>
<li>它不会改变全局共识状态。</li>
<li>本地区块链（“cache”）可能有点过时。</li>
</ul>
<p>让我们发起一个 <code>eth_call</code> 调用 <code>getA</code> 方法，返回状态 <code>a</code>。</p>
<p>首先，计算出方法选择器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sha3(<span class="string">"getA()"</span>)[<span class="number">0</span>:<span class="number">4</span>].hex()</span><br><span class="line"><span class="string">'d46300fd'</span></span><br></pre></td></tr></table></figure>
<p>由于没有参数，输入数据本身就是方法选择器。 我们可以向任意一个以太坊节点发送 <code>eth_call</code> 请求。 在这个例子中，我们会将请求发送到由 infura.io 托管的公共以太坊节点：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST \</span></span><br><span class="line">-H "Content-Type: application/json" \</span><br><span class="line">"https://rinkeby.infura.io/YOUR_INFURA_TOKEN" \</span><br><span class="line">--data '</span><br><span class="line">&#123;</span><br><span class="line">  "jsonrpc": "2.0",</span><br><span class="line">  "id": 1,</span><br><span class="line">  "method": "eth_call",</span><br><span class="line">  "params": [</span><br><span class="line">    &#123;</span><br><span class="line">      "to": "0x62650ae5c5777d1660cc17fcd4f48f6a66b9a4c2",</span><br><span class="line">      "data": "0xd46300fd"</span><br><span class="line">    &#125;,</span><br><span class="line">    "latest"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">'</span><br></pre></td></tr></table></figure></p>
<p>EVM 执行计算并返回原始字节：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>:<span class="string">"0x0000000000000000000000000000000000000000000000000000000000000001"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据 ABI，这些字节应该被解释为值 <code>0x1</code>。</p>
<h1 id="用于外部方法调用的汇编代码"><a href="#用于外部方法调用的汇编代码" class="headerlink" title="用于外部方法调用的汇编代码"></a>用于外部方法调用的汇编代码</h1><p>现在我们来看编译后的合约如何处理原始输入数据来进行方法调用的。 考虑定义了 <code>setA(uint256)</code> 的合约：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">  uint256 a;</span><br><span class="line">  <span class="comment">// 注意: `payable` 让汇编代码简单一点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setA</span><span class="params">(uint256 _a)</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    a = _a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">call</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure>
<p>被调用方法的汇编代码位于 <code>sub_0</code> 下的合约主体中：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sub_0:</span> <span class="class">assembly </span>&#123;</span><br><span class="line">    mstore(<span class="number">0x40</span>, <span class="number">0x60</span>)</span><br><span class="line">    and(div(calldataload(<span class="number">0x0</span>), <span class="number">0x100000000000000000000000000000000000000000000000000000000</span>), <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="number">0xee919d50</span></span><br><span class="line">    dup2</span><br><span class="line">    eq</span><br><span class="line">    tag_2</span><br><span class="line">    jumpi</span><br><span class="line"><span class="symbol">  tag_1:</span></span><br><span class="line">    <span class="number">0x0</span></span><br><span class="line">    dup1</span><br><span class="line">    revert</span><br><span class="line"><span class="symbol">  tag_2:</span></span><br><span class="line">    tag_3</span><br><span class="line">    calldataload(<span class="number">0x4</span>)</span><br><span class="line">    jump(tag_4)</span><br><span class="line"><span class="symbol">  tag_3:</span></span><br><span class="line">    stop</span><br><span class="line"><span class="symbol">  tag_4:</span></span><br><span class="line">      <span class="comment">/* "call.sol":95:96  a */</span></span><br><span class="line">    <span class="number">0x0</span></span><br><span class="line">      <span class="comment">/* "call.sol":95:101  a = _a */</span></span><br><span class="line">    dup2</span><br><span class="line">    swap1</span><br><span class="line">    sstore</span><br><span class="line"><span class="symbol">  tag_5:</span></span><br><span class="line">    pop</span><br><span class="line">    jump <span class="comment">// out</span></span><br><span class="line"><span class="symbol">auxdata:</span> <span class="number">0xa165627a7a7230582016353b5ec133c89560dea787de20e25e96284d67a632e9df74dd981cc4db7a0a0029</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有两段与本次讨论无关的样板代码:</p>
<ul>
<li><code>mstore(0x40，0x60)</code> 位于顶部，用于保存内存中 sha3 哈希的前 64 个字节。无论合同是否需要，它总是存在的。</li>
<li><code>auxdata</code> 位于最底部，用于验证发布的源代码与部署的字节码是否相同。 这是可选的，但可以编译到编译器中。</li>
</ul>
<p>让我们将剩余的汇编代码分成两部分以便于分析：</p>
<ol>
<li>匹配选择器并跳转到方法。</li>
<li>加载参数，执行方法和从方法返回。</li>
</ol>
<p>首先，用于匹配选择器的汇编代码如下（带注释）：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载前 4 个字节作为方法选择器</span></span><br><span class="line"><span class="keyword">and</span>(<span class="built-in">div</span>(calldataload(<span class="number">0x0</span>), <span class="number">0x100000000000000000000000000000000000000000000000000000000</span>), <span class="number">0xffffffff</span>)</span><br><span class="line"><span class="comment">// 如果选择器匹配到 `0xee919d50`, 跳转到 setA</span></span><br><span class="line"><span class="number">0xee919d50</span></span><br><span class="line">dup2</span><br><span class="line"><span class="keyword">eq</span></span><br><span class="line">tag_2</span><br><span class="line">jumpi</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有匹配到的方法. 失败 &amp; 返回.</span></span><br><span class="line">tag_1:</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  dup1</span><br><span class="line">  revert</span><br><span class="line"><span class="comment">//  setA 方法的主体</span></span><br><span class="line">tag_2:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>很直接，除了在开始从调用数据里加载 4 个字节的位交换。</p>
<p>为了清楚起见，低层次伪代码中的汇编逻辑如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> methodSelector == <span class="string">"0xee919d50"</span>:</span><br><span class="line">  <span class="keyword">goto</span> tag_2 <span class="comment">// 跳转到 setA</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment">// 没有匹配到的方法. 失败 &amp; 返回.</span></span><br><span class="line">  revert</span><br></pre></td></tr></table></figure>
<p>实际方法调用的汇编代码（带注释）：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setA</span></span><br><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="comment">// 方法调用后返回的位置</span></span><br><span class="line">  tag_3</span><br><span class="line">  <span class="comment">// 加载参数 (参数值为 0x1，0x4是地址，0x0~0x3是方法选择器).</span></span><br><span class="line">  calldataload(<span class="number">0x4</span>)</span><br><span class="line">  <span class="comment">// 执行</span></span><br><span class="line">  jump(tag_4)</span><br><span class="line"><span class="symbol">tag_4:</span></span><br><span class="line">  <span class="comment">// sstore(0x0, 0x1)</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line"><span class="symbol">tag_5:</span></span><br><span class="line">  pop</span><br><span class="line">  <span class="comment">// 程序结束, 跳转到 tag_3 停止</span></span><br><span class="line">  jump</span><br><span class="line"><span class="symbol">tag_3:</span></span><br><span class="line">  <span class="comment">// 程序结束</span></span><br><span class="line">  stop</span><br></pre></td></tr></table></figure></p>
<p>在进入方法主体之前，汇编代码做了两件事：</p>
<ol>
<li>保存方法调用后返回的位置。</li>
<li>将来自调用数据的参数加载到堆栈上。</li>
</ol>
<p>低层次的伪代码：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存方法调用后返回的位置.</span></span><br><span class="line"><span class="variable">@returnTo</span> = tag_3</span><br><span class="line"><span class="attribute">tag_2</span>: <span class="comment">// setA</span></span><br><span class="line">  <span class="comment">// 将调用数据的参数加载到堆栈中.</span></span><br><span class="line">  <span class="variable">@arg1</span> = calldata[<span class="number">4</span>:<span class="number">4</span>+<span class="number">32</span>]</span><br><span class="line"><span class="attribute">tag_4</span>: <span class="comment">// a = _a</span></span><br><span class="line">  sstore(<span class="number">0</span>x0, <span class="variable">@arg1</span>)</span><br><span class="line">tag_5 <span class="comment">// return</span></span><br><span class="line">  jump(<span class="variable">@returnTo</span>)</span><br><span class="line"><span class="attribute">tag_3</span>:</span><br><span class="line">  stop</span><br></pre></td></tr></table></figure>
<p>将两部分组合在一起：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> methodSelector == <span class="string">"0xee919d50"</span>:</span><br><span class="line">  goto tag_2 <span class="comment">// 跳转到 setA</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line">  <span class="comment">// 没有匹配的方法. 失败.</span></span><br><span class="line">  revert</span><br><span class="line"><span class="meta">@returnTo</span> = tag_3</span><br><span class="line"><span class="string">tag_2:</span> <span class="comment">// setA(uint256 _a)</span></span><br><span class="line">  <span class="meta">@arg</span>1 = calldata[<span class="number">4</span>:<span class="number">36</span>]</span><br><span class="line"><span class="string">tag_4:</span> <span class="comment">// a = _a</span></span><br><span class="line">  sstore(<span class="number">0x0</span>, <span class="meta">@arg</span>1)</span><br><span class="line">tag_5 <span class="comment">// return</span></span><br><span class="line">  jump(<span class="meta">@returnTo</span>)</span><br><span class="line"><span class="string">tag_3:</span></span><br><span class="line">  stop</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>有趣的花絮:返回的操作码是 <code>fd</code>。 但是你在黄皮书里找不到它的规范，或者在代码中实现。 实际上，<code>fd</code> 并不存在！ 这是一个无效的操作。 当 EVM 遇到无效操作时，它会因为副作用而放弃并恢复状态。</p>
</blockquote>
<h1 id="处理多个方法"><a href="#处理多个方法" class="headerlink" title="处理多个方法"></a>处理多个方法</h1><p>Solidity 编译器如何为具有多个方法的合同生成汇编代码？</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity<span class="regexp"> ^0.4.11</span>;</span><br><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint256</span> a;</span><br><span class="line">    <span class="attribute">uint256</span> b;</span><br><span class="line">    <span class="attribute">function</span> setA(uint256 _a) &#123;</span><br><span class="line">      <span class="attribute">a</span> = _a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">function</span> setB(uint256 _b) &#123;</span><br><span class="line">      <span class="attribute">b</span> = _b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单。只是更多的 <code>if-else</code> 分支一个一个接上去：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// methodSelector = calldata[0:4]</span></span><br><span class="line">and(div(calldataload(<span class="number">0x0</span>), <span class="number">0x100000000000000000000000000000000000000000000000000000000</span>), <span class="number">0xffffffff</span>)</span><br><span class="line"><span class="comment">// if methodSelector == 0x9cdcf9b</span></span><br><span class="line"><span class="number">0x9cdcf9b</span></span><br><span class="line">dup2</span><br><span class="line">eq</span><br><span class="line">tag_2 <span class="comment">// SetB</span></span><br><span class="line">jumpi</span><br><span class="line"><span class="comment">// elsif methodSelector == 0xee919d50</span></span><br><span class="line">dup1</span><br><span class="line"><span class="number">0xee919d50</span></span><br><span class="line">eq</span><br><span class="line">tag_3 <span class="comment">// SetA</span></span><br><span class="line">jumpi</span><br></pre></td></tr></table></figure>
<p>伪代码：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methodSelector = calldata[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> methodSelector == <span class="string">"0x9cdcf9b"</span>:</span><br><span class="line">  <span class="keyword">goto</span> tag_2</span><br><span class="line"><span class="keyword">elsif</span> methodSelector == <span class="string">"0xee919d50"</span>:</span><br><span class="line">  <span class="keyword">goto</span> tag_3</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  // 没有匹配的方法. 失败.</span><br><span class="line">  revert</span><br></pre></td></tr></table></figure>
<h1 id="用于复杂方法调用的-ABI-编码"><a href="#用于复杂方法调用的-ABI-编码" class="headerlink" title="用于复杂方法调用的 ABI 编码"></a>用于复杂方法调用的 ABI 编码</h1><p><img src="https://cdn-images-1.medium.com/max/1600/1*EtXrxIQWOtodr4kw3TyJFA.jpeg" alt="别担心零。没事的。"></p>
<p>对于方法调用，交易的输入数据前四个字节总是方法选择器。 然后方法参数以 32 个字节的块为单位。 <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI" target="_blank" rel="noopener">ABI编码规范</a>详细说明了复杂类型参数是如何编码的，但读取会非常痛苦。</p>
<p>学习 ABI 编码的另一个策略是使用 <a href="https://github.com/ethereum/pyethereum/blob/4e945e2a24554ec04eccb160cff689a82eed7e0d/ethereum/abi.py" target="_blank" rel="noopener">pyethereum 的 ABI 编码函数</a>来研究如何对不同数据类型进行编码。 我们将从简单的案例开始，并构建更复杂的类型。</p>
<p>首先，导入 <code>encode_abi</code> 函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ethereum.abi <span class="keyword">import</span> encode_abi</span><br></pre></td></tr></table></figure>
<p>对于有三个 uint256 参数的方法（例如 <code>foo(uint256 a，uint256 b，uint256 c)</code>），编码的参数就是一个接一个的 uint256 数字:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个数组列出参数类型</span></span><br><span class="line"><span class="comment"># 第二个数组列出参数值</span></span><br><span class="line">&gt; encode_abi([<span class="string">"uint256"</span>, <span class="string">"uint256"</span>, <span class="string">"uint256"</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).hex()</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000002</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br></pre></td></tr></table></figure>
<p>小于 32 个字节的数据类型填充为32个字节：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi([<span class="string">"int8"</span>, <span class="string">"uint32"</span>, <span class="string">"uint64"</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).hex()</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000002</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br></pre></td></tr></table></figure>
<p>对于定长数组，元素也是 32 字节的块（如果需要，填充 0 ），依次排列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">   [<span class="string">"int8[3]"</span>, <span class="string">"int256[3]"</span>],</span><br><span class="line">   [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">).hex()</span><br><span class="line">// int8[<span class="number">3</span>]. 用 <span class="number">0</span> 填充到 <span class="number">32</span> bytes.</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000002</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line">// int256[<span class="number">3</span>].</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000004</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000005</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000006</span></span><br></pre></td></tr></table></figure>
<h1 id="动态数组的-ABI-编码"><a href="#动态数组的-ABI-编码" class="headerlink" title="动态数组的 ABI 编码"></a>动态数组的 ABI 编码</h1><p>ABI 引入了一个间接层来对动态数组进行编码，遵循称为<a href="https://github.com/ethereum/pyethereum/blob/4e945e2a24554ec04eccb160cff689a82eed7e0d/ethereum/abi.py#L735-L741" target="_blank" rel="noopener">头尾编码</a>的方案。</p>
<p>这个想法是，动态数组的元素封装在交易的 calldata 的尾部。 参数（“头部”）是对数组元素所在的 calldata 的引用。</p>
<p>如果我们调用一个含 3 个动态数组的方法，则参数会像这样编码（为了清晰起见添加了注释和换行符）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [<span class="string">"uint256[]"</span>, <span class="string">"uint256[]"</span>, <span class="string">"uint256[]"</span>],</span><br><span class="line">  [[<span class="number">0xa1</span>, <span class="number">0xa2</span>, <span class="number">0xa3</span>], [<span class="number">0xb1</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>], [<span class="number">0xc1</span>, <span class="number">0xc2</span>, <span class="number">0xc3</span>]]</span><br><span class="line">).hex()</span><br><span class="line">/************* 头部 (<span class="number">32</span>*<span class="number">3</span> bytes) *************/</span><br><span class="line">// arg1: 查看位置 <span class="number">0x60</span> 寻找数组数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000060</span></span><br><span class="line">// arg2: 查看位置 <span class="number">0xe0</span> 寻找数组数据</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000e0</span></span><br><span class="line">// arg3: 查看位置 <span class="number">0x160</span> 寻找数组数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000160</span></span><br><span class="line">/************* 尾部 (<span class="number">128</span>**<span class="number">3</span> bytes) *************/</span><br><span class="line">// 位置 <span class="number">0x60</span>. arg1 的数据.</span><br><span class="line">// 长度后跟元素</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a3</span><br><span class="line">// 位置 <span class="number">0xe0</span>. arg2 的数据.</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b3</span><br><span class="line">// 位置 <span class="number">0x160</span>. arg3 的数据.</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c3</span><br></pre></td></tr></table></figure>
<p>所以头部有三个 32 字节的参数，指向尾部的位置，它包含三个动态数组的实际数据。</p>
<p>例如，第一个参数是 <code>0x60</code>，指向 calldata 的第96个（<code>0x60</code>）字节。 如果你看第 96 个字节，它是一个数组的开始。 前 32 个字节是长度，后面是三个元素。</p>
<p>可以混合动态和静态参数。 这里有一个 <code>(静态, 动态, 静态)</code> 参数的例子。 静态参数按原样编码，而第二个动态数组的数据放置在尾部：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [<span class="string">"uint256"</span>, <span class="string">"uint256[]"</span>, <span class="string">"uint256"</span>],</span><br><span class="line">  [<span class="number">0xaaaa</span>, [<span class="number">0xb1</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>], <span class="number">0xbbbb</span>]</span><br><span class="line">).hex()</span><br><span class="line">/************* 头部 (<span class="number">32</span>*<span class="number">3</span> bytes) *************/</span><br><span class="line">// arg1: <span class="number">0xaaaa</span></span><br><span class="line"><span class="number">000000000000000000000000000000000000000000000000000000000000</span>aaaa</span><br><span class="line">// arg2: 查看数组数据的位置 <span class="number">0x60</span> </span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000060</span></span><br><span class="line">// arg3: <span class="number">0xbbbb</span></span><br><span class="line"><span class="number">000000000000000000000000000000000000000000000000000000000000</span>bbbb</span><br><span class="line">/************* 尾部 (<span class="number">128</span> bytes) *************/</span><br><span class="line">// 位置 <span class="number">0x60</span>. arg2 的数据.</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b3</span><br></pre></td></tr></table></figure>
<p>很多零，但没关系。</p>
<h1 id="编码字节"><a href="#编码字节" class="headerlink" title="编码字节"></a>编码字节</h1><p>字符串和字节数组也用头尾编码。唯一的区别是这些字节以 32 字节的块形式紧密打包，如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [<span class="string">"string"</span>, <span class="string">"string"</span>, <span class="string">"string"</span>],</span><br><span class="line">  [<span class="string">"aaaa"</span>, <span class="string">"bbbb"</span>, <span class="string">"cccc"</span>]</span><br><span class="line">).hex()</span><br><span class="line">// arg1: 查看位置 <span class="number">0x60</span> 寻找字符串数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000060</span></span><br><span class="line">// arg2: 查看位置 <span class="number">0xa0</span> 寻找字符串数据</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a0</span><br><span class="line">// arg3: 查看位置 <span class="number">0xe0</span> 寻找字符串数据</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000e0</span></span><br><span class="line">// <span class="number">0x60</span> (<span class="number">96</span>). arg1 的数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000004</span></span><br><span class="line"><span class="number">6161616100000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">// <span class="number">0xa0</span> (<span class="number">160</span>). arg2 的数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000004</span></span><br><span class="line"><span class="number">6262626200000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">// <span class="number">0xe0</span> (<span class="number">224</span>). arg3 的数据</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000004</span></span><br><span class="line"><span class="number">6363636300000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>
<p>对于每个字符串/字节数组，它前 32 个字节对​​长度进行编码，后跟字节。</p>
<p>如果字符串大于 32 字节，则使用多个 32 字节的块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// encode <span class="number">48</span> bytes of string data</span><br><span class="line">ethereum.abi.encode_abi(</span><br><span class="line">  [<span class="string">"string"</span>],</span><br><span class="line">  [<span class="string">"a"</span> * (<span class="number">32</span>+<span class="number">16</span>)]</span><br><span class="line">).hex()</span><br><span class="line"></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000020</span></span><br><span class="line">// 字符串长度是 <span class="number">0x30</span> (<span class="number">48</span>)</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000030</span></span><br><span class="line"><span class="number">6161616161616161616161616161616161616161616161616161616161616161</span></span><br><span class="line"><span class="number">6161616161616161616161616161616100000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>
<h1 id="嵌套数组"><a href="#嵌套数组" class="headerlink" title="嵌套数组"></a>嵌套数组</h1><p>嵌套数组，每个嵌套有一个间接寻址。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; encode_abi(</span><br><span class="line">  [<span class="string">"uint256[][]"</span>],</span><br><span class="line">  [[[<span class="number">0xa1</span>, <span class="number">0xa2</span>, <span class="number">0xa3</span>], [<span class="number">0xb1</span>, <span class="number">0xb2</span>, <span class="number">0xb3</span>], [<span class="number">0xc1</span>, <span class="number">0xc2</span>, <span class="number">0xc3</span>]]]</span><br><span class="line">).hex()</span><br><span class="line">// arg1: 外层数组位于 <span class="number">0x20</span>.</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000020</span></span><br><span class="line">// <span class="number">0x20</span>. 每个元素都是一个内部数组的位置。</span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000060</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000e0</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000160</span></span><br><span class="line">// array[<span class="number">0</span>] at <span class="number">0x60</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>a3</span><br><span class="line">// array[<span class="number">1</span>] at <span class="number">0xe0</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>b3</span><br><span class="line">// array[<span class="number">2</span>] at <span class="number">0x160</span></span><br><span class="line"><span class="number">0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c1</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c2</span><br><span class="line"><span class="number">00000000000000000000000000000000000000000000000000000000000000</span>c3</span><br></pre></td></tr></table></figure>
<p>呀，很多零。</p>
<h1 id="gas-成本-amp-ABI-编码设计"><a href="#gas-成本-amp-ABI-编码设计" class="headerlink" title="gas 成本 &amp; ABI 编码设计"></a>gas 成本 &amp; ABI 编码设计</h1><p>为什么 ABI 将方法选择器截断为只有 4 个字节？ 如果不用 sha256 的全部 32 个字节，那么对于不同的方法是否会出现碰撞？ 如果截断是为了节省成本，为什么还要在方法选择器中节省 28 字节却让它浪费更多的零填充字节？</p>
<p>这两个设计选择似乎是矛盾的……直到我们考虑交易的 gas 成本。</p>
<ul>
<li>21000 支付给每笔交易</li>
<li>4 支付给交易的每个 0 字节数据或代码</li>
<li>68 支付给交易的每个非零数据或代码</li>
</ul>
<p>啊哈！ 零字节便宜17倍，所以零填充不是那么糟糕。</p>
<p>方法选择器是一个加密哈希，它是伪随机的。一个随机字符串往往会有大部分非零字节，因为每个字节只有 0.3％（1/255）的可能性为 0。</p>
<ul>
<li><p><code>0x1</code> 填充为 32 字节，成本 192 gas</p>
<p>4 * 31 (零字节) + 68 (1个非零字节)</p>
</li>
<li><p>sha256 很可能有 32 个非零字节，成本约为 2176 gas</p>
<p>32 * 68</p>
</li>
<li><p>sha256 截断为 4 个字节，成本约为 272 gas </p>
<p>32 * 4</p>
</li>
</ul>
<p>ABI 展示了另一个由 gas 成本结构激励的低级设计的例子。</p>
<h1 id="负整数…"><a href="#负整数…" class="headerlink" title="负整数…"></a>负整数…</h1><p>负整数通常使用称为<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%A3%9C%E6%95%B8" target="_blank" rel="noopener">补码</a>的方案来表示。int8 的 <code>-1</code> 编码全是1 <code>1111 1111</code>。</p>
<p>ABI 使用 1 来填充负整数，所以 -1 会填充为：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 16进制表示</span></span><br><span class="line">ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br></pre></td></tr></table></figure>
<p>小负数主要是 1，因此耗费大量 gas。</p>
<p><code>¯\_(ツ)_/¯</code></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>要与智能合约交互，需要向其发送原始字节。它执行一些计算，可能会改变它自己的状态，然后返回原始字节。方法调用实际上不存在。 这是 ABI 创造的集体幻想。</p>
<p>ABI被指定为低级格式，但在功能上它更像是跨语言 RPC 框架的序列化格式。</p>
<p>我们可以在 DApp 和 Web App 的架构层之间进行类比：</p>
<ul>
<li>区块链就像支持数据库。</li>
<li>合约就像一个 web 服务。</li>
<li>交易就像一个请求。</li>
<li>ABI 是数据交换格式，如<a href="https://en.wikipedia.org/wiki/Protocol_Buffers" target="_blank" rel="noopener">协议缓冲区</a>。</li>
</ul>
<p>如果你喜欢这篇文章，你应该在Twitter @hayeah上关注我。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 深入理解以太坊虚拟机 - 如何表示动态数据类型]]></title>
      <url>/2018/06/24/2018-06-24-%E7%BF%BB%E8%AF%91-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-the-hidden-costs-of-arrays-28e119f04a9b" target="_blank" rel="noopener">https://medium.com/@hayeah/diving-into-the-ethereum-vm-the-hidden-costs-of-arrays-28e119f04a9b</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="如何表示动态数据类型"><a href="#如何表示动态数据类型" class="headerlink" title="如何表示动态数据类型"></a>如何表示动态数据类型</h1><p>数组的隐性成本</p>
<hr>
<p>Solidity 提供了我们熟悉的数据结构。除了简单的如数字和结构体，也有其他数据类型，它们能随着数据的添加而动态变化。3个主要的动态类型是：</p>
<ul>
<li>映射：<code>mapping(bytes32 =&gt; uint256)</code>，<code>mapping(address =&gt; string)</code>，等等。</li>
<li>数组：<code>[]uint256</code>，<code>[]byte</code>，等等。</li>
<li>字节数组：只有两种，字符串和字节。</li>
</ul>
<p>在本系列第二篇文章中，我们已经看到固定长度的简单类型在存储中是如何表示的。</p>
<ul>
<li>基础类型：<code>uint256</code>，<code>byte</code>，等等。</li>
<li>定长数组：<code>[10]uint8</code>，<code>[32]byte</code>，<code>bytes32</code>。</li>
<li>结构体：用以上两种类型组装而成。</li>
</ul>
<p>固定长度的存储变量在存储中一个接一个存储，尽可能轻量地打包成32字节的块。</p>
<blockquote>
<p>如果对这个不熟，我建议看: <a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7" target="_blank" rel="noopener">Diving Into The Ethereum VM Part II — Storage Cost</a></p>
</blockquote>
<p>在这篇文章中，我们深入理解 Solidity 是如何支持更多复杂的数据结构的。 Solidity 中的数组和映射可能看起来很熟悉，但它们的实现方式使它们具有本质的不同。</p>
<p>我们从映射开始，这是三者中最简单的一种。 事实证明，数组和字节数组只是有更多的功能的映射。</p>
<h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>在 <code>uint256 =&gt; uint256</code> 映射中存储一个值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(<span class="function"><span class="params">uint256</span> =&gt;</span> uint256) items;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      items[<span class="number">0xC0FEFE</span>] = <span class="number">0x42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编译:<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">mapping</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  <span class="comment">// 什么也没干. 可以优化.</span></span><br><span class="line">  <span class="number">0xc0fef</span>e</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  swap1</span><br><span class="line">  dup2</span><br><span class="line">  mstore</span><br><span class="line">  <span class="number">0x20</span></span><br><span class="line">  mstore</span><br><span class="line">  <span class="comment">// 存储 0x42 到地址 0x798...187c</span></span><br><span class="line">  <span class="number">0x42</span></span><br><span class="line">  <span class="number">0x79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d</span>232187c</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>我们可以将 EVM 存储视为键值对数据库，每个键限制为 32 个字节。不是直接使用键 <code>0xC0FEFE</code> ，而是将键散列为 <code>0x798...187c</code>，并将值 <code>0x42</code> 存储在那里。使用的哈希函数是 <code>keccak256（SHA256）</code>。</p>
<p>在这个例子里，我们没有看到 <code>keccak256</code> 指令，因为优化器已经预先计算结果并将其内联到字节码里了。可以从这些没用的 <code>mstore</code> 指令中看到这种计算的痕迹。</p>
<h1 id="计算地址"><a href="#计算地址" class="headerlink" title="计算地址"></a>计算地址</h1><p>让我们用一些 Python 代码来将 <code>0xC0FEFE</code> 散列为 <code>0x798...187c</code>。如果你想跟着做，你需要 Python 3.6，或者安装 <a href="https://pypi.python.org/pypi/pysha3" target="_blank" rel="noopener">pysha3</a> 来获得 <code>keccak_256</code> 哈希函数。</p>
<p>定义两个辅助函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="comment"># 把一个数转化为 32 字节的数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes32</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">'%064x'</span> % i)</span><br><span class="line"><span class="comment"># 计算 32 字节数组的 keccak256 哈希</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keccak256</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sha3.keccak_256(x).hexdigest()</span><br></pre></td></tr></table></figure>
<p>把一个数转化为 32 字节的数组:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes32(1)</span></span><br><span class="line">b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes32(0xC0FEFE)</span></span><br><span class="line">b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\xfe\xfe'</span><br></pre></td></tr></table></figure></p>
<p>用 <code>+</code> 运算把两个字节数组接在一起：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bytes32(1) + bytes32(2)</span></span><br><span class="line">b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02'</span><br></pre></td></tr></table></figure></p>
<p>计算字节数组的 keccak256 哈希<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keccak256(bytes(1))</span></span><br><span class="line">'bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a'</span><br></pre></td></tr></table></figure></p>
<p>现在我们可以计算 <code>0x798...187c</code>了。</p>
<p>存储变量 <code>items</code> 的位置是 <code>0x0</code>（因为它是第一个存储变量）。要获取地址，将键 <code>0xc0fefe</code> 与 <code>items</code> 的位置接在一起：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># key = 0xC0FEFE, position = 0</span></span><br><span class="line">&gt;&gt;&gt; keccak256(bytes32(<span class="number">0</span>xC0FEFE) + bytes32(<span class="number">0</span>))</span><br><span class="line">'<span class="number">79826054</span>ee948a209ff4a6c<span class="number">9064</span>d<span class="number">739850</span>8d2c<span class="number">1909</span>a392f899d301c6d<span class="number">232187</span>c'</span><br></pre></td></tr></table></figure></p>
<p>计算一个键的存储地址的公式为：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keccak256(<span class="name">bytes32</span>(<span class="name">key</span>) + bytes32(<span class="name">position</span>))</span><br></pre></td></tr></table></figure></p>
<h1 id="2-个映射"><a href="#2-个映射" class="headerlink" title="2 个映射"></a>2 个映射</h1><p>让我们用公式来计算值会存储到哪个位置！假设我们有2个映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint256) itemsA;</span><br><span class="line">    mapping(uint256 =&gt; uint256) itemsB;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      itemsA[0xAAAA] = 0xAAAA;</span><br><span class="line">      itemsB[0xBBBB] = 0xBBBB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>itemsA</code> 的位置为 <code>0</code>, 键为 <code>0xAAAA</code>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> key = 0xAAAA, position = 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keccak256(bytes32(0xAAAA) + bytes32(0))</span></span><br><span class="line">'839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3'</span><br></pre></td></tr></table></figure></p>
<p><code>itemsB</code> 的位置为 <code>1</code>, 键为 <code>0xBBBB</code>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> key = 0xBBBB, position = 1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keccak256(bytes32(0xBBBB) + bytes32(1))</span></span><br><span class="line">'34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395'</span><br></pre></td></tr></table></figure></p>
<p>我们用编译器证明我们的计算：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> solc --bin --asm --optimize  c-mapping-2.sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编代码:<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  // ... 忽略内存优化，可以优化掉</span><br><span class="line">  <span class="number">0xaaaa</span></span><br><span class="line">  <span class="number">0x839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3</span></span><br><span class="line">  sstore</span><br><span class="line">  <span class="number">0xbbbb</span></span><br><span class="line">  <span class="number">0x34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>和我们想的一样。</p>
<h1 id="汇编里的-KECCAK256"><a href="#汇编里的-KECCAK256" class="headerlink" title="汇编里的 KECCAK256"></a>汇编里的 KECCAK256</h1><p>编译器能预先计算一个键的地址，因为涉及的键是常量。如果键是一个变量，那么散列需要用汇编代码完成。现在我们要禁用这个优化，以便看到哈希如何在汇编中完成。</p>
<p>事实证明，通过引入一个额外变量 <code>i</code> 可以简化优化器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint256) items;</span><br><span class="line">    // 这个变量使常值优化失败</span><br><span class="line">    uint256 i = 0xC0FEFE;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      items[i] = 0x42;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量位置还是 <code>0x0</code>, 所以我们认为地址和前面一样。</p>
<p>编译，但这次没有哈希预计算：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span>  <span class="comment">c</span><span class="literal">-</span><span class="comment">mapping</span><span class="literal">-</span><span class="literal">-</span><span class="comment">no</span><span class="literal">-</span><span class="comment">constant</span><span class="literal">-</span><span class="comment">folding</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  <span class="comment">// `i` 入栈</span></span><br><span class="line">  sload(<span class="number">0x1</span>)</span><br><span class="line">    [<span class="meta">0xC0FEFE</span>]</span><br><span class="line">  <span class="comment">// 存储键 `0xC0FEFE` 到内存 0x0, 准备哈希.</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">    [<span class="meta">0x0 0xC0FEFE</span>]</span><br><span class="line">  swap1</span><br><span class="line">    [<span class="meta">0xC0FEFE 0x0</span>]</span><br><span class="line">  dup2</span><br><span class="line">    [<span class="meta">0x0 0xC0FEFE 0x0</span>]</span><br><span class="line">  mstore</span><br><span class="line">    [<span class="meta">0x0</span>]</span><br><span class="line">    memory: &#123;</span><br><span class="line">      <span class="number">0x00</span> =&gt; <span class="number">0xC0FEFE</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 保持位置 `0x0` 到内存 0x20 (32), 准备哈希.</span></span><br><span class="line">  <span class="number">0x20</span> <span class="comment">// 32</span></span><br><span class="line">    [<span class="meta">0x20 0x0</span>]</span><br><span class="line">  dup2</span><br><span class="line">    [<span class="meta">0x0 0x20 0x0</span>]</span><br><span class="line">  swap1</span><br><span class="line">    [<span class="meta">0x20 0x0 0x0</span>]</span><br><span class="line">  mstore</span><br><span class="line">    [<span class="meta">0x0</span>]</span><br><span class="line">    memory: &#123;</span><br><span class="line">      <span class="number">0x00</span> =&gt; <span class="number">0xC0FEFE</span></span><br><span class="line">      <span class="number">0x20</span> =&gt; <span class="number">0x0</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 从第 0 个字节开始，依次哈希内存中接下来的 0x40 (64) 字节</span></span><br><span class="line">  <span class="number">0x40</span> <span class="comment">// 64</span></span><br><span class="line">    [<span class="meta">0x40 0x0</span>]</span><br><span class="line">  swap1</span><br><span class="line">    [<span class="meta">0x0 0x40</span>]</span><br><span class="line">  keccak256</span><br><span class="line">    [<span class="meta">0x798...187c</span>]</span><br><span class="line">  <span class="comment">// 保存 0x42 到计算地址</span></span><br><span class="line">  <span class="number">0x42</span></span><br><span class="line">    [<span class="meta">0x42 0x798...187c</span>]</span><br><span class="line">  swap1</span><br><span class="line">    [<span class="meta">0x798...187c 0x42</span>]</span><br><span class="line">  sstore</span><br><span class="line">    store: &#123;</span><br><span class="line">      <span class="number">0x798</span>..<span class="number">.187</span>c =&gt; <span class="number">0x42</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>mstore</code> 指令在内存中写入 32 个字节。 内存要便宜得多，只需要 3 gas 来读写。汇编代码前半部分通过将键和位置加载到相邻的内存块中来“连接”键和位置：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 0                   31  32                 63</span><br><span class="line">[<span class="string">    key (32 bytes)    </span>][<span class="symbol"> position (32 bytes) </span>]</span><br></pre></td></tr></table></figure></p>
<p>然后，<code>keccak256</code> 指令散列该内存区域中的数据。成本取决于有多少数据被散列：</p>
<ul>
<li>30 付给每个SHA3操作。</li>
<li>6 付给每个32字节的字。</li>
</ul>
<p>对于 <code>uint256</code> 键，gas 成本是 42（<code>30 + 6 * 2</code>）。</p>
<h1 id="映射大数值"><a href="#映射大数值" class="headerlink" title="映射大数值"></a>映射大数值</h1><p>每个存储单元只能存储 32 个字节。如果试图存储更大的结构会发生什么？</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0</span>.<span class="number">4</span>.<span class="number">11</span><span class="comment">;</span></span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; Tuple) tuples<span class="comment">;</span></span><br><span class="line">    struct Tuple &#123;</span><br><span class="line">      uint256 a<span class="comment">;</span></span><br><span class="line">      uint256 <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>     uint256 c<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      tuples[<span class="number">0x1</span>].a = <span class="number">0x1A</span><span class="comment">;</span></span><br><span class="line">      tuples[<span class="number">0x1</span>].<span class="keyword">b </span>= <span class="number">0x1B</span><span class="comment">;</span></span><br><span class="line">      tuples[<span class="number">0x1</span>].c = <span class="number">0x1C</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译，你可以看到 3 个 sstore 指令：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  // ...忽略未优化代码</span><br><span class="line">  <span class="number">0x1a</span></span><br><span class="line">  <span class="number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d</span></span><br><span class="line">  sstore</span><br><span class="line">  <span class="number">0x1b</span></span><br><span class="line">  <span class="number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e</span></span><br><span class="line">  sstore</span><br><span class="line">  <span class="number">0x1c</span></span><br><span class="line">  <span class="number">0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>注意，除了最后一位数字，计算出的地址都是相同的。<code>Tuple</code> 结构的字段一个接一个地排列（.7d，.7e，.7f）。</p>
<h2 id="映射不打包"><a href="#映射不打包" class="headerlink" title="映射不打包"></a>映射不打包</h2><p>由于映射的设计方式，即使只存储 1 个字节，每一项的最小存储量也是 32 个字节：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    mapping(uint256 =&gt; uint8) items;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      items[<span class="number">0xA</span>] = <span class="number">0xAA</span>;</span><br><span class="line">      items[<span class="number">0xB</span>] = <span class="number">0xBB</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果值大于 32 字节，则以 32 字节为单位支付存储费用。</p>
<h1 id="动态数组是-Mappings"><a href="#动态数组是-Mappings" class="headerlink" title="动态数组是 Mappings++"></a>动态数组是 Mappings++</h1><p>（译者注：C和C++的梗）</p>
<p>在经典程序语言中，数组只是一个在内存中连续排列数据项的列表。假设你有一个含 100 个 <code>uint8</code> 元素的数组，那么它将占用 100 个字节的内存。在此方案中，将整个阵列批量加载到 CPU 缓存中并循环遍历项目很便宜。</p>
<p>对于大多数语言而言，数组比映射便宜。不过，对于 Solidity 而言，数组是一种更昂贵的映射。数组的数据项按顺序放置在存储中，如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>x290d...e563</span><br><span class="line"><span class="number">0</span>x290d...e564</span><br><span class="line"><span class="number">0</span>x290d...e565</span><br><span class="line"><span class="number">0</span>x290d...e566</span><br></pre></td></tr></table></figure></p>
<p>但记住，每次对这些存储单元的访问实际上都是数据库中的键值查找。访问数组元素与访问映射元素没有区别。</p>
<p>考虑类型 <code>[] uint256</code>，它与映射（<code>uint256 =&gt; uint256</code>）基本相同，并增加了使其“类似数组”的功能：</p>
<ul>
<li><code>length</code> 表示有多少数据项。</li>
<li>绑定检查。读取或写入超出长度的索引时会引发错误。</li>
<li>比映射更复杂的存储打包行为。</li>
<li>数组缩小时自动释放未使用的存储单元。</li>
<li>对 <code>bytes</code> 和 <code>string</code> 进行特殊优化，使短数组（小于31字节）的存储效率更高。</li>
</ul>
<h1 id="简单数组"><a href="#简单数组" class="headerlink" title="简单数组"></a>简单数组</h1><p>我们来看看存储三个数据项的数组：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c-darray.sol</span></span><br><span class="line"><span class="selector-tag">pragma</span> <span class="selector-tag">solidity</span> ^<span class="selector-tag">0</span><span class="selector-class">.4</span><span class="selector-class">.11</span>;</span><br><span class="line"><span class="selector-tag">contract</span> <span class="selector-tag">C</span> &#123;</span><br><span class="line">    <span class="selector-tag">uint256</span><span class="selector-attr">[]</span> <span class="selector-tag">chunks</span>;</span><br><span class="line">    <span class="selector-tag">function</span> <span class="selector-tag">C</span>() &#123;</span><br><span class="line">      <span class="selector-tag">chunks</span><span class="selector-class">.push</span>(<span class="number">0</span>xAA);</span><br><span class="line">      <span class="selector-tag">chunks</span><span class="selector-class">.push</span>(<span class="number">0</span>xBB);</span><br><span class="line">      <span class="selector-tag">chunks</span><span class="selector-class">.push</span>(<span class="number">0</span>xCC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数组访问的汇编代码太复杂，无法跟踪。我们用 Remix 调试器来运行合约：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*9l0i7RLrlH0yq9BTb_oM-w.jpeg" alt=""></p>
<p>可以看到使用了 4 个存储单元：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">key:</span> <span class="number">0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x0000000000000000000000000000000000000000000000000000000000000003</span></span><br><span class="line"><span class="symbol">key:</span> <span class="number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x00000000000000000000000000000000000000000000000000000000000000aa</span></span><br><span class="line"><span class="symbol">key:</span> <span class="number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x00000000000000000000000000000000000000000000000000000000000000bb</span></span><br><span class="line"><span class="symbol">key:</span> <span class="number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x00000000000000000000000000000000000000000000000000000000000000cc</span></span><br></pre></td></tr></table></figure></p>
<p>一个块的位置是 <code>0x0</code>，它用于存储数组的长度（<code>0x3</code>）。散列变量的位置以查找数组数据项的地址：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> position = 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keccak256(bytes32(0))</span></span><br><span class="line">'290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563'</span><br></pre></td></tr></table></figure></p>
<p>数组中的每个数据项都从该地址（<code>0x29..63</code>，<code>0x29..64</code>，<code>0x29..65</code>）开始顺序布局。</p>
<h1 id="动态数组打包"><a href="#动态数组打包" class="headerlink" title="动态数组打包"></a>动态数组打包</h1><p>你怎么看这些所有重要的打包行为？基于映射的数组的一个优点是打包。 四个数据项的 <code>uint128 []</code> 数组恰好填满两个存储单元（加 1 用于存储长度）。</p>
<p>考虑：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint128[] s;</span><br><span class="line">    function C() &#123;</span><br><span class="line">        s.length = <span class="number">4</span>;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0xAA</span>;</span><br><span class="line">        s[<span class="number">1</span>] = <span class="number">0xBB</span>;</span><br><span class="line">        s[<span class="number">2</span>] = <span class="number">0xCC</span>;</span><br><span class="line">        s[<span class="number">3</span>] = <span class="number">0xDD</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 Remix 上运行, 最终存储的状态是：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">key:</span> <span class="number">0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x0000000000000000000000000000000000000000000000000000000000000004</span></span><br><span class="line"><span class="symbol">key:</span> <span class="number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x000000000000000000000000000000bb000000000000000000000000000000aa</span></span><br><span class="line"><span class="symbol">key:</span> <span class="number">0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0x000000000000000000000000000000dd000000000000000000000000000000cc</span></span><br></pre></td></tr></table></figure></p>
<p>和我们想的一样，只用了 3 个存储单元。长度存储在 <code>0x0</code> 处，即存储变量的位置。四个数据项打包在两个独立的存储单元中。该数组的起始地址是变量位置的哈希值：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> position = 0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; keccak256(bytes32(0))</span></span><br><span class="line">'290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563'</span><br></pre></td></tr></table></figure>
<p>现在每增加两个数组元素，地址才会增加一次。看起来ok！</p>
<p>但汇编代码本身并没有得到很好的优化。由于只使用两个存储单元，因此我们希望优化器也只使用两个 <code>sstore</code> 进行分配。然而，在引入边界检查（以及其他）情况下，不可能优化 <code>sstore</code> 指令。</p>
<p>四个 <code>sstore</code> 指令用于分配：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* <span class="string">"c-bytes--sstore-optimize-fail.sol"</span>:<span class="number">105</span>:<span class="number">116</span>  s<span class="string">[0]</span> = 0xAA */</span><br><span class="line">sstore</span><br><span class="line">/* <span class="string">"c-bytes--sstore-optimize-fail.sol"</span>:<span class="number">126</span>:<span class="number">137</span>  s<span class="string">[1]</span> = 0xBB */</span><br><span class="line">sstore</span><br><span class="line">/* <span class="string">"c-bytes--sstore-optimize-fail.sol"</span>:<span class="number">147</span>:<span class="number">158</span>  s<span class="string">[2]</span> = 0xCC */</span><br><span class="line">sstore</span><br><span class="line">/* <span class="string">"c-bytes--sstore-optimize-fail.sol"</span>:<span class="number">168</span>:<span class="number">179</span>  s<span class="string">[3]</span> = 0xDD */</span><br><span class="line">sstore</span><br></pre></td></tr></table></figure>
<h1 id="字节数组-amp-字符串"><a href="#字节数组-amp-字符串" class="headerlink" title="字节数组 &amp; 字符串"></a>字节数组 &amp; 字符串</h1><p><code>bytes</code> 和 <code>string</code> 是分别针对字节和字符进行优化的特殊数组类型。如果数组的长度小于 31 个字节，则只用一个存储单元来存储整个数组。较长的字节数组与正常数组的表示方式大致相同。</p>
<p>我们来看一个实际使用的短字节数组：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// c-<span class="keyword">bytes--long.sol</span></span><br><span class="line"><span class="keyword">pragma </span>solidity ^<span class="number">0</span>.<span class="number">4</span>.<span class="number">11</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">contract</span> C &#123;</span><br><span class="line">    <span class="keyword">bytes </span>s<span class="comment">;</span></span><br><span class="line">    <span class="meta">function</span> C() &#123;</span><br><span class="line">        s.<span class="keyword">push(0xAA);</span></span><br><span class="line"><span class="keyword"> </span>       s.<span class="keyword">push(0xBB);</span></span><br><span class="line"><span class="keyword"> </span>       s.<span class="keyword">push(0xCC);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于数组只有 3 个字节（小于 31 个字节），因此它只占用一个存储单元。在 Remix 中运行，存储状态为：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">key:</span> <span class="number">0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="symbol">value:</span> <span class="number">0xaabbcc0000000000000000000000000000000000000000000000000000000006</span></span><br></pre></td></tr></table></figure></p>
<p>数据 <code>0xaabbcc...</code> 从左到右存储。后面的 0 是空数据。最后一个字节 <code>0x06</code> 是数组的编码长度。 公式为 <code>encodedLength / 2 = length</code>。这种情况下，实际长度是 <code>6/2 = 3</code>。</p>
<p>字符串的工作方式和这个完全相同。</p>
<h1 id="长字节数组"><a href="#长字节数组" class="headerlink" title="长字节数组"></a>长字节数组</h1><p>如果数据量大于 31 字节，则字节数组就像 <code>[]byte</code>。让我们看看长度为 128 字节的字节数组：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c-bytes--long.sol</span></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    bytes s;</span><br><span class="line">    function C() &#123;</span><br><span class="line">        s.length = <span class="number">32</span> * <span class="number">4</span>;</span><br><span class="line">        s[<span class="number">31</span>] = <span class="number">0x1</span>;</span><br><span class="line">        s[<span class="number">63</span>] = <span class="number">0x2</span>;</span><br><span class="line">        s[<span class="number">95</span>] = <span class="number">0x3</span>;</span><br><span class="line">        s[<span class="number">127</span>] = <span class="number">0x4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 Remix 运行，可以看到存储里使用了 4 个存储单元：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0000</span>..<span class="number">.0000</span></span><br><span class="line"><span class="number">0x0000</span>..<span class="number">.0101</span></span><br><span class="line"><span class="number">0x290d</span>...e563</span><br><span class="line"><span class="number">0x0000</span>..<span class="number">.0001</span></span><br><span class="line"><span class="number">0x290d</span>...e564</span><br><span class="line"><span class="number">0x0000</span>..<span class="number">.0002</span></span><br><span class="line"><span class="number">0x290d</span>...e565</span><br><span class="line"><span class="number">0x0000</span>..<span class="number">.0003</span></span><br><span class="line"><span class="number">0x290d</span>...e566</span><br><span class="line"><span class="number">0x0000</span>..<span class="number">.0004</span></span><br></pre></td></tr></table></figure></p>
<p>存储单元 <code>0x0</code> 不再用于存储数据。整个存储单元现在存储编码后的数组长度。为了得到实际的长度，做 <code>length =（encodedLength - 1）/ 2</code>。在这种情况下，长度为 <code>128 =（0x101 - 1）/ 2</code>。实际字节存储在 <code>0x290d...e563</code> 中，以及按顺序排列的存储单元中。</p>
<p>字节数组的汇编代码非常大。除了正常的边界检查和调整数组大小的东西，它还要编码/解码长度，以及在长和短字节数组之间进行转换。</p>
<blockquote>
<p>为什么要对长度进行编码？因为这种方式有一个简单的方法来检测一个字节数组是短还是长。注意，长数组的编码长度总是奇数，短数组的编码长度总是偶数。汇编只需要查看最后一位，看它是零（偶/短）还是非零（奇/长）。</p>
</blockquote>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>查看 Solidity 编译器的内部工作，我们发现熟悉的数据结构（如映射和数组）与传统的编程语言的完全不同。</p>
<p>回顾一下：</p>
<ul>
<li>数组就像映射，效率不高。</li>
<li>比映射更复杂的汇编代码。</li>
<li>比较小类型（字节，uint8，字符串）映射更好的存储效率。</li>
</ul>
<p>汇编代码没有很好地优化。即使打包过了，还是每个分配要一个 <code>sstore</code> 。<br>EVM 存储是一个键值对数据库，非常像 git。如果你改变了任何东西，那么根节点的校验和就会改变。如果两个根节点具有相同的校验和，则存储的数据相同。</p>
<p>要了解 Solidity 和 EVM 的独特之处，可以想象数组中的每个元素都是一个文件在 git 存储库中。当你改变一个数组元素的值时，你实际上正在创建一个 git commit。在遍历数组时，无法一次加载整个数组，您必须查看存储库并分别查找每个文件。</p>
<p>不仅如此，每个文件被限制为 32 个字节！因为我们需要将数据结构分割成32个字节的块，所以 Solidity 的编译器由于各种逻辑和优化技巧而复杂化，所有这些都是在汇编中完成的。</p>
<p>然而，32 字节的限制完全是任意的。备份键值存储可以使用键存储任意数量的字节。也许在将来我们可以添加一个新的 EVM 指令来存储任意字节和一个关键字。</p>
<p>目前，EVM 存储是一个预先假定为32字节数组的键值对数据库。</p>
<p>请参阅 <a href="https://github.com/ethereum/solidity/blob/3b07c4d38e40c52ee8a4d16e56e2afa1a0f27905/libsolidity/codegen/ArrayUtils.cpp#L624" target="_blank" rel="noopener">ArrayUtils::resizeDynamicArray</a>，了解编译器在调整数组大小时的作用。通常情况下，数据结构将作为标准库的一部分在语言中完成，但在 Solidity 中，它会被烧录入编译器。</p>
<p>如果你喜欢这篇文章，你应该在 Twitter <a href="https://twitter.com/hayeah" target="_blank" rel="noopener">@hayeah</a> 上关注我。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 深入理解以太坊虚拟机 - 如何表示固定长度的数据类型]]></title>
      <url>/2018/06/18/2018-06-18-%E7%BF%BB%E8%AF%91-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7" target="_blank" rel="noopener">https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="如何表示固定长度的数据类型"><a href="#如何表示固定长度的数据类型" class="headerlink" title="如何表示固定长度的数据类型"></a>如何表示固定长度的数据类型</h1><p>我是怎样学会了担忧以及计算存储成本</p>
<hr>
<p>在本系列文章的第一篇中，我们看了一个简单 Solidity 合约的汇编代码：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint256</span> a;</span><br><span class="line">    <span class="attribute">function</span> C() &#123;</span><br><span class="line">      <span class="attribute">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该合约实际上是调用了 <code>sstore</code> 指令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="function"><span class="title">sstore</span><span class="params">(<span class="number">0</span>x0, <span class="number">0</span>x1)</span></span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>EVM 把值 0x1 保存在存储位置 0x0.</li>
<li>每个存储位置实际上能存 32 字节 (或者 256 比特).<blockquote>
<p>如果对这个不熟，我建议看: <a href="https://blog.qtum.org/diving-into-the-ethereum-vm-6e8d5d2f3c30" target="_blank" rel="noopener">Diving Into The Ethereum VM Part 1 — Assembly &amp; Bytecode</a></p>
</blockquote>
</li>
</ul>
<p>在本篇文章中，我们关注 Solidity 如何使用32字节的块来表示更多复杂的数据类型，比如结构体和数组。我们也能看到如何优化存储，及怎样可能优化失败。<br>在典型的程序语言中，理解数据类型在底层如何表示不是特别有用。但在 Solidity (或任何 EVM 语言) 这种知识至关重要，因为存储访问太贵了。</p>
<ul>
<li><code>sstore</code> 花费 20000 gas, 或者比基础算术指令贵约 5000倍.</li>
<li><code>sload</code> 花费 200 gas, 或者比基础算术指令贵约 100倍.</li>
</ul>
<p>对于“花费”，我们这里谈的是真钱，不仅仅是性能上的多少毫秒。运行和使用合约的花费中，<code>sstore</code> 和 <code>sload</code> 占主导地位！</p>
<h1 id="磁带解析"><a href="#磁带解析" class="headerlink" title="磁带解析"></a>磁带解析</h1><p><img src="https://cdn-images-1.medium.com/max/1600/1*BfkvMOBrd2aJQ46p9DeDtg.jpeg" alt="图灵机. Source: http://raganwald.com/"></p>
<p>构建通用计算机的两个基本要素：</p>
<ol>
<li>一种循环方式，无论是跳转还是递归。</li>
<li>无限内存</li>
</ol>
<p>EVM 汇编代码提供跳转，EVM 存储提供无限内存。这些对一切都够用了，包括模拟一个运行以太坊的世界，其以太坊又模拟了一个运行以太坊的世界…</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*WmSMw86hQrhFLhCo.gif" alt="Diving Into The Microverse Battery"></p>
<p>EVM 存储一个合约像是一条没有尽头的磁带，磁带的每个单元有32字节，像这样：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">32 字节</span>][<span class="symbol">32 字节</span>][<span class="string">32 字节</span>]...</span><br></pre></td></tr></table></figure></p>
<p>我们会看到数据如何在无尽的磁带上变得生动起来的。</p>
<blockquote>
<p>磁带长度为 2²⁵⁶, 或者每个合约有大约10⁷⁷个单元。宇宙的可观测的粒子数是10⁸⁰。大约1000个合约就足以容纳所有质子，中子和电子。不要相信营销炒作，因为它比无限更短。</p>
</blockquote>
<h1 id="空白磁带"><a href="#空白磁带" class="headerlink" title="空白磁带"></a>空白磁带</h1><p>存储最初是空白的，默认为 0 。拥有无限磁带并不需要花费任何东西。</p>
<p>我们来看一个简单的合约来说明零价值行为：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity<span class="regexp"> ^0.4.11</span>;</span><br><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint256</span> a;</span><br><span class="line">    <span class="attribute">uint256</span> b;</span><br><span class="line">    <span class="attribute">uint256</span> c;</span><br><span class="line">    <span class="attribute">uint256</span> d;</span><br><span class="line">    <span class="attribute">uint256</span> e;</span><br><span class="line">    <span class="attribute">uint256</span> f;</span><br><span class="line">    <span class="attribute">function</span> C() &#123;</span><br><span class="line">      <span class="attribute">f</span> = 0xc0fefe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>存储中的布局很简单。</p>
<ul>
<li>变量 <code>a</code> 位于位置 <code>0x0</code></li>
<li>变量 <code>b</code> 位于位置 <code>0x1</code></li>
<li>如此下去…<br>关键问题: 如果我们只用 <code>f</code>, 我们给 <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>花多少?<br>编译看一下：<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">many</span><span class="literal">-</span><span class="comment">variables</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>汇编:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sstore(0x5, 0xc0fefe)</span></span><br><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="number">0xc0fefe</span></span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>因此，存储变量的声明不需要任何费用，因为没有初始化。 Solidity 为该变量保留一个位置，并且只有当你存储某些内容时才支付 gas 。</p>
<p>在这种情况下，我们只为存储到 <code>0x5</code> 花钱。</p>
<p>如果我们手工编写汇编，我们可以任意选择存储位置而不必“扩展”存储：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入任意位置</span></span><br><span class="line"><span class="function"><span class="title">sstore</span><span class="params">(<span class="number">0</span>xc0fefe, <span class="number">0</span>x42)</span></span></span><br></pre></td></tr></table></figure>
<h1 id="读取-0"><a href="#读取-0" class="headerlink" title="读取 0"></a>读取 0</h1><p>你不仅可以在存储的任何位置写入，还可以立即从任何位置读取。读取未初始化的位置仅返回 <code>0x0</code> 。</p>
<p>让我们看一个读取未初始化位置的合约：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity<span class="regexp"> ^0.4.11</span>;</span><br><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint256</span> a;</span><br><span class="line">    <span class="attribute">function</span> C() &#123;</span><br><span class="line">      <span class="attribute">a</span> = a + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译:<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">zero</span><span class="literal">-</span><span class="comment">value</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  <span class="comment">// sload(0x0) returning 0x0</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">  <span class="comment">// a + 1; where a == 0</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  <span class="comment">// sstore(0x0, a + 1)</span></span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>注意：生成从未初始化位置加载数据的代码是有效的。</p>
<p>然而，我们可以比 Solidity 编译器更聪明。由于我们知道<code>tag_2</code>是构造函数，并且从未写入过，所以我们可以用<code>0x0</code>替换<code>sload</code>序列。这可以省 5,000 gas。</p>
<h1 id="结构体的表示"><a href="#结构体的表示" class="headerlink" title="结构体的表示"></a>结构体的表示</h1><p>我们来看第一个复杂数据类型，一个有 6 个字段的结构体：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0</span>.<span class="number">4</span>.<span class="number">11</span><span class="comment">;</span></span><br><span class="line">contract C &#123;</span><br><span class="line">    struct Tuple &#123;</span><br><span class="line">      uint256 a<span class="comment">;</span></span><br><span class="line">      uint256 <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>     uint256 c<span class="comment">;</span></span><br><span class="line">      uint256 d<span class="comment">;</span></span><br><span class="line">      uint256 e<span class="comment">;</span></span><br><span class="line">      uint256 f<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    Tuple t<span class="comment">;</span></span><br><span class="line">    function C() &#123;</span><br><span class="line">      t.f = <span class="number">0xC0FEFE</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>存储中的布局和状态变量一样。</p>
<ul>
<li>变量 <code>t.a</code> 位于位置 <code>0x0</code></li>
<li>变量 <code>t.b</code> 位于位置 <code>0x1</code></li>
<li>如此下去…</li>
</ul>
<p>和之前类似，我们可以直接向 <code>t.f</code> 写入而不用给初始化花钱。</p>
<p>编译：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">struct</span><span class="literal">-</span><span class="comment">fields</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>我们看到了一样的汇编代码：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="number">0xc0fefe</span></span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<h1 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h1><p>声明一个定长数组：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256[<span class="number">6</span>] numbers;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      numbers[<span class="number">5</span>] = <span class="number">0xC0FEFE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于编译器确切地知道有多少个 <code>uint256</code> （ 32 个字节），因此它可以简单地将数组元素放在存储器中，就像存储变量和结构体一样。</p>
<p>在这份合约中，我们再次存储到位置 <code>0x5</code> 。</p>
<p>编译：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --<span class="keyword">asm</span> --optimize c-<span class="keyword">static</span>-<span class="built_in">array</span>.sol</span><br></pre></td></tr></table></figure></p>
<p>汇编代码：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="number">0xc0fefe</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line"><span class="symbol">tag_4:</span></span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line"><span class="symbol">tag_5:</span></span><br><span class="line">  <span class="keyword">pop</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>它稍微长一些，但如果你稍微眯起一点，你会发现它实际上是一样的。我们手动进一步优化：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="number">0xc0fefe</span></span><br><span class="line">  // <span class="number">0</span>+<span class="number">5.</span> 用 <span class="number">0x5</span> 代替</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  // <span class="keyword">Push</span> then <span class="keyword">pop</span> immediately. Useless, just remove.</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  <span class="keyword">pop</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>除去标签和伪指令，我们再次得到相同的字节码序列：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="number">0xc0fefe</span></span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<h1 id="数组边界检测"><a href="#数组边界检测" class="headerlink" title="数组边界检测"></a>数组边界检测</h1><p>我们已经看到，定长数组与结构体或状态变量两者具有相同的存储布局，但生成的汇编代码是不同的。原因是 Solidity 为数组访问生成了边界检查。</p>
<p>让我们再次编译数组合约，这次先关闭优化：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --<span class="keyword">asm</span> c-<span class="keyword">static</span>-<span class="built_in">array</span>.sol</span><br></pre></td></tr></table></figure></p>
<p>注释一下，在每条指令后打印机器状态：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  <span class="number">0xc0fef</span>e</span><br><span class="line">    [<span class="number">0xc0fef</span>e]</span><br><span class="line">  <span class="number">0x5</span></span><br><span class="line">    [<span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  dup1</span><br><span class="line">  <span class="comment">/* 数组边界检测代码 */</span></span><br><span class="line">  <span class="comment">// 5 &lt; 6</span></span><br><span class="line">  <span class="number">0x6</span></span><br><span class="line">    [<span class="number">0x6</span> <span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  dup2</span><br><span class="line">    [<span class="number">0x5</span> <span class="number">0x6</span> <span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  lt</span><br><span class="line">    [<span class="number">0x1</span> <span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  <span class="comment">// bound_check_ok = 1 (TRUE)</span></span><br><span class="line">  <span class="comment">// if(bound_check_ok) &#123; goto tag5 &#125; else &#123; invalid &#125;</span></span><br><span class="line">  tag_5</span><br><span class="line">    [tag_5 <span class="number">0x1</span> <span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  jumpi</span><br><span class="line">    <span class="comment">// 测试情形是对的. 将跳转到 tag_5.</span></span><br><span class="line">    <span class="comment">// 并且 `jumpi` 消费了栈中 2 个元素.</span></span><br><span class="line">    [<span class="number">0x5</span> <span class="number">0xc0fef</span>e]</span><br><span class="line">  invalid</span><br><span class="line"><span class="comment">// 数组访问合法，继续</span></span><br><span class="line"><span class="comment">// stack: [0x5 0xc0fefe]</span></span><br><span class="line">tag_5:</span><br><span class="line">  sstore</span><br><span class="line">    []</span><br><span class="line">    storage: &#123; <span class="number">0x5</span> =&gt; <span class="number">0xc0fef</span>e &#125;</span><br></pre></td></tr></table></figure>
<p>现在可以看到边界检测代码了。编译器能够优化这些东西，但并不完美。</p>
<p>在本文的后面，我们将看到数组边界检测如何干扰编译器的优化，使得定长数组比存储变量或结构的效率低得多。</p>
<h1 id="打包行为"><a href="#打包行为" class="headerlink" title="打包行为"></a>打包行为</h1><p>存储很贵（啊啊啊我已经说一百万次了）。一个关键的优化是尽可能多地将数据打包到一个 32 字节的单元中。</p>
<p>考虑有四个存储变量（每个 64 比特）的合约，总共可以累加到 256 比特（ 32 字节）：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity<span class="regexp"> ^0.4.11</span>;</span><br><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint64</span> a;</span><br><span class="line">    <span class="attribute">uint64</span> b;</span><br><span class="line">    <span class="attribute">uint64</span> c;</span><br><span class="line">    <span class="attribute">uint64</span> d;</span><br><span class="line">    <span class="attribute">function</span> C() &#123;</span><br><span class="line">      <span class="attribute">a</span> = 0xaaaa;</span><br><span class="line">      <span class="attribute">b</span> = 0xbbbb;</span><br><span class="line">      <span class="attribute">c</span> = 0xcccc;</span><br><span class="line">      <span class="attribute">d</span> = 0xdddd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们希望编译器只用一个 <code>sstore</code> ，所以将它们放在同一个存储单元中。</p>
<p>编译：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">many</span><span class="literal">-</span><span class="comment">variables</span><span class="literal">-</span><span class="literal">-</span><span class="comment">packing</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编代码：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">121</span>:<span class="number">122</span>  a */</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">121</span>:<span class="number">131</span>  a = <span class="number">0xaaaa</span> */</span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">125</span>:<span class="number">131</span>  <span class="number">0xaaaa</span> */</span><br><span class="line">  <span class="number">0xaaaa</span></span><br><span class="line">  <span class="keyword">not</span>(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">121</span>:<span class="number">131</span>  a = <span class="number">0xaaaa</span> */</span><br><span class="line">  swap1</span><br><span class="line">  swap2</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  <span class="keyword">not</span>(<span class="keyword">sub</span>(exp(<span class="number">0x2</span>, <span class="number">0x80</span>), exp(<span class="number">0x2</span>, <span class="number">0x40</span>)))</span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">139</span>:<span class="number">149</span>  b = <span class="number">0xbbbb</span> */</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  <span class="number">0xbbbb0000000000000000</span></span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  <span class="keyword">not</span>(<span class="keyword">sub</span>(exp(<span class="number">0x2</span>, <span class="number">0xc0</span>), exp(<span class="number">0x2</span>, <span class="number">0x80</span>)))</span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">157</span>:<span class="number">167</span>  c = <span class="number">0xcccc</span> */</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  <span class="number">0xcccc00000000000000000000000000000000</span></span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  <span class="keyword">sub</span>(exp(<span class="number">0x2</span>, <span class="number">0xc0</span>), <span class="number">0x1</span>)</span><br><span class="line">    /* <span class="string">"c-many-variables--packing.sol"</span>:<span class="number">175</span>:<span class="number">185</span>  d = <span class="number">0xdddd</span> */</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  <span class="number">0xdddd000000000000000000000000000000000000000000000000</span></span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>有很多我无法破译的位交换，但不用在意这些细节。关键要注意的是，只用了一个 <code>sstore</code>。</p>
<p>优化成功！</p>
<h1 id="打破优化"><a href="#打破优化" class="headerlink" title="打破优化"></a>打破优化</h1><p>要是优化器可以一直完美工作就好了。让我们打破它。我们唯一的改变是我们使用帮助函数来设置存储变量：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0</span>.<span class="number">4</span>.<span class="number">11</span><span class="comment">;</span></span><br><span class="line">contract C &#123;</span><br><span class="line">    uint64 a<span class="comment">;</span></span><br><span class="line">    uint64 <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   uint64 c<span class="comment">;</span></span><br><span class="line">    uint64 d<span class="comment">;</span></span><br><span class="line">    function C() &#123;</span><br><span class="line">      setAB()<span class="comment">;</span></span><br><span class="line">      setCD()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    function setAB() internal &#123;</span><br><span class="line">      a = <span class="number">0xaaaa</span><span class="comment">;</span></span><br><span class="line">      <span class="keyword">b </span>= <span class="number">0xbbbb</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    function setCD() internal &#123;</span><br><span class="line">      c = <span class="number">0xcccc</span><span class="comment">;</span></span><br><span class="line">      d = <span class="number">0xdddd</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c</span><span class="literal">-</span><span class="comment">many</span><span class="literal">-</span><span class="comment">variables</span><span class="literal">-</span><span class="literal">-</span><span class="comment">packing</span><span class="literal">-</span><span class="comment">helpers</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure></p>
<p>汇编输出太多了。我们将忽略大部分细节并关注结构：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> 构造函数</span><br><span class="line">tag_2:</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  <span class="string">//</span> 跳转到 tag_5，调用 <span class="keyword">set</span>AB<span class="params">()</span> </span><br><span class="line">  jump</span><br><span class="line">tag_4:</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  <span class="string">//</span> 跳转到 tag_7，调用 <span class="keyword">set</span>CD<span class="params">()</span></span><br><span class="line">  jump</span><br><span class="line"><span class="string">//</span> 函数 <span class="keyword">set</span>AB<span class="params">()</span></span><br><span class="line">tag_5:</span><br><span class="line">  <span class="string">//</span> 位交换，设置 a, b</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  sstore</span><br><span class="line">tag_9:</span><br><span class="line">  jump  <span class="string">//</span> 返回 <span class="keyword">set</span>AB<span class="params">()</span> 的调用者</span><br><span class="line"><span class="string">//</span> 函数 <span class="keyword">set</span>CD<span class="params">()</span></span><br><span class="line">tag_7:</span><br><span class="line">  <span class="string">//</span> 位交换，设置 c, d</span><br><span class="line">  <span class="string">//</span> <span class="string">...</span></span><br><span class="line">  sstore</span><br><span class="line">tag_10:</span><br><span class="line">  jump  <span class="string">//</span> 返回 <span class="keyword">set</span>CD<span class="params">()</span> 的调用者</span><br></pre></td></tr></table></figure></p>
<p>现在有两个 <code>sstore</code> ，而不是一个。 Solidity 编译器可以在标签内进行优化，但不能跨标签进行优化。</p>
<blockquote>
<p>调用函数可能会花费更多，而不是太多，不仅因为函数调用很贵（它们只是跳转指令），而且因为 <code>sstore</code> 优化可能会失败。</p>
</blockquote>
<p>为了解决这个问题， Solidity 编译器需要学习如何内联函数，使得本质上得到的代码与不调用函数的相同：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> = <span class="number">0</span>xaaaa<span class="comment">;</span></span><br><span class="line"><span class="attribute">b</span> = <span class="number">0</span>xbbbb<span class="comment">;</span></span><br><span class="line"><span class="attribute">c</span> = <span class="number">0</span>xcccc<span class="comment">;</span></span><br><span class="line"><span class="attribute">d</span> = <span class="number">0</span>xdddd<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>如果我们仔细阅读完整的汇编输出，我们会看到函数 setAB（）和 setCD（）的汇编代码被包含了两次，使代码臃肿，还花费额外 gas 部署合约。我们稍后在了解合约生命周期时再讨论这一点。</p>
<h1 id="为什么优化器坏了"><a href="#为什么优化器坏了" class="headerlink" title="为什么优化器坏了"></a>为什么优化器坏了</h1><p>优化器不会跨标签进行优化。考虑 “1 + 1” ，如果在同一标签下，它可以优化为 <code>0x2</code> ：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 优化成功!</span><br><span class="line"><span class="symbol">tag_0:</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p>
<p>但会优化失败，如果指令被标签分开了的话：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 优化失败!</span><br><span class="line"><span class="symbol">tag_0:</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line"><span class="symbol">tag_1:</span></span><br><span class="line">  <span class="keyword">add</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p>
<p>这个行为在 0.4.13 版时是真的。以后可能会变。</p>
<h1 id="再次打破优化"><a href="#再次打破优化" class="headerlink" title="再次打破优化"></a>再次打破优化</h1><p>让我们看看优化失败的另一种方式。打包是否适用于定长数组？考虑：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint64[<span class="number">4</span>] numbers;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      numbers[<span class="number">0</span>] = <span class="number">0x0</span>;</span><br><span class="line">      numbers[<span class="number">1</span>] = <span class="number">0x1111</span>;</span><br><span class="line">      numbers[<span class="number">2</span>] = <span class="number">0x2222</span>;</span><br><span class="line">      numbers[<span class="number">3</span>] = <span class="number">0x3333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样，我们希望只用一个 <code>sstore</code> 指令将 4 个 64 比特的数字打包到一个 32 字节的存储单元中。</p>
<p>编译后的汇编代码太长了。作为替代，计算 <code>sstore</code> 和 <code>sload</code> 指令的数量：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --<span class="keyword">asm</span> --optimize c-<span class="keyword">static</span>-<span class="keyword">array</span>--packing.sol | grep -E <span class="string">'(sstore|sload)'</span></span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br><span class="line">  sload</span><br><span class="line">  sstore</span><br></pre></td></tr></table></figure></p>
<p>嗷！不！！即使这个定长数组的存储布局与等效的结构体或存储变量完全相同，优化也会失败。它现在需要四对 <code>sload</code> 和 <code>sstore</code> 。</p>
<p>快速浏览汇编代码可以发现，每个数组访问都有边界检测代码，并在不同的标签下进行组织。但标签边界打破了优化。</p>
<p>然而有一点小小的安慰的是，3 个额外的 <code>sstore</code> 指令比第一个便宜：</p>
<ul>
<li><code>sstore</code> 花费 20,000 gas用于第一次写入新位置。</li>
<li><code>sstore</code> 花费 5,000 gas用于后续写入现有位置。</li>
</ul>
<p>所以这个特定优化的失败花费我们 35k 而不是 20k ，多了 75％ 。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>如果 Solidity 编译器能够计算出存储变量的大小，它只须简单地将它们放在一个接一个的存储空间中。如果可能的话，编译器将数据紧密地打包成32字节的块。</p>
<p>总结我们目前为止看到的打包行为：</p>
<ul>
<li>存储变量：有。</li>
<li>结构字段：有。</li>
<li>定长数组：无。理论上，有。</li>
</ul>
<p>由于存储访问成本非常高，因此应该将存储变量视为数据库架构。在编写合约时，可能会很有用的是做小型实验，并检查汇编代码以确定编译器是否正在优化。</p>
<p>可以肯定， Solidity 编译器将来会有所改进。不幸的是，现在我们还不能盲目信任它的优化器。</p>
<p>理解存储变量要花钱，字面意思，花钱。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 深入理解以太坊虚拟机 - EVM汇编代码简介]]></title>
      <url>/2018/06/12/2018-06-12-%E7%BF%BB%E8%AF%91-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E6%9C%BA-EVM%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://blog.qtum.org/diving-into-the-ethereum-vm-6e8d5d2f3c30" target="_blank" rel="noopener">https://blog.qtum.org/diving-into-the-ethereum-vm-6e8d5d2f3c30</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="EVM汇编代码简介"><a href="#EVM汇编代码简介" class="headerlink" title="EVM汇编代码简介"></a>EVM汇编代码简介</h1><hr>
<p>Solidity 提供了很多高级语言抽象，但这些功能很难让我理解程序运行时到底发生了什么。阅读 Solidity 的文档仍然使我对一些基础的东西感到疑惑。</p>
<p>string, bytes32, byte[], bytes 有什么区别?</p>
<ul>
<li>什么时候应该用哪个？</li>
<li>把 string 转为 bytes 发生了什么？转为 byte[] 呢？</li>
<li>这些需要多少 gas ？</li>
</ul>
<p>mapping 在以太坊虚拟机里是怎么存的？</p>
<ul>
<li>为什么不能把 mapping 删了？</li>
<li>能构建 maping 到 maping 的数据结构吗？(当然可以，但这是怎么实现的？)</li>
<li>为什么有存储 mapping ，但是没有内存 mapping ?</li>
</ul>
<p>编译后的合约在以太坊虚拟机里长什么样？</p>
<ul>
<li>合约如何创建？</li>
<li>构造方法是什么？真的吗？</li>
<li>回退函数是什么？</li>
</ul>
<p>我想，学习一门在以太坊虚拟机( EVM )上运行的高级语言如 Solidity 会是一个好的自我投资。有以下原因。</p>
<ol>
<li>Solidity 不是最后一门语言。更好的 EVM 语言正在到来。(漂亮，对不对？)</li>
<li>EVM是个数据库引擎。理解用任意一种 EVM 语言写的智能合约前，必须理解数据是如何被组织、存储和操控的。</li>
<li>了解如何成为一个贡献者。以太坊工具链刚刚起步，深入理解EVM会帮助你给你自己或其他人造出惊艳的工具。</li>
<li>智力挑战。EVM使得你能在密码学、数据结构和程序语言设计的交汇处获得最佳实践。</li>
</ol>
<p>在本系列文章中，我会解构一些简单的 Solidity 智能合约，以便理解它们作为 EVM 字节码时如何工作。</p>
<p>我希望学习和写作的要点：</p>
<ul>
<li>EVM 字节码的基础</li>
<li>不同数据类型( mapping, array )的表现形式</li>
<li>合约创建时发生了什么</li>
<li>一个方法调用时发生了什么</li>
<li>ABI 桥如何区别了 EVM 语言</li>
</ul>
<p>我的终极目标是能够完全理解一个编译后的 Solidity 合约。先从一些基础的 EVM 字节码开始阅读吧！</p>
<p>一个有用的引用：<a href="https://gist.github.com/hayeah/bd37a123c02fecffbe629bf98a8391df" target="_blank" rel="noopener">EVM 指令集</a></p>
<h1 id="一个简单的智能合约"><a href="#一个简单的智能合约" class="headerlink" title="一个简单的智能合约"></a>一个简单的智能合约</h1><p>我们的第一个合约有构造函数和一个常量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// c1.sol</span><br><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用 <code>solc</code> 命令编译：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ solc --<span class="keyword">bin </span>--asm <span class="built_in">c1</span>.sol</span><br><span class="line">======= <span class="built_in">c1</span>.sol:C =======</span><br><span class="line"><span class="symbol">EVM</span> assembly:</span><br><span class="line">    <span class="comment">/* "c1.sol":26:94  contract C &#123;... */</span></span><br><span class="line">  mstore(<span class="number">0x40</span>, <span class="number">0x60</span>)</span><br><span class="line">    <span class="comment">/* "c1.sol":59:92  function C() &#123;... */</span></span><br><span class="line">  jumpi(tag_1, iszero(callvalue))</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  dup1</span><br><span class="line">  <span class="keyword">revert</span></span><br><span class="line"><span class="keyword">tag_1:</span></span><br><span class="line"><span class="keyword">tag_2:</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">/* "c1.sol":84:85  1 */</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">    <span class="comment">/* "c1.sol":80:81  a */</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">    <span class="comment">/* "c1.sol":80:85  a = 1 */</span></span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  <span class="keyword">pop</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">/* "c1.sol":59:92  function C() &#123;... */</span></span><br><span class="line"><span class="symbol">tag_3</span>:</span><br><span class="line">    <span class="comment">/* "c1.sol":26:94  contract C &#123;... */</span></span><br><span class="line"><span class="symbol">tag_4</span>:</span><br><span class="line">  dataSize(<span class="keyword">sub_0)</span></span><br><span class="line"><span class="keyword"> </span> dup1</span><br><span class="line">  dataOffset(<span class="keyword">sub_0)</span></span><br><span class="line"><span class="keyword"> </span> <span class="number">0x0</span></span><br><span class="line">  codecopy</span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  return</span><br><span class="line"><span class="symbol">stop</span></span><br><span class="line"><span class="keyword">sub_0: </span>assembly &#123;</span><br><span class="line">        <span class="comment">/* "c1.sol":26:94  contract C &#123;... */</span></span><br><span class="line">      mstore(<span class="number">0x40</span>, <span class="number">0x60</span>)</span><br><span class="line"><span class="symbol">    tag_1:</span></span><br><span class="line">      <span class="number">0x0</span></span><br><span class="line">      dup1</span><br><span class="line">      <span class="keyword">revert</span></span><br><span class="line"><span class="keyword">auxdata: </span><span class="number">0xa165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">Binary:</span></span><br><span class="line"><span class="keyword">60606040523415600e57600080fd5b5b60016000819055505b5b60368060266000396000f30060606040525b600080fd00a165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029</span></span><br></pre></td></tr></table></figure>
<p>数字 <code>6060604052...</code> 是 EVM 真正运行的字节码。</p>
<h1 id="蹒跚学步"><a href="#蹒跚学步" class="headerlink" title="蹒跚学步"></a>蹒跚学步</h1><p>一半的汇编是模板，以至于在大多数 Solidity 程序中都一样。我们等下再来看这些。现在，我们来实验我们合约独特的一部分，存储变量的声明：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>这个声明的字节码表示是 <code>6001600081905550</code> 。根据指令换行：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">60 </span><span class="number">01</span></span><br><span class="line"><span class="symbol">60 </span><span class="number">00</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure></p>
<p>EVM 底层循环是从上到下运行每一条指令。<br>我们注释一下汇编代码(以 <code>tag_2</code> 开头)以便阅读：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">  <span class="comment">// 60 01</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">  <span class="comment">// 60 00</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">  <span class="comment">// 81</span></span><br><span class="line">  dup2</span><br><span class="line">  <span class="comment">// 90</span></span><br><span class="line">  swap1</span><br><span class="line">  <span class="comment">// 55</span></span><br><span class="line">  sstore</span><br><span class="line">  <span class="comment">// 50</span></span><br><span class="line">  pop</span><br></pre></td></tr></table></figure></p>
<p>注意汇编中的 <code>0x1</code> 实际上是 <code>push(0x1)</code> 的缩写。这条指令表示吧数字 <code>1</code> 入栈。</p>
<p>如果只盯着这个看，很难捕获到发生了什么。不要担心，模仿 EVM 一行一行地走，很简单的。</p>
<h1 id="模仿-EVM"><a href="#模仿-EVM" class="headerlink" title="模仿 EVM"></a>模仿 EVM</h1><p>EVM 是堆栈机器。指令可以使用栈中的值作为参数，也可以把某一些值入栈作为结果。举个例子， <code>add</code> 指令。</p>
<p>假设栈中有 2 个值：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></p>
<p>当 EVM 看到 <code>add</code> 时，它把栈顶的 2 项出栈相加，然后把结果入栈回去，操作后：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p>
<p>以后我们仍然用 <code>[]</code> 这个符号来表示栈：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空栈</span></span><br><span class="line"><span class="built_in">stack</span>: []</span><br><span class="line"><span class="comment">// 有3个元素的栈. 栈顶元素是 3. 栈底元素是 1.</span></span><br><span class="line"><span class="built_in">stack</span>: [<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>用 <code>{}</code> 来表示合约存储:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空存储</span></span><br><span class="line"><span class="symbol">store:</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 值 0x1 存储在地址 0x0.</span></span><br><span class="line"><span class="symbol">store:</span> &#123; <span class="number">0x0</span> =&gt; <span class="number">0x1</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>现在我们来看一些实际的字节码。我们将模仿EVM运行字节序列 <code>6001600081905550</code> ，同时写出每一条指令运行后的机器状态：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 60 01: 将1入栈</span></span><br><span class="line"><span class="number">0x1</span></span><br><span class="line"><span class="symbol">  stack:</span> [<span class="number">0x1</span>]</span><br><span class="line"><span class="comment">// 60 00: 将0入栈</span></span><br><span class="line"><span class="number">0x0</span></span><br><span class="line"><span class="symbol">  stack:</span> [<span class="number">0x0</span> <span class="number">0x1</span>]</span><br><span class="line"><span class="comment">// 81: 复制栈中的第二个元素，入栈</span></span><br><span class="line">dup2</span><br><span class="line"><span class="symbol">  stack:</span> [<span class="number">0x1</span> <span class="number">0x0</span> <span class="number">0x1</span>]</span><br><span class="line"><span class="comment">// 90: 交换栈顶2个元素</span></span><br><span class="line">swap1</span><br><span class="line"><span class="symbol">  stack:</span> [<span class="number">0x0</span> <span class="number">0x1</span> <span class="number">0x1</span>]</span><br><span class="line"><span class="comment">// 55: 把值 0x1 存储到地址 0x0</span></span><br><span class="line"><span class="comment">// 这条指令使用了栈顶的两个元素</span></span><br><span class="line">sstore</span><br><span class="line"><span class="symbol">  stack:</span> [<span class="number">0x1</span>]</span><br><span class="line"><span class="symbol">  store:</span> &#123; <span class="number">0x0</span> =&gt; <span class="number">0x1</span> &#125;</span><br><span class="line"><span class="comment">// 50: 出栈，即丢掉栈顶一个元素</span></span><br><span class="line">pop</span><br><span class="line"><span class="symbol">  stack:</span> []</span><br><span class="line"><span class="symbol">  store:</span> &#123; <span class="number">0x0</span> =&gt; <span class="number">0x1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>运行完了。栈空了，同时有一个元素存储到了存储器里。</p>
<p>值得注意的是 Solidity 决定把状态变量 <code>uint256 a</code> 存储到地址 <code>0x0</code> 。很可能其他语言会把状态变量存到其他地方。</p>
<p>写出伪代码， EVM 运行 <code>6001600081905550</code> 就像是这样：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="function"><span class="title">sstore</span><span class="params">(<span class="number">0</span>x0, <span class="number">0</span>x1)</span></span></span><br></pre></td></tr></table></figure>
<p>看仔细一点，会发现 <code>dup2</code>, <code>swap1</code>, <code>pop</code> 是多余的。汇编代码可以更简单：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1</span></span><br><span class="line"><span class="number">0x0</span></span><br><span class="line">sstore</span><br></pre></td></tr></table></figure>
<p>你可以试着模拟运行上面的<code>3</code>条指令，肯定会惊喜地发现它们结束时的机器状态是一样的：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">stack:</span> []</span><br><span class="line"><span class="symbol">store:</span> &#123; <span class="number">0x0</span> =&gt; <span class="number">0x1</span> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-个存储变量"><a href="#2-个存储变量" class="headerlink" title="2 个存储变量"></a>2 个存储变量</h1><p>添加另一个相同数据类型的存储变量：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c2.sol</span></span><br><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.11</span>;</span><br><span class="line">contract C &#123;</span><br><span class="line">    uint256 a;</span><br><span class="line">    uint256 b;</span><br><span class="line">    function C() &#123;</span><br><span class="line">      a = <span class="number">1</span>;</span><br><span class="line">      b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译，注意 <code>tag_2</code>:<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ solc --bin --asm c2.sol</span><br><span class="line"><span class="comment">// ... more stuff omitted</span></span><br><span class="line">tag_2:</span><br><span class="line">    <span class="comment">/* "c2.sol":99:100  1 */</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">    <span class="comment">/* "c2.sol":95:96  a */</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">    <span class="comment">/* "c2.sol":95:100  a = 1 */</span></span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  <span class="keyword">pop</span></span><br><span class="line">    <span class="comment">/* "c2.sol":112:113  2 */</span></span><br><span class="line">  <span class="number">0x2</span></span><br><span class="line">    <span class="comment">/* "c2.sol":108:109  b */</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">    <span class="comment">/* "c2.sol":108:113  b = 2 */</span></span><br><span class="line">  dup2</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  <span class="keyword">pop</span></span><br></pre></td></tr></table></figure></p>
<p>汇编伪代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a = 1</span></span><br><span class="line"><span class="function"><span class="title">sstore</span><span class="params">(<span class="number">0</span>x0, <span class="number">0</span>x1)</span></span></span><br><span class="line"><span class="comment">// b = 2</span></span><br><span class="line"><span class="function"><span class="title">sstore</span><span class="params">(<span class="number">0</span>x1, <span class="number">0</span>x2)</span></span></span><br></pre></td></tr></table></figure>
<p>现在我们知道这两个存储变量是依次存储的，<code>a</code> 存储在地址 <code>0x0</code>，<code>b</code> 存储在地址 <code>0x1</code>。</p>
<h1 id="打包存储"><a href="#打包存储" class="headerlink" title="打包存储"></a>打包存储</h1><p>每个存储单元能存 32 字节。如果全部使用 32 字节的话，如果一个变量只要 16 字节，那就很浪费了。 Solidity 通过把 2 个短的数据类型打包成 1 个来提高存储效率。</p>
<p>把 <code>a</code> 和 <code>b</code> 改成每个 16 字节：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pragma</span> solidity<span class="regexp"> ^0.4.11</span>;</span><br><span class="line"><span class="attribute">contract</span> C &#123;</span><br><span class="line">    <span class="attribute">uint128</span> a;</span><br><span class="line">    <span class="attribute">uint128</span> b;</span><br><span class="line">    <span class="attribute">function</span> C() &#123;</span><br><span class="line">      <span class="attribute">a</span> = <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">b</span> = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译合约：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> solc --bin --asm c3.sol</span></span><br></pre></td></tr></table></figure>
<p>生成的汇编代码更复杂了：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">tag_2:</span><br><span class="line">  // a = 1</span><br><span class="line">  0x1</span><br><span class="line">  0x0</span><br><span class="line">  dup1</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br><span class="line">  // b = 2</span><br><span class="line">  0x2</span><br><span class="line">  0x0</span><br><span class="line">  0x10</span><br><span class="line">  0x100</span><br><span class="line">  exp</span><br><span class="line">  dup2</span><br><span class="line">  sload</span><br><span class="line">  dup2</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  mul</span><br><span class="line">  not</span><br><span class="line">  and</span><br><span class="line">  swap1</span><br><span class="line">  dup4</span><br><span class="line">  0xffffffffffffffffffffffffffffffff</span><br><span class="line">  and</span><br><span class="line">  mul</span><br><span class="line">  or</span><br><span class="line">  swap1</span><br><span class="line">  sstore</span><br><span class="line">  pop</span><br></pre></td></tr></table></figure></p>
<p>上面的汇编代码把 2 个变量打包到1个存储地址( <code>0x0</code> )，像这样：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">         b         </span>][<span class="symbol">         a         </span>]</span><br><span class="line">[<span class="string">16 bytes / 128 bits</span>][<span class="symbol">16 bytes / 128 bits</span>]</span><br></pre></td></tr></table></figure>
<p>打包的原因是目前最贵的操作就是存储空间的使用：</p>
<ul>
<li><code>sstore</code> 花费 20,000 gas 来第一次写入一个新地址</li>
<li><code>sstore</code> 花费 5,000 gas 来随后写入一个已存在的地址</li>
<li><code>sload</code> 花费 500 gas</li>
<li>大多数指令只花费 3~10 gas</li>
</ul>
<p>通过使用相同的地址， Solidity 为第二个变量存储只支付 5,000 而不是 20,000，省了 15,000 gas。</p>
<h1 id="更多优化"><a href="#更多优化" class="headerlink" title="更多优化"></a>更多优化</h1><p>不分别同 2 个 <code>sstore</code> 指令来保存 <code>a</code> 和 <code>b</code> ，而把2个128比特的数字打包到内存里再使用1个 <code>sstore</code> ，从而节省 5,000 gas。</p>
<p>你可以通过 <code>optimize</code> 标志来让Solidity做这个操作：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">solc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">asm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">optimize</span> <span class="comment">c3</span><span class="string">.</span><span class="comment">sol</span></span><br></pre></td></tr></table></figure>
<p>这个方式生成的汇编代码只使用1个 <code>sload</code> 和1个 <code>sstore</code> :<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">tag_2:</span></span><br><span class="line">    <span class="comment">/* "c3.sol":95:96  a */</span></span><br><span class="line">  <span class="number">0x0</span></span><br><span class="line">    <span class="comment">/* "c3.sol":95:100  a = 1 */</span></span><br><span class="line">  dup1</span><br><span class="line">  sload</span><br><span class="line">    <span class="comment">/* "c3.sol":108:113  b = 2 */</span></span><br><span class="line">  <span class="number">0x200000000000000000000000000000000</span></span><br><span class="line">  not(<span class="keyword">sub(exp(0x2, </span><span class="number">0x80</span>), <span class="number">0x1</span>))</span><br><span class="line">    <span class="comment">/* "c3.sol":95:100  a = 1 */</span></span><br><span class="line">  <span class="keyword">swap1</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">swap2</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment">/* "c3.sol":99:100  1 */</span></span><br><span class="line">  <span class="number">0x1</span></span><br><span class="line">    <span class="comment">/* "c3.sol":95:100  a = 1 */</span></span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">sub(exp(0x2, </span><span class="number">0x80</span>), <span class="number">0x1</span>)</span><br><span class="line">    <span class="comment">/* "c3.sol":108:113  b = 2 */</span></span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">or</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">swap1</span></span><br><span class="line"><span class="keyword"> </span> sstore</span><br></pre></td></tr></table></figure></p>
<p>字节码是<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">600080547002000000000000000000000000000000006001608060020</span>a03199091166001176001608060020a<span class="number">0316179055</span></span><br></pre></td></tr></table></figure></p>
<p>格式化字节码成一行一条指令的形式：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push 0x0</span></span><br><span class="line"><span class="number">60</span> <span class="number">00</span></span><br><span class="line"><span class="comment">// dup1</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="comment">// sload</span></span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="comment">// push17 作为 32 字节的数字，把接下来的 17 字节入栈</span></span><br><span class="line"><span class="number">70</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="comment">/* not(sub(exp(0x2, 0x80), 0x1)) */</span></span><br><span class="line"><span class="comment">// push 0x1</span></span><br><span class="line"><span class="number">60</span> <span class="number">01</span></span><br><span class="line"><span class="comment">// push 0x80 (32)</span></span><br><span class="line"><span class="number">60</span> <span class="number">80</span></span><br><span class="line"><span class="comment">// push 0x80 (2)</span></span><br><span class="line"><span class="number">60</span> <span class="number">02</span></span><br><span class="line"><span class="comment">// exp</span></span><br><span class="line"><span class="number">0</span>a</span><br><span class="line"><span class="comment">// sub</span></span><br><span class="line"><span class="number">03</span></span><br><span class="line"><span class="comment">// not</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="comment">// swap1</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="comment">// swap2</span></span><br><span class="line"><span class="number">91</span></span><br><span class="line"><span class="comment">// and</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="comment">// push 0x1</span></span><br><span class="line"><span class="number">60</span> <span class="number">01</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="comment">/* sub(exp(0x2, 0x80), 0x1) */</span></span><br><span class="line"><span class="comment">// push 0x1</span></span><br><span class="line"><span class="number">60</span> <span class="number">01</span></span><br><span class="line"><span class="comment">// push 0x80</span></span><br><span class="line"><span class="number">60</span> <span class="number">80</span></span><br><span class="line"><span class="comment">// push 0x02</span></span><br><span class="line"><span class="number">60</span> <span class="number">02</span></span><br><span class="line"><span class="comment">// exp</span></span><br><span class="line"><span class="number">0</span>a</span><br><span class="line"><span class="comment">// sub</span></span><br><span class="line"><span class="number">03</span></span><br><span class="line"><span class="comment">// and</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="comment">// swap1</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="comment">// sstore</span></span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure></p>
<p>在汇编代码里有4个魔法变量：</p>
<ul>
<li><p>0x1 (16 字节), 使用低 16 位字节</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 字节码表示 <span class="number">0</span>x01</span><br><span class="line"><span class="number">16</span>:<span class="number">32</span> <span class="number">0</span>x000000000000000000000<span class="number">00000000000</span></span><br><span class="line"><span class="number">00</span>:<span class="number">16</span> <span class="number">0</span>x000000000000000000000<span class="number">00000000001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>0x2 (16 字节), 使用高 16 位字节</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//字节码表示 <span class="number">0</span>x2000000000000000000000<span class="number">00000000000</span></span><br><span class="line"><span class="number">16</span>:<span class="number">32</span> <span class="number">0</span>x000000000000000000000<span class="number">00000000002</span></span><br><span class="line"><span class="number">00</span>:<span class="number">16</span> <span class="number">0</span>x000000000000000000000<span class="number">00000000000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>not(sub(exp(0x2, 0x80), 0x1))</code></p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高 16 字节的二进制掩码</span></span><br><span class="line"><span class="attribute">16</span>:<span class="number">32</span> <span class="number">0</span>xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br><span class="line"><span class="number">00</span>:<span class="number">16</span> <span class="number">0</span>x00000000000000000000000000000000</span><br></pre></td></tr></table></figure>
<ul>
<li><code>sub(exp(0x2, 0x80), 0x1)</code></li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低 16 字节的二进制掩码</span></span><br><span class="line"><span class="attribute">16</span>:<span class="number">32</span> <span class="number">0</span>x00000000000000000000000000000000 </span><br><span class="line"><span class="number">00</span>:<span class="number">16</span> <span class="number">0</span>xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure>
<p>代码对这些值做了位交换以获得需要的结果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16<span class="selector-pseudo">:32</span> 0<span class="selector-tag">x00000000000000000000000000000002</span> </span><br><span class="line">00<span class="selector-pseudo">:16</span> 0<span class="selector-tag">x00000000000000000000000000000001</span></span><br></pre></td></tr></table></figure></p>
<p>最后，这个 32 字节的值存储在地址 0x0。</p>
<h2 id="gas-的使用"><a href="#gas-的使用" class="headerlink" title="gas 的使用"></a>gas 的使用</h2><blockquote>
<p>60008054700<strong>200000000000000000000000000000000</strong>6001608060020a03199091166001176001608060020a0316179055</p>
</blockquote>
<p>注意 <code>0x200000000000000000000000000000000</code> 嵌在字节码里了。但编译器也可能选择用指令 <code>exp(0x2, 0x81)</code> 计算值，这将生成更短的字节码序列。</p>
<p>结果好像是 <code>0x200000000000000000000000000000000</code> 比 <code>exp(0x2, 0x81)</code> 更便宜。我们看一下分别需要花费的 gas：</p>
<ul>
<li>4 gas  花在一笔交易中的每一个为 0 的数据或代码</li>
<li>68 gas 花在一笔交易中的每一个非 0 的数据或代码</li>
</ul>
<p>比较一下总的gas花费：</p>
<ul>
<li><p>字节码 <code>0x200000000000000000000000000000000</code>. 它有很多 0 ，更便宜<br>(1 <em> 68) + (16 </em> 4) = 196.</p>
</li>
<li><p>字节码 <code>608160020a</code>. 更短，但没有0.<br>5 * 68 = 340.</p>
</li>
</ul>
<p>更长但有更多 0 的序列实际上更便宜！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>EVM 编译器实际上没有优化字节码大小或速度抑或内存效率。取而代之的是，它优化了 gas 的使用，这是一个间接的层面，可以激励以太坊区块链进行高效计算。</p>
<p>我们已经看到了 EVM 一些诡异的方面：</p>
<ul>
<li>EVM 是 256 比特机器。以 32 字节为块来操作数据最自然。</li>
<li>持久化存储很贵。</li>
<li>Solidity 编译器为了最小化 gas 的使用采取了有趣的做法。</li>
</ul>
<p>gas 成本的设定是任意的，以后可能会变。随着成本的变化，编译器会做出不同的选择。</p>
<hr>
<p>在本系列文章中，关于 EVM 我会写：</p>
<ul>
<li>EVM 汇编代码的介绍</li>
<li>定长数据类型如何表示</li>
<li>动态数据类型如何表示</li>
<li>ABI编码的外部函数如何调用</li>
<li>一个新合约创建时发生了什么</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 QtumJS 文档]]></title>
      <url>/2018/06/06/2018-06-06-%E7%BF%BB%E8%AF%91-QtumJS%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://github.com/qtumproject/qtumjs-doc" target="_blank" rel="noopener">https://github.com/qtumproject/qtumjs-doc</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>安装 qtumjs</p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> qtumjs</span><br></pre></td></tr></table></figure>
<p>QtumJS是一个用于在Qtum区块链上开发DApp的JavaScript库。您可以使用此库来开发在浏览器中运行的前端UI以及在NodeJS中运行的后端脚本。</p>
<p>主要的类：<br>类 | 描述<br>——— | ———–<br>QtumRPCRaw | 使用 JSONRPC 1.0调用合约，直接访问 <code>qtumd</code> 的区块链 RPC 服务。<br>QtumRPC | <code>QtumRPCRaw</code> 的封装，提供像 JSONRPC 2.0 这样的接口。<br>Contract | 与智能合约交互的抽象层。使用 <a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI" target="_blank" rel="noopener">ABI encoding/decoding</a>.</p>
<p>QtumJS 使用 <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> 开发, 因此为所有 API 提供了健壮的类型定义。 我们建议使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> 来获得语言支持，例如类型提示和自动完成。</p>
<p>当然，你愿意的话也可以选择使用普通的 JavaScript 和记事本。</p>
<p>本文档是 QtumJS API 及其基本用法的参考文档。有关 QtumJS 的教程式介绍，查看: <a href="https://github.com/qtumproject/qtumbook/blob/master/part2/erc20-js.md" target="_blank" rel="noopener">QtumBook - ERC20 With QtumJS</a>.</p>
<h2 id="运行-Qtum-RPC"><a href="#运行-Qtum-RPC" class="headerlink" title="运行 Qtum RPC"></a>运行 Qtum RPC</h2><blockquote>
<p>开发模式运行 qtumd：</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm \</span><br><span class="line">  -<span class="ruby">-name myapp \</span></span><br><span class="line"><span class="ruby">  -v <span class="string">`pwd`</span><span class="symbol">:/dapp</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">3889</span><span class="symbol">:</span><span class="number">3889</span> \</span></span><br><span class="line"><span class="ruby">  hayeah/qtumportal</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>测试网络（testnet）运行 qtumd：</p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm \</span><br><span class="line">  -<span class="ruby">-name myapp \</span></span><br><span class="line"><span class="ruby">  -e <span class="string">"QTUM_NETWORK=testnet"</span> \</span></span><br><span class="line"><span class="ruby">  -v <span class="string">`pwd`</span><span class="symbol">:/dapp</span> \</span></span><br><span class="line"><span class="ruby">  -p <span class="number">3889</span><span class="symbol">:</span><span class="number">3889</span> \</span></span><br><span class="line"><span class="ruby">  hayeah/qtumportal</span></span><br></pre></td></tr></table></figure>
<p>QtumJS 依赖 <code>qtumd</code> 提供的访问 QTUM 区块链的 JSON-RPC 服务。</p>
<p>更多细节请查看: <a href="https://github.com/qtumproject/qtumbook/blob/master/SUMMARY.md#part-1---running-qtum" target="_blank" rel="noopener">QtumBook - Running QTUM</a>.</p>
<aside class="notice"><br>默认 JSON-RPC 是 “qtum：test”，运行端口为 3889<br></aside>

<h1 id="ERC20-实例"><a href="#ERC20-实例" class="headerlink" title="ERC20 实例"></a>ERC20 实例</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Qtum,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"qtumjs"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> repoData = <span class="built_in">require</span>(<span class="string">"./solar.json"</span>)</span><br><span class="line"><span class="keyword">const</span> qtum = <span class="keyword">new</span> Qtum(<span class="string">"http://qtum:test@localhost:3889"</span>, repoData)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myToken = qtum.contract(<span class="string">"zeppelin-solidity/contracts/token/CappedToken.sol"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">fromAddr, toAddr, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tx = <span class="keyword">await</span> myToken.send(<span class="string">"transfer"</span>, [toAddr, amount], &#123;</span><br><span class="line">    senderAddress: fromAddr,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"transfer tx:"</span>, tx.txid)</span><br><span class="line">  <span class="built_in">console</span>.log(tx)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> tx.confirm(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"transfer confirmed"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设 <code>solar.json</code> 包含已部署的合约，则可以使用 qtumjs 调用代币合约的方法来流通代币。</p>
<p>一个实例 <a href="https://github.com/qtumproject/qtumbook-mytoken-qtumjs-cli/blob/29fab6dfcca55013c7efa8ee5e91bbc8c40ca55a/solar.development.json.example" target="_blank" rel="noopener">solar.json</a>. 这个可以使用 <a href="https://github.com/qtumproject/solar" target="_blank" rel="noopener">solar</a> 部署工具自动生成。</p>
<p>完整实例: <a href="https://github.com/qtumproject/qtumbook-mytoken-qtumjs-cli" target="_blank" rel="noopener">qtumproject/qtumbook-mytoken-qtumjs-cli</a></p>
<p>合约开发, 查看 <a href="https://github.com/qtumproject/solar" target="_blank" rel="noopener">Solar Smart Contract Deployment Tool</a>.</p>
<p>为了充实教程, 查看 <a href="https://github.com/qtumproject/qtumbook/blob/master/part2/erc20-js.md" target="_blank" rel="noopener">QtumBook - ERC20 With QtumJS</a>.</p>
<h1 id="Qtum"><a href="#Qtum" class="headerlink" title="Qtum"></a>Qtum</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> repoData = <span class="built_in">require</span>(<span class="string">"./solar.json"</span>)</span><br><span class="line"><span class="keyword">const</span> qtum = <span class="keyword">new</span> Qtum(<span class="string">"http://qtum:test@localhost:3889"</span>, repoData)</span><br></pre></td></tr></table></figure>
<p><code>Qtum</code> 是 <code>qtumjs</code> API 的一个对象. 它提供两个主要功能：</p>
<ul>
<li>对 <code>qtumd</code> RPC 服务的访问. 它是 <a href="#qtumrpc">QtumRPC</a> 的子类.</li>
<li>实例化 <a href="#contract-2">Contract</a> 对象的工厂方法, 用于与已部署的合约进行交互。</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>qtumd RPC 服务的 URL</td>
</tr>
<tr>
<td>repoData</td>
<td><a href="#icontractsrepodata">IContractsRepoData</a></td>
</tr>
<tr>
<td></td>
<td>关于 Solidity 合约的信息.</td>
</tr>
</tbody>
</table>
<p><code>repoData</code> 包含所有已部署合约或库的 ABI 定义，以及它们的部署地址。这些信息用于实例化 <code>Contract</code> 实例。</p>
<p>使用 <code>Qtum</code> 的工厂方法实例化的 <code>Contract</code> 对象能够解码所有在 <code>repoData</code> 里的事件类型. 但是手动构建的合约只能解码在其范围内定义的事件类型, 这也是 Solidity 编译器输出 ABI 定义的限制。</p>
<p>建议使用 Qtum 来实例化 <code>Contract</code> 对象.</p>
<h2 id="contract"><a href="#contract" class="headerlink" title="contract"></a>contract</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myToken = qtum.contract(<span class="string">"zeppelin-solidity/contracts/token/CappedToken.sol"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例化这个合约使用了 <a href="https://github.com/qtumproject/qtumbook-mytoken-qtumjs-cli/blob/29fab6dfcca55013c7efa8ee5e91bbc8c40ca55a/solar.development.json.example#L3" target="_blank" rel="noopener">这些</a> 信息。</p>
</blockquote>
<p>实例化 <code>Contract</code> 对象的工厂方法，使用了 <code>repoData</code> 中的 ABI 定义和地址。合约对象是使用一个事件 log 解码器来配置的，这个解码器能解码所有 <code>repoData</code> 中已知的事件类型。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>作为 <code>repoData.contracts</code> map 的 key，用于获取合约信息。</td>
</tr>
</tbody>
</table>
<h2 id="rawCall"><a href="#rawCall" class="headerlink" title="rawCall"></a>rawCall</h2><p>继承自 <a href="#rawcall-2">QtumRPC#rawcall</a></p>
<h1 id="Contract"><a href="#Contract" class="headerlink" title="Contract"></a>Contract</h1><p>与智能合约交互的抽象层。</p>
<p>这比使用 <code>QtumRPC</code> 直接调用 RPC 的 <code>sendcontract</code> 和 <code>calltocontract</code> 方法更方便。它处理 ABI 编码，转换 JS 和 Solidity 值。</p>
<ul>
<li>有 API 用于确认交易。</li>
<li>有 API 用于调用合约方法，使用 <code>call</code> 或 <code>send</code> .</li>
<li>有 API 用于获取合约 log 事件。</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rpc = <span class="keyword">new</span> QtumRPC(<span class="string">"http://qtum:test@localhost:3889"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myToken = <span class="keyword">new</span> Contract(rpc, repo.contracts[</span><br><span class="line">  <span class="string">"zeppelin-solidity/contracts/token/CappedToken.sol"</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>合约 <a href="https://github.com/qtumproject/qtumbook-mytoken-qtumjs-cli/blob/29fab6dfcca55013c7efa8ee5e91bbc8c40ca55a/solar.development.json.example#L3" target="_blank" rel="noopener">信息</a> 可以使用 <a href="https://github.com/qtumproject/solar" target="_blank" rel="noopener">solar</a>. 生成</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>rpc</td>
<td>QtumRPC</td>
<td>RPC 对象，用于与合约进行交互</td>
</tr>
<tr>
<td>info</td>
<td><a href="#icontractinfo">IContractInfo</a></td>
<td>信息，用于部署合约</td>
</tr>
</tbody>
</table>
<p>建议使用 <a href="#contract">Qtum#contract</a> 而不是这个构造器。</p>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">totalSupply</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> myToken.call(<span class="string">"totalSupply"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// supply is a BigNumber instance (see: bn.js)</span></span><br><span class="line">  <span class="keyword">const</span> supply = result.outputs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"supply"</span>, supply.toNumber())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例输出:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">address</span>: <span class="string">'a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3'</span>,</span><br><span class="line">  executionResult:</span><br><span class="line">   &#123; <span class="attr">gasUsed</span>: <span class="number">21689</span>,</span><br><span class="line">     excepted: <span class="string">'None'</span>,</span><br><span class="line">     newAddress: <span class="string">'a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3'</span>,</span><br><span class="line">     output: <span class="string">'00000000000000000000000000000000000000000000000000000000000036b0'</span>,</span><br><span class="line">     codeDeposit: <span class="number">0</span>,</span><br><span class="line">     gasRefunded: <span class="number">0</span>,</span><br><span class="line">     depositSize: <span class="number">0</span>,</span><br><span class="line">     gasForDeposit: <span class="number">0</span> &#125;,</span><br><span class="line">  transactionReceipt:</span><br><span class="line">   &#123; <span class="attr">stateRoot</span>: <span class="string">'5a0d9cd5df18165c75755f4345ca81da94f9247c1c031171fd6e2ce1a368844c'</span>,</span><br><span class="line">     gasUsed: <span class="number">21689</span>,</span><br><span class="line">     bloom: <span class="string">'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="string">0000000000000000000000000000000000000000000000000'</span>,</span><br><span class="line">     log: [] &#125;,</span><br><span class="line">  outputs: [ <span class="xml"><span class="tag">&lt;<span class="name">BN:</span> <span class="attr">36b0</span>&gt;</span> ] &#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>模拟 “mint” 调用:</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> myToken.call(<span class="string">"mint"</span>, [<span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>, <span class="number">1000</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果:</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="attr">"executionResult"</span>: &#123;</span><br><span class="line">    <span class="attr">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">    <span class="attr">"excepted"</span>: <span class="string">"None"</span>,</span><br><span class="line">    <span class="attr">"newAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">    <span class="attr">"output"</span>: <span class="string">"0000000000000000000000000000000000000000000000000000000000000001"</span>,</span><br><span class="line">    <span class="attr">"codeDeposit"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"gasRefunded"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"depositSize"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"gasForDeposit"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"transactionReceipt"</span>: &#123;</span><br><span class="line">    <span class="attr">"stateRoot"</span>: <span class="string">"9922edb770bd700a212427d3bc0764a9fed953a987952b2619b8a78dac7498aa"</span>,</span><br><span class="line">    <span class="attr">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">    <span class="attr">"bloom"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000020000000000008000000000000000000000000000000000000000000000000020000000020000000000800000000000000400000000010000000000000000000000000000000000000000000000000000000000000000000000000000080000000080000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000200000000000000000020000000000000000000000000000000000000000000000000020000000000000000"</span>,</span><br><span class="line">    <span class="attr">"log"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">        <span class="attr">"topics"</span>: [</span><br><span class="line">          <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">          <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">        <span class="attr">"topics"</span>: [</span><br><span class="line">          <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">          <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">          <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"outputs"</span>: [</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"logs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"amount"</span>: <span class="string">"3e8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">      <span class="attr">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"3e8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>callcontract</code> 在你本地 qtumd 节点 “模拟” 执行合约方法。这是免费的，实际上并不修改区块链。</p>
<p>这个免费。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>method</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>合约方法名</td>
</tr>
<tr>
<td>args</td>
<td>Array\<any></any></td>
</tr>
<tr>
<td></td>
<td>调用方法的参数</td>
</tr>
<tr>
<td>opts</td>
<td>IContractCallRequestOptions</td>
</tr>
<tr>
<td></td>
<td>调用配置项</td>
</tr>
<tr>
<td>@return</td>
<td>Promise\&lt;<a href="#icontractcallresult">IContractCallResult</a>&gt;</td>
</tr>
<tr>
<td></td>
<td>调用结果，带有 ABI 解码的输出</td>
</tr>
</tbody>
</table>
<h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mint</span>(<span class="params">toAddr, amount</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Submit a `sendtocontract` transaction, invoking the `mint` method.</span></span><br><span class="line">  <span class="keyword">const</span> tx = <span class="keyword">await</span> myToken.send(<span class="string">"mint"</span>, [toAddr, amount])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"tx:"</span>, tx)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wait for 3 confirmations. The callback receives the</span></span><br><span class="line">  <span class="comment">// updated transaction info for each additional confirmation.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Both arguments are optional. `await tx.confirm()` would do.</span></span><br><span class="line">  <span class="keyword">const</span> receipt = <span class="keyword">await</span> tx.confirm(<span class="number">3</span>, <span class="function">(<span class="params">updatedTx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"new confirmation"</span>, updatedTx.txid, updatedTx.confirmations)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"tx receipt:"</span>, <span class="built_in">JSON</span>.stringify(receipt, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例输出:</p>
</blockquote>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mint tx: <span class="number">858347704258506012</span>f538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9</span><br><span class="line">&#123; amount: <span class="number">0</span>,</span><br><span class="line">  fee: -<span class="number">0.081064</span>,</span><br><span class="line">  confirmations: <span class="number">0</span>,</span><br><span class="line">  trusted: true,</span><br><span class="line">  txid: '<span class="number">85834770425850</span><span class="number">6012</span>f538b19b<span class="number">9702</span>d636dc350bc25a7e60d404bf3d2c08efd9',</span><br><span class="line">  walletconflicts: [],</span><br><span class="line">  time: <span class="number">1515475961</span>,</span><br><span class="line">  timereceived: <span class="number">1515475961</span>,</span><br><span class="line">  'bip125-replaceable': 'no',</span><br><span class="line">  details:</span><br><span class="line">   [ &#123; account: '',</span><br><span class="line">       category: 'send',</span><br><span class="line">       amount: <span class="number">0</span>,</span><br><span class="line">       vout: <span class="number">0</span>,</span><br><span class="line">       fee: -<span class="number">0.081064</span>,</span><br><span class="line">       abandoned: false &#125; ],</span><br><span class="line">  hex: '<span class="number">020000000100</span>6a977de<span class="number">7001</span>4fdc<span class="number">2546</span>ed19a<span class="number">53132608</span>6c6c<span class="number">9631</span>cb1c<span class="number">5352</span>db5f09e<span class="number">147736</span>b<span class="number">01000000494830</span><span class="number">45022100</span>b4ca<span class="number">3277</span>0a9f<span class="number">4267</span>9c6d20b7ddb5feb<span class="number">160303</span>fceafc2db0fedba18a22f0b<span class="number">64360220</span>3c<span class="number">2568</span>eb689fd324e76a12f<span class="number">367552</span>fe4cce36b29f<span class="number">8174738209</span>f<span class="number">881959</span>aadbab01feffffff<span class="number">02000000000000</span><span class="number">00006301040340</span>0d<span class="number">0301284440</span>c10f<span class="number">19000000000000</span><span class="number">000000000000</span>dcd32b<span class="number">8727</span>0aeb<span class="number">98033321</span>3da<span class="number">2549</span>c<span class="number">9907</span>e09e<span class="number">94000000</span></span><br><span class="line"><span class="number">00000000000000</span><span class="number">00000000000000</span><span class="number">00000000000000</span><span class="number">00000000000003</span>e814a778c05f1d0f70f<span class="number">1133</span>f4bbf78c1a9a7bf84aed3c<span class="number">2601</span>e<span class="number">7290</span>2e<span class="number">0000001976</span>a914dcd32b<span class="number">8727</span>0aeb<span class="number">98033321</span>3da<span class="number">2549</span>c<span class="number">9907</span>e09e<span class="number">9488</span>ac212e<span class="number">0000</span>',</span><br><span class="line">  method: 'mint',</span><br><span class="line">  confirm: [Function: confirm] &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>回调打印 3 次，分别对应每次确认</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">new</span> confirmation <span class="number">858347704258506012f</span>538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 <span class="number">1</span></span><br><span class="line"><span class="built_in">new</span> confirmation <span class="number">858347704258506012f</span>538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 <span class="number">2</span></span><br><span class="line"><span class="built_in">new</span> confirmation <span class="number">858347704258506012f</span>538b19b9702d636dc350bc25a7e60d404bf3d2c08efd9 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>确认后返回的交易收据：</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"blockHash"</span>: <span class="string">"3b53ad132c26f9c30e5be9f664573428dad8b52e167becea4428d6903cb32740"</span>,</span><br><span class="line">  <span class="attr">"blockNumber"</span>: <span class="number">13917</span>,</span><br><span class="line">  <span class="attr">"transactionHash"</span>: <span class="string">"79338589bb75e1865be889142890a4e25d3b9dbd454ce3f3c2614587c85e2ed3"</span>,</span><br><span class="line">  <span class="attr">"transactionIndex"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"from"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">  <span class="attr">"to"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="attr">"cumulativeGasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="attr">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="attr">"contractAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="attr">"logs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"amount"</span>: <span class="string">"7d0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">      <span class="attr">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"7d0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rawlogs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="attr">"topics"</span>: [</span><br><span class="line">        <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000007d0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="attr">"topics"</span>: [</span><br><span class="line">        <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">        <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000007d0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个交易，在网络全局执行合约方法，会改变区块链。</p>
<p>这要花费 gas.</p>
<p>对一个合约有 2 个异步步骤</p>
<ol>
<li>你提交交易到网络</li>
<li>一旦提交，等待一个指定的确认数</li>
</ol>
<p>成功确认后，返回带有ABI解码的事件日志的交易收据 (<a href="#icontractsendreceipt">IContractSendReceipt</a>)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>method</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>合约方法名</td>
</tr>
<tr>
<td>args</td>
<td>Array\<any></any></td>
</tr>
<tr>
<td></td>
<td>所调用方法的参数</td>
</tr>
<tr>
<td>opts</td>
<td><a href="#icontractsendrequestoptions">IContractSendRequestOptions</a></td>
</tr>
<tr>
<td></td>
<td><em>可选</em> 发送配置项</td>
</tr>
<tr>
<td>@return</td>
<td>Promise\&lt;<a href="#icontractsendresult">IContractSendResult</a>&gt;</td>
</tr>
<tr>
<td></td>
<td>调用结果, 带有 ABI 解码的输出</td>
</tr>
</tbody>
</table>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>如果没有歧义，使用方法名称来调用/发送方法。 如果相同方法名称具有多个定义，请使用方法签名来调用/发送方法。</p>
<blockquote>
<p>方法名 foo 可能有多个定义:</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">int256 _a</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">uint256 _a, uint256 _b</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">int256 _a, int256 _b</span>)</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>foo</code> 方法有 0 个参数和有 1 个参数没有歧义。可以直接调用。</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contract.call(<span class="string">"foo"</span>)</span><br><span class="line">contract.call(<span class="string">"foo"</span>, [<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>foo</code> 方法带 2 个参数的有歧义，必须带完整方法签名：</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contract.call(<span class="string">"foo(uint256,uint256)"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">contract.call(<span class="string">"foo(int256,int256)"</span>, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogs</span>(<span class="params">fromBlock=<span class="number">0</span>, toBlock=<span class="string">"latest"</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> logs = <span class="keyword">await</span> myToken.logs(&#123;</span><br><span class="line">    fromBlock,</span><br><span class="line">    toBlock,</span><br><span class="line">    minconf: <span class="number">1</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(logs, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例输出</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"entries"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"blockHash"</span>: <span class="string">"369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415"</span>,</span><br><span class="line">      <span class="string">"blockNumber"</span>: <span class="number">12184</span>,</span><br><span class="line">      <span class="string">"transactionHash"</span>: <span class="string">"d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7"</span>,</span><br><span class="line">      <span class="string">"transactionIndex"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"from"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="string">"to"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="string">"cumulativeGasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">      <span class="string">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">      <span class="string">"contractAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="string">"topics"</span>: [</span><br><span class="line">        <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span>,</span><br><span class="line">      <span class="string">"event"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">        <span class="string">"amount"</span>: <span class="string">"3e8"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"blockHash"</span>: <span class="string">"369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415"</span>,</span><br><span class="line">      <span class="string">"blockNumber"</span>: <span class="number">12184</span>,</span><br><span class="line">      <span class="string">"transactionHash"</span>: <span class="string">"d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7"</span>,</span><br><span class="line">      <span class="string">"transactionIndex"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"from"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="string">"to"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="string">"cumulativeGasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">      <span class="string">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">      <span class="string">"contractAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="string">"topics"</span>: [</span><br><span class="line">        <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">        <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span>,</span><br><span class="line">      <span class="string">"event"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">        <span class="string">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"3e8"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"count"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"nextblock"</span>: <span class="number">12185</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取由合约生成的 <a href="http://solidity.readthedocs.io/en/develop/abi-spec.html#events" target="_blank" rel="noopener">Solidity 事件日志</a> 。</p>
<p>通过指定 <code>fromBlock</code> 和 <code>toBlock</code>，可以将事件日志查询限制块号范围。 例如，可以查询块 1000 到 1500 之间的事件日志。</p>
<p>此外，你可以使用 <code>minconf</code> 指定事件日志之前确认的最小数量作为结果返回。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>opts</td>
<td><a href="#irpcwaitforlogsrequest">IRPCWaitForLogsRequest</a></td>
</tr>
<tr>
<td></td>
<td>事件日志查询参数</td>
</tr>
<tr>
<td>@return</td>
<td>Promise\&lt;<a href="#icontracteventlogs">IContractEventLogs</a>&gt;</td>
</tr>
<tr>
<td></td>
<td>日志查询结果，带有 ABI 解码的输出</td>
</tr>
</tbody>
</table>
<h2 id="onLogs"><a href="#onLogs" class="headerlink" title="onLogs"></a>onLogs</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myToken.onLog(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry)</span><br><span class="line">&#125;, &#123; <span class="attr">minconf</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>订阅合约新事件。每次收到新事件时都会调用回调。默认情况下，<code>onLog</code> 监听来自区块链顶端的日志。 使用 <code>fromBlock</code> 也可以接收较早的事件。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>callback</td>
<td>(entry: <a href="#icontracteventlog">IContractEventLog</a>) =&gt; void</td>
</tr>
<tr>
<td>opts</td>
<td><a href="#irpcwaitforlogsrequest">IRPCWaitForLogsRequest</a></td>
</tr>
<tr>
<td></td>
<td>事件日志查询参数</td>
</tr>
</tbody>
</table>
<h2 id="logEmitter"><a href="#logEmitter" class="headerlink" title="logEmitter"></a>logEmitter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.emitter = myToken.logEmitter(&#123; <span class="attr">minconf</span>: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.emitter.on(<span class="string">"Mint"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.emitter.on(<span class="string">"Transfer"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.emitter.on(<span class="string">"?"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="comment">// all un-decodeable events</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用 <a href="https://github.com/primus/eventemitter3" target="_blank" rel="noopener">EventsEmitter</a> 接口订阅合约新事件。发出的事件是 <a href="#icontracteventlog">IContractEventLog</a> 对象。</p>
<p>Solidity 事件名作为发出的事件名使用。</p>
<p>缺失 ABI 定义的事件 (即不能解析) 会发送 “?”.</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>opts</td>
<td><a href="#irpcwaitforlogsrequest">IRPCWaitForLogsRequest</a></td>
</tr>
<tr>
<td></td>
<td>事件日志查询参数</td>
</tr>
</tbody>
</table>
<h2 id="receipt"><a href="#receipt" class="headerlink" title="receipt"></a>receipt</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> txid = <span class="string">"62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"</span></span><br><span class="line"><span class="keyword">const</span> receipt = <span class="keyword">await</span> qrcToken.receipt(txid)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(receipt, <span class="literal">null</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例输出</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"blockHash"</span>: <span class="string">"af37cb8d9905521542243005fadc9f18c1498c9823e35fa277ea1c37174c289a"</span>,</span><br><span class="line">  <span class="string">"blockNumber"</span>: <span class="number">83981</span>,</span><br><span class="line">  <span class="string">"transactionHash"</span>: <span class="string">"62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"</span>,</span><br><span class="line">  <span class="string">"transactionIndex"</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="string">"from"</span>: <span class="string">"57142e3bcf000f28890b5d979afc7ea90204e1de"</span>,</span><br><span class="line">  <span class="string">"to"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">  <span class="string">"cumulativeGasUsed"</span>: <span class="number">37029</span>,</span><br><span class="line">  <span class="string">"gasUsed"</span>: <span class="number">37029</span>,</span><br><span class="line">  <span class="string">"contractAddress"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">  <span class="string">"logs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">      <span class="string">"from"</span>: <span class="string">"57142e3bcf000f28890b5d979afc7ea90204e1de"</span>,</span><br><span class="line">      <span class="string">"to"</span>: <span class="string">"c0ed80283c53c300c31c2bda6eca841e53cb6a21"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"1ba5add5700"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rawlogs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">      <span class="string">"topics"</span>: [</span><br><span class="line">        <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">        <span class="string">"00000000000000000000000057142e3bcf000f28890b5d979afc7ea90204e1de"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000c0ed80283c53c300c31c2bda6eca841e53cb6a21"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"data"</span>: <span class="string">"000000000000000000000000000000000000000000000000000001ba5add5700"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取已被网络接受的交易收据。 如果交易尚未确认，则返回空值。</p>
<p>交易事件日志是 ABI 编码</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>txid</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>交易 ID</td>
</tr>
<tr>
<td>@return</td>
<td>Promise\&lt;<a href="#icontractsendreceipt">IContractSendReceipt</a>&gt;</td>
</tr>
<tr>
<td></td>
<td>交易收据, 带有事件日志.</td>
</tr>
</tbody>
</table>
<h1 id="QtumRPC"><a href="#QtumRPC" class="headerlink" title="QtumRPC"></a>QtumRPC</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rpc = <span class="keyword">new</span> QtumRPC(<span class="string">'http://qtum:test@localhost:3889'</span>);</span><br></pre></td></tr></table></figure>
<p>这是一个用于直接访问 <code>qtumd</code> RPC API 的 JSON-RPC 客户端。它不会为你处理任何 ABI 编码或解码。</p>
<p>有需要的话你可以把 RPC 用户名和密码包含到 URL 里。在例子中，用户名是 <code>qtum</code> ，密码是 <code>test</code>.</p>
<p>QtumRPC类有一些在合约抽象内部使用的未公开的方法。 考虑将来可能会发生变化的任何未经证实的不受支持的内容。 现在，rawCall是唯一的公共API。<br>注意: <code>QtumRPC</code> 类有一些没文档的 public 方法在 <code>Contract</code> 抽象层内部使用到了. 你要考虑到之后可能不支持的无文档的内容. 现在 <code>rawCall</code> 是唯一发布的 API.</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>qtumd RPC 服务的 URL</td>
</tr>
</tbody>
</table>
<h2 id="rawCall-1"><a href="#rawCall-1" class="headerlink" title="rawCall"></a>rawCall</h2><blockquote>
<p>调用 <code>getinfo</code> RPC 方法以获取 Qutm 区块链的基本信息：</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="keyword">await</span> rpc.rawCall(<span class="string">"getinfo"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>getinfo</code> 的输出:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">version</span>: <span class="number">141300</span>,</span><br><span class="line">  protocolversion: <span class="number">70016</span>,</span><br><span class="line">  walletversion: <span class="number">130000</span>,</span><br><span class="line">  balance: <span class="number">0</span>,</span><br><span class="line">  stake: <span class="number">0</span>,</span><br><span class="line">  blocks: <span class="number">85685</span>,</span><br><span class="line">  timeoffset: <span class="number">0</span>,</span><br><span class="line">  connections: <span class="number">8</span>,</span><br><span class="line">  proxy: <span class="string">''</span>,</span><br><span class="line">  difficulty:</span><br><span class="line">   &#123; <span class="string">'proof-of-work'</span>: <span class="number">0.0000152587890625</span>,</span><br><span class="line">     <span class="string">'proof-of-stake'</span>: <span class="number">5207642.8878753</span> &#125;,</span><br><span class="line">  testnet: <span class="literal">false</span>,</span><br><span class="line">  moneysupply: <span class="number">100322740</span>,</span><br><span class="line">  keypoololdest: <span class="number">1513325658</span>,</span><br><span class="line">  keypoolsize: <span class="number">100</span>,</span><br><span class="line">  paytxfee: <span class="number">0</span>,</span><br><span class="line">  relayfee: <span class="number">0.004</span>,</span><br><span class="line">  errors: <span class="string">''</span> &#125;</span><br></pre></td></tr></table></figure>
<p>发起一个 JSON-RPC 1.0 方法调用, 返回调用结果. 如果 JSON API 返回不是 200 HTTP 结果，则抛出错误。</p>
<blockquote>
<p>使用 <code>try...catch</code> 处理错误:</p>
</blockquote>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> rpc.rawCall(<span class="string">"unknown-method-hohoho"</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"err"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="All-RPC-方法"><a href="#All-RPC-方法" class="headerlink" title="All RPC 方法"></a>All RPC 方法</h2><p>qtumd 支持的所有 RPC 方法 .</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">== Blockchain ==</span><br><span class="line">callcontract <span class="string">"address"</span> <span class="string">"data"</span> (<span class="built_in"> address </span>)</span><br><span class="line">getaccountinfo <span class="string">"address"</span></span><br><span class="line">getbestblockhash</span><br><span class="line">getblock <span class="string">"blockhash"</span> ( verbose )</span><br><span class="line">getblockchaininfo</span><br><span class="line">getblockcount</span><br><span class="line">getblockhash height</span><br><span class="line">getblockheader <span class="string">"hash"</span> ( verbose )</span><br><span class="line">getchaintips</span><br><span class="line">getdifficulty</span><br><span class="line">getmempoolancestors txid (verbose)</span><br><span class="line">getmempooldescendants txid (verbose)</span><br><span class="line">getmempoolentry txid</span><br><span class="line">getmempoolinfo</span><br><span class="line">getrawmempool ( verbose )</span><br><span class="line">getstorage <span class="string">"address"</span></span><br><span class="line">gettransactionreceipt <span class="string">"hash"</span></span><br><span class="line">gettxout <span class="string">"txid"</span> n ( include_mempool )</span><br><span class="line">gettxoutproof [<span class="string">"txid"</span>,<span class="built_in">..</span>.] ( blockhash )</span><br><span class="line">gettxoutsetinfo</span><br><span class="line">listcontracts (start maxDisplay)</span><br><span class="line">preciousblock <span class="string">"blockhash"</span></span><br><span class="line">pruneblockchain</span><br><span class="line">searchlogs &lt;fromBlock&gt; &lt;toBlock&gt; (address) (topics)</span><br><span class="line">verifychain ( checklevel nblocks )</span><br><span class="line">verifytxoutproof <span class="string">"proof"</span></span><br><span class="line">waitforlogs (fromBlock) (toBlock) (filter) (minconf)</span><br><span class="line"></span><br><span class="line">== Control ==</span><br><span class="line">getinfo</span><br><span class="line">getmemoryinfo</span><br><span class="line">help ( <span class="string">"command"</span> )</span><br><span class="line">stop</span><br><span class="line"></span><br><span class="line">== Generating ==</span><br><span class="line">generate nblocks ( maxtries )</span><br><span class="line">generatetoaddress nblocks<span class="built_in"> address </span>(maxtries)</span><br><span class="line"></span><br><span class="line">== Mining ==</span><br><span class="line">getblocktemplate ( TemplateRequest )</span><br><span class="line">getmininginfo</span><br><span class="line">getnetworkhashps ( nblocks height )</span><br><span class="line">getstakinginfo</span><br><span class="line">getsubsidy [nTarget]</span><br><span class="line">prioritisetransaction &lt;txid&gt; &lt;priority delta&gt; &lt;fee delta&gt;</span><br><span class="line">submitblock <span class="string">"hexdata"</span> ( <span class="string">"jsonparametersobject"</span> )</span><br><span class="line"></span><br><span class="line">==<span class="built_in"> Network </span>==</span><br><span class="line">addnode <span class="string">"node"</span> <span class="string">"add|remove|onetry"</span></span><br><span class="line">clearbanned</span><br><span class="line">disconnectnode <span class="string">"node"</span></span><br><span class="line">getaddednodeinfo ( <span class="string">"node"</span> )</span><br><span class="line">getconnectioncount</span><br><span class="line">getnettotals</span><br><span class="line">getnetworkinfo</span><br><span class="line">getpeerinfo</span><br><span class="line">listbanned</span><br><span class="line">ping</span><br><span class="line">setban <span class="string">"subnet"</span> <span class="string">"add|remove"</span> (bantime) (absolute)</span><br><span class="line">setnetworkactive <span class="literal">true</span>|<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">== Rawtransactions ==</span><br><span class="line">createrawtransaction [&#123;<span class="string">"txid"</span>:<span class="string">"id"</span>,<span class="string">"vout"</span>:n&#125;,<span class="built_in">..</span>.] &#123;<span class="string">"address"</span>:amount,<span class="string">"data"</span>:<span class="string">"hex"</span>,<span class="built_in">..</span>.&#125; ( locktime )</span><br><span class="line">decoderawtransaction <span class="string">"hexstring"</span></span><br><span class="line">decodescript <span class="string">"hexstring"</span></span><br><span class="line">fromhexaddress <span class="string">"hexaddress"</span></span><br><span class="line">fundrawtransaction <span class="string">"hexstring"</span> ( options )</span><br><span class="line">gethexaddress <span class="string">"address"</span></span><br><span class="line">getrawtransaction <span class="string">"txid"</span> ( verbose )</span><br><span class="line">sendrawtransaction <span class="string">"hexstring"</span> ( allowhighfees )</span><br><span class="line">signrawtransaction <span class="string">"hexstring"</span> ( [&#123;<span class="string">"txid"</span>:<span class="string">"id"</span>,<span class="string">"vout"</span>:n,<span class="string">"scriptPubKey"</span>:<span class="string">"hex"</span>,<span class="string">"redeemScript"</span>:<span class="string">"hex"</span>&#125;,<span class="built_in">..</span>.] [<span class="string">"privatekey1"</span>,<span class="built_in">..</span>.] sighashtype )</span><br><span class="line"></span><br><span class="line">== Util ==</span><br><span class="line">createmultisig nrequired [<span class="string">"key"</span>,<span class="built_in">..</span>.]</span><br><span class="line">estimatefee nblocks</span><br><span class="line">estimatepriority nblocks</span><br><span class="line">estimatesmartfee nblocks</span><br><span class="line">estimatesmartpriority nblocks</span><br><span class="line">signmessagewithprivkey <span class="string">"privkey"</span> <span class="string">"message"</span></span><br><span class="line">validateaddress <span class="string">"address"</span></span><br><span class="line">verifymessage <span class="string">"address"</span> <span class="string">"signature"</span> <span class="string">"message"</span></span><br><span class="line"></span><br><span class="line">== Wallet ==</span><br><span class="line">abandontransaction <span class="string">"txid"</span></span><br><span class="line">addmultisigaddress nrequired [<span class="string">"key"</span>,<span class="built_in">..</span>.] ( <span class="string">"account"</span> )</span><br><span class="line">addwitnessaddress <span class="string">"address"</span></span><br><span class="line">backupwallet <span class="string">"destination"</span></span><br><span class="line">bumpfee <span class="string">"txid"</span> ( options )</span><br><span class="line">createcontract <span class="string">"bytecode"</span> (gaslimit gasprice <span class="string">"senderaddress"</span> broadcast)</span><br><span class="line">dumpprivkey <span class="string">"address"</span></span><br><span class="line">dumpwallet <span class="string">"filename"</span></span><br><span class="line">encryptwallet <span class="string">"passphrase"</span></span><br><span class="line">getaccount <span class="string">"address"</span></span><br><span class="line">getaccountaddress <span class="string">"account"</span></span><br><span class="line">getaddressesbyaccount <span class="string">"account"</span></span><br><span class="line">getbalance ( <span class="string">"account"</span> minconf include_watchonly )</span><br><span class="line">getnewaddress ( <span class="string">"account"</span> )</span><br><span class="line">getrawchangeaddress</span><br><span class="line">getreceivedbyaccount <span class="string">"account"</span> ( minconf )</span><br><span class="line">getreceivedbyaddress <span class="string">"address"</span> ( minconf )</span><br><span class="line">gettransaction <span class="string">"txid"</span> ( include_watchonly ) (waitconf)</span><br><span class="line">getunconfirmedbalance</span><br><span class="line">getwalletinfo</span><br><span class="line">importaddress <span class="string">"address"</span> ( <span class="string">"label"</span> rescan p2sh )</span><br><span class="line">importmulti <span class="string">"requests"</span> <span class="string">"options"</span></span><br><span class="line">importprivkey <span class="string">"qtum"</span> ( <span class="string">"label"</span> ) ( rescan )</span><br><span class="line">importprunedfunds</span><br><span class="line">importpubkey <span class="string">"pubkey"</span> ( <span class="string">"label"</span> rescan )</span><br><span class="line">importwallet <span class="string">"filename"</span></span><br><span class="line">keypoolrefill ( newsize )</span><br><span class="line">listaccounts ( minconf include_watchonly)</span><br><span class="line">listaddressgroupings</span><br><span class="line">listlockunspent</span><br><span class="line">listreceivedbyaccount ( minconf include_empty include_watchonly)</span><br><span class="line">listreceivedbyaddress ( minconf include_empty include_watchonly)</span><br><span class="line">listsinceblock ( <span class="string">"blockhash"</span> target_confirmations include_watchonly)</span><br><span class="line">listtransactions ( <span class="string">"account"</span> count skip include_watchonly)</span><br><span class="line">listunspent ( minconf maxconf  [<span class="string">"addresses"</span>,<span class="built_in">..</span>.] [include_unsafe] )</span><br><span class="line">lockunspent unlock ([&#123;<span class="string">"txid"</span>:<span class="string">"txid"</span>,<span class="string">"vout"</span>:n&#125;,<span class="built_in">..</span>.])</span><br><span class="line">move <span class="string">"fromaccount"</span> <span class="string">"toaccount"</span> amount ( minconf <span class="string">"comment"</span> )</span><br><span class="line">removeprunedfunds <span class="string">"txid"</span></span><br><span class="line">reservebalance [&lt;reserve&gt; [amount]]</span><br><span class="line">sendfrom <span class="string">"fromaccount"</span> <span class="string">"toaddress"</span> amount ( minconf <span class="string">"comment"</span> <span class="string">"comment_to"</span> )</span><br><span class="line">sendmany <span class="string">"fromaccount"</span> &#123;<span class="string">"address"</span>:amount,<span class="built_in">..</span>.&#125; ( minconf <span class="string">"comment"</span> [<span class="string">"address"</span>,<span class="built_in">..</span>.] )</span><br><span class="line">sendmanywithdupes <span class="string">"fromaccount"</span> &#123;<span class="string">"address"</span>:amount,<span class="built_in">..</span>.&#125; ( minconf <span class="string">"comment"</span> [<span class="string">"address"</span>,<span class="built_in">..</span>.] )</span><br><span class="line">sendtoaddress <span class="string">"address"</span> amount ( <span class="string">"comment"</span> <span class="string">"comment_to"</span> subtractfeefromamount )</span><br><span class="line">sendtocontract <span class="string">"contractaddress"</span> <span class="string">"data"</span> (amount gaslimit gasprice senderaddress broadcast)</span><br><span class="line">setaccount <span class="string">"address"</span> <span class="string">"account"</span></span><br><span class="line">settxfee amount</span><br><span class="line">signmessage <span class="string">"address"</span> <span class="string">"message"</span></span><br></pre></td></tr></table></figure>
<h2 id="实例-getblockcount"><a href="#实例-getblockcount" class="headerlink" title="实例: getblockcount"></a>实例: getblockcount</h2><p>返回最长的区块链的块数。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> rpc.rawCall(<span class="string">"getblockcount"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">85687</span></span><br></pre></td></tr></table></figure>
<h2 id="实例-getnewaddress"><a href="#实例-getnewaddress" class="headerlink" title="实例: getnewaddress"></a>实例: getnewaddress</h2><p>返回接收付款的新 Qtum 地址。可能对要为用户生成存款地址的交易所有用。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> rpc.rawCall(<span class="string">"getnewaddress"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果</p>
</blockquote>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QS<span class="symbol">nrDTj4</span>U<span class="symbol">NcRwKdhY8</span>sUZEd<span class="number">74</span>VzwqeAddW</span><br></pre></td></tr></table></figure>
<h2 id="实例-fromhexaddress"><a href="#实例-fromhexaddress" class="headerlink" title="实例: fromhexaddress"></a>实例: fromhexaddress</h2><p>把一个 base58 pubkeyhash 地址转化成 16 进制地址用于智能合约。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> rpc.rawCall(<span class="string">"gethexaddress"</span>, [<span class="string">"QSnrDTj4UNcRwKdhY8sUZEd74VzwqeAddW"</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">43d</span>ebdac95a0eaa4ff92d6b873944a4d92beae59</span><br></pre></td></tr></table></figure>
<h2 id="实例-gettransactionreceipt"><a href="#实例-gettransactionreceipt" class="headerlink" title="实例: gettransactionreceipt"></a>实例: gettransactionreceipt</h2><p>获得确认交易的收据。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> txid = <span class="string">"62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> rpc.rawCall(<span class="string">"gettransactionreceipt"</span>, [txid])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"blockHash"</span>: <span class="string">"af37cb8d9905521542243005fadc9f18c1498c9823e35fa277ea1c37174c289a"</span>,</span><br><span class="line">    <span class="string">"blockNumber"</span>: <span class="number">83981</span>,</span><br><span class="line">    <span class="string">"transactionHash"</span>: <span class="string">"62fecfd27d71ddb260ac48c73c8f0f87e96d0b3a598ed2c2251caa4e6f9a9d97"</span>,</span><br><span class="line">    <span class="string">"transactionIndex"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">"from"</span>: <span class="string">"57142e3bcf000f28890b5d979afc7ea90204e1de"</span>,</span><br><span class="line">    <span class="string">"to"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">    <span class="string">"cumulativeGasUsed"</span>: <span class="number">37029</span>,</span><br><span class="line">    <span class="string">"gasUsed"</span>: <span class="number">37029</span>,</span><br><span class="line">    <span class="string">"contractAddress"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">    <span class="string">"log"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"49665919e437a4bedb92faa45ed33ebb5a33ee63"</span>,</span><br><span class="line">        <span class="string">"topics"</span>: [</span><br><span class="line">          <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">          <span class="string">"00000000000000000000000057142e3bcf000f28890b5d979afc7ea90204e1de"</span>,</span><br><span class="line">          <span class="string">"000000000000000000000000c0ed80283c53c300c31c2bda6eca841e53cb6a21"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"data"</span>: <span class="string">"000000000000000000000000000000000000000000000000000001ba5add5700"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="类型词典"><a href="#类型词典" class="headerlink" title="类型词典"></a>类型词典</h1><h2 id="IContractInfo"><a href="#IContractInfo" class="headerlink" title="IContractInfo"></a>IContractInfo</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractInfo &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约的 ABI 定义, solc 生成.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  abi: IABIMethod[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  address: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约所有者的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  sender?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与部署合约交互所需的最少部署信息。</p>
<h2 id="IContractCallResult"><a href="#IContractCallResult" class="headerlink" title="IContractCallResult"></a>IContractCallResult</h2><p>调用一个合约方法的返回结果，带有解码的输出和日志。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractCallResult <span class="keyword">extends</span> IRPCCallContractResult &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ABI 解码的输出</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  outputs: <span class="built_in">any</span>[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ABI 解码的日志</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  logs: <span class="built_in">Array</span>&lt;IDecodedSolidityEvent | <span class="literal">null</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IRPCCallContractResult &#123;</span><br><span class="line">  address: <span class="built_in">string</span></span><br><span class="line">  executionResult: IExecutionResult,</span><br><span class="line">  transactionReceipt: &#123;</span><br><span class="line">    stateRoot: <span class="built_in">string</span>,</span><br><span class="line">    gasUsed: <span class="built_in">string</span>,</span><br><span class="line">    bloom: <span class="built_in">string</span>,</span><br><span class="line">    log: <span class="built_in">any</span>[],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IExecutionResult &#123;</span><br><span class="line">  gasUsed: <span class="built_in">number</span>,</span><br><span class="line">  excepted: <span class="built_in">string</span>,</span><br><span class="line">  newAddress: <span class="built_in">string</span>,</span><br><span class="line">  output: <span class="built_in">string</span>,</span><br><span class="line">  codeDeposit: <span class="built_in">number</span>,</span><br><span class="line">  gasRefunded: <span class="built_in">number</span>,</span><br><span class="line">  depositSize: <span class="built_in">number</span>,</span><br><span class="line">  gasForDeposit: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="string">"executionResult"</span>: &#123;</span><br><span class="line">    <span class="string">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">    <span class="string">"excepted"</span>: <span class="string">"None"</span>,</span><br><span class="line">    <span class="string">"newAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">    <span class="string">"output"</span>: <span class="string">"0000000000000000000000000000000000000000000000000000000000000001"</span>,</span><br><span class="line">    <span class="string">"codeDeposit"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"gasRefunded"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"depositSize"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"gasForDeposit"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"transactionReceipt"</span>: &#123;</span><br><span class="line">    <span class="string">"stateRoot"</span>: <span class="string">"9922edb770bd700a212427d3bc0764a9fed953a987952b2619b8a78dac7498aa"</span>,</span><br><span class="line">    <span class="string">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">    <span class="string">"bloom"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000020000000000008000000000000000000000000000000000000000000000000020000000020000000000800000000000000400000000010000000000000000000000000000000000000000000000000000000000000000000000000000080000000080000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000200000000000000000020000000000000000000000000000000000000000000000000020000000000000000"</span>,</span><br><span class="line">    <span class="string">"log"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">        <span class="string">"topics"</span>: [</span><br><span class="line">          <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">          <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">        <span class="string">"topics"</span>: [</span><br><span class="line">          <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">          <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">          <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"outputs"</span>: [</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"logs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">      <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"3e8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">      <span class="string">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">      <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"3e8"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Contract#call</code> 的返回类型.</p>
<h2 id="IContractSendRequestOptions"><a href="#IContractSendRequestOptions" class="headerlink" title="IContractSendRequestOptions"></a>IContractSendRequestOptions</h2><p><a href="#send">Contract#send</a> 的配置项</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * `send` 合约方法的配置项.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractSendRequestOptions &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 要发送的 QTUM 数. 例如 0.1, 默认: 0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  amount?: <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * gasLimit, 默认: 200000, 最大: 40000000</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  gasLimit?: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 每 gas 的 Qtum 价格, 默认: 0.00000001, 最小:0.00000001</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  gasPrice?: <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发送者的 quantum 地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  senderAddress?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IContractSendResult"><a href="#IContractSendResult" class="headerlink" title="IContractSendResult"></a>IContractSendResult</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tx = <span class="keyword">await</span> contract.send(method, args)</span><br><span class="line"><span class="keyword">await</span> tx.confirm(<span class="number">3</span>, <span class="function">(<span class="params">updatedTx, receipt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>返回 <a href="#send">Contract#send</a> 的值。</p>
<p><code>confirm</code> 方法用来等待交易确认。</p>
<p><code>confirm</code> 方法的参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>n</td>
<td>number</td>
</tr>
<tr>
<td></td>
<td><em>可选</em> 须等待的确认数</td>
</tr>
<tr>
<td>callback</td>
<td>IContractSendConfirmationHandler</td>
</tr>
<tr>
<td></td>
<td><em>可选</em> 回调函数，每次确认都会调用</td>
</tr>
</tbody>
</table>
<p>回调值为:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>updatedTx</td>
<td>IRPCGetTransactionResult</td>
</tr>
<tr>
<td></td>
<td>关于提交给网络的交易的基本信息</td>
</tr>
<tr>
<td>receipt</td>
<td>IContractSendReceipt</td>
</tr>
<tr>
<td></td>
<td>关于已确认交易的其他信息</td>
</tr>
</tbody>
</table>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="#irpcgettransactionresult">IRPCGetTransactionResult</a></li>
<li><a href="#icontractsendreceipt">IContractSendReceipt</a></li>
</ul>
<h2 id="IRPCGetTransactionResult"><a href="#IRPCGetTransactionResult" class="headerlink" title="IRPCGetTransactionResult"></a>IRPCGetTransactionResult</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IRPCGetTransactionResult &#123;</span><br><span class="line">  amount: <span class="built_in">number</span>,</span><br><span class="line">  fee: <span class="built_in">number</span>,</span><br><span class="line">  confirmations: <span class="built_in">number</span>,</span><br><span class="line">  blockhash: <span class="built_in">string</span>,</span><br><span class="line">  blockindex: <span class="built_in">number</span>,</span><br><span class="line">  blocktime: <span class="built_in">number</span>,</span><br><span class="line">  txid: <span class="built_in">string</span>,</span><br><span class="line">  walletconflicts: <span class="built_in">any</span>[],</span><br><span class="line">  time: <span class="built_in">number</span>,</span><br><span class="line">  timereceived: <span class="built_in">number</span>,</span><br><span class="line">  <span class="string">"bip125-replaceable"</span>: <span class="string">"no"</span> | <span class="string">"yes"</span> | <span class="string">"unknown"</span>,</span><br><span class="line">  details: <span class="built_in">any</span>[]</span><br><span class="line">  hex: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于提交给网络的交易的基本信息。</p>
<h2 id="IContractSendReceipt"><a href="#IContractSendReceipt" class="headerlink" title="IContractSendReceipt"></a>IContractSendReceipt</h2><p><a href="#send">Contract#send</a> 的合约收据, 带有解码的事件日志</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractSendReceipt <span class="keyword">extends</span> IRPCGetTransactionReceiptBase &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用 ABI 解码的日志</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  logs: IDecodedLog[],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 未解码的日志</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  rawlogs: ITransactionLog[],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解码的 Solidity 事件日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IDecodedLog &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 事件日志名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 键值映射作为事件日志参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"blockHash"</span>: <span class="string">"3b53ad132c26f9c30e5be9f664573428dad8b52e167becea4428d6903cb32740"</span>,</span><br><span class="line">  <span class="attr">"blockNumber"</span>: <span class="number">13917</span>,</span><br><span class="line">  <span class="attr">"transactionHash"</span>: <span class="string">"79338589bb75e1865be889142890a4e25d3b9dbd454ce3f3c2614587c85e2ed3"</span>,</span><br><span class="line">  <span class="attr">"transactionIndex"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"from"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">  <span class="attr">"to"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="attr">"cumulativeGasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="attr">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="attr">"contractAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="attr">"logs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"amount"</span>: <span class="string">"7d0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">      <span class="attr">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">      <span class="attr">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">"7d0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rawlogs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="attr">"topics"</span>: [</span><br><span class="line">        <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000007d0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">      <span class="attr">"topics"</span>: [</span><br><span class="line">        <span class="string">"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"</span>,</span><br><span class="line">        <span class="string">"0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">        <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000007d0"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="#irpcgettransactionreceiptbase">IRPCGetTransactionReceiptBase</a></li>
</ul>
<h2 id="IRPCWaitForLogsRequest"><a href="#IRPCWaitForLogsRequest" class="headerlink" title="IRPCWaitForLogsRequest"></a>IRPCWaitForLogsRequest</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IRPCWaitForLogsRequest &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查找日志的开始块号。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  fromBlock?: <span class="built_in">number</span> | <span class="string">"latest"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查找日志的停止块号. 如果是 null, 会无限期等待</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  toBlock?: <span class="built_in">number</span> | <span class="string">"latest"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 过滤日志的条件。 地址和主题分别指定为十六进制字符串数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  filter?: ILogFilter,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 日志返回前的最少确认数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  minconf?: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IContractEventLogs"><a href="#IContractEventLogs" class="headerlink" title="IContractEventLogs"></a>IContractEventLogs</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询合约事件日志的结果。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractEventLogs &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 事件日志, ABI 解码.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  entries: IContractEventLog[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回的事件日志数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  count: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 要开始查询新事件日志的块号</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  nextblock: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询合约事件日志的结果。</p>
<p>要查询尚未出现的新日志，请在查询事件日志时将 <code>nextblock</code> 用作 <code>startBlock</code>：</p>
<ul>
<li><a href="#icontracteventlog">IContractEventLog</a></li>
</ul>
<h2 id="IContractEventLog"><a href="#IContractEventLog" class="headerlink" title="IContractEventLog"></a>IContractEventLog</h2><p>一条解码的合约事件日志</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractLogEntry <span class="keyword">extends</span> ILogEntry &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Solidity 事件, ABI 解码. 如果没有找到 ABI 定义，为 Null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  event?: ISolidityEvent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  qtumd 返回的原始日志数据，不是 ABI 解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ILogEntry <span class="keyword">extends</span> IRPCGetTransactionReceiptBase &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * EVM 日志主题</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  topics: <span class="built_in">string</span>[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * EVM 日志数据, 十六进制字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * qtumd 返回的交易收据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IRPCGetTransactionReceiptBase &#123;</span><br><span class="line">  blockHash: <span class="built_in">string</span></span><br><span class="line">  blockNumber: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  transactionHash: <span class="built_in">string</span></span><br><span class="line">  transactionIndex: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>: <span class="built_in">string</span></span><br><span class="line">  to: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  cumulativeGasUsed: <span class="built_in">number</span></span><br><span class="line">  gasUsed: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  contractAddress: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"blockHash"</span>: <span class="string">"369c6ded05c27ae7efc97964cce083b0ea9b8b950e67c51e52cb1bf898b9c415"</span>,</span><br><span class="line">  <span class="string">"blockNumber"</span>: <span class="number">12184</span>,</span><br><span class="line">  <span class="string">"transactionHash"</span>: <span class="string">"d1638a53f38fd68c5763e2eef9d86b9fc6ee7ea3f018dae7b1e385b4a9a78bc7"</span>,</span><br><span class="line">  <span class="string">"transactionIndex"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"from"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">  <span class="string">"to"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="string">"cumulativeGasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="string">"gasUsed"</span>: <span class="number">39306</span>,</span><br><span class="line">  <span class="string">"contractAddress"</span>: <span class="string">"a778c05f1d0f70f1133f4bbf78c1a9a7bf84aed3"</span>,</span><br><span class="line">  <span class="string">"topics"</span>: [</span><br><span class="line">    <span class="string">"0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"</span>,</span><br><span class="line">    <span class="string">"000000000000000000000000dcd32b87270aeb980333213da2549c9907e09e94"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"data"</span>: <span class="string">"00000000000000000000000000000000000000000000000000000000000003e8"</span>,</span><br><span class="line">  <span class="string">"event"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Mint"</span>,</span><br><span class="line">    <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">    <span class="string">"amount"</span>: <span class="string">"3e8"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IDecodedSolidityEvent"><a href="#IDecodedSolidityEvent" class="headerlink" title="IDecodedSolidityEvent"></a>IDecodedSolidityEvent</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个解码的 Solidity 事件日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IDecodedSolidityEvent &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 事件名称</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 键值映射作为事件日志参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Example</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Transfer"</span>,</span><br><span class="line">  <span class="string">"from"</span>: <span class="string">"0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="string">"to"</span>: <span class="string">"dcd32b87270aeb980333213da2549c9907e09e94"</span>,</span><br><span class="line">  <span class="string">"value"</span>: <span class="string">"3e8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解码的 Solidity 事件日志。 事件参数存储在键值映射中。</p>
<h2 id="IRPCGetTransactionReceiptBase"><a href="#IRPCGetTransactionReceiptBase" class="headerlink" title="IRPCGetTransactionReceiptBase"></a>IRPCGetTransactionReceiptBase</h2><p>网络接受的交易收据。它由 <code>gettransactionreceipt</code> RPC 调用返回。</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IRPCGetTransactionReceiptBase &#123;</span><br><span class="line">  blockHash: <span class="built_in">string</span></span><br><span class="line">  blockNumber: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  transactionHash: <span class="built_in">string</span></span><br><span class="line">  transactionIndex: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>: <span class="built_in">string</span></span><br><span class="line">  to: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  cumulativeGasUsed: <span class="built_in">number</span></span><br><span class="line">  gasUsed: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  contractAddress: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IContractsRepoData"><a href="#IContractsRepoData" class="headerlink" title="IContractsRepoData"></a>IContractsRepoData</h2><p>合约相关信息</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractsRepoData &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 部署合约的相关信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  contracts: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: IContractInfo,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 部署库的相关信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  libraries: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: IContractInfo,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 部署合约/库引用的合约信息，但未部署</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  related: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: &#123;</span><br><span class="line">      abi: IABIMethod[],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与部署合约进行交互所需的最少部署信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IContractInfo &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约的 ABI 定义, solc 生成.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  abi: IABIMethod[]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  address: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合约所有者的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  sender?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IABIMethod &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>,</span><br><span class="line">  payable: <span class="built_in">boolean</span>,</span><br><span class="line">  inputs: IABIInput[],</span><br><span class="line">  outputs: IABIOutput[],</span><br><span class="line">  constant: <span class="built_in">boolean</span>,</span><br><span class="line">  anonymous: <span class="built_in">boolean</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以使用开发工具 <a href="https://github.com/qtumproject/solar" target="_blank" rel="noopener">solar</a> 自动生成。</p>
<p>样例 <a href="https://github.com/qtumproject/qtumbook-mytoken-qtumjs-cli/blob/29fab6dfcca55013c7efa8ee5e91bbc8c40ca55a/solar.development.json.example" target="_blank" rel="noopener">solar.json</a>.</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 Bitcoin Core 0.15.0版本说明]]></title>
      <url>/2018/05/30/2018-05-30-%E7%BF%BB%E8%AF%91-BitcoinCore0.15.0%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://bitcoin.org/en/release/v0.15.0" target="_blank" rel="noopener">https://bitcoin.org/en/release/v0.15.0</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="0-15-0版本说明"><a href="#0-15-0版本说明" class="headerlink" title="0.15.0版本说明"></a>0.15.0版本说明</h1><h2 id="当前对隔离见证的支持"><a href="#当前对隔离见证的支持" class="headerlink" title="当前对隔离见证的支持"></a>当前对隔离见证的支持</h2><p>版本0.15.0支持通过 <code>addwitnessaddress</code> RPC 添加隔离见证地址，但请注意，这是一个 测试/专家 RPC，它不保证从备份恢复。 要是你知道你在做什么，就使用这个 RPC 吧。下一个版本将提供更完整的隔离见证的钱包支持。</p>
<h2 id="加密钱包重新扫描"><a href="#加密钱包重新扫描" class="headerlink" title="加密钱包重新扫描"></a>加密钱包重新扫描</h2><p>和以前的版本一样，当使用加密的 HD 钱包时，如果没有解锁钱包，密钥池不会被自动检测。 这意味着，目前，如果要从加密 HD 钱包的备份恢复，用户必须用非常长的时间解锁钱包并手动触发重新扫描，否则当自动检测程序无法运行时，会有可能丢失一些密钥。 不幸的是，在这个版本中没有 <code>rescan</code> RPC，它放在以后的版本中。所以现在重新扫描可以使用其中一个 <code>import*</code> 命令触发，同时要用另一个（可信）钱包生成的虚拟地址。</p>
<h1 id="重大改动"><a href="#重大改动" class="headerlink" title="重大改动"></a>重大改动</h1><h2 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h2><p>版本0.15包含许多重要的性能改进，这使得初始块下载，启动，交易和块验证速度更快：</p>
<ul>
<li>链状态数据库 (用于跟踪 UTXO ) 已从每交易模型更改为每交易输出模型（请查看 <a href="https://github.com/bitcoin/bitcoin/pull/10195" target="_blank" rel="noopener">PR 10195</a>）。 这个模型的优点是它：<ul>
<li>避免反序列化和序列化未使用输出的CPU开销；</li>
<li>更可预测的内存使用情况;</li>
<li>更简单的代码;</li>
<li>适用于各种未来的缓存刷新策略。<br>因此，在初始块下载（IBD）和重新索引期间验证区块链的速度提高约30-40％，使用的内存减少10-20％，并且刷新到磁盘的频率要更低。 唯一的缺点是磁盘上的数据库大小增加15％。 在从以前的格式转换过来的过程中，可能会使用额外几千兆字节。</li>
</ul>
</li>
<li>早期版本在刷新 UTXO 到磁盘时遇到了内存使用量激增。 结果，实际只有一半的可用内存用作缓存，而另一半则被保留以应付数据刷新。 不会再有这种情况了（请查看 <a href="https://github.com/bitcoin/bitcoin/pull/10148" target="_blank" rel="noopener">PR 10148</a>），并且整个可用缓存（请查看 <code>-dbcache</code>）现在确实用作缓存。 这将数据刷新频率降低了2倍甚至更多。</li>
<li>在前面的版本中, 当交易被内存池接受时，交易的签名验证会被缓存。版本 0.15 版本0.15将其有效性扩展为缓存整个脚本（请查看 <a href="https://github.com/bitcoin/bitcoin/pull/10192" target="_blank" rel="noopener">PR 10192</a>）。 这意味着如果块中的交易已被内存池接受，私钥签名不需要重新计算。 经验测试表明，这使新块的验证速度提高40-50％。</li>
<li>LevelDB 已经升级到版本1.20 (请查看 <a href="https://github.com/bitcoin/bitcoin/pull/10544" target="_blank" rel="noopener">PR 10544</a>). 这个版本包括用于在支持SSE 4.2的体系结构中 CRC 的硬件加速 。因此，同步和块验证现在更快。</li>
<li>针对支持SSE 4的体系结构（参见 <a href="https://github.com/bitcoin/bitcoin/pull/10821" target="_blank" rel="noopener">PR 10821</a>），SHA256哈希已优化。 在支持的硬件上 SHA256 速度提高了约50％，这导致IBD和块验证速度提高了约5％。 在版本0.15中，默认情况下，发布版本中禁用SHA256硬件优化，但可以在构建时使用 <code>--enable-experimental-asm</code> 启用。 </li>
<li>重新填充密钥池不再刷新每个密钥对应的钱包，使创建新钱包的速度提高了20倍。 部分加速用来将默认密钥池增加到1000个密钥，以使恢复能力更加健壮。（见 <a href="https://github.com/bitcoin/bitcoin/pull/10831" target="_blank" rel="noopener">PR 10831</a>).</li>
</ul>
<h2 id="手续费评估的改进"><a href="#手续费评估的改进" class="headerlink" title="手续费评估的改进"></a>手续费评估的改进</h2><p>版本0.15中，手续费评估速度有了明显提高，钱包使用的手续费评估更准确，而对于<code>estimatesmartfee</code> 和 <code>estimaterawfee</code> RPC（见 <a href="https://github.com/bitcoin/bitcoin/pull/10199" target="_blank" rel="noopener">PR 10199</a>）的高级用户而言，手续费评估的可选范围更广。</p>
<h3 id="内部逻辑和钱包行为的变化"><a href="#内部逻辑和钱包行为的变化" class="headerlink" title="内部逻辑和钱包行为的变化"></a>内部逻辑和钱包行为的变化</h3><ul>
<li>手续费评估现在在3个不同的时间范围内进行跟踪。这使更长远的目标和评估方法能更迅速地适应条件的变化。</li>
<li>评估现在可以选择 <em>保守的</em> 或 <em>经济的</em>。 保守评估使用更长的时间范围来产生评估，不易受费用条件快速变化影响。经济评估使用更短的时间范围，受费用条件的短期变化影响更大。 在低交易活动期间（例如在周末），经济评估可能会相当低，但如果通行费用迅速增加，则可能导致交易未被证实。</li>
<li>默认，钱包使用保守的手续费评估来增加在预期目标内被确认的交易的可靠性。对于被标记为可替换的交易，钱包默认会使用经济评估，因为如果费用条件迅速变化，费用可能会“冲突” (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10589" target="_blank" rel="noopener">PR 10589</a>).</li>
<li>现在可以对最多1008个块的确认目标进行评估（一周内）。</li>
<li>存储更多关于历史收费率的数据，从而使手续费评估更精确。</li>
<li>对由于驱逐或其他未确认的原因而离开内存池的交易，不再考虑手续费评估，使手续费评估更准确。</li>
<li>手续费评估逻辑将确保收集到足够的数据以返回有意义的估算值。 如果数据不足，则使用后备的默认费用。</li>
</ul>
<h3 id="手续费评估-RPC-的变化"><a href="#手续费评估-RPC-的变化" class="headerlink" title="手续费评估 RPC 的变化"></a>手续费评估 RPC 的变化</h3><ul>
<li><code>estimatefee</code> RPC 现在废弃了，建议使用 <code>estimatesmartfee</code> (支持 GUI)</li>
<li><code>estimatesmartfee</code> RPC 接口改变 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10707" target="_blank" rel="noopener">PR 10707</a>):<ul>
<li><code>nblocks</code> 参数重命名成 <code>conf_target</code> (与其他RPC方法一致).</li>
<li>增加 <code>estimate_mode</code> 参数. 该参数为以下字符串之一： <code>CONSERVATIVE</code>, <code>ECONOMICAL</code> 或 <code>UNSET</code> (默认是 <code>CONSERVATIVE</code>).</li>
<li>RPC返回对象现在包含一个 <code>error</code> 成员，它返回处理期间遇到的错误。</li>
<li>如果 Bitcoin Core 运行时间不够长，并且没有足够的数据块或交易来产生准确的手续费评估，则会返回一个错误（之前使用-1表示错误，这可能会导致费率混淆）。</li>
</ul>
</li>
<li>新增 <code>estimaterawfee</code> RPC 提供原始费用数据. 外部客户端可以在他们自己的手续费评估逻辑中查询和使用这些数据。</li>
</ul>
<h2 id="多钱包支持"><a href="#多钱包支持" class="headerlink" title="多钱包支持"></a>多钱包支持</h2><p>Bitcoin Core现在支持加载多个独立钱包 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/8694" target="_blank" rel="noopener">PR 8694</a>, <a href="https://github.com/bitcoin/bitcoin/pull/10849" target="_blank" rel="noopener">PR 10849</a>).钱包是完全分开的，具有个人余额，钥匙和收到的交易.</p>
<p>启动比特币时使用 <code>-wallet</code> 参数可启用多钱包，在命令行或比特币配置文件中都可以。</p>
<p><strong>在Bitcoin-Qt中，只有第一个钱包才会显示并可用于创建和签署交易。</strong> 未来版本将支持 GUI 来选多个钱包。 但是，即使在版本0.15的其他加载的钱包中，仍然会与后台节点的当前提示保持同步。 这可能很有用，如果是运行一个修剪过的节点的话，因为加载一个最新同步超出修剪高度的钱包导致必须下载并重新验证整个区块链。 继续同步后台中的所有钱包可避免此问题。</p>
<p>Bitcoin Core 0.15.0 包括下列RPC接口的改动及多钱包的 <code>bitcoin-cli</code> :</p>
<ul>
<li>当用一个钱包运行 Bitcoin Core 时，RPC 接口或  <code>bitcoin-cli</code> <strong>不会</strong> 变化。所有 RPC 调用和 <code>bitcoin-cli</code> 命令和之前一样继续运行.</li>
<li>当用多钱包运行 Bitcoin Core 时, 所有 <em>节点级</em> RPC 方法和之前一样继续运行. HTTP RPC 请求应该发送至 <code>&lt;RPC IP address&gt;:&lt;RPC port&gt;</code> , 并且 <code>bitcoin-cli</code> 命令应该和之前一样继续运行. 一个 <em>节点级</em> RPC 方法是不需要访问钱包的任意方法。</li>
<li>当用多钱包运行 Bitcoin Core 时, <em>钱包级</em> RPC 方法必须指定他们在每个请求中所针对的钱包。 HTTP RPC 请求应该发送至 <code>&lt;RPC IP address&gt;:&lt;RPC port&gt;/wallet/&lt;wallet name&gt;</code> , 例如 <code>127.0.0.1:8332/wallet/wallet1.dat</code>. <code>bitcoin-cli</code> 命令应该使用 <code>-rpcwallet</code> 选项运行, 例如 <code>bitcoin-cli -rpcwallet=wallet1.dat getbalance</code>.</li>
<li>添加了一个新的 <em>节点级</em> <code>listwallets</code> RPC 方法来显示当前加载哪些钱包。 此方法返回的名称与HTTP端点和 <code>rpcwallet</code> 参数中使用的名称相同。</li>
</ul>
<p>请注意，虽然现在完全支持多钱包，但对于版本0.15.0，RPC多钱包界面应被视为不稳定，并且未来版本中可能存在向后不兼容的更改。</p>
<h2 id="在GUI中-RBF-replace-by-fee-控制"><a href="#在GUI中-RBF-replace-by-fee-控制" class="headerlink" title="在GUI中 RBF(replace-by-fee)控制"></a>在GUI中 RBF(replace-by-fee)控制</h2><p>Bitcoin Core 支持从版本0.12.0开始创建 replace-by-fee（RBF）交易，并且自0.14.0版本开始包含一个 <code>bumpfee</code> RPC 方法，用支付更高费用的新交易取代未经证实的选择性RBF交易。</p>
<p>在版本0.15中，创建一个选择性的RBF交易，和用更高费用的交易替换未确认的交易都在GUI中支持（见 <a href="https://github.com/bitcoin/bitcoin/pull/9592" target="_blank" rel="noopener">PR 9592</a>).</p>
<h2 id="移除币龄优先"><a href="#移除币龄优先" class="headerlink" title="移除币龄优先"></a>移除币龄优先</h2><p>Bitcoin Core前面的版本中, 每块的一部分可以根据他们花费的 UTXO 的年龄和价值预留给交易。 这个概念（币龄优先）是矿工的一项政策选择，并且没有围绕包括币龄优先交易的共识规则。 在实践中，只有少数矿工继续使用币龄优先进行交易。 Bitcoin Core 0.15删除了币龄优先的所有支持（见 <a href="https://github.com/bitcoin/bitcoin/pull/9602" target="_blank" rel="noopener">PR 9602</a>）。 这具有以下意义：</p>
<ul>
<li><em>免费交易</em> 的概念已被移除。即使没有附加矿工费，高币龄优先交易也会允许进行转账。 这是不可能的，因为不再有币龄优先的概念。 控制免费交易的<code>-limitfreerelay</code> 和 <code>-relaypriority</code> 选项已被移除。</li>
<li><code>-sendfreetransactions</code> 选项已被移除, 因为几乎所有的矿工都不要不附加交易费的交易。</li>
<li><code>-blockprioritysize</code> 选项已被移除.</li>
<li><code>estimatepriority</code> 和 <code>estimatesmartpriority</code> RPCs 已被移除.</li>
<li><code>getmempoolancestors</code>, <code>getmempooldescendants</code>, <code>getmempoolentry</code> 和 <code>getrawmempool</code> RPCs 不再返回 <code>startingpriority</code> 和 <code>currentpriority</code>.</li>
<li><code>prioritisetransaction</code> RPC 不再有 <code>priority_delta</code> 参数, 它替换成 <code>dummy</code> 参数，以便与使用位置参数的客户端向后兼容。 RPC 仍然适用于通过使用<code>fee_delta</code> 参数来改变交易的明显费率。</li>
<li><code>-minrelaytxfee</code> 现在可以设为 0. 如果设置了 <code>minrelaytxfee</code> , 那么小于 <code>minrelaytxfee</code> (每 kB) 的费用拒绝中继，挖掘和创建交易。默认为1000 satoshi / kB。</li>
<li><code>-printpriority</code> 选项升级为只在挖矿代码输出费率和包含在块中的交易哈希.</li>
</ul>
<h2 id="内存池持久化重启"><a href="#内存池持久化重启" class="headerlink" title="内存池持久化重启"></a>内存池持久化重启</h2><p>版本0.14 引入了内存池持久化重启（内存池在关闭之前保存到数据目录中的 <code>mempool.dat</code> 文件中，并在节点重新启动时恢复内存池）。 版本0.15允许使用<code>-persistmempool</code> 命令行选项打开或关闭此功能（请参阅 <a href="https://github.com/bitcoin/bitcoin/pull/9966" target="_blank" rel="noopener">PR 9966</a>）。 默认情况下，该选项设置为true，内存池在关机时保存并在启动时重新加载。 如果设置为false，则 <code>mempool.dat</code> 文件将不会在启动时加载或在关闭时保存。</p>
<h2 id="新-RPC-方法"><a href="#新-RPC-方法" class="headerlink" title="新 RPC 方法"></a>新 RPC 方法</h2><p>版本 0.15 引入一些新的 RPC 方法:</p>
<ul>
<li><code>abortrescan</code> 停止当前钱包的重新扫描, 比如，在被一个 <code>importprivkey</code> 调用触发时 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10208" target="_blank" rel="noopener">PR 10208</a>).</li>
<li><code>combinerawtransaction</code> 接受一个原始交易的JSON数组，将它们组合成一个原始交易 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10571" target="_blank" rel="noopener">PR 10571</a>).</li>
<li><code>estimaterawfee</code> 返回原始费用数据，以便可以使用定制的逻辑来分析数据并计算估算值。 有关费用估算逻辑和接口更改的完整详细信息，请参阅 <a href="#fee-estimation-improvements">手续费评估的改进</a> </li>
<li><code>getchaintxstats</code> 返回关于链中交易总数和速率的统计信息(查看 <a href="https://github.com/bitcoin/bitcoin/pull/9733" target="_blank" rel="noopener">PR 9733</a>).</li>
<li><code>listwallets</code> 列出当前加载的钱包。查看<em>多钱包</em>  ( <a href="#multi-wallet-support">多钱包支持</a>) 获得更多细节。</li>
<li><code>uptime</code> 返回自上次启动以来 <code>bitcoind</code> 服务器的总运行时间 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10400" target="_blank" rel="noopener">PR 10400</a>).</li>
</ul>
<h2 id="底层-RPC-更改"><a href="#底层-RPC-更改" class="headerlink" title="底层 RPC 更改"></a>底层 RPC 更改</h2><ul>
<li><p>在使用 Bitcoin Core 的多钱包模式时, 钱包方法的RPC请求必须指定它们的用途。 有关完整的详细信息，请参阅 <a href="#multi-wallet-support">多钱包支持</a> 。</p>
</li>
<li><p>新的数据库模型不再存储关于未使用输出的交易版本的信息（请参阅 <a href="#performance-improvements">性能改进</a>). 这意味着:</p>
<ul>
<li><code>gettxout</code> RPC 的返回不再有 <code>version</code> 字段.</li>
<li><code>gettxoutsetinfo</code> RPC 报告 <code>hash_serialized_2</code> 而不是<code>hash_serialized</code>, 后者没有提交未使用输出的交易版本，但确实提交了高度和coinbase 信息。</li>
<li><code>getutxos</code> REST 路径不再以JSON格式报告 <code>txvers</code> 字段。<br>始终以二进制格式报告交易版本为0。</li>
</ul>
</li>
<li><p><code>estimatefee</code> RPC 废弃. 用户应该转向使用 <code>estimatedmartfee</code> RPC，这会返回更好的费用估算。查看 <a href="#fee-estimation-improvements">手续费评估的改进</a> 详细了解费用估算逻辑和接口的变化。</p>
</li>
<li><p><code>gettxoutsetinfo</code> 的返回现在包含 <code>disk_size</code> 和 <code>bogosize</code> 而不是<br><code>bytes_serialized</code>。第一个是对实际磁盘使用情况的更准确的估计，但不是确定性的。 第二个与磁盘使用无关，但也与UTXO集大小无关，与数据库无关:它将每个UTXO条目计数为 50 + 其scriptPubKey长度 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10426" target="_blank" rel="noopener">PR 10426</a>).</p>
</li>
<li><p><code>signrawtransaction</code> 不能再用于将多个交易组合为单个交易. 作为替代, 使用新的 <code>combinerawtransaction</code> RPC (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10571" target="_blank" rel="noopener">PR 10571</a>).</p>
</li>
<li><p><code>fundrawtransaction</code> 不再接受一个 <code>reserveChangeKey</code> 选项. 此选项用于允许 RPC 用户使用密钥池中的密钥为更改地址提供原始交易处理，而无需将其从密钥池中的可用密钥中移除。密匙能重用，通过调用 <code>getnewaddress</code> , 但这可能会导致混淆或危险的行为 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10784" target="_blank" rel="noopener">PR 10784</a>).</p>
</li>
<li><p><code>estimatepriority</code> 和 <code>estimatesmartpriority</code> 已被移除. 查看 <a href="#removal-of-coin-age-priority">移除币龄优先</a>.</p>
</li>
<li><p><code>listunspent</code> RPC 现在可以接受一个 <code>query_options</code> 参数 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/8952" target="_blank" rel="noopener">PR 8952</a>), 它是一个包含一个或多个以下成员的JSON字段：</p>
<ul>
<li><code>minimumAmount</code> - 一个数字，指定每个UTXO的最小值</li>
<li><code>maximumAmount</code> - 一个数字，指定每个UTXO的最大值</li>
<li><code>maximumCount</code> - 一个数字，指定UTXO的最小数量</li>
<li><code>minimumSumAmount</code> - 一个数字，指定UTXO的最大数量</li>
</ul>
</li>
<li><p><code>getmempoolancestors</code>, <code>getmempooldescendants</code>, <code>getmempoolentry</code> 和 <code>getrawmempool</code> RPCs 不再返回 <code>startingpriority</code> 和 <code>currentpriority</code>. 查看 <a href="#removal-of-coin-age-priority">移除币龄优先</a>.</p>
</li>
<li><p><code>dumpwallet</code> RPC 现在返回虚拟钱包（dumped wallet）的完整绝对路径. 即使成功，它也不会返回任何值 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/9740" target="_blank" rel="noopener">PR 9740</a>).</p>
</li>
</ul>
<ul>
<li><p><code>getpeerinfo</code> RPC中, 每个peer的返回对象现在返回一个 <code>addrbind</code> 成员，其中包含到peer的连接的IP地址和端口。 这是除了包含本地节点的IP地址和端口的 <code>addrlocal</code> 成员之外，由peer方报告的成员 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10478" target="_blank" rel="noopener">PR 10478</a>).</p>
</li>
<li><p><code>disconnectnode</code> RPC 现在可以断开由节点ID（以及IP地址/端口）指定的节点。 要根据节点ID断开节点，请使用新的 <code>nodeid</code> 参数 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10143" target="_blank" rel="noopener">PR 10143</a>).</p>
</li>
<li><p><code>prioritisetransaction</code> 的第二个参数已经从 <code>priority_delta</code> 重命名成 <code>dummy</code>，因为 Bitcoin Core 不再有币龄优先的概念。 <code>dummy</code> 参数没有功能影响，但为了兼容性保留位置。查看 <a href="#removal-of-coin-age-priority">移除币龄优先</a>.</p>
</li>
<li><p><code>resendwallettransactions</code> RPC 抛出错误如果 <code>-walletbroadcast</code> 选项设置为 false (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10995" target="_blank" rel="noopener">PR 10995</a>).</p>
</li>
<li><p><code>submitblock</code> RPC 的第二个参数从 <code>parameters</code> 重命名为 <code>dummy</code>. 这个参数从来没有任何效果，重命名只是将这个事实传达给用户 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/10191" target="_blank" rel="noopener">PR 10191</a>)<br>(用户应该，无论如何，使用 <code>submitblock</code> 的位置参数以便与BIP 22兼容。)</p>
</li>
<li><p><code>getblock</code> 的 <code>verbose</code> 参数重命名成 <code>verbosity</code> ，现在接受 0 到 2 的int整数. verbose等级0等同于 <code>verbose=false</code>。 verbose等级1相当于<code>verbose=true</code>. Verbose 等级 2 将给出由 <code>getrawtransaction</code> 给出的输出中每个交易的完整交易详情。为了兼容性，仍旧保留使用详细命名参数和布尔值的旧行为。</p>
</li>
<li>错误代码已更新为更准确的以下错误情况 (查看 <a href="https://github.com/bitcoin/bitcoin/pull/9853" target="_blank" rel="noopener">PR 9853</a>):<ul>
<li><code>getblock</code> 现在返回 RPC_MISC_ERROR 如果区块在硬盘上找不到 (比如如果区块被修剪). 之前返回 RPC_INTERNAL_ERROR.</li>
<li><code>pruneblockchain</code> 现在返回 RPC_MISC_ERROR 如果由于节点不是处于修剪模式而无法修剪区块。 之前返回 RPC_METHOD_NOT_FOUND.</li>
<li><code>pruneblockchain</code> 现在返回 RPC_INVALID_PARAMETER 如果由于提供的时间戳太晚了而无法修剪区块. 之前返回 RPC_INTERNAL_ERROR.</li>
<li><code>pruneblockchain</code> 现在返回 RPC_MISC_ERROR 如果由于区块链太短而无法修剪区块. 之前返回 RPC_INTERNAL_ERROR.</li>
<li><code>setban</code> 现在返回 RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address<br>or subnet is invalid. 之前返回 RPC_CLIENT_NODE_ALREADY_ADDED.</li>
<li><code>setban</code> 现在返回 RPC_CLIENT_INVALID_IP_OR_SUBNET 如果提供的IP地址或子网无效. 之前返回 RPC_MISC_ERROR.</li>
<li><code>removeprunedfunds</code> 现在返回 RPC_WALLET_ERROR 如果 <code>bitcoind</code> 无法移除交易. 之前返回 RPC_INTERNAL_ERROR.</li>
<li><code>removeprunedfunds</code> 现在返回 RPC_INVALID_PARAMETER 如果在钱包中交易不存在. 之前返回 RPC_INTERNAL_ERROR.</li>
<li><code>fundrawtransaction</code> 现在返回 RPC_INVALID_ADDRESS_OR_KEY 如果提供了无效的更改地址. 之前返回 RPC_INVALID_PARAMETER.</li>
<li><code>fundrawtransaction</code> 现在返回 RPC_WALLET_ERROR 如果 <code>bitcoind</code> 不能创建一个交易. 错误消息提供了更多详细信息。. 之前返回  RPC_INTERNAL_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_INVALID_PARAMETER 如果提供的交易在钱包中有后代. 之前返回 RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_INVALID_PARAMETER 如果提供的交易在内存池中有后代. 之前返回 RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易已被开采或与挖矿交易发生冲突. 之前返回 RPC_INVALID_ADDRESS_OR_KEY.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易不是BIP 125可替换. 之前返回 RPC_INVALID_ADDRESS_OR_KEY.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易已经被不同的交易冲突. 之前返回 RPC_INVALID_REQUEST.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易包含不属于该钱包的输入. 之前返回 RPC_INVALID_ADDRESS_OR_KEY.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易有多个变更输出. 之前返回 RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果提供的交易没有变化输出. 之前返回 RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果手续费太高. 之前返回RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果手续费太低. 之前返回RPC_MISC_ERROR.</li>
<li><code>bumpfee</code> 现在返回 RPC_WALLET_ERROR 如果变化的产出太小而不能收费. 之前返回 RPC_MISC_ERROR.</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 十大 Qtum 新用户会问的问题]]></title>
      <url>/2018/05/24/2018-05-24-%E7%BF%BB%E8%AF%91-%E5%8D%81%E5%A4%A7Qtum%E6%96%B0%E7%94%A8%E6%88%B7%E4%BC%9A%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/top-10-qtum-new-user-questions-april-22-2018-307a65dad83f" target="_blank" rel="noopener">https://medium.com/@jb395official/top-10-qtum-new-user-questions-april-22-2018-307a65dad83f</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="十大-Qtum-新用户会问的问题-2018年4月22日"><a href="#十大-Qtum-新用户会问的问题-2018年4月22日" class="headerlink" title="十大 Qtum 新用户会问的问题 - 2018年4月22日"></a>十大 Qtum 新用户会问的问题 - 2018年4月22日</h1><p>以下是 Qtum 新用户的前 10 个问题和回答，但首先是关于 Qtum 主网性能和网络权重的更新。</p>
<p>我是独立的区块链研究人员，喜欢在 Qtum 社区混，最近担任社交媒体渠道的管理员。 我很欣赏 Qtum 团队的技术指导，希望很快能在网上与你聊天。 下面分析的数据来自屏幕抓取<a href="https://qtum.info/" target="_blank" rel="noopener">区块链资源管理器</a>，从 <a href="https://github.com/JB395/QtumMon" target="_blank" rel="noopener">qtumd 服务器钱包记录</a>，以及来自 Lisboa 的 <a href="https://goo.gl/maps/B9dyrhV1p3K2" target="_blank" rel="noopener">A Ginjinha</a> 的加密电报消息。</p>
<hr>
<h2 id="网络权重"><a href="#网络权重" class="headerlink" title="网络权重"></a>网络权重</h2><p>新用户留步 - 这是对区块链性能的一些更详细的分析 - 你可以跳到下面的 Q&amp;A 一节。</p>
<p>钱包计算网络权重的估计值，用于给出块奖励的平均时间。 钱包算法是短期的，并且有一些变化。 网络权重来源于赢得下一个区块奖励的难度，该区块奖励会根据Qtum股权证明中的每个区块进行调整。 以下是从4月15日至21日所有区块的钱包计算的网络权重估算图：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*HlufWe2LbEVsHHQAwJ_9pQ.jpeg" alt=""></p>
<p>这个博客的定期读者知道我在比钱包更长的时间范围内计算我自己的网络权重估计值，还有更多的数据点。 4月15日至21日，已知余额326万美元的大钱包在 4207 块奖励中获得 684 个奖励，网络权重为2000万美元。 </p>
<p>网络权重为 2000 万，意味着参与 stake 采矿的 Qtum 钱包的年回报率为4.4％[参考文献1]：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*bDrvGJpdyyVJV2GfPfVy1g.jpeg" alt=""></p>
<h2 id="块间​​距"><a href="#块间​​距" class="headerlink" title="块间​​距"></a>块间​​距</h2><p>Qtum 的块间隔平均大约 144 秒，或每天 600 块。 调整块奖励难度以保持该平均间隔，但是由随机抽奖算法选择块奖励获胜者引起的块间距存在一些变化。 下面的柱状图显示了 4 月 15 日至 21 日分组为 16 秒桶的块间隔数，其中块间距为 2 秒至 256 秒。 在这段时间里，有两个区块间隔大于 20 分钟，最长的区块在 26:55 处是 138,226。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*2ioRZNg1E8emtXQb2tVWOA.jpeg" alt=""></p>
<h2 id="电报翻译"><a href="#电报翻译" class="headerlink" title="电报翻译"></a>电报翻译</h2><p>社交网络上的 Qtum 社区拥有全球成员（就像全球有 Qtum 节点一样）。 Qtum Telegram 提供英语，西班牙语，中文，韩语和俄语的频道。 为了帮助沟通，你可以将 Google Chrome 与电报网络版一起使用，并让 Google 翻译提高你的语言技能：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*L2s2bRYMAURWx60G86Hl6A.jpeg" alt=""></p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*C5ws3EAbwEb6wK4F7POsLQ.jpeg" alt=""></p>
<p>如果你正在翻译 Telegram note，那么用户名也将被翻译，这可以给出一些有趣的结果。 点击 Chrome 浏览器地址栏最右侧的 Google 翻译图标，然后选择“选项”来管理翻译。</p>
<p>出于安全原因，必须输入你的电报帐户的用户名，这在全球所有电报渠道中都是唯一的。 此外，如果我可以要求电报用户输入一个配置文件照片，只是为了让它更有趣。 它不一定是 Instagram 那种质量的图片，也可以放你的宠物，最喜欢的旅游景点等，你甚至可以放在多张照片，并显示你的个性，例如，看到我的第二张照片😉。</p>
<hr>
<h1 id="十大-Qtum新用户会问的问题"><a href="#十大-Qtum新用户会问的问题" class="headerlink" title="十大 Qtum新用户会问的问题"></a>十大 Qtum新用户会问的问题</h1><p>欢迎来到 Qtum！ 加密货币欢迎新用户加入他们的社区。 新用户意味着增长，采用，新想法和新问题。 来自新用户的唯一愚蠢问题就是未经询问的问题。 Cryptocurrencies 和区块链 2.0 是一种快速发展的技术，有很多值得学习的东西，几个月前的活跃用户似乎是专家。 作为一个新用户，我希望这个 Q&amp;A 将加速你对Qtum的认识，并且在几个月内，你也可以成为专家。 如果你是Qtum的新手，以下参考资料中的词汇表可能会对术语有所帮助。</p>
<h2 id="Q-1"><a href="#Q-1" class="headerlink" title="Q 1."></a>Q 1.</h2><p>我需要投入多少 QTUM？ 如何为 Staking 工作提供奖励？ 是否有masternodes(主节点)？</p>
<p>你可以在你的钱包中使用低至 1.0 QTUM，但需要更多的奖励才能赢得块奖励。 Qtum 使用权益证明(PoS)，在随机抽奖过程中获得块奖励，其中获胜的可能性取决于你的钱包中的硬币数量与网络上的硬币总数。 每个 Qtum Core 钱包都是网络上分散的完整节点; 没有masternodes(主节点)。</p>
<p>你 stake 的硬币越多，你的钱包就越能赢得 4 QTUM的奖励。 Staking 将会给予每年几个百分点的回报。 要估算块奖励的平均时间，请检查 <a href="https://qtum.info/misc/stake-calculator" target="_blank" rel="noopener">stake 计算器</a>。 这个估计值是一个区块奖励的平均时间，Qtum区块奖励不会像池塘挖掘一样累积或累积，并且你的区块奖励可能会早于估计值或稍后。 在 staking 中，将你的硬币分成不同的钱包或不同的地址不会改变你获胜的几率; 只有一种方法可以提高你的赔率：购买更多的 QTUM！</p>
<h2 id="Q-2"><a href="#Q-2" class="headerlink" title="Q 2."></a>Q 2.</h2><p>什么钱包可用于 staking？</p>
<p>只有 Qtum Core 钱包（qtum-qt 桌面 GUI 钱包，qtumd 服务器钱包）可用于 staking。 这些钱包在 Qtum 网络上运行一个完整的节点，通过实时验证所有事务/块来保护网络，并接收块奖励作为这项工作的激励。 放钱包应该全天候运行，因为它们只能在线时获得奖励。 下面的例子集中在 qtum-qt，这是一个非常适合初学者的桌面 GUI 钱包，但你也可以使用 qtumd 和命令行界面。</p>
<p>你可以从<a href="https://qtumeco.io/wallet" target="_blank" rel="noopener">Qtum网站</a>下载最新的Qtum Core钱包：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*xJ3GlmvvlPKyaiJAOreNgA.jpeg" alt=""></p>
<p>非新手用户可能对 Qtum Project GitHub 存储库感兴趣，其中包含所有钱包分发包和 <a href="https://github.com/qtumproject/qtum/releases" target="_blank" rel="noopener">GitHub</a> 上的SHA-256哈希验证。</p>
<h2 id="Q-3"><a href="#Q-3" class="headerlink" title="Q 3."></a>Q 3.</h2><p>还有哪些钱包？ </p>
<p>除 Qtum Core 钱包外，Qtum 还提供 Web 钱包（如MyEtherWallet），Electrum 钱包（支持 Ledger 和 Trezor 硬件钱包）和 Android 手机钱包。 在 qtumeco.io/wallet 获取这些钱包。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*1bsmuRj1gQ3c99Ik82gS7A.jpeg" alt=""></p>
<h1 id="Q-4"><a href="#Q-4" class="headerlink" title="Q 4."></a>Q 4.</h1><p>我的QTUM丢失了。 Blockchain Explorer说我的余额太低了，wtf？ [参考文献2]</p>
<p>这可能是新手遇到的最常见的问题（不要问我怎么知道，但是对于 Earlz 来说，在 Testnet 早期的时候为新手回答了这个问题），特别是如果你是区块链的新手，或来自具有帐户架构的区块链。 </p>
<p>Qtum 使用 Unspent Transaction Output（UTXO）模型存储值，与比特币相同。 这意味着当你发送 QTUM 交易时，你的钱包将选择以前的一笔或多笔交易，交易金额超过你支付的金额，并全部发送这些交易。 你的钱包还将提供一个“更改地址”，以便返回更改。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*DEBFKI_0ObnVxCSJzQFyYw.jpeg" alt=""></p>
<p>像这样想。 如果你想以 3 欧元的价格购买咖啡，并给咖啡店一张 5 欧元的纸币，那么他们将返还 2 欧元。 这正是钱包使用更改地址所做的事情（除非你启用了硬币控制功能）。</p>
<p>你的钱包将显示其管理的所有地址的总余额，包括更改地址，但资源管理器一次只能显示单个地址的余额。 资源管理器和钱包从他们的角度展示了 QTUM 的正确平衡，但除非你知道 UTXO 如何使用更改地址，否则它可能会令人困惑。</p>
<p>请记住，从技术上讲，钱包中没有真正的 QTUM “硬币”（或 QRC20 代币）。 “硬币”实际上是作为区块链块中的交易存储的，“钱币”实际上是钱包地址的所有先前交易的未使用值的钱包的总和。 钱包确实具有存储和管理私钥的关键工作，并且钱包本质上是一个区块链浏览器，可让你管理实际存储在区块链中的“硬币”和代币。</p>
<h1 id="Q-5"><a href="#Q-5" class="headerlink" title="Q 5."></a>Q 5.</h1><p>我过去常常获得固定的奖励，但最近并没有那么多。 如何检查我的钱包设置是否正确？</p>
<p>请记住，随着有机增长和商业 DAPP 的部署涉及到钱包，网络权重的趋势正在上升，这意味着固定大小的钱包的块奖励之间的时间也在增加。 对于 Qtum 生态系统来说，不断上升的网络权重是一件好事：它意味着更大，更强大，更安全的网络。 你可以使用 <a href="https://qtum.info/misc/stake-calculator" target="_blank" rel="noopener">Stake计算器</a> 检查你的预期时间以获得积分奖励。</p>
<p>要确定你的 Qtum Core 钱包是否正确 staking，请检查以下事项：</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*T3BGH_fL89iqh7Jr_-3W2Q.jpeg" alt=""></p>
<ol>
<li>同步到最新块，将鼠标悬停在钱包右下角的小复选标记图标上</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*dGWbHEUn3PwjkV-ZxKbY1w.jpeg" alt=""></p>
<ol>
<li>解锁仅用于 staking，将鼠标悬停在小挂锁图标上（这将显示稍微打开，显示“unlocked for staking only”）。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*cMH4Tsq8D1ki1ZmFDX0vWw.jpeg" alt=""></p>
<ol>
<li>电脑时钟在正确时间的几秒钟内设置。 使用 “getinfo” 命令进行检查，并参见问题 9 以输入命令。 这里计算机时间和 Qtum 网络时间同步（“timeoffset”为零秒）。</li>
</ol>
<p>如果你的钱包具有此配置，你只需等待块奖励，由于块奖励抽奖的随机性，可能会在下一个块（但非常不可能）或预期时间的 5 到 9 倍之间出现 。</p>
<h1 id="Q-6"><a href="#Q-6" class="headerlink" title="Q 6."></a>Q 6.</h1><p>我的钱包不同步。 我能做什么？</p>
<p>要参与 staking 或甚至正确查看近期交易的余额，你的钱包必须与区块链正确同步并加载最新的区块。 以下是故障排除列表，但请确保你了解这些步骤，并在有任何问题时向社交媒体寻求帮助。</p>
<p>如果你的钱包卡在“从2017年9月6日落后XX周”这意味着钱包甚至没有开始同步（生日快乐到 Qtum - 2017年9月6日是 Qtum 主网推出的日期）所以下面的步骤 3 怀疑是看端口连接问题。</p>
<ol>
<li><p>安装最新版本的Qtum核心钱包<br><a href="https://qtumeco.io/wallet" target="_blank" rel="noopener">https://qtumeco.io/wallet</a> 或 <a href="https://github.com/qtumproject/qtum/releases" target="_blank" rel="noopener">https://github.com/qtumproject/qtum/releases</a></p>
</li>
<li><p>退出钱包。 制作 wallet.dat 文件的多个备份副本。 这是非常重要的 - 如果你没有做好钱包备份，那么你将失去你的 QTUM。</p>
</li>
<li><p>确保钱包应用程序可以通过防火墙/路由器进行通信，如果需要，为端口 3888 TCP 输入/输出（端口映射或转发）添加白名单。 钱包应该能够连接至少几个对等点，运行一段时间后最多可以连接8个活动连接点。 有时使用addnode命令添加第一个节点会有所帮助，例如：</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">addnode</span> 35<span class="selector-class">.197</span><span class="selector-class">.138</span><span class="selector-class">.163</span><span class="selector-pseudo">:3888</span> <span class="selector-tag">add</span></span><br></pre></td></tr></table></figure>
<p>请查看下面关于输入命令的问题 9。</p>
<ol>
<li>确保计算机时区设置正确，计算机时钟设置准确。 使用 getinfo 命令检查时间，如上面的回答 5 所示。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*aAFI3UQMf8kZfrL9jMvsFQ.jpeg" alt=""></p>
<ol>
<li><p>只有拥有良好的 wallet.dat 备份时才执行下一步。 在钱包停止的情况下，删除区块链（文件夹：blocks，chainstate，database和stateQtum - 与 wallet.dat 文件位于相同的 “Qtum” 文件夹中）。 这会导致你的钱包在重新启动时重新加载整个区块链。 别担心，区块链会保存你的硬币/代币余额，全球共有 7000 份。 如果你的钱包卡在区块链中部分同步，则此步骤非常有效。</p>
</li>
<li><p>确保至少有2 GB的磁盘存储空间。</p>
</li>
<li><p>重新启动计算机。 再次运行钱包。 祝你好运！</p>
</li>
</ol>
<h1 id="Q-7"><a href="#Q-7" class="headerlink" title="Q 7."></a>Q 7.</h1><p>如何在钱包中看到 QRC20 代币？</p>
<p>QRC20 代币与你的钱包 Q 地址相关联。 只有在将该代币添加到钱包后，你才能看到 QRC20 代币并发送这些代币 - 通过将特定的QRC20代币“添加”到你的钱包中，告诉你要管理该特定代币的钱包。 要将QRC20代币添加到你的 Qtum Core 钱包，请查看<a href="https://blog.qtum.org/qtum-core-qrc-20-tokens-1c2734d6290c" target="_blank" rel="noopener">这本手册</a>。</p>
<h1 id="Q-8"><a href="#Q-8" class="headerlink" title="Q 8."></a>Q 8.</h1><p>我怎样才能保证钱包的安全？</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*2CA9hz7YwzrW7OuivFNghw.jpeg" alt=""></p>
<p>生命中存在很大的风险，明天你可能会屈服于Mac卡车综合症（被Mac卡车碾过）。 加密中也存在很多风险：交换被黑客入侵，诈骗者，智能合约爆炸，哦，我的天。 基于我在社区中看到的故障排除，你的硬币的主要风险是人类阅读此博客时的人为错误。</p>
<p>有两种方式可以保证破坏你的QTUM：1）丢失核心钱包的 wallet.dat 文件，2）丢失密码/密码短语/种子单词。 对于核心钱包，wallet.dat 文件包含钱包的私钥。 如果因为没有很好的备份而丢失了这个文件，你的 QTUM 将会永远丢失。 同样，如果你丢失钱包的密码/密码/种子字，你的 QTUM 将永远丢失。 有一些非常狭窄的角落案例，你可以从忘记的密码/种子词中恢复。 密码和种子词必须正确输入，字符为字符，大写/小写正确，没有多余的空格等。在加密中，没有密码重置，没有退款，纠纷或类似的事情，如果 你不喜欢你的硬币的个人责任，那么加密不适合你。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*eH5OHiU8_2LRCqWH7uAafg.jpeg" alt=""></p>
<p>对于一般的安全性，Ledger Nano S 和 Trezor 等硬件钱包是最好的方法。 如果你将运行用于 Qtum staking 的核心钱包，最佳做法是从专用计算机中放弃使用电子邮件或浏览网页（为什么？因为你可以通过浏览网页和钓鱼邮件获取恶意软件）。</p>
<p>如果你在 QTUM 中持有任何价值，你应该阅读，理解并实施这些博客中的优秀建议：QTUM 钱包使用最佳实践以及此非官方指南来加密，备份和恢复你的 Qtum 钱包。</p>
<h1 id="Q-9"><a href="#Q-9" class="headerlink" title="Q 9."></a>Q 9.</h1><p>如何输入命令以查看有关我的钱包的更多信息？</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*oQLmHQaBdJ-aWyCxRpsPWw.jpeg" alt=""></p>
<p>在菜单栏中选择“帮助”，然后选择“调试窗口”</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*MHliKybjSiEkGOrWq4zPOA.jpeg" alt=""></p>
<p>在调试窗口中选择“控制台”<br><img src="https://cdn-images-1.medium.com/max/1200/1*A1OwIzeRZfzWGcLbsKaTKQ.jpeg" alt=""></p>
<p>在控制台的底部，你可以输入一个命令，一个好的命令开始是“帮助”</p>
<h1 id="Q-10"><a href="#Q-10" class="headerlink" title="Q 10."></a>Q 10.</h1><p>我在哪里可以找到关于 Qtum 的更多信息？</p>
<p>以下是一些很好的参考资料：<br><a href="https://github.com/qtumproject/qtum/wiki/Qtum-Wallet-Tutorial" target="_blank" rel="noopener">Qtum使用指南</a><br><a href="https://github.com/qtumproject/qtum/wiki/QTUM-wallet-usage-best-practices" target="_blank" rel="noopener">Qtum钱包最佳使用指南</a><br><a href="https://steemit.com/qtum/@cryptominder/qtum-staking-tutorial-using-qtum-qt" target="_blank" rel="noopener">Cryptominder对非常官方 staking 指南</a><br><a href="https://medium.com/@Qtum" target="_blank" rel="noopener">在Qtum博客上看到的新闻和公告</a><br>Twitter反馈: <a href="https://twitter.com/qtumofficial" target="_blank" rel="noopener">Qtum官方</a>和<a href="https://twitter.com/PatrickXDai" target="_blank" rel="noopener">PatrickXDai</a><br><a href="https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw" target="_blank" rel="noopener">Qtum Telegram</a>（英文），<a href="https://www.reddit.com/r/Qtum/" target="_blank" rel="noopener">Qtum subreddit</a>，<a href="https://discordapp.com/invite/zyVMQSv" target="_blank" rel="noopener">Qtum Discord</a> 。</p>
<hr>
<p>我们今天在里斯本完成博客。根据葡萄牙的海军实力，葡萄牙在十五世纪和十六世纪因全球勘探而闻名。 葡萄牙拥有四个 Qtum 节点，在伊比利亚半岛拥有独特的历史和文化。 在里斯本，你可以享受丰富的历史，有轨电车，美味的 pastéisde nata 和法多（深情的蓝调）。</p>
<p>Obrigado e fique seguro在线，</p>
<p>Jackson</p>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><p>年百分比=（100 x 600块/天x 365天x 4 QTUM /块）/网络权重（百万）</p>
</li>
<li><p>“wtf”是技术首字母缩略词，意思是“这种行为的技术解释是什么(What is the Technical explanation For this behavior)”。 有关 “wtf” 的更多信息，请查看<a href="https://youtu.be/3wlUPf9PZpY" target="_blank" rel="noopener">加泰罗尼亚 DJ Sak Noel - 洛卡人</a> NSFW 的说明。</p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*zruqR3PkZar_-0S3rkrjGQ.jpeg" alt=""></p>
<ol>
<li>这样美丽的<a href="https://youtu.be/dEzOuI5yI84" target="_blank" rel="noopener">里斯本无人机视频</a>。 DJI Mavic Pro，4k观看。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*Fiuju-k-p4q1u4YH5wVzEA.jpeg" alt=""></p>
<ol>
<li>再见Avicii，RIP。 新用户调查的音乐，<a href="https://youtu.be/HW6He6mD0Kk" target="_blank" rel="noopener">挪威DJ Kygo - Stargazing</a>。 注意音乐录影带导演如何使用黑暗并揭示乐团。</li>
</ol>
<p>而多一点能量，阿姆斯特丹DJ也会<a href="https://youtu.be/Z8V5GfFeUDs" target="_blank" rel="noopener">这样</a>。</p>
<ol>
<li>Qtum词汇表</li>
</ol>
<p>积分奖励(Block rewards) - Qtum Proof of Stake 矿工的奖励，目前在随机抽奖过程中每隔~2分钟支付4.0 QTUM。 </p>
<p>Earlz - Jordan Earls，Qtum联合创始人兼首席开发人员，区块链架构师，并在加密中运用最好的胡子。 </p>
<p>主网或主网点火(Mainnet or Mainnet Ignition) - 公共 Qtum 区块链，于2017年9月6日推出.</p>
<p>Patrick - Patrick Dai，Qtum 联合创始人兼首席执行官，环球传播福音传播者和Qtum项目的主唱。 </p>
<p>PoS - 权益证明(Proof of Stake)，Qtum 区块链一致性算法，基于 SHA-256 哈希算法。 </p>
<p>QRC20 - Qtum 区块链的数字资产代币，以以太坊 ERC20 代币为模型。</p>
<p>量子链(QTUM) - Qtum Mainnet区块链硬币，用于支持 Qtum 智能合约。 </p>
<p>量子基金会(Qtum Foundation) - 在新加坡注册的非营利性基金会，负责监督 Qtum 平台。 </p>
<p>测试网络(Testnet) - 用于测试和开发的 Qtum 网络，请查看 <a href="https://testnet.qtum.info/" target="_blank" rel="noopener">Testnet Explorer</a>。 </p>
<p>5.请查看我之前的 Medium 博客。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 Qtum 对等连接]]></title>
      <url>/2018/05/18/2018-05-18-%E7%BF%BB%E8%AF%91-Qtum%E5%AF%B9%E7%AD%89%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/qtum-peer-connections-may-21-2018-ba12bda71e4f" target="_blank" rel="noopener">https://medium.com/@jb395official/qtum-peer-connections-may-21-2018-ba12bda71e4f</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="Qtum-对等连接-—-2018年3月21日"><a href="#Qtum-对等连接-—-2018年3月21日" class="headerlink" title="Qtum 对等连接 — 2018年3月21日"></a>Qtum 对等连接 — 2018年3月21日</h1><p><img src="https://cdn-images-1.medium.com/max/2000/1*DLn-FMh3pWKz3nQTc9pHfg.jpeg" alt="圣巴西尔大教堂，莫斯科 - 简化的网络建筑 - 沙皇大炮，安德烈Chokhov，造于1586年"></p>
<p>这篇文章深入探讨了运行 Qtum 全节点时其中一个最有趣的问题：钱包/节点如何连接到其他 Qtum 对等方，它需要多少连接，以及无法连接时如何排除错误？</p>
<p>对大多数应用程序来说，家庭网络足够简单易用，但是当你使用 Qtum 节点遇到问题时，你打算怎么处理？ 路由器 - 防火墙 - 杀毒软件体系具有许多内置保护功能，可以确保你网络的安全和正常运行，但运行加密货币钱包可能会与这些内置保护措施发生冲突。</p>
<p>我们使用社交媒体上的 “好友请求” 心智模型来探索节点连接。“好友请求” 就是你发送一个请求给你想聊天的人，比如在 Facebook，Telegram 等等。类似地，你的节点将 “好友请求” 发送出去，与其他节点连接，它们确认请求后就可以与你的节点聊天了。你的节点也能够从其他节点接收“好友请求”。</p>
<p>我们将会了解什么是 Qtum 全节点，Qtum 网络与对等连接如何运作，以及如何覆盖可以阻止这些通信的防火墙和路由器。 我们将花一些时间在端口和网络协议上，并会涉及与 “netstat” 网络状态相关的工具。 我希望在我们完成这些工作之后，你将了解你的 Qtum 节点如何能愉快地与世界各地的同行聊天。</p>
<p>我是一名独立的区块链研究员，偶尔写博客和主持社交媒体，十分中意 Qtum 团队的技术指导。 我希望在社交媒体上能够很快与大家聊天。 请在 Qtum 的<a href="https://t.me/joinchat/D5oBaw29NeOdpw6qqqf2lw" target="_blank" rel="noopener">电报</a>，<a href="https://www.reddit.com/r/Qtum/" target="_blank" rel="noopener">Reddit</a>，<a href="https://discordapp.com/channels/360663359433211905/360663359433211908" target="_blank" rel="noopener">Discord</a> 和 <a href="https://forum.qtum.org/" target="_blank" rel="noopener">Forum</a> 社交频道上搜索 “Jackson” 或 “JB395”。</p>
<hr>
<h2 id="Qtum-主网性能"><a href="#Qtum-主网性能" class="headerlink" title="Qtum 主网性能"></a>Qtum 主网性能</h2><p>Qtum 主网持续稳定运行，最近通过了 150,000 个区块和7,000 个完全分散的 权益证明 节点。 我的计算结果显示，网络权重为 2080 万，因为在一周内稳定的总余额 185 万的大型钱包赢得了8.9％的区块奖励。这表示 Qtum 权益节点的年回报率为4.2％：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*KCSVoU82wzhlgFKLefQ4tg.jpeg" alt=""></p>
<hr>
<h2 id="反杀毒软件"><a href="#反杀毒软件" class="headerlink" title="反杀毒软件"></a>反杀毒软件</h2><blockquote>
<p>TL;DR 由于历史原因，许多杀毒程序在下载 Qtum 钱包安装文件时会误报病毒错误，并隔离或删除这些下载。 要解决此问题，请为杀毒程序添加白名单，如果有问题，请从 <a href="https://github.com/qtumproject/qtum/releases" target="_blank" rel="noopener">Qtum GitHub 站点</a> 下载并使用验证文件校验。<br>译者注：<code>TL;DR</code> 是 “too long; don’t read” 的缩写，意思是太长别看。</p>
</blockquote>
<p>在运行我们的钱包并让它发出“好友请求”之前，我们必须安装钱包，但是在下载钱包安装文件时可能会出现一些问题，因为有杀毒软件。</p>
<p>杀毒软件当然没有最完美的终端（台式机等）恶意软件保护技术，但它是我们大多数人使用的。 杀毒软件通过将文件签名与已知的恶意软件文件签名进行匹配来工作。 这可能是最令人沮丧的，因为你从开始下载钱包安装文件，下载完成，到最后它却消失了。 发生了什么？</p>
<p>回到比特币历史中，人们曾在比特币挖矿文件中发现了一些恶意代码，并且自从杀毒程序标记比特币挖矿文件以来，这些文件与 Qtum 节点文件十分相近。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*F0tBSjIUOR538NSEvvQtTg.jpeg" alt=""></p>
<p>这是来自 McAfee 杀毒软件的下载警告消息，它在这方面表现很好，提供了一个“接受风险”选项以允许下载安装文件。 其他杀毒软件对用户不太方便，因为它们会在不发出警告的情况下隔离或删除文件。 如果你下载的钱包文件消失了，请在杀毒程序中寻找添加白名单的方法（或者最坏的情况下，暂时关闭杀毒软件进行下载）。 也可能你能够下载并安装钱包，这是因为文件只有在杀毒软件下一次完整扫描你的计算机时才会消失。 这可以通过在杀毒程序中添加白名单来解决。</p>
<p>那么该怎么办？ 请到 Qtum GitHub 站点获取最新版本（<a href="https://github.com/qtumproject/qtum/releases）" target="_blank" rel="noopener">https://github.com/qtumproject/qtum/releases）</a> 下载正确版本的钱包来安装，并验证 SHA256 校验和。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*RINDC-dDc1PzVB7L4aCezw.jpeg" alt=""></p>
<p>将相应的校验和复制到你最喜欢的校验和工具中以验证文件：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*_Iff43e3B7AQJYbmdkWrQA.jpeg" alt=""></p>
<hr>
<h2 id="Qtum-对等连接"><a href="#Qtum-对等连接" class="headerlink" title="Qtum 对等连接"></a>Qtum 对等连接</h2><blockquote>
<p>TL;DR Qtum 节点（核心钱包）将连接多达 125 个对等点。 前 8 个连接仅出站：节点伸出以连接到其他 8 个节点。 如果路由器和家庭网络的端口 3888 处于打开状态，则该节点将接受对等点 9 到 125 的入站连接。如果该节点也用作 Staking 钱包，则它将通过 8 或 125 个连接同样获得块奖励。 具有多于 8 个对等连接的节点支持连接到网络的新节点，并将下载块来同步这些新节点。 有 8 个出站连接的节点不能这样做。</p>
</blockquote>
<p>现在我们已经绕过杀毒程序并安装了钱包，我们可以启动该节点并开始连接到其他节点。</p>
<h1 id="全节点-8-vs-125-个连接"><a href="#全节点-8-vs-125-个连接" class="headerlink" title="全节点 - 8 vs. 125 个连接"></a>全节点 - 8 vs. 125 个连接</h1><p>在了解关于 Qtum 对等连接如何工作的细节之前，我们先看一下全节点的角色，Staking 钱包以及出站连接与入站连接的问题。</p>
<p>Qtum 全节点（qtumd 或 qtum-qt Core 钱包）连接到 Qtum 对等网络，将整个区块链同步到本地存储中，并实时验证和传送每个区块和交易。 Qtum 节点以此验证来保护网络，然后将块/交易转发给其他节点。 一个 Qtum 节点不需要持有任何 QTUM 或者为了当这个重要的安全角色而 Staking。 只有 Qtum 核心钱包（ qtumd 和 qtum-qt）才能成为全节点，不过轻量级交易钱包提供商也可以运行全节点，可能基于 qtumd。</p>
<p>一个 Qtum 全节点可能另外持有 QTUM 并 Staking 以赢取块奖励。 这些放大的全节点有助于保护网络，并有机会赢得块奖励。</p>
<p>对 Qtum 来说，全节点始终是钱包，但钱包并不总是全节点，例如，Android 手机钱包和 Web 钱包不是全节点，也不能用于 Staking 。 在这篇文章中，我会写关于 “节点” 的内容，但请记住，这是真正的 Qtum 核心钱包，可能会或可能不会 Staking。</p>
<p>按照设计，节点建立的前 8 个连接只是出站连接。 这意味着你的节点将主动发送 “好友请求” 与其他节点连接。 最初，我发现这个“出站”的概念令人困惑; 节点始终与其对等点进行双向通信（输入和输出），但解释是对于前 8 个连接，你的节点通过主动连接其他节点来启动连接。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*0MPoIEkzK7wIsA_ZkVFyig.jpeg" alt=""></p>
<p>任何大于 8 个的对等连接都是入站连接（除非使用出站的 addnode 命令）。 这意味着你的节点将接受来自其他节点的连接，即远程节点发送“好友请求”。具有入站连接的节点在 Qtum 网络上具有特殊功能：它们将允许新节点连接到网络，并且将它们以前存的块下载到这些新节点。 对于有入站连接的节点，我们应该特别感谢，没有它们，网络无法通过添加新节点来增长。</p>
<p>我们将在下面看到，节点在主网上允许入站连接的能力取决于路由器到家庭网络的端口 3888 ，所以这些入站的好友请求可以实际到达节点。</p>
<p>请注意，为了获得区块奖励，Staking 钱包有8个连接还是多达125个连接没有区别，事实上，就算只有一个对等连接，钱包也可以进行交易，甚至可以赢得区块奖励（参考文献1）。</p>
<p>对于 qtumd（“无头”服务器钱包）用户，可以使用以下命令监听连接：</p>
<p>“getconnectionscount” 将给出当前对等连接数，如 8 或 124.</p>
<p>“getpeerinfo” 将提供有关当前对等连接的详细信息。</p>
<h2 id="路由器和家庭网络"><a href="#路由器和家庭网络" class="headerlink" title="路由器和家庭网络"></a>路由器和家庭网络</h2><p>大多数家庭网络通过因特网服务提供商（ISP）提供的网络接入设备连接到因特网，该服务提供商可以是电缆调制解调器，DSL调制解调器或其他网络接口设备。 调制解调器通常有一个内置路由器，路由器的工作是提供从 ISP 提供的单个公共 Internet 地址到家庭网络上多个内部IP地址的地址转换。 这些内部IP地址通常由诸如 UPnP（universal plug and play）之类的协议自动分配，重要的是要知道，路由器将单个外部 IP 地址映射到家庭网络上连接的多个设备的内部IP地址。</p>
<p>让我们看一下在家庭网络上运行的 Qtum 节点的简化图：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*K-KaZ_IjqJ-S-e2CHIPAug.jpeg" alt=""></p>
<p>这里有很多东西需要解释。 ISP 为这个宽带客户提供的公共 IP 地址是 123.24.67.89，因特网上的任何地方的计算机都可以发送消息到这个地址。 内部网络 IP 地址为运行 Qtum 节点的计算机 A 为 192.0.0.1，计算机 B 为 192.0.0.2，正在进行网络冲浪，以此类推计算机C.</p>
<p>基于来回的流量，路由器知道如何将网页请求发送回计算机B，并将 Qtum 节点的出站节点请求发送回计算机A. 但是，在 Qtum 节点与前 8 个节点用那些出站的对等请求连接之后会发生什么？问题在于，对于入站的对等请求，路由器可能不够智能，无法将这些好友请求自动路由到计算机 A 中的节点，因此入站的对等请求会丢失，并且该节点无法连接到 8 个节点之上。</p>
<p>要解决这个问题，并允许节点接收入站的对等请求，我们可以使用端口转发为计算机 A 打开端口 3888. 要打开端口 3888，我们配置路由器将端口 3888 的所有流量转发到 IP 地址 192.0.0.1，以到达计算机 A 节点。根据你的网络设置，还可以从钱包映射端口 3888，使用 UPnP 选择设置 - 选项 - 网络 - 映射端口。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*zKiP5nhpSi1gQ-Yc2q0WLw.jpeg" alt=""></p>
<p>网站 portforward.com 有程序和屏幕截图来设置数百个路由器上的端口转发（只需点击他们的广告），程序基本上是登录到你的路由器，找到设置端口转发的部分，并填写表格将 TCP 输入端口 3888 分配给你节点的本地IP地址。</p>
<p>老实说，端口映射应该可以允许入站连接，但我无法使其工作。 如果有人可以提供一些指点，我可以更新这个博客。</p>
<hr>
<h2 id="Netstat工具"><a href="#Netstat工具" class="headerlink" title="Netstat工具"></a>Netstat工具</h2><p>在本节中，我们添加一些实用的网络程序和诊断技术。 通常，你的家庭网络允许 Qtum 节点自动同步，但如果没有，这些工具可能有助于排除错误。</p>
<p>为了监控你的家庭网络，netstat（网络状态）程序是一个很好的开始。 从命令提示符运行此工具。 它内置于 Mac 和 Windows，在Linux上你可能需要安装它（apt-get install net-tools）。netstat 选项列表在参考2中给出。</p>
<p>“netstat -n” 命令将以数字形式显示网络地址和端口，显示一个节点连接到端口 3888 上的远程节点：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*UvSrPc9mfo_e1Zp4Fj8c7A.jpeg" alt=""></p>
<h2 id="Addnode-命令"><a href="#Addnode-命令" class="headerlink" title="Addnode 命令"></a>Addnode 命令</h2><p>如果你的新节点没有与对等方连接，则需要使用 “addnode” 命令提供帮助。 你可以告诉节点向特定 IP 发送“好友请求”。但是你应该使用哪些 IP？</p>
<p>addnode 命令的一个很好的对等 IP 地址来源是 coinexchange.io，它列出了来自其 Qtum 节点的 “getpeerinfo” 数据。要使用此站点中的IP地址，请将其输入为</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addnode 123.45.67.89:3888 add</span><br></pre></td></tr></table></figure>
<p>（这是一个合成的IP地址，你应该使用来自 coinexchange.io 的实际 IP 地址）</p>
<p>对 addnode 命令的正确响应是 “null”，然后你的节点将尝试一两分钟连接到该对等点 IP 地址。 你可以尝试手动添加 5 个或 10 个对等连接。</p>
<h2 id="在启动时连接"><a href="#在启动时连接" class="headerlink" title="在启动时连接"></a>在启动时连接</h2><p>在本节中，我们将了解节点如何在启动时建立连接，并使用 netstat 来监听网络并查看节点如何连接。 我们的 netstat 命令是 “netstat -an 30”，意思是每隔 30 秒以数字格式显示所有连接和监听端口。</p>
<p>启动节点时，有几种方法可以找到要连接的对等点。如果节点先前已经运行，它将保存 IP 地址和时间在 peers.dat 文件中。 如果节点是新的或者在 peers.dat 文件中找不到一些好的IP地址，它将向 DNS 服务器查询当前 IP 地址的列表。 最后，你可以手动输入 IP 地址来尝试使用 “addnode” 命令。</p>
<p>首先，我们安装时将节点设置为在全局启动，且不使用 peers.dat 文件中的历史记录（只需重命名 peers.dat 文件，使节点找不到它）。</p>
<p>下面是一个新节点寻找其他节点的消息序列。 这个节点没有使用留有以前“朋友”的 peers.dat 文件。 在半小时的过程中，它将尝试多个IP地址，找到两个要连接的对等点：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*XKVrxce8Y6ptxjfPnC6f3g.jpeg" alt=""></p>
<p>Qtum 核心钱包有一个文件，其中包含所有“好友请求”，即 peers.dat 文件。 同一个节点使用 peer.dat 文件启动（将先前的文件名改回 “peers.dat”）可使钱包在 12 分钟内与 10 个对等点连接。 下面的图表显示钱包另找新朋友（没有 peers.dat 文件 - 如上所示）与仅仅联系以前的朋友（使用peers.dat 文件）时的差异：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*j8WpDjh7d5yzpfg2zLbHcQ.jpeg" alt=""></p>
<h2 id="用于网络事件的-Debug-log-文件"><a href="#用于网络事件的-Debug-log-文件" class="headerlink" title="用于网络事件的 Debug.log 文件"></a>用于网络事件的 Debug.log 文件</h2><p>Qtum 节点现在已经准备好了它的特写，我们将通过设置 debug.log 来捕获所有网络事件。 这是启动钱包时通过 debug=net 开关完成的：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\<span class="function"><span class="keyword">Program</span></span> Files\Qtum&gt;qtum-qt.exe -debug=net</span><br></pre></td></tr></table></figure>
<p>根据你的操作系统调整此命令。</p>
<p>使用此命令后，节点将记录有关网络活动的所有详细信息。</p>
<p>有关显示连接如何建立简单的列表（下面的参考文献7中给出了更完整的序列），日志显示：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*hG_OEoziecwLYW259qzn5w.jpeg" alt=""></p>
<p>（1）启动后，我们的节点尝试根据 peers.dat 文件连接到多个 IP。 它在十天前看到节点 59.189.111.143，但现在不能连接。</p>
<p>（2）我们的节点连接到 DNS 种子服务器以获取最近的一些 IP 地址。</p>
<p>（3）我们的节点试图连接到地址 35.226.31.206，要尝试的是第6个节点。</p>
<p>（4）我们的节点在 35.226.31.206 处向节点发送版本消息（软件版本，块编号和时间参考）。 该版本消息是“好友请求”。远程节点将使用自己的版本消息进行响应。</p>
<p>（5）节点交换 verack 消息（版本确认）以确认连接。 现在它们是好友，可以开始聊天了。 我们的节点将向远程节点请求额外的IP地址，发送其他“好友请求”。</p>
<p>（6）我们的节点将其最新的块（它离线差了 4 块）发送到 35.226.31.206，并请求下载块以追上。</p>
<p>（7）我们的节点开始接收来自节点 6 的块。</p>
<p>请注意时间戳，节点启动后尝试连接节点 6（对等节点 1 到节点 5 未连接）需要45秒，然后等待一秒完成连接（verack 消息）并开始下载块。</p>
<hr>
<p>我在莫斯科写完博客，部分原因是我收到了来自 Qtum Telegram Russia 频道的管理员 Lisa L 的一个好友请求，要翻译之前的 Qtum Russian Community 博客，因为俄罗斯目前有 17 个 Qtum 节点，并且国际足联世界杯将于 6 月份来到俄罗斯。还要更好的理由在克里姆林宫和红场进行摄影漫步嘛？这个地区是俄罗斯的文化中心，列宁坟墓的所在地，圣巴西尔大教堂（建于 1561 年），众多的博物馆以及 2 月份记者访问时的寒冷天气。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*czNb6yYM2zdTTMII4GXwFw.jpeg" alt="The Moscow Kremlin"></p>
<hr>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>特别感谢 Liza L 的俄文翻译。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>我使用 Testnet 钱包来验证使用单个对等连接操作的节点，使用以下命令：</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qtum-qt.exe -testnet -noconnect <span class="attribute">-connect</span>=35.197.132.10:13888</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*FIXpCZF2EVT4WDX2WmJtCQ.jpeg" alt="just the one peer!"></p>
<ol>
<li>netstat工具。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*YFUuVNBnF9fv2na1pyIzuw.jpeg" alt=""></p>
<p>Qtum 对等通信基于比特币，下面是一些相关的比特币参考：</p>
<ol>
<li>BitcoinCore — <a href="https://bitcoin.org/en/full-node" target="_blank" rel="noopener">运行完整节点</a></li>
</ol>
<ol>
<li>Reddit <a href="https://www.reddit.com/r/Bitcoin/comments/1scd4z/im_running_a_full_node_and_so_should_you/cdw3lrh/?context=3" target="_blank" rel="noopener">bitcoin post</a>:我正在运行一个全节点，你也来吧</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*lvvUJCT7f79P9ASR3ljBRA.jpeg" alt=""></p>
<ol>
<li>区块链研究的音乐。 <a href="https://youtu.be/ucTcvj6iB6g" target="_blank" rel="noopener">柴可夫斯基 - 意大利随想曲</a> - Igor Manasherov，莫斯科爱乐乐团，柴可夫斯基音乐厅，2015年6月，莫斯科。</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*tGHDxDANUtKs8n9tOwHNfw.jpeg" alt=""></p>
<ol>
<li>无人机在克里姆林宫上，在 <a href="https://youtu.be/-yPrVC3-B2o?t=11m25s" target="_blank" rel="noopener">YouTube</a> 上看。</li>
</ol>
<ol>
<li>以下是连接到 35.226.31.206 的节点 6 的更完整的日志列表：</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*-ZsallnwsnEpijqJ8956JQ.jpeg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】 孤儿块]]></title>
      <url>/2018/05/12/2018-05-12-%E7%BF%BB%E8%AF%91-%E5%AD%A4%E5%84%BF%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@jb395official/orphan-blocks-june-16-2018-a8f4799dcc2c" target="_blank" rel="noopener">https://medium.com/@jb395official/orphan-blocks-june-16-2018-a8f4799dcc2c</a><br>译者：中山大学数学学院（珠海）林学渊<br>大二时给量子做的翻译，转载注明出处，谢谢</p>
<h1 id="孤儿块-—-2018年4月16日"><a href="#孤儿块-—-2018年4月16日" class="headerlink" title="孤儿块 — 2018年4月16日"></a>孤儿块 — 2018年4月16日</h1><p>这一次我们讨论孤儿块。当两个钱包在相近的时间获得块奖励并将块发布到网络时，就会产生孤儿块。其中一个区块将被接受并扩充区块链，另一个区块将成为孤儿并被拒绝。</p>
<p>我们看一下孤儿块的两个问题：</p>
<ol>
<li>谁挖到了孤儿块？</li>
<li>我的钱包是否挖到了孤儿块？我该怎么办？</li>
</ol>
<p>我们转向一位熟悉的朋友来回答这些问题：钱包的 debug.log 文件。</p>
<p>我承认这是一个只有少数人感兴趣的专门话题。 如果你好奇区块链，请继续阅读; 如果你认为你已经挖到了一个孤儿块，你必须阅读; 如果你对区块链和糟糕的区块链笑话有普遍兴趣，那随你便……</p>
<p>我是一名独立的区块链研究员，偶尔写博客和主持社交媒体，十分中意 Qtum 团队的技术指导。如果你对本文有任何意见或更正，请在社交媒体上联系我。</p>
<hr>
<h2 id="主网性能"><a href="#主网性能" class="headerlink" title="主网性能"></a>主网性能</h2><p>首先简要回顾一下 Qtum 主网的最新性能。</p>
<h3 id="网络权重"><a href="#网络权重" class="headerlink" title="网络权重"></a>网络权重</h3><p>我另一种计算网络权重的方法依赖于大赌注钱包所获得的积分奖励的百分比，这些大赌注钱包具有已知余额。我的方法也提供了比钱包的计算的网络权重估计更准确的数字。在上周，这些 175 万余钱的大钱包获得了9.96％的积分奖励，网络权重为 1760 万。 网络权重为 1760 万意味着年度回报率为 5.0％</p>
<h3 id="交易费用"><a href="#交易费用" class="headerlink" title="交易费用"></a>交易费用</h3><p>由于合约调用，最近出现了一些初始两位数的交易费用。 重量级是 167,861 块，收 5.9 QTUM 交易费，其中包括来自与 Luna Stars 促销相关的一系列 LSTR 令牌转账的 gas。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*-Y_7vQMqWzqBWDW99fYoWg.jpeg" alt="与Luna Stars DAPP约会"></p>
<p>该区块持有 323 笔交易，在 gas 退款后为区块奖励获奖者支付了9.9 QTUM（4.0 QTUM 区块奖励 + 5.9 交易费用(来自 10 种方式)）后支付 29.92 QTUM 的初始交易费用。 请注意，对于此区块，交易费用大于区块奖励。</p>
<hr>
<h2 id="孤儿块"><a href="#孤儿块" class="headerlink" title="孤儿块"></a>孤儿块</h2><blockquote>
<p>TL;DR 当两个节点在相似时间发布新块时，分散式区块链挖矿平台偶尔会挖出孤儿块。孤儿块对于分散式网络来说是完全正常和健康的。  Qtum 的孤儿块率约为1.6％，即每天有 10 个孤儿块。 Qtum 网络一视同仁处理孤儿块（它们被取消），但偶尔中断这一过程会导致孤儿块奖励搁浅，在这种情况下，可以使用一些钱包命令行工具进行恢复。</p>
</blockquote>
<h3 id="孤儿简介"><a href="#孤儿简介" class="headerlink" title="孤儿简介"></a>孤儿简介</h3><p>百老汇音乐剧“小孤儿安妮”于 1977 年在纽约市首映，并讲述了这个勇敢的（有音乐天赋的）小孤儿安妮的故事，她在孤儿院里生活艰苦，并最终被百万富翁实业家 Daddy Warbucks 领养。 在电影版的安妮故事里，汉尼根小姐，孤儿院的邪恶女校长说：</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*PXxFu2Uqo7R3r_-EnSySNg.jpeg" alt="克莱斯勒大厦由大卫Shankbone，裁剪过"></p>
<p>.<br>“为什么所有孩子都想成为一个孤儿？我不懂。你会熬夜工作直到这个垃圾场…像克莱斯勒大厦的顶部一样耀眼。”<br>.<br>.<br>.</p>
<p>在 Qtum 区块链上，当两个 Staking 钱包在相似的时间产生新的区块时，就会生成孤儿块。 对于分散节点，这是偶然且完全自然的结果。 孤儿块与主区块链的关系如下：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*EQw6NCiKguSN4v7zzGdyPQ.jpeg" alt=""></p>
<p>为了分析产生的孤儿块的数量，我在 Excel 中处理 debug.log 文件来检查何时挖到新块。 对于允许入站连接的钱包，每个块接收自许多不同的节点（30 个或更多），并且钱包将验证并选择一个附到本地区块链副本。 所有 30 个块都收到相同的数据，包括相同的交易 ID，因为它们来自奖励获奖钱包的那一区块，嗯，你知道这是为啥。</p>
<p>如果挖掘了孤儿块，与其他块相比，它将有相同的块编号，但有不同的交易 ID。 如果将一周的 debug.log 文件行导入 Excel，并运行一些字符串匹配公式，则会弹出孤儿块。</p>
<p>怎么算孤儿块个数？ 我在<a href="https://medium.com/@jb395official/qtum-mainnet-results-nov-27-dec-3-327c1e9bc59c" target="_blank" rel="noopener">之前的博客</a>中有一些估计。 比特币的孤儿率约为0.5％（可能是由于<a href="https://bitcoinmagazine.com/articles/how-falcon-fibre-and-the-fast-relay-network-speed-up-bitcoin-block-propagation-part-1469808784/" target="_blank" rel="noopener">快速中继网络</a>），而目前约为 23％ 以太坊叔块（<a href="https://etherscan.io/chart/uncles" target="_blank" rel="noopener">以太坊的叔块</a>激励和处理的方式与 Qtum 孤儿块不同）。</p>
<p>我的分析显示，<strong>Qtum 的孤儿块率为1.6％</strong>。 这意味着每天 600 块，将会有大约 10 个孤儿。 另一种看待这个问题的方法是：如果一个钱包平均 63 块（在一段时间内）挖矿，那么平均一个将成为一个孤儿。</p>
<hr>
<h2 id="谁挖到了孤儿块？"><a href="#谁挖到了孤儿块？" class="headerlink" title="谁挖到了孤儿块？"></a>谁挖到了孤儿块？</h2><p>寻找一个孤儿块有点像在干草堆里找针。解析 debug.log 文件查找孤儿意味着多达 1,000,000 行的多个 Excel 工作表。 幸运的是，有一个 Excel FINDNEEDLE 函数可以找到那些害羞的孤儿块[参考文献2]：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*sQ2uHk_Ruc9EV_Eis7l1-A.jpeg" alt="67名孤儿发现于6月1日至6月7日，为164,075至168,274"></p>
<p>在一周的数据里，我发现了 67 个孤儿（可能还有几个孤儿）。 注意孤儿块 165,136 和 165,137 是相连的孤儿，孤儿高度是两个块（孤儿块 165,137 的父亲是 Mainchain 块 165,136）。</p>
<p>大 staking 钱包将创造许多孤儿块。 我们可以看看 QNqKe …，这是目前最大的 Staking 钱包，我相信这是一个交易热门钱包，而且也 Staking 了（我不知道是属于哪个交易所，但感谢帮忙保护区块链！）。 我们知道钱包会在每 63 块奖励中击中一个孤儿块（但有很多随机变化），而 QNqKe ……在 2 天多一点的时间里获得 63 块奖励。 这是来自 QNqKe 的孤儿块 163,638 …：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*5XlYtw7FSOqeSTS0fqNczQ.jpeg" alt=""></p>
<p>请注意这个区块的两件事情，资源管理器将其标记为“孤儿”，下一个应该列出区块的空间却是空的。 这个孤儿块有上一个区块 163,637，但没有下一个区块。 有一个父块但没有子块[参考文献3]。 只有 explorer.qtum.org 会显示孤儿块，其他资源管理器没有。</p>
<p>主网区块 163,638 实际上是通过钱包 QgVXC 赢得的……并且其资源管理器页面显示“Mainchain”和Next Block 163,639：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*ChoMOgV4mezMtkld8P1ufA.jpeg" alt=""></p>
<p>那些眼睛犀利的人可能会注意到挖到 Mainchain 块的难度高于孤儿块，这就是其他节点在孤儿块上选择 Mainchain 块的方式：赋予区块链最高难度（最安全） 。</p>
<hr>
<h2 id="当坏事情发生在好钱包时"><a href="#当坏事情发生在好钱包时" class="headerlink" title="当坏事情发生在好钱包时"></a>当坏事情发生在好钱包时</h2><p>从你的钱包中检测孤儿块的一种方法是查看 debug.log 文件。 如果你不熟悉 debug.log 文件，请参阅<a href="https://medium.com/@jb395official/the-debug-log-the-virtual-machine-log-march-13-2018-76ddbe568f2" target="_blank" rel="noopener">此博客</a>。</p>
<p>要查看你的钱包是否已挖到孤儿块，请打开 debug.log 文件并从底部向上搜索“conflicts with wallet transaction”。 如果你的钱包挖到了一个孤儿，你会发现这条日志行和几行后面的日志行显示 “CT_DELETED”，它会从交易表中删除孤儿交易。 如果你正在看你的桌面 GUI 钱包，你会看到一开始 0.4+ 挖矿交易出现，然后神秘地消失。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*Wxj2bMYuyQIeUZCAT5ywGg.jpeg" alt=""></p>
<p>怎么看这个日志？</p>
<p>从 “conflicts with wallet transaction” 一行取出两个交易 ID 并在 Explorer.qtum.org 中搜索它们。 你可能会看到这些事务 ID 都不能在区块链中找到，或者它们可以显示为孤儿块。 无论结果如何，这都意味着你肯定挖到了孤儿块。</p>
<p>让我们来回顾一下赢得大块奖励时你的钱包有什么行为。 得到块奖励的获奖钱包将 1）选择一个或多个先前的交易金额（UTXO）来 stake 500 块，2）尽可能多地抓取内存池里正在等待的交易，并将它们组装到新块中，3）根据区块链的本地副本执行这些交易中的所有智能合约调用，4）将新块发布到网络。 当你的钱包完成所有这一切时，它不知道它是创建了一个 Mainchain 块还是一个孤儿块，因为它只是做完这一切并提交了这个 stake。</p>
<p>当你的钱包挖到孤儿块时，最好的办法是不要做任何事情，保持冷静。 你的钱包会发现它挖到了一个孤儿并且迟早会取消所有的孤儿块活动，包括返还 stake。</p>
<p>不管如何，这种孤儿块取消过程很少会中断。 我说实话，我不完全理解孤儿中断过程，但可以猜测，如果你对服务感到紧张，正在密切关注你的钱包，并开始恢复它交换 wallet.dat 文件以取回孤儿 stake - 这可能会滞留孤儿 stake。 在这种情况下，资源管理器将显示地址的正确余额，否则你的钱包将在该地址处显示余额低于 stake 的 UTXO 的金额。 钱包中丢失的金额可能与之前未花费的交易金额完全匹配，你的钱包选择为该孤立区块进行 stake。</p>
<p>如果你发现自己处于这种状况，那么现在是某些命令行工具的时候了。 为了从孤儿 stake 中恢复，“打捞钱包”是无效的，因为它可以修复损坏的 wallet.dat 文件，这不是问题。</p>
<p>请注意，我们正在查看启动钱包时使用的命令行参数，而不是在钱包运行后在调试控制台输入/qtum-cli 命令。 这些命令行工具在你从命令行启动钱包时使用。 对于 Mac OS X，你将在终端中输入命令行，如本博客中所述。 对于 Windows，你将使用本博客中描述的 Windows 命令提示符输入命令。 如果你正在运行服务器钱包 qtumd ，则可以在启动 qtumd 时添加命令行参数（请勿对这些命令使用qtum-cli）。</p>
<p>只有在你拥有 wallet.dat 文件的 <em>良好备份</em> 并完成上述故障排除以确认孤儿块时才使用这些步骤。</p>
<h3 id="重新扫描命令"><a href="#重新扫描命令" class="headerlink" title="重新扫描命令"></a>重新扫描命令</h3><p>重新扫描命令将通过你本地的区块链副本并从头构建数据库。 <a href="https://bitcoin.stackexchange.com/questions/1249/how-exactly-does-rescan-work" target="_blank" rel="noopener">在这篇文章中</a>了解重新扫描工作原理。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*IAXyRUNUM5HRX5vhq2TeCQ.jpeg" alt=""></p>
<p>输入重新扫描命令：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qtum-qt<span class="selector-class">.exe</span> -rescan</span><br></pre></td></tr></table></figure>
<p>当你输入 qtum-qt 的命令时，启动屏幕将显示状态“重新扫描… XX％”一两分钟，然后打开主钱包。</p>
<h3 id="Zapwallettxes-命令"><a href="#Zapwallettxes-命令" class="headerlink" title="Zapwallettxes 命令"></a>Zapwallettxes 命令</h3><p>zapwalletxes 命令将重新扫描本地区块链，并删除（“zap”）钱包中未发布在区块链上的所有交易。 在<a href="https://en.bitcoin.it/wiki/Running_Bitcoin" target="_blank" rel="noopener">维基</a> 阅读更多关于 zapwallettxes 的信息。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*aOuPNCzhDXXFHwtUzYVb7Q.jpeg" alt=""></p>
<p>输入 zapwallettxes 命令:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qtumd.exe –<span class="attribute">zapwallettxes</span>=2</span><br></pre></td></tr></table></figure>
<p>输入命令后，qtum-qt 将启动并在右下角显示“重新扫描…”。 一两分钟后，将出现完整的钱包窗口，很有希望会恢复孤儿 stake。<br><img src="https://cdn-images-1.medium.com/max/1600/1*fUeUFeDaCBmkmF4ZY8XKVA.jpeg" alt=""></p>
<p>如果你在 qtumd 中使用这些命令，请给它一两分钟来完成重新扫描，在此之前它不会响应 info 命令。</p>
<hr>
<p>在音乐剧和电影的结尾，百万富翁工业家爸爸 Warbucks 领养了小孤儿安妮，然后过上了奢华的生活。 同样地，Qtum 孤儿块会返还它们的 stake 然后 staking 并保护 Qtum 区块链。</p>
<p>请保持在线安全，</p>
<p>Jackson</p>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>看我的过去的博客，包含以下主题：</li>
</ol>
<p><a href="https://medium.com/@jb395official/qrc20-token-update-may-28-2018-45e2e259b891" target="_blank" rel="noopener">QRC20 Token 更新</a>，设定发送QRC20代币的气体限价和气体价格，发布于2018年5月28日</p>
<p><a href="https://medium.com/@jb395official/qtum-peer-connections-may-21-2018-ba12bda71e4f" target="_blank" rel="noopener">Qtum 对等连接</a>，详细了解Qtum节点连接到2018年5月21日发布的其他节点，传出/传入连接以及一些用于监控流量的工具</p>
<p><a href="https://medium.com/@jb395official/top-10-qtum-new-user-questions-april-22-2018-307a65dad83f" target="_blank" rel="noopener">Qtum 新用户十大问题</a>，2018年4月22日发布的新Qtum用户的答案</p>
<p><a href="https://medium.com/@jb395official/network-hash-rates-april-4-2018-d4159365df19" target="_blank" rel="noopener">网络哈希率</a>，比特币，以太坊和Qtum网络哈希率的比较，这些数字可能会让你感到惊讶，2018年4月6日发布</p>
<p><a href="https://medium.com/@jb395official/newbie-wallets-april-1-2018-26ea7a06489c" target="_blank" rel="noopener">新手钱包</a> :分析块奖励获奖钱包和新中文节点，发布于2018年4月1日</p>
<p><a href="https://medium.com/@jb395official/the-debug-log-the-virtual-machine-log-march-13-2018-76ddbe568f2" target="_blank" rel="noopener">调试日志，虚拟机日志</a>:debug.log（和虚拟机日志）是你的朋友，<a href="https://medium.com/@jb395official/the-debug-log-the-virtual-machine-log-march-13-2018-76ddbe568f2" target="_blank" rel="noopener">如何查找和阅读调试日志</a>，发布于2018年3月13日</p>
<p><a href="https://medium.com/@jb395official/qtum-capped-supply-the-halving-b650b7fb955e" target="_blank" rel="noopener">QTUM上限供应减半</a>:QTUM的供应量是多少，将会有多少？ QTUM的上限，“减半”的工作原理以及2018年3月4日发布的新资源管理器</p>
<p><a href="https://medium.com/@jb395official/qrc20-token-report-february-25-2018-ff397a1ac070" target="_blank" rel="noopener">QRC20令牌报告</a>:QRC20令牌，BOT空投，发布于2018年2月25日</p>
<p><a href="https://medium.com/@jb395official/happy-new-year-qtum-mainnet-performance-february-9-15-a696e8e8396e" target="_blank" rel="noopener">Qtum PoS模拟器</a>:发布于2018年2月16日</p>
<p><a href="https://medium.com/@jb395official/testnet-and-qtum-mainnet-performance-january-1-8-e7af03a5d430" target="_blank" rel="noopener">Testnet</a>:Qtum测试网络，于2018年1月7日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-december-25-31-891680ee5a52" target="_blank" rel="noopener">虚拟专用网络（VPN）</a>:使用VPN进行赌注，于2017年12月31日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-december-18-24-8e43e51aca3b" target="_blank" rel="noopener">交易费用</a>，2017年12月24日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-dec-11-17-d5548947fa1f" target="_blank" rel="noopener">密码短语</a>，密码短语和密码猜测脚本，2017年12月17日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-dec-4-10-2d4bc438062d" target="_blank" rel="noopener">内存池（mempool）</a>，内存池和未确认事务的处理，于2017年12月10日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-nov-27-dec-3-327c1e9bc59c" target="_blank" rel="noopener">孤儿块</a>，发布于2017年12月3日</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-20-26-ebde2cd0139" target="_blank" rel="noopener">QTUM.explorer.io合同页面</a>:2017年11月26日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-13-19-bfbf45d0c153" target="_blank" rel="noopener">SHA256哈希算法和难度</a>，于2017年11月20日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-november-6-12-f59dd373ff3" target="_blank" rel="noopener">“钱包赢得座位奖励”的分发</a>，2017年11月12日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-30-november-5-d58164b811db" target="_blank" rel="noopener">SHA256哈希算法，目标和难度</a>，于2017年11月5日发布</p>
<p><a href="https://medium.com/@jb395official/an-introduction-to-qtum-proof-of-stake-mining-a-racing-story-f11a3f48009f" target="_blank" rel="noopener">Qtum 采矿权益证明的介绍 - 赛车故事</a>，关于PoS采矿的ELI5故事。2017年10月29日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-23-29-527cd4ab887a" target="_blank" rel="noopener">基础的钱包离场</a>，2017年10月29日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-1-8-f413231c689a" target="_blank" rel="noopener">非官方赌注常见问题解答</a>，2017年10月26日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-results-october-16-22-9202990b8e8d" target="_blank" rel="noopener">网络权重，奖励时间，Nodemap</a>，2017年10月22日发布</p>
<p><a href="https://medium.com/@jb395official/simulating-proof-of-stake-mining-for-qtum-57401c08590a" target="_blank" rel="noopener">模拟 Qtum 采矿权益证明</a>，2017年10月21日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-proof-of-stake-mining-439d2b82802d" target="_blank" rel="noopener">用于PoS挖掘的早期模拟器 Stake 采矿的Qtum证明</a>，2017年10月16日发布</p>
<p><a href="https://medium.com/@jb395official/qtum-mainnet-ignition-results-october-9-15-1efe30eb2658" target="_blank" rel="noopener">Qtum 主网点火结果10月9日至15日</a>，主网图表和图表介绍，于2017年10月15日发布</p>
<ol>
<li>另一个糟糕的杰克逊笑话。 在 Excel 中没有 FINDNEEDLE 函数，但是这些公式对于使用 E 列中的块事务 ID 和 F 列中的块号加载的 debug.log 数据工作得很好。使用字符串函数来提取事务 ID 和块号：</li>
</ol>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">IF</span>(<span class="built_in">FIND</span>(“height”, <span class="symbol">F2</span>),<span class="built_in">MID</span>(<span class="symbol">F2</span>, <span class="number">8</span>, <span class="number">6</span>)) — extract the block number</span><br><span class="line">=<span class="built_in">IF</span>(<span class="built_in">FIND</span>(“height”, <span class="symbol">F2</span>),<span class="built_in">MID</span>(E, <span class="number">6</span>, <span class="number">64</span>)) — extract the transaction ID</span><br></pre></td></tr></table></figure>
<ol>
<li>“孤儿”不是这些块最好的名词。 孤儿块有父母，我们知道孤儿块的父母，但他们没有孩子。 我认为一个更好的术语是 Freemartin。 显然，Satoshi 不是一个行话。</li>
</ol>
<ol>
<li>比特币孤儿块显示在 blockchain.info 上</li>
</ol>
<p>百老汇音乐剧安妮开幕之夜是1977年4月21日在纽约市的阿尔文剧院。 制作有2,377场演出，并于1983年1月2日结束。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*taJKu6c9RzNI4RHfsmPL7Q.jpeg" alt=""></p>
<ol>
<li><p>孤儿研究的音乐，Aileen Quinn 在 1982 年的电影“安妮”中演唱“明日”。 明天太阳会出现，明天你会赢得奖励奖励。</p>
</li>
<li><p>Spotify 专辑链接，Annie：<a href="https://open.spotify.com/album/15M8SwihPt6KSKj6jozIyL?si=rdK6nesaT92c-TLoLYoMag" target="_blank" rel="noopener">百老汇音乐剧 30 周年演员录音</a></p>
</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*jlvTvJjD1GpkbUfFCSAPmw.jpeg" alt=""></p>
<ol>
<li><a href="https://www.youtube.com/watch?v=1wjhEZTb1k8" target="_blank" rel="noopener">纽约无人机航班</a>，4k观看</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Qtum </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 反编译]]></title>
      <url>/2018/04/11/2018-04-11-Android-TimeCat-%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需要参考一些好的项目，但是并没有开源，自己写是不会写的，这辈子都不会写的，抄又不能直接抄，只有靠反编译才能维持得了生活这样子。。。</p>
<h1 id="神操作"><a href="#神操作" class="headerlink" title="神操作"></a>神操作</h1><p>在线反编译：<a href="http://www.javadecompilers.com/apk" target="_blank" rel="noopener">http://www.javadecompilers.com/apk</a></p>
<h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><h2 id="APK-Analyzer"><a href="#APK-Analyzer" class="headerlink" title="APK Analyzer"></a>APK Analyzer</h2><p>Android Studio 自带的 APK Analyzer 可直接查看APK内的 图片，xml内容，dex结构，文件尺寸等，还可以比较两个apk的差异。</p>
<p>虽然不能导出资源有点可惜，但已经很强大方便了。</p>
<p>用法：将 apk 拖入 AndroidStudio 就好了</p>
<p>参考：developer.android.com/studio/buil…</p>
<h2 id="常用三件套"><a href="#常用三件套" class="headerlink" title="常用三件套"></a>常用三件套</h2><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p><a href="http://www.cnblogs.com/liuhongfeng/p/4177568.html" target="_blank" rel="noopener">Windows环境下JDK安装与环境变量配置详细的图文教程</a></p>
<h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><ul>
<li><p>apktool：资源文件获取，可以提取出图片文件和布局文件进行使用查看<br>下载地址：<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">https://ibotpeaches.github.io/Apktool/</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Developer-Tools/Apktool.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Developer-Tools/Apktool.shtml</a></p>
</li>
<li><p>dex2jar：将apk反编译成java源码（classes.dex转化成jar文件）<br>下载地址：<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Developer-Tools/dex2jar.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Developer-Tools/dex2jar.shtml</a></p>
</li>
<li>jd-gui：查看APK中classes.dex转化成出的jar文件，即源码文件<br>下载地址：<a href="https://code.google.com/archive/p/innlab/downloads" target="_blank" rel="noopener">https://code.google.com/archive/p/innlab/downloads</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Development/Java/JD-GUI.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Development/Java/JD-GUI.shtml</a></li>
</ul>
<blockquote>
<p>注：有个合集，更加傻瓜化的工具onekey-decompile-apk：<a href="https://github.com/ufologist/onekey-decompile-apk" target="_blank" rel="noopener">https://github.com/ufologist/onekey-decompile-apk</a><br>把apk拖到文件目录下就能直接反编译了</p>
</blockquote>
<p>其实一些常见工具都可以通过 homebrew 或 homebrew-cask 安装<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>apktool</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>smali</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>dex2jar</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jadx</span></span><br><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">jd-gui</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h4><p>apk 虽然实际上是个 zip 可以直接 unzip，但里边的 xml 都是 Binaray XML 形式，需要再次转化成 xml 才能查看。</p>
<p>apktool 可以将 apk 内的资源全部提取出来，同时 xml 也转化好可直接查看内容。</p>
<p>apktool 也可以用于在修改资源后重新打包 apk</p>
<p>用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取资源</span></span><br><span class="line">apktool d test.apk</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取资源并指定输出目录</span></span><br><span class="line">apktool d test<span class="selector-class">.apk</span> -o test</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新打包apk</span></span><br><span class="line">apktool <span class="selector-tag">b</span> test</span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="ibotpeaches.github.io/Apktool/">ibotpeaches.github.io/Apktool/</a></p>
<h4 id="smali-baksmali"><a href="#smali-baksmali" class="headerlink" title="smali/baksmali"></a>smali/baksmali</h4><p>baksmali 可将 dex/odex 转成 .smali 文件集<br>smali 可将 .smali 文件集 转成 dex/odex</p>
<p>注：odex 转 smali 需要相应系统的 framework，adb pull /system/framework</p>
<p>用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 test.dex 分解到 test 目录</span></span><br><span class="line">baksmali test<span class="selector-class">.dex</span> -o test </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 test 目录里的 smali 文件组装到 haha.dex</span></span><br><span class="line">smali test -o haha.dex</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统 framework</span></span><br><span class="line">adb pull /system/framework</span><br><span class="line"><span class="comment">// 将 test.odex 分解到 test 目录</span></span><br><span class="line">baksmali test<span class="selector-class">.odex</span> <span class="selector-tag">b</span> framework -o test</span><br></pre></td></tr></table></figure></p>
<p>参考: <a href="https://github.com/JesusFreke/smali/wiki" target="_blank" rel="noopener">https://github.com/JesusFreke/smali/wiki</a><br>下载：<a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="noopener">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
<h4 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h4><p>dex2jar 可将 .dex 转换成 .jar</p>
<p>用法：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将 <span class="keyword">test</span>.dex 转成 <span class="keyword">test</span>.jar 文件</span><br><span class="line">d2j-dex2jar <span class="keyword">test</span>.dex -o <span class="keyword">test</span>.jar</span><br></pre></td></tr></table></figure></p>
<p>参考: <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar</a><br>下载：<a href="https://bitbucket.org/pxb1988/dex2jar/downloads/" target="_blank" rel="noopener">https://bitbucket.org/pxb1988/dex2jar/downloads/</a></p>
<h4 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h4><p>jadx 可以将 .dex/.jar/.class 文件反编译成 .java 源码<br>jadx 也可以直接反编译 .apk 并处理好资源(binary xml -&gt; xml)</p>
<p>jadx-gui 可视化查看工具</p>
<p>用法：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反编译 test.dex 并输出到 test 目录</span></span><br><span class="line">jadx <span class="keyword">test</span>.dex -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.apk</span></span><br><span class="line">jadx <span class="keyword">test</span>.apk -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.jar</span></span><br><span class="line">jadx <span class="keyword">test</span>.jar -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.class</span></span><br><span class="line">jadx <span class="keyword">test</span>.<span class="keyword">class</span> -<span class="keyword">d</span> <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p>
<p>参考：<a href="github.com/skylot/jadx">github.com/skylot/jadx</a></p>
<h4 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h4><p>jd-gui 可视化反编译查看 .jar 文件</p>
<p>参考：<a href="jd.benow.ca/">jd.benow.ca/</a></p>
<h1 id="附-Android-APK中的Java代码可以被反编译到什么程度"><a href="#附-Android-APK中的Java代码可以被反编译到什么程度" class="headerlink" title="附:Android APK中的Java代码可以被反编译到什么程度"></a>附:Android APK中的Java代码可以被反编译到什么程度</h1><p>Android APK中的Java代码可以被反编译到什么程度主要看APK的加密程度。</p>
<p>第一种情况：无混淆无加密无加壳。直接利用Dex2jar和JD-GUI可把源码从APK里抠出来，代码逻辑清晰，基本上做到可复用，只是资源文件的引用需要计算一下。</p>
<p>第二种情况：混淆。通常是利用Proguard做的防护。因为是对jar做的不可逆混淆（除非有mapping），因此不能还原成原来的代码。但是代码结构，代码逻辑一致，只要花长时间对代码进行梳理一样可找准核心代码，解密方法跟第一种一致。</p>
<p>第三种情况：加密。这里以DexGuard为例。对于这种代码加密的方法，在程序运行中必定会进行解密，只要抽出它解密的逻辑便可。PS：我自己做过DexGuard的解密，如果用Dex2jar反编译看的话逻辑是不对的，一定要从Smali代码看。后来发现网上已经有人做了。解密的脚本：<a href="https://www.pnfsoftware.com/blog/2013/04/02/a-look-inside-dexguard/" target="_blank" rel="noopener">A look inside Dexguard</a></p>
<p>第四种情况：加壳。这种情况跟第三种类似。无论你怎么加壳，运行的时候必定是Dalvik可识别的Odex代码，建议直接在内存里dump出来。这里推荐Xpose的ZjDroid。脱壳教程：<a href="http://www.cnblogs.com/goodhacker/p/3961045.html" target="_blank" rel="noopener">ZjDroid工具介绍及脱壳详细示例</a><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作者：Vince</span><br><span class="line">链接：https:<span class="regexp">//</span>www.zhihu.com<span class="regexp">/question/</span><span class="number">30723538</span><span class="regexp">/answer/</span><span class="number">49382019</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li>
<li><a href="https://blog.csdn.net/xyxjn/article/details/46906909" target="_blank" rel="noopener">Android Studio 设置内存大小及原理</a></li>
<li><a href="www.javadecompilers.com/apk">APK 在线反编译</a></li>
<li><a href="https://segmentfault.com/a/1190000007359713" target="_blank" rel="noopener">反编译apk的步骤</a></li>
<li><a href="https://segmentfault.com/a/1190000005133219" target="_blank" rel="noopener">手把手教你逆向分析 Android 程序</a></li>
<li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/51671019" target="_blank" rel="noopener">Android逆向之旅—反编译利器Apktool和Jadx源码分析以及错误纠正</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 让Android-Studio快十倍]]></title>
      <url>/2018/04/09/2018-04-09-Android-TimeCat-%E8%AE%A9Android-Studio%E5%BF%AB%E5%8D%81%E5%80%8D/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Android Studio 越用越卡，明明电脑配置不低了。。。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Android Studio 是Java写的软件，运行在Java虚拟机上，如果使用时间长，会频繁触发垃圾回收机制，导致卡顿。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>配置Android Studio，给它分多点内存。给2048m应该够用了，如果不够，再来4096m.</p>
<p><img src="/assets/blog/img/2018-04-9/0.png" width="700"></p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>配置Android Studio，给它分多点内存。</p>
<p>Android Studio 通过 Help 菜单提供对两个配置文件的访问：</p>
<ul>
<li><code>studio.vmoptions</code>：自定义 Studio Java 虚拟机 (JVM) 的选项，如堆内存和缓存大小。请注意，对于 Linux 机器，此文件可能命名为 studio64.vmoptions，具体取决于您的 Android Studio 版本。</li>
<li><code>idea.properties</code>：自定义 Android Studio 的属性，如插件文件夹路径或最大支持文件大小。</li>
</ul>
<h2 id="自定义-VM-选项"><a href="#自定义-VM-选项" class="headerlink" title="自定义 VM 选项"></a>自定义 VM 选项</h2><p>通过 studio.vmoptions 文件，您可以自定义适用于 Android Studio 的 JVM 的选项。为了提高 Studio 的性能，最常用的调节选项是最大堆内存，但您也可以使用 studio.vmoptions 文件替换其他默认设置，如初始堆内存、缓存大小和 Java 垃圾回收开关。</p>
<p>要新建 studio.vmoptions 文件或打开现有文件，请执行以下步骤：</p>
<p>点击 Help &gt; Edit Custom VM Options。如果您之前从未编辑过适用于 Android Studio 的 VM 选项，IDE 将提示您新建一个 studio.vmoptions 文件。点击 Yes 创建文件。</p>
<p>此时 studio.vmoptions 文件将在 Android Studio 的编辑器窗口中打开。编辑文件以添加您自己的自定义 VM 选项。如需可自定义 JVM 选项的完整列表，请参阅 Oracle 的 Java HotSpot VM 选项页。<br>您创建的 studio.vmoptions 文件将添加至默认 studio.vmoptions 文件，后者位于 Android Studio 安装文件夹内的 bin/ 目录中。</p>
<p>请注意，切勿直接编辑 Android Studio 程序文件夹内的 studio.vmoptions 文件。尽管您可以访问该文件来查看 Studio 的默认 VM 选项，但仅编辑自己的 studio.vmoptions 文件可确保您不会替换 Android Studio 的重要默认设置。因此，在您的 studio.vmoptions 文件中，请仅替换您关注的属性，使 Android Studio 可以继续使用未更改的任何属性的默认值。</p>
<h2 id="最大堆内存"><a href="#最大堆内存" class="headerlink" title="最大堆内存"></a>最大堆内存</h2><p>默认情况下，Android Studio 的最大堆内存为 1280MB。如果您要处理大项目，或者您的系统有大量 RAM 可用，您可以通过在 Android Studio 的 VM 选项中增加最大堆内存来提高性能。如果系统的内存有限，您可能希望降低最大堆内存。</p>
<p>要更改最大堆内存，请执行以下步骤：</p>
<p>点击 Help &gt; Edit Custom VM Options 以打开您的 studio.vmoptions 文件。<br>向 studio.vmoptions 文件添加一个行，使用语法 -XmxheapSize 设置最大堆内存。您选择的大小应该基于项目大小以及机器上的可用 RAM。作为基准，如果您有 4GB 以上的 RAM 和中等大小的项目，则应该将最大堆内存设置为 2GB 或更高。以下行可将最大堆内存设置为 2GB：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmx2g</span></span><br></pre></td></tr></table></figure></p>
<p>保存对 studio.vmoptions 文件所做的更改，然后重新启动 Android Studio 以使更改生效。</p>
<p>#</p>
<p>从AndroidStudio的启动参数了解到的下JVM的一些东西（内存使用，JIT等）</p>
<p>如果你使用AndroidStudio经常觉得很卡，那有可能是因为系统给AS分配的内存不够的原因。打开/Applications/Android Studio.app/Contents/bin/studio.vmoptions (Mac)，可以看到有以下配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m -Xmx750m -XX:<span class="attribute">MaxPermSize</span>=350m -XX:<span class="attribute">ReservedCodeCacheSize</span>=96m -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure></p>
<p>这些参数分别是什么意思呢？</p>
<h3 id="Xms128m"><a href="#Xms128m" class="headerlink" title="-Xms128m"></a>-Xms128m</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The -Xms option sets <span class="keyword">the</span> initial <span class="keyword">and</span> minimum Java heap size. The Java heap (<span class="keyword">the</span> “heap”) is <span class="keyword">the</span> part <span class="keyword">of</span> <span class="keyword">the</span> memory where blocks <span class="keyword">of</span> memory are allocated <span class="built_in">to</span> objects <span class="keyword">and</span> freed during garbage collection.</span><br></pre></td></tr></table></figure>
<p>就是JVM启动的起始堆内存，堆内存是分配给对象的内存。这里我把它改成了512m</p>
<h3 id="Xmx750m"><a href="#Xmx750m" class="headerlink" title="-Xmx750m"></a>-Xmx750m</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">option</span> <span class="keyword">sets</span> the <span class="comment">maximum Java heap size.</span></span><br></pre></td></tr></table></figure>
<p>也就是AndroidStudio能使用的最大heap内存，这里我改成了2048m</p>
<p>这两个参数都是-X开头的，表示非标准的参数。什么叫非标准的呢？我们知道JVM有很多个实现，Oracle的，OpenJDK等等，这里的-X参数，是Oracle的JVM实现使用的，OpenJDK不一定能使用，也就是没有将这些参数标准化，让所有的JVM实现都能使用。</p>
<h3 id="XX-MaxPermSize-350m"><a href="#XX-MaxPermSize-350m" class="headerlink" title="-XX:MaxPermSize=350m"></a>-XX:MaxPermSize=350m</h3><p>这个参数指定最大的Permanent generation大小。<br>根据oracle的文档：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permanent Generation (non-heap): The pool containing all the reflective data <span class="keyword">of</span> the <span class="keyword">virtual</span> machine itself, such <span class="keyword">as</span> <span class="keyword">class</span> <span class="keyword">and</span> <span class="function"><span class="keyword">method</span> <span class="title">objects</span>. <span class="title">With</span> <span class="title">Java</span> <span class="title">VMs</span> <span class="title">that</span> <span class="title">use</span> <span class="title">class</span> <span class="title">data</span> <span class="title">sharing</span>, <span class="title">this</span> <span class="title">generation</span> <span class="title">is</span> <span class="title">divided</span> <span class="title">into</span> <span class="title">read</span>-<span class="title">only</span> <span class="title">and</span> <span class="title">read</span>-<span class="title">write</span> <span class="title">areas</span>.</span></span><br></pre></td></tr></table></figure></p>
<p>可知，Permanent Generation也是一块内存区域，跟heap不同，它里面存放的事类本身（不是对象），以及方法，一些固定的字符串等等。更多关于Permanent Generation</p>
<h3 id="XX-ReservedCodeCacheSize-90m"><a href="#XX-ReservedCodeCacheSize-90m" class="headerlink" title="-XX:ReservedCodeCacheSize=90m"></a>-XX:ReservedCodeCacheSize=90m</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReservedCodeCacheSize (<span class="keyword">and</span> InitialCodeCacheSize) is <span class="keyword">an</span> option <span class="keyword">for</span> <span class="keyword">the</span> (just-<span class="keyword">in</span>-<span class="built_in">time</span>) compiler <span class="keyword">of</span> <span class="keyword">the</span> Java Hotspot VM. Basically <span class="keyword">it</span> sets <span class="keyword">the</span> maximum size <span class="keyword">for</span> <span class="keyword">the</span> compiler<span class="string">'s code cache.</span></span><br></pre></td></tr></table></figure>
<p>设置JIT java compiler在compile的时候的最大代码缓存。简单地说就是JIT（Just In Time）编译器在编译代码的时候，需要缓存一些东西，这个参数指定最多能使用多大内存来缓存这些东西。<br>什么叫JIT呢？看wikipedia的解释：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In computing, just-<span class="keyword">in</span>-<span class="built_in">time</span> compilation (JIT), also known <span class="keyword">as</span> dynamic translation, is compilation done during execution <span class="keyword">of</span> <span class="keyword">a</span> program – <span class="keyword">at</span> run <span class="built_in">time</span> – rather than prior <span class="built_in">to</span> execution.Most often this consists <span class="keyword">of</span> translation <span class="built_in">to</span> machine code, which is <span class="keyword">then</span> executed directly, but can also refer <span class="built_in">to</span> translation <span class="built_in">to</span> another <span class="built_in">format</span>. JIT compilation is <span class="keyword">a</span> combination <span class="keyword">of</span> <span class="keyword">the</span> <span class="literal">two</span> traditional approaches <span class="built_in">to</span> translation <span class="built_in">to</span> machine code – ahead-<span class="keyword">of</span>-<span class="built_in">time</span> compilation (AOT), <span class="keyword">and</span> interpretation – <span class="keyword">and</span> combines some advantages <span class="keyword">and</span> drawbacks <span class="keyword">of</span> both.[<span class="number">1</span>] Roughly, JIT compilation combines <span class="keyword">the</span> speed <span class="keyword">of</span> compiled code <span class="keyword">with</span> <span class="keyword">the</span> flexibility <span class="keyword">of</span> interpretation, <span class="keyword">with</span> <span class="keyword">the</span> overhead <span class="keyword">of</span> <span class="keyword">an</span> interpreter <span class="keyword">and</span> <span class="keyword">the</span> additional overhead <span class="keyword">of</span> compiling (<span class="keyword">not</span> just interpreting). JIT compilation is <span class="keyword">a</span> form <span class="keyword">of</span> dynamic compilation, <span class="keyword">and</span> allows adaptive optimization such <span class="keyword">as</span> dynamic recompilation – thus <span class="keyword">in</span> principle JIT compilation can yield faster execution than static compilation. Interpretation <span class="keyword">and</span> JIT compilation are particularly suited <span class="keyword">for</span> dynamic programming languages, <span class="keyword">as</span> <span class="keyword">the</span> runtime <span class="keyword">system</span> can handle late-bound data types <span class="keyword">and</span> enforce security guarantees.</span><br></pre></td></tr></table></figure></p>
<p>我们知道编程语言分两种： - 编译型，先将人写的代码整个编译成汇编语言或机器语言，一条一条代码然后执行。 - 解释型，不需要编译，将人写的代码一条一条拿过来一次执行，先取一条，执行，完了再取下一条，然后在执行。</p>
<p>而对于Java来说，这个情况就比较特殊了，因为在Java这里，JVM先是将Java代码整个编译成bytecode，然后在JVM内部再一条一条执行bytecode代码。你说它是编译型的吧，bytecode又不用编译成机器代码，二是一条条bytecode一次执行。你说它是解释型的吧，它又有一个编译的过程。对于Java到底是编译型还是解释型到现在也没有一个定论。不过，我们还是可以探讨一下Java的JIT编译技术。<br>刚刚说了，在bytecode层面，代码是解释执行的。解释型的语言会比较慢，因为它没有办法根据上下文对代码进行优化。而编译型的语言则可以进行优化。Java的JIT技术，就是在bytecode解释执行的时候，它不一定是一条条解释执行的，二是取一段代码，编译成机器代码，然后执行，这样的话就有了上下文，可以对代码进行优化了，所以执行速度也会更快。<br>可见，JIT技术结合了编译型（速度更快）和解释型语言（代码更灵活）二者的优势。对于动态语言的执行来说，是一个非常大的优势。</p>
<h3 id="XX-UseCompressedOops"><a href="#XX-UseCompressedOops" class="headerlink" title="-XX:+UseCompressedOops"></a>-XX:+UseCompressedOops</h3><p>这个参数允许系统将代码里面的引用(reference)类型用32位存储，同时却能够让引用能够使用64位的内存大小。<br>我们知道现代的机器基本都是64位的，在这种情况下，Java代码里面的reference类型也变成了用64位来存储，这就导致了两个问题：</p>
<ol>
<li><p>64位比32为更大，占的内存更多，这是显然的，当然这个问题在整个程序看来根本不显然，因为哪怕系统同时有1000个引用存在，那多出来的内存也就4M，这个不重要，因为现在手机都动不动好几个G，大型服务器就更加不用说了。更重要的是第二点。 </p>
</li>
<li><p>相对于内存，CPU的cache就小的可怜了，当reference从32bit变成64bit时，cache里面能存放的reference数量就顿时少了很多。所以64bit的reference对cache是个大问题，于是就有了这个选项，可以允许系统用32bit来存储reference，让cache里面能存放更多的reference，同时又不影响reference的取址范围。至于他们是怎么做到的，我就不得而知了。。。</p>
</li>
</ol>
<p>以上三个参数是以-XX开头的，根据Oracle的说明，<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Options <span class="keyword">that</span> are specified <span class="keyword">with</span> -XX are <span class="keyword">not</span> stable <span class="keyword">and</span> are subject <span class="keyword">to</span> change <span class="keyword">without</span> notice.</span><br></pre></td></tr></table></figure></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li>
<li><a href="https://blog.csdn.net/xyxjn/article/details/46906909" target="_blank" rel="noopener">Android Studio 设置内存大小及原理</a></li>
<li><a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties" target="_blank" rel="noopener">Configuring JVM options and platform properties</a></li>
<li><a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">JVM系列三:JVM参数设置、分析</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 解决cannot resolve symbol R]]></title>
      <url>/2018/04/08/2018-04-08-Android-TimeCat-%E8%A7%A3%E5%86%B3cant-resolve-symbol-R/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>莫名其妙出现了，鬼知道怎么来的。</p>
<h1 id="解决方法总结"><a href="#解决方法总结" class="headerlink" title="解决方法总结"></a>解决方法总结</h1><h2 id="1-推荐"><a href="#1-推荐" class="headerlink" title="1. 推荐"></a>1. 推荐</h2><p>解决90%的情况：</p>
<p><code>Build-&gt;Clean Project</code><br><code>Build-&gt;Rebuild Project</code></p>
<p><img src="/assets/blog/img/2018-04-8/0.png" width="700"></p>
<h2 id="2-不常见"><a href="#2-不常见" class="headerlink" title="2. 不常见"></a>2. 不常见</h2><p>Android Studio 有个奇葩的设置。。</p>
<p><img src="/assets/blog/img/2018-04-8/1.png" width="700"><br><img src="/assets/blog/img/2018-04-8/2.png" width="700"></p>
<p>欸，来搞一下分配的空间就行了。</p>
<p>打开ide配置</p>
<p><img src="/assets/blog/img/2018-04-8/3.png" width="700"></p>
<p>填入<code>idea.max.intellisense.filesize=99999999</code></p>
<p><img src="/assets/blog/img/2018-04-8/4.png" width="700"></p>
<p>清缓存然后重启Android Studio</p>
<p><img src="/assets/blog/img/2018-04-8/5.png" width="700"><br><img src="/assets/blog/img/2018-04-8/6.png" width="700"></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="https://stackoverflow.com/questions/17054000/cannot-resolve-symbol-r-in-android-studio" target="_blank" rel="noopener">“cannot resolve symbol R” in Android Studio
</a></li>
<li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li>
<li><a href="https://stackoverflow.com/questions/23057988/file-size-exceeds-configured-limit-2560000-code-insight-features-not-availabl?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">File size exceeds configured limit (2560000), code insight features not available
</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【计算机组成原理】 八大思想之抽象]]></title>
      <url>/2018/03/13/2018-03-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%85%AB%E5%A4%A7%E6%80%9D%E6%83%B3%E4%B9%8B%E6%8A%BD%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>计算机领域对我影响最大的思想是抽象。</p>
<p>何为抽象？抽象就是隐藏具体，暴露功能。用通俗一点的话说，抽象就是你好好做自己的事，以及知道别人能帮你干什么事，至于别人是如何帮你完成的，你没必要知道。</p>
<p>比如理发就是一个抽象，我想理发，我只需要知道理发师会理发就可以了，至于理发师是怎样理发的，我不用关心。当然，这个例子中我们通常喜欢选最好的理发师，这些理发师虽然都有理发的功能，但理发的速度等是有区别的，这里的区别也就是其实现的不同。甚至一个能理发的机器也是可以的，因为其也有理发的功能，虽然机器理发的具体实现有点奇怪。</p>
<p>目前数据结构课程中的抽象数据类型其实是抽象的具体实现。比如栈，作为使用者你只需要知道它有push、pop、isEmpty等方法，但它的底层实现到底是array还是linked list，你是不需要知道的。</p>
<p>抽象思想大大提高了开发者的工作效率。因为开发者只需要关注功能和组装功能，完成需求就行了。用行话就是不用重复造轮子。。。不过要提升自己，最好还是做个创造者，走进轮子内部，学习具体的实现，而不是只会搬砖。。</p>
<p>事实上，抽象可以放到人类社会的方方面面，上面理发是一个例子。各行各业都是抽象的，比如软件开发，也是提供接口给人类使用；比如平面设计，也是提供一个看的接口；比如学校、人民教师、官员等等，一步一步抽象下去，最后都是提供了为人民服务的接口。。。</p>
]]></content>
      
        <categories>
            
            <category> 计算机组成原理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 八大思想 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 解决Gradle :Resolve dependencies :classpath的办法]]></title>
      <url>/2018/03/06/2018-03-06-Android-TimeCat-%E8%A7%A3%E5%86%B3Gradle-Resolvedependencies-classpath%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>想学习一下别人的成型项目FastHub，结果build失败，gradle信息如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Executing tasks: [assemble]</span><br><span class="line"></span><br><span class="line">Configuration on demand is an incubating feature.</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">'FastHub'</span>.</span><br><span class="line">&gt; Could not resolve all files <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project : &gt; com.apollographql.apollo:gradle-plugin:<span class="number">0.4</span>.1</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https:<span class="comment">//help.gradle.org</span></span><br><span class="line"></span><br><span class="line">BUILD FAILED in <span class="number">3</span>m <span class="number">18</span>s</span><br></pre></td></tr></table></figure>
<p>首先在<code>设置</code>&gt;<code>proxy</code>里使用系统默认代理，<code>check connection</code> 使用<code>&#39;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom&#39;</code>完美通过，心想应该不是proxy的问题。可就是build失败，提示要么<code>Connection timed out</code>，要么<code>unknown host: dl.google.com</code>，简直逼疯。最后参考了一下，死马当活马医，在参考的文章里找到了解决方案。（我参考的不只下面的3个参考页面，开了一大堆csdn、StackOverflow、github issue的相关网页，都没解决，这3个是我解决时的参考，所以放这里了）</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在项目目录下新建文件<code>gradle.properties</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Project-wide Gradle settings.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more details on how to configure your build environment visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/build_environment.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the JVM arguments used for the daemon process.</span></span><br><span class="line"><span class="comment"># The setting is particularly useful for tweaking memory settings.</span></span><br><span class="line"><span class="comment"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span></span><br><span class="line"><span class="comment"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When configured, Gradle will run in incubating parallel mode.</span></span><br><span class="line"><span class="comment"># This option should only be used with decoupled projects. More details, visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span></span><br><span class="line"><span class="comment"># org.gradle.parallel=true</span></span><br><span class="line"><span class="comment">#Fri Mar 09 22:26:51 CST 2018</span></span><br><span class="line">systemProp.https.proxyPort=<span class="number">1080</span></span><br><span class="line">systemProp.http.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.https.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.http.proxyPort=<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p>内容意思是使用本地127.0.0.1:8000端口进行代理。</p>
<p>注意：</p>
<ul>
<li><code>gradle.properties</code>与<code>app</code>文件夹同级，而不是在<code>app</code>文件夹内。</li>
<li>记得把<code>shadowsocks</code>挂到<code>1080</code>端口，之前的<code>check connection</code>没卵用。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/fanfangemini/article/details/78310163" target="_blank" rel="noopener">android studio 解决Gradle :Resolve dependencies :classpath的办法</a></li>
<li><a href="http://blog.csdn.net/zx422359126/article/details/77046462" target="_blank" rel="noopener">Android Studio 解决resolve dependencies ‘classpath’卡住</a></li>
<li><a href="https://docs.gradle.org/current/userguide/userguide_single.html#sec:accessing_the_web_via_a_proxy" target="_blank" rel="noopener">Accessing the web through a HTTP proxy</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 切换软键盘和标签键盘时界面跳动]]></title>
      <url>/2018/03/06/2018-03-06-Android-TimeCat-%E5%88%87%E6%8D%A2%E8%BD%AF%E9%94%AE%E7%9B%98%E5%92%8C%E6%A0%87%E7%AD%BE%E9%94%AE%E7%9B%98%E6%97%B6%E7%95%8C%E9%9D%A2%E8%B7%B3%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在信息操作页面，点击标签打开对应的选择面板时，输入界面会上下跳动一下。分析一下原因，点击标签按钮后，先收起了软键盘，当前Activity的高度变高，输入框回到了界面底部；再打开选择面板时，输入框又被顶上来，所有看起来点击标签按钮后输入框会上下跳动一下。无论是先隐藏软键盘还是先打开选择面板都会有这个问题</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果这时候去纠结隐藏软键盘和打开面板如何同步的话就会走进一个牛角尖，去处理不同机型之间的兼容性问题了。其实解决思路非常简单，输入框不是会上下跳么，那固定它的位置不就好了？</p>
<p>举个例子，如果整个界面的根布局是<code>LinearLayout</code>，那么一个控件的位置其实是由它上面所有控件的高度决定的，如果它上面所有控件的高度都不变化，那即使整个<code>Activity</code>的高度变化（开/关软键盘）也不会影响这个控件的位置，也就不会发生跳动了。</p>
<p>但是我们发现，即使锁定了我们的信息操作页面根布局的高度，切换时还是有小幅度跳动。经过细致的分析冷静思考，我们终于找到了答案。由于我们的信息操作页面是用<code>Activity</code>通过设置弹框样式<code>android:theme=&quot;@style/EditDialogStyle&quot;</code>来实现的，而弹框样式是悬浮着的，会自动调整页面位置，软键盘显示时即使根布局的高度锁定，整个视图仍然会小幅度上移。所以我们的完美解决方案是同时锁定根布局高度和页面位置。</p>
<p>具体实现我们已经封装在<code>SmartKeyboardManager</code>类中，自动处理锁定高度和锁定页面位置的问题，顺便封装了<code>addKeyboard</code>方法来绑定按钮和相应的面板，并且使用了建造者设计模式。使用时如下调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置软键盘和选择面板的平滑交互</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setKeyboardManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSmartKeyboardManager = <span class="keyword">new</span> SmartKeyboardManager.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setContentView(ll_content_view)</span><br><span class="line">            .setEditText(et_content)</span><br><span class="line">            .addKeyboard(btn_label,   select_label)</span><br><span class="line">            .addKeyboard(btn_date,   select_date)</span><br><span class="line">            .addKeyboard(btn_time,   select_time)</span><br><span class="line">            .addKeyboard(btn_remind, select_remind)</span><br><span class="line">            .addKeyboard(btn_tag,    select_tag)</span><br><span class="line">            .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/triline3/timecat/blob/eb89b51218b8ca865d3bf0df442cd9c1380cce73/app/src/main/java/com/time/cat/mvp/view/keyboardManager/SmartKeyboardManager.java" target="_blank" rel="noopener">SmartKeyboardManager</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Keyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 原地归并排序]]></title>
      <url>/2018/03/01/2018-03-01-Android-TimeCat-%E5%8E%9F%E5%9C%B0%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中有个需求，需要把用户的task排序。</p>
<p>排序规则为，先按label排，每个label下按创建日期排，task处于完成状态的话覆盖原来label。label有四个，重要紧急，重要不紧急，紧急不重要，不重要不紧急。label加上完成状态共5组。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是先用桶排序分组，再对每个组内用原地归并排序。</p>
<p>考虑到分组有且只有5组，用桶排序逻辑清晰，易于阅读，效率也高。</p>
<p>之所以用原地归并排序，是因为我想学(zhuang)习(bi)。用其他排序方法也是可以的，因为单个用户的task不会太多，而且排序放在网络请求之后，各种排序方法的差别不大。</p>
<h2 id="纯java版原地归并排序"><a href="#纯java版原地归并排序" class="headerlink" title="纯java版原地归并排序"></a>纯java版原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InPlaceMergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i++] = arr[j];</span><br><span class="line">        arr[j--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">        reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r)  &#123;<span class="comment">//原地归并结束的条件。</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = j;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; arr[j] &lt;= arr[i]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">            i += (j-index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, l, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">            inplaceMerge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试用例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="纯java版非原地归并排序"><a href="#纯java版非原地归并排序" class="headerlink" title="纯java版非原地归并排序"></a>纯java版非原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> p = l;</span><br><span class="line">    <span class="keyword">int</span> q = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[p] &lt;= src[q]) &#123;</span><br><span class="line">            dest[i++] = src[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest[i++] = src[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid) &#123;</span><br><span class="line">        dest[i++] = src[p++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q &lt;= r) &#123;</span><br><span class="line">        dest[i++] = src[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// （原[l, r]范围的内容被复制回原数组）  </span></span><br><span class="line">    i = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= r) &#123;  </span><br><span class="line">        src[i] = dest[i++];  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(dest, src, l, mid);</span><br><span class="line">        mergeSort(dest, src, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(dest, src, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="项目运用版-：桶排序-原地归并排序"><a href="#项目运用版-：桶排序-原地归并排序" class="headerlink" title="项目运用版 ：桶排序 + 原地归并排序"></a>项目运用版 ：桶排序 + 原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;DBTask&gt; <span class="title">sort</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;DBTask&gt; sortedDBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_0_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_1_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_2_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_3_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; finished_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (DBTask dbTask : taskArrayList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbTask.getIsFinish()) &#123;</span><br><span class="line">            finished_DBTaskList.add(dbTask);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (dbTask.getLabel()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_URGENT:</span><br><span class="line">                label_0_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_1_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_URGENT:</span><br><span class="line">                label_2_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_3_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort2List(label_0_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_1_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_2_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_3_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(finished_DBTaskList, sortedDBTaskList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        DBTask temp = arr.get(i);</span><br><span class="line">        arr.set(i++, arr.get(j));</span><br><span class="line">        arr.set(j--, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">    reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r) &#123; <span class="comment">//原地归并结束的条件。</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; isValid(arr, i, j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = j;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r &amp;&amp; isValid(arr, j, i)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">        i += (j-index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Date date_i = TimeUtil.formatGMTDateStr(arr.get(i).getCreated_datetime());</span><br><span class="line">    Date date_j = TimeUtil.formatGMTDateStr(arr.get(j).getCreated_datetime());</span><br><span class="line">    <span class="keyword">return</span> (date_i != <span class="keyword">null</span> ? date_i.getTime() : <span class="number">0</span>) &lt;= (date_j != <span class="keyword">null</span> ? date_j.getTime() : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, l, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        inplaceMerge(arr, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort2List</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList, ArrayList&lt;DBTask&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(taskArrayList, <span class="number">0</span>, taskArrayList.size()-<span class="number">1</span>);</span><br><span class="line">    result.addAll(taskArrayList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 给刷新按钮添加旋转动画]]></title>
      <url>/2018/03/01/2018-03-01-Android-TimeCat-%E7%BB%99%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本着用户的动作反馈原则，给刷新按钮添加旋转动画。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是给原来的按钮上面覆盖一层view来承担动画效果，点击按钮时，覆盖的view显示并旋转，此时按钮被覆盖处于不可点击状态；当动画完成时隐藏覆盖的view，按钮又可以被点击了。需要计算动画时间来及时把动画停掉，我采用postdelay解决。</p>
<h2 id="res-menu-main-xml"><a href="#res-menu-main-xml" class="headerlink" title="res/menu/main.xml"></a>res/menu/main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_action_refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:showAsAction</span>=<span class="string">"always"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="res-layout-action-view-xml"><a href="#res-layout-action-view-xml" class="headerlink" title="res/layout/action_view.xml"></a>res/layout/action_view.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minHeight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minWidth</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingEnd</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingStart</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:scaleType</span>=<span class="string">"centerInside"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="res-anim-refresh-xml"><a href="#res-anim-refresh-xml" class="headerlink" title="res/anim/refresh.xml"></a>res/anim/refresh.xml</h2><p>设置一秒绕中心旋转720度的动画，这样动画重复次数取1，不用重复</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/linear_interpolator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MenuItem refreshItem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.refresh:</span><br><span class="line">            showRefreshAnimation(item);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRefreshAnimation</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        hideRefreshAnimation(); <span class="comment">//清空之前的效果</span></span><br><span class="line"></span><br><span class="line">        refreshItem = item;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里使用一个ImageView设置成MenuItem的ActionView，这样我们就可以使用这个ImageView显示旋转动画了</span></span><br><span class="line">        ImageView refreshActionView = (ImageView) getLayoutInflater().inflate(R.layout.action_view, <span class="keyword">null</span>);</span><br><span class="line">        refreshActionView.setImageResource(R.drawable.ic_autorenew_white_24dp);</span><br><span class="line">        refreshItem.setActionView(refreshActionView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示刷新动画</span></span><br><span class="line">        Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.refresh);</span><br><span class="line">        animation.setRepeatMode(Animation.RESTART);</span><br><span class="line">        animation.setRepeatCount(<span class="number">1</span>); <span class="comment">// 这里设置动画重复次数</span></span><br><span class="line">        refreshActionView.startAnimation(animation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                hideRefreshAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>); </span><br><span class="line">        <span class="comment">// 在动画xml文件里定义了动画时长为1秒，而动画重复次数为1次，所以在1秒后停止动画即可防止过度点击。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideRefreshAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refreshItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            View view = refreshItem.getActionView();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.clearAnimation();</span><br><span class="line">                refreshItem.setActionView(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h1><ul>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/anim/refresh.xml" target="_blank" rel="noopener">refresh.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/layout/action_view.xml" target="_blank" rel="noopener">action_view.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/menu/main_menu.xml" target="_blank" rel="noopener">main_menu.xml</a></li>
<li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/java/com/time/cat/ui/activity/main/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Animation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 MVP架构演进]]></title>
      <url>/2018/02/28/2018-02-28-Android-TimeCat-MVP%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我就想看看MVP怎么搞…</p>
<h1 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h1><p><a href="https://github.com/triline3/timecat/blob/e0a39a6087bbf7f4ad0e4e8f4e418526e96a4fb7/app/src/main/java/com/time/cat/ui/fragment/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~290</p>
<p><strong>文件目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>业务分层，把fragment的初始化分成<code>initView()</code>, <code>initData()</code>, <code>initListener()</code></li>
<li>功能分区，按<code>View</code>, <code>Data</code>, <code>Listener</code>,在fragment文件内部分区，用注释隔开，简单易懂</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>fragment持有内部类</li>
<li>数据的刷新需要context, 应该做到数据与状态无关，易于复用</li>
<li>fragment管的东西太多</li>
</ul>
<h1 id="基础MVP架构"><a href="#基础MVP架构" class="headerlink" title="基础MVP架构"></a>基础MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/c5a1a0a932be19b4756bd3c539cfdcaf9f2e22ee/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~160</p>
<p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">notes</span><br><span class="line">├── model</span><br><span class="line">│   ├── NotesDataManagerAction.java</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   ├── NotesPresenterAction.java</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>数据（model）和UI（view）解耦，双方都只暴露接口给presenter，由presenter决定数据和UI的互动</li>
<li>NotesFragment只作为view层，下放业务处理能力给presenter，使代码量大量减少（实际是转移给presenter，没有减少）</li>
<li>NotesFragment不再持有内部类，加载速度增加</li>
<li>在数据层去掉context，使data与view相互独立</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>没有绑定view，presenter可能在fragment销毁后仍有其引用，导致内存泄漏</li>
<li>NotesFragment里除了需要显示的view的初始化就都是接口的具体实现，对新手不友好</li>
</ul>
<h1 id="高级MVP架构"><a href="#高级MVP架构" class="headerlink" title="高级MVP架构"></a>高级MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/5fe59fa970011abb1bd06bd82b3911f91fe68575/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p>
<p><strong>代码行数</strong>：~160</p>
<p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">notes/</span><br><span class="line">├── model</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：</p>
<ul>
<li>高度抽象，减少代码冗余（比如绑定view）</li>
<li>使用代理模式将绑定和解绑view的操作抽离出来</li>
<li>使用工厂模式和注解在上层统一创建Presenter</li>
<li>将Presenter的创建过程放入到获取Presenter的方法中，如果存在返回，不存在创建，保证Presenter不会为空，保证在使用的时候再创建，节省内存资源</li>
<li>删除不必要的接口文件，用分区的方法突出类内可调用的业务处理函数</li>
<li>总的来说就是耐操</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>新手不友好，依赖注入设计模式等操作有一定的复杂度</li>
<li>MVP固有缺点：每条逻辑都要有完全不同的presenter来管理</li>
<li>添加多个presenter麻烦</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RecyclerView的卡顿问题]]></title>
      <url>/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView%E7%9A%84%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中大量使用了<code>RecycleView</code>和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。</p>
<h1 id="RecyclerView为什么会卡"><a href="#RecyclerView为什么会卡" class="headerlink" title="RecyclerView为什么会卡"></a>RecyclerView为什么会卡</h1><p><code>RecyclerView</code>作为v7包的新控件，自从推出就广受Android Developer们欢迎，实际上它已经取代了ListView和GridView两位老前辈的地位。然而不少亲们想必也已经发现了：没有优化过的Recycler性能很poor。上一篇博主使用的item也仅仅是一个图两串字而已，结果一滑动就卡的要命，不能忍！<br>那么why？回想在用<code>ListView</code>和<code>GridView</code>的<code>adapter</code>时，我们是用一种叫<code>ViewHolder</code>的自定义类（容器）来实现优化的，而<code>RecyclerView</code>的特性之一就是强制你使用它的<code>RecyclerView.ViewHolder</code>。可是，<code>RecyclerView.ViewHolder</code>要比我们写的那个单纯的容器复杂多了（源码里算上注释有大约500行），与<code>RecyclerView.Adapter</code>的联系也是千丝万缕。</p>
<p>按stackoverflow上面比较通俗的解释：<code>RecyclerView.Adapter</code>里面的<code>onCreateViewHolder()</code>方法和<code>onBindViewHolder()</code>方法对时间都非常敏感。类似I/O读写，Bitmap解码一类的耗时操作，最好不要在它们里面进行。</p>
<h1 id="如何解决卡顿问题"><a href="#如何解决卡顿问题" class="headerlink" title="如何解决卡顿问题"></a>如何解决卡顿问题</h1><p>首先当然得优化你的item，合理运用<code>&lt;include&gt;</code>，<code>&lt;merge&gt;</code>，<code>&lt;ViewStub&gt;</code>等标签，使布局层次尽量少——其实<code>ListView</code>和<code>GridView</code>里你也应该这么做，应该当成是一种写UI的习惯。</p>
<p>其次就是灵活使用各种第三方库，去完成各种耗时操作，比如通过<code>Glide</code>或者是<code>Picasso</code>加载图片。优秀的开源库在性能上往往都考虑得很仔细。</p>
<p>最后的问题来了，如果只想写一个小demo，不愿大张旗鼓怎么办？如果即便一般的第三方库也不好解决问题，比如上一篇那个该死的loadIcon()方法返回的是一个Drawable对象，Glide和Picasso都没法直接处理，转码又等于添了个耗时任务，那怎么办？<br>真正的app管理应用，应该引入UIL或者Picasso一类的加载库进行图标加载<br>（在此原谅博主没仔细敲代码，就信口开河了）<br>答案就是，<strong>想法在你setAdapter之前就把任务给完成</strong>。</p>
<h1 id="TimeCat-实例"><a href="#TimeCat-实例" class="headerlink" title="TimeCat 实例"></a>TimeCat 实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    context = getContext();</span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_notes, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    mStackView = view.findViewById(R.id.notes_csv);   <span class="comment">// 初始化RecycleView</span></span><br><span class="line">    cardStackViewAdapter = <span class="keyword">new</span> CardStackViewAdapter(context); <span class="comment">// 初始化Adapter</span></span><br><span class="line">    refreshData();  <span class="comment">// 刷新一次数据</span></span><br><span class="line">    mStackView.setAdapter(cardStackViewAdapter);  <span class="comment">// 在数据准备好后再setAdapter()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecycleView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 当RxJava遇到Retrofit（二）api注解@Path, @Url等]]></title>
      <url>/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%BA%8C%EF%BC%89api%E6%B3%A8%E8%A7%A3@Path,%20@Url%E7%AD%89/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>下面分为<code>GET</code>、<code>POST</code>、<code>DELETE</code>还有<code>PUT</code>的请求，说明<code>@Path</code>、<code>@Query</code>、<code>@QueryMap</code>、<code>@Body</code>、<code>@Field</code>的用法。</p>
<h1 id="初始化Retrofit"><a href="#初始化Retrofit" class="headerlink" title="初始化Retrofit"></a>初始化Retrofit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String BASE_URL = <span class="string">"http://192.168.88.105:8000/api/"</span>;</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder() </span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><h2 id="样式1（一个简单的get请求）"><a href="#样式1（一个简单的get请求）" class="headerlink" title="样式1（一个简单的get请求）"></a>样式1（一个简单的get请求）</h2><p><a href="http://192.168.88.105:8000/api/News" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="样式2（URL中有参数）"><a href="#样式2（URL中有参数）" class="headerlink" title="样式2（URL中有参数）"></a>样式2（URL中有参数）</h2><p><a href="http://192.168.88.105:8000/api/News/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure></p>
<p>或<br><a href="http://192.168.88.105:8000/api/News/1/类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1/类型1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}/{类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}/{类型}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Path</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（参数在URL问号之后）"><a href="#样式3（参数在URL问号之后）" class="headerlink" title="样式3（参数在URL问号之后）"></a>样式3（参数在URL问号之后）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure>
<p>或<br><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Query</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式4（多个参数在URL问号之后，且个数不确定）"><a href="#样式4（多个参数在URL问号之后，且个数不确定）" class="headerlink" title="样式4（多个参数在URL问号之后，且个数不确定）"></a>样式4（多个参数在URL问号之后，且个数不确定）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a>…<br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a>…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@QueryMap Map&lt;String, String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<p>也可以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          @Query(<span class="string">"newsId"</span>)</span> String newsId，</span></span><br><span class="line"><span class="function">          @QueryMap Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><h2 id="样式1（需要补全URL，post的数据只有一条reason）"><a href="#样式1（需要补全URL，post的数据只有一条reason）" class="headerlink" title="样式1（需要补全URL，post的数据只有一条reason）"></a>样式1（需要补全URL，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）"><a href="#样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）"></a>样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（需要补全URL，问号后加入access-token，post一个body（对象））"><a href="#样式3（需要补全URL，问号后加入access-token，post一个body（对象））" class="headerlink" title="样式3（需要补全URL，问号后加入access_token，post一个body（对象））"></a>样式3（需要补全URL，问号后加入access_token，post一个body（对象））</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body CommentBean bean)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="样式1（需要补全URL）"><a href="#样式1（需要补全URL）" class="headerlink" title="样式1（需要补全URL）"></a>样式1（需要补全URL）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式2（需要补全URL，问号后加入access-token）"><a href="#样式2（需要补全URL，问号后加入access-token）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token）"></a>样式2（需要补全URL，问号后加入access_token）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId，</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="样式3（带有body）"><a href="#样式3（带有body）" class="headerlink" title="样式3（带有body）"></a>样式3（带有body）</h2><p><a href="http://192.168.88.105:8000/api/Comments" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HTTP</span>(method = <span class="string">"DELETE"</span>,path = <span class="string">"Comments"</span>,hasBody = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteCommont</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Body CommentBody body</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line">CommentBody：需要提交的内容，与Post中的Body相同</span><br></pre></td></tr></table></figure>
<h1 id="PUT（这个请求很少用到，例子就写一个）"><a href="#PUT（这个请求很少用到，例子就写一个）" class="headerlink" title="PUT（这个请求很少用到，例子就写一个）"></a>PUT（这个请求很少用到，例子就写一个）</h1><p><a href="http://192.168.88.105:8000/api/Accounts/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/1</a><br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PUT</span>(<span class="string">"Accounts/&#123;accountId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ExtrasBean&gt; <span class="title">updateExtras</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"accountId"</span>)</span> String accountId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body ExtrasBean bean)</span>;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>@Path：所有在网址中的参数（URL的问号前面），如：<br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></li>
<li>@Query：URL问号后面的参数，如：<br><a href="http://192.168.88.105:8000/api/Comments?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments?access_token={access_token}</a></li>
<li>@QueryMap：相当于多个@Query</li>
<li>@Field：用于POST请求，提交单个数据</li>
<li>@Body：相当于多个@Field，以对象的形式提交</li>
</ul>
<blockquote>
<p>Tips</p>
<ul>
<li>Tips1 使用@Field时记得添加@FormUrlEncoded</li>
<li>Tips2 若需要重新定义接口地址，可以使用@Url，将地址以参数的形式传入即可。如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; getActivityList(</span><br><span class="line">        <span class="meta">@Url</span> String url,</span><br><span class="line">        <span class="meta">@QueryMap</span> Map&lt;String, String&gt; map);</span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; call = service.getActivityList(</span><br><span class="line">            <span class="string">"http://115.159.198.162:3001/api/ActivitySubjects"</span>, map);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/7687365aa946" target="_blank" rel="noopener">https://www.jianshu.com/p/7687365aa946</a><br><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 当RxJava遇到Retrofit（一）Retrofit入门]]></title>
      <url>/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%B8%80%EF%BC%89Retrofit%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比<code>HttpClient</code>以及<code>HttpUrlConnection</code>等，略懂android开发的估计无人不知<code>android-async-http</code>或者<code>volley</code>啥的，再往上走，有<code>okhttp</code>等。但是最后我们选择了一个新的http请求框架，<code>Retrofit</code>。</p>
<h1 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h1><p><code>retrofit</code>是<code>Square</code>公司出品的，为android和java提供一个类型安全的Http网络请求库，这里是官网地址。</p>
<p><code>Retrofit</code>的优点</p>
<ol>
<li>使用注解来描述http请求</li>
<li>URL参数的替换和query参数的支持</li>
<li>对象转化为请求体（如：JSON，protocol buffers等）</li>
<li>多重请求体和文件上传<br>以上都是官网描述</li>
</ol>
<h1 id="TimeCat中的实例"><a href="#TimeCat中的实例" class="headerlink" title="TimeCat中的实例"></a>TimeCat中的实例</h1><p>定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoteService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Headers</span>(&#123;<span class="string">"Content-Type: application/json"</span>, <span class="string">"Accept: application/json"</span>&#125;)</span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Note&gt; <span class="title">createNote</span><span class="params">(@Body Note note)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>辅助使用Retrofit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetrofitHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://192.168.88.105:8000/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient mOkHttpClient;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initOkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OKHttpClient</span></span><br><span class="line"><span class="comment">     * 设置缓存</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     * 设置打印日志</span></span><br><span class="line"><span class="comment">     * 设置UA拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor(<span class="keyword">new</span> Log());</span><br><span class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RetrofitHelper.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置Http缓存</span></span><br><span class="line">                    Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(TimeCatApp.getInstance().getCacheDir(), <span class="string">"HttpCache"</span>), <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>);</span><br><span class="line">                    mOkHttpClient = <span class="keyword">new</span> OkHttpClient.Builder().cache(cache).addInterceptor(interceptor).retryOnConnectionFailure(<span class="keyword">true</span>).connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS).writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS).readTimeout(<span class="number">20</span>, TimeUnit.SECONDS).build();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoteService <span class="title">getNoteService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .client(mOkHttpClient)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(NoteService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结合RxJava发起网络请求只需要<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RetrofitHelper.getNoteService().createNote(note) <span class="comment">//获取Observable对象</span></span><br><span class="line">        .compose(<span class="keyword">this</span>.bindToLifecycle())         <span class="comment">// 绑定到生命周期</span></span><br><span class="line">        .subscribeOn(Schedulers.newThread())     <span class="comment">//请求在新的线程中执行</span></span><br><span class="line">        .observeOn(Schedulers.io())              <span class="comment">//请求完成后在io线程中执行</span></span><br><span class="line">        .doOnNext(<span class="keyword">new</span> Action1&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                DB.notes().saveAndFireEvent(ModelUtil.toDBNote(note)); <span class="comment">// 进行数据读写，甚至可以进行文件读写</span></span><br><span class="line">                Log.e(TAG, <span class="string">"保存任务信息到本地"</span> + note.toString()); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//最后在主线程中执行</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                ToastUtil.show(<span class="string">"添加[ 任务 ]失败"</span>);</span><br><span class="line">                Log.e(TAG, e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                ToastUtil.show(<span class="string">"成功添加[ 任务 ]:"</span> + dialog_add_task_et_content.getText().toString());</span><br><span class="line">                finish();</span><br><span class="line">                Log.e(TAG, <span class="string">"请求成功"</span> + note.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="使用的套路"><a href="#使用的套路" class="headerlink" title="使用的套路"></a>使用的套路</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个没什么好说的，没有网络权限什么都做不了</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure>
<p>这里几个库的含义是：我们使用<code>retrofit2.0</code>去进行网络请求操作，同时我们使用<code>gson</code>去进行数据解析，并且结合<code>rxjava</code>去进行相应的代码编写</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .client(mOkHttpClient)</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<p>这段就是使用<code>RxJava</code>，利用<code>gson</code>做解析（这边解析器可以设置注入<code>Jackson</code>之类的，甚至可以自定义），http引擎框架是<code>okhttp</code></p>
<h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p><code>Retrofit</code>需要通过注解请求方法以及请求参数来表明应该如何去进行一个Http请求，目前内置了5种注解方式<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>以及<code>HEAD</code>。同时资源的相对URL要在注解中明确的指出。比如请求方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>@POST(&quot;/notes/&quot;)</code>的意思是，用<code>POST</code>方法，向<code>BASE_URL + &#39;notes/&#39;</code> 即<code>http://192.168.88.105:8000/notes/</code>发起请求。注意两个斜杆，左边的<code>/</code>代表在<code>BASE_URL</code>的基础上，右边的<code>/</code>表示<code>notes</code>的实际接口，去掉其中一个都会导致不同的结果。</p>
<p>更多api的写法请看<a href="">下一篇</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（四）线程控制 —— Scheduler]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%20%E2%80%94%E2%80%94%20Scheduler/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，事件的发起和消费都是在同一个线程中执行，也就是说之前我们使用的RxJava是同步的～～～</p>
<p>观察者模式本身的目的不就是后台处理，将处理结果回调给前台？这同步的是要哪样？所以，这篇为大家介绍RxJava的重要的概念——<code>Scheduler</code></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RxJava在不指定线程的情况下，发起时间和消费时间默认使用当前线程。所以之前的做法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>因为是在主线程中发起的，所以不管中间 <code>map</code>的处理还是<code>Action1</code>的执行都是在主线程中进行的。若是<code>map</code>中有耗时的操作(比如网络请求)，这样会导致主线程拥塞，这并不是我们想看到的。</p>
<h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><p><code>Scheduler</code>：线程控制器，可以指定每一段代码在什么样的线程中执行。<br>模拟一个需求：新的线程发起事件，在主线程中消费<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rxJavaTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.just(<span class="string">"Hello"</span>, <span class="string">"Word"</span>)</span><br><span class="line">            .subscribeOn(Schedulers.newThread())<span class="comment">//指定 subscribe() 发生在新的线程</span></span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    Log.i(TAG, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p>
<p>上面用到了<code>subscribeOn()</code>，和<code>observeOn()</code>方法来指定发生的线程和消费的线程。</p>
<ul>
<li><code>subscribeOn()</code>：指定subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</li>
<li><code>observeOn()</code>：指定Subscriber 所运行在的线程。或者叫做事件消费的线程。</li>
</ul>
<p>以及参数Scheduler，RxJava已经为我们提供了一下几个Scheduler</p>
<ul>
<li><code>Schedulers.immediate()</code>：直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</li>
<li><code>Schedulers.newThread()</code>：总是启用新线程，并在新线程执行操作。</li>
<li><code>Schedulers.io()</code>： I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 <code>newThread()</code> 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li><code>Schedulers.computation()</code>：计算所使用的 <code>Scheduler</code>。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 <code>computation()</code> 中，否则 I/O 操作的等待时间会浪费 CPU。</li>
<li><code>AndroidSchedulers.mainThread()</code>：它指定的操作将在 Android 主线程运行。</li>
</ul>
<h1 id="多次切换线程"><a href="#多次切换线程" class="headerlink" title="多次切换线程"></a>多次切换线程</h1><p>看完上面的介绍想必对RxJava线程的切换有了一些理解，上面只是对事件的发起和消费制定了线程。如果中间有<code>map</code>之类的操作呢？是否可以实现发起的线程在新线程中，<code>map</code>的处理在IO线程，最后的消费在主线程中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.newThread())<span class="comment">//指定：在新的线程中发起</span></span><br><span class="line">        .observeOn(Schedulers.io())         <span class="comment">//指定：在io线程中处理</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> handleString(s);       <span class="comment">//处理数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定：在主线程中处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                show(s);                       <span class="comment">//消费事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>observeOn()</code>被调用了两次，分别指定了<code>map</code>的处理的现场和消费事件<code>show(s)</code>的线程。</p>
<p>若将<code>observeOn(AndroidSchedulers.mainThread())</code>去掉会怎么样？不为消费事件<code>show(s)</code>指定线程后，<code>show(s)</code>会在那里执行？<br>其实，<code>observeOn()</code>指定的是它之后的操作所在的线程。也就是说，<code>map</code>的处理和最后的消费事件<code>show(s)</code>都会在io线程中执行。<br><code>observeOn()</code>可以多次使用，可以随意变换线程</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>学会线程控制后才算是真正学会了使用RxJava。RxJava的使用十分灵活，想要对其熟悉使用只有一个办法，那就是多用啦，熟能生巧。</p>
<p>参考：<br><a href="https://www.jianshu.com/p/ecfb9d68d2a2" target="_blank" rel="noopener">https://www.jianshu.com/p/ecfb9d68d2a2</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（三）对象转换器——map、flatMap]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%99%A8%E2%80%94%E2%80%94map%E3%80%81flatMap/</url>
      <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>在使用<code>map</code>之前要先说道一个接口：<code>Func1</code>，<code>Func1</code>和上一篇提到的<code>Action1</code>相似。<code>Func1</code> 和 <code>Action</code>的区别在于， <code>Func1</code> 包装的是有返回值的方法。<br>接下来就是map的用法，看代码更直观点；</p>
<h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>得到多个Student对象中的name，保存到nameList中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>Observable</code>中原来的参数是<code>Student对象</code>，而最后我们需要的是<code>name</code>，这里使用了<code>map</code>来实现这一转换的过程。当然，<code>map</code>可以多次使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多次使用map，想用几个用几个</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;<span class="comment">//将String类型的转化为Integer类型的哈希码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;<span class="comment">//将转化后得到的Integer类型的哈希码再转化为String类型</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer.intValue() + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h1><p><code>flatMap</code>是一个比教难理解的一个转换，在这里先假设一个需求，需要打印多个<code>Student</code>所学的课程。这跟之前获取<code>Student</code>的<code>name</code>又不同了，这里先确定一下关系，一个<code>Student</code>类中只有一个<code>name</code>，而一个<code>Student</code>却有多门课程（Course），<code>Student</code>我们可以理解成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 学生类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; coursesList;<span class="comment">//所修的课程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 课程类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//课程名</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果使用<code>map</code>来实现打印所有学生所修个课程名，实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Action1&lt;List&lt;Course&gt;&gt; action1 = <span class="keyword">new</span> Action1&lt;List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历courses，输出cuouses的name</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++)&#123;</span><br><span class="line">            Log.i(TAG, courses.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//返回coursesList</span></span><br><span class="line">                <span class="keyword">return</span> student.getCoursesList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(action1);</span><br></pre></td></tr></table></figure></p>
<p>可以看到，在<code>Action1</code>中出现了for来循环打印课程名，使用<code>RxJava</code>就是为了剔除这样的嵌套结构，使得整体的逻辑性更强。这时候就可以使用<code>flatMap</code>了，使用<code>flatMap</code>实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(student.getCoursesList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Course&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, course.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样就实现了跟上面代码一样的效果，看起来有点懵？确实，<code>flatMap</code>理解起来有点绕，刚接触<code>flatMap</code>的时候我也是懵逼一个。下面我将<code>flatMap</code>的示意图，希望能帮助理解：</p>
<p>flatMap示意图</p>
<p>由上图可以看出<code>Student1</code>、<code>Student2</code>经过<code>flatMap</code>后，按顺序依次经历了<code>Observable1</code>、<code>Observable2</code>，分别转化为<code>Course</code>。最后按顺序得到<code>Course1</code>、<code>Course2</code>、<code>Course3</code>、<code>Course4</code>、<code>Course5</code>、<code>Course6</code>，其中1-3由Student1得到，4-6由Student2得到。<br>结合代码和示意图，是不是对flatMap有了一定的理解。</p>
<blockquote>
<p><strong>注意</strong>：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。也就说，传入的顺序可能跟出来的顺序不一样。<br>如果要保证顺的的话，可以使用concatMap。</p>
</blockquote>
<p>#其他操作符</p>
<p>除了<code>map</code>和<code>flatMap</code>之外，还有其他操作符以供使用。这里就不一一列举他们的用法了，其他常用的操作符如下：</p>
<ul>
<li><code>filter</code>：集合进行过滤</li>
<li><code>each</code>：遍历集合</li>
<li><code>take</code>：取出集合中的前几个</li>
<li><code>skip</code>：跳过前几个元素</li>
</ul>
<p><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/32209660" target="_blank" rel="noopener">更多操作符</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/52cd2d514528" target="_blank" rel="noopener">https://www.jianshu.com/p/52cd2d514528</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（二）Action]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89Action/</url>
      <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>例：分别打印”Hello”、” World”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到，我们这里只用了<code>onNext(obj)</code>，还有两个重写的<code>onError(error)</code>和<code>onCompleted()</code>并没有用到，这样导致我们多出了几行根本用不到的代码。于是就想能不能只写我们使用到的，其他几个没用到的就不写，这样的代码看着才舒服。接下来就是使用本次的主角<code>Action</code>来代替<code>Subscriber</code></p>
<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>上部分的代码使用Action来代替Subscriber得到的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>舒服多了有没有！！</p>
<h2 id="什么是Action"><a href="#什么是Action" class="headerlink" title="什么是Action"></a>什么是Action</h2><p><code>Action</code>是<code>RxJava</code> 的一个接口，常用的有<code>Action0</code>和<code>Action1</code>。<br><code>Action0</code>： 它只有一个方法 <code>call()</code>，这个方法是无参无返回值的；由于 <code>onCompleted()</code> 方法也是无参无返回值的，因此 <code>Action0</code> 可以被当成一个包装对象，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。<br><code>Ation1</code>：它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数；与 <code>Action0</code> 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 <code>Action1</code> 可以将 <code>onNext(obj)</code>和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调</p>
<h2 id="Action的使用"><a href="#Action的使用" class="headerlink" title="Action的使用"></a>Action的使用</h2><p>定义三个对象，分别打包<code>onNext(obj)</code>、<code>onError(error)</code>、<code>onCompleted()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line"><span class="comment">//处理onNext()中的内容</span></span><br><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onError()中的内容</span></span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onCompleted()中的内容</span></span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>接下来使用<code>subscribe</code>重载的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 onNextAction 来定义 onNext()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction);</span><br><span class="line"><span class="comment">//使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">//使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure></p>
<p>根据实际情况使用以上的方法处理<code>onNext(obj)</code>、<code>onError(error)</code> 、<code>onCompleted()</code>的回调。<br>现在有个疑问，为什么使用<code>Action</code>也能达到使用<code>Subscriber</code>的结果？进<code>subscribe(Action1 onNext)</code>的源码看看。</p>
<p><img src="/assets/blog/img/2018-02-26/31.png" width="700"></p>
<p>还以为有多高深，原来就是把<code>Action</code>对象转化成对应的<code>Subscriber</code>对象了。这样就不难理解为什么可以使用<code>Action</code>来代替<code>Subscriber</code>了。</p>
<h2 id="重写打印”Hello”、”-Wrod”的方法"><a href="#重写打印”Hello”、”-Wrod”的方法" class="headerlink" title="重写打印”Hello”、” Wrod”的方法"></a>重写打印”Hello”、” Wrod”的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>相比第一篇那冗长的代码，现在感觉怎么样？还是觉得代码多？确实，如果只是打印几个字符串确实还是略微复杂。不急，RxJava还有其他功能呢。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Action</code>的使用为我们减少了不必要的代码，使得写出的代码看上去更加得简洁。不过就目前来看<code>RxJava</code>还是没有什么优势值得我们去使用，下一篇我还会介绍更多<code>RxJava</code>的用法。慢慢得，你就会发现使用<code>RxJava</code>写出来的代码看上去真的很漂亮。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/c7a995f3763c" target="_blank" rel="noopener">https://www.jianshu.com/p/c7a995f3763c</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 RxJava的使用（一）基本用法]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步处理。异步的话我们一般有现成的 AsyncTask / Handler / View.postdelay / … , 不过，今天我们用RxJava。RxJava的本质是<strong>异步处理</strong>，RxJava的好处就在于它的简洁性，逻辑简单的时候看不出RxJava的优势，想必大家都知道在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。这时候RxJava的优势就来了，<strong>随着程序逻辑变得越来越复杂，它依然能够保持简洁</strong>。</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>首先要先介绍一下观察者模式（可能比喻的不够恰当，意思到了就好）；</p>
<ul>
<li><strong>观察者</strong>：监视着被观察者的行为，当被观察者某个状态改变的时候会通知观察者，观察者会执行对应的操作；</li>
<li><strong>被观察者</strong>：被监视的对象，当某个状态改变的时候会通知观察者；</li>
<li><strong>订阅（或注册）</strong>：将观察者和被观察者建立联系。</li>
</ul>
<p>（很乱？来个栗子？）<br>这里举一个我个常用的例子，点击<code>Button</code>后触发<code>OnClickListener</code><br>中的<code>onClick()</code>事件。在这个事件中他们的角色分别如下：</p>
<ul>
<li><strong>观察者</strong>：OnClickListener；</li>
<li><strong>被观察者</strong>：Button；</li>
<li><strong>订阅（或注册）</strong>：setOnClickListener()。</li>
</ul>
<h1 id="RxJava中的观察者模式"><a href="#RxJava中的观察者模式" class="headerlink" title="RxJava中的观察者模式"></a>RxJava中的观察者模式</h1><p>在上面介绍了观察者模式，这里也将RxJava中的三个角色进行一下角色分配</p>
<ul>
<li><strong>观察者</strong>：Observer；</li>
<li><strong>被观察者</strong>：Observable；</li>
<li><strong>订阅（或注册）</strong>：subscribe()。</li>
</ul>
<h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p><code>Observer</code> 即观察者，它决定事件触发的时候将有怎样的行为。</p>
<p>RxJava 观察者的事件回调方法除了普通事件<code>onNext()</code>（相当于<code>onClick()/onEvent()</code>）之外，还定义了两个特殊的事件：<code>onCompleted()</code>和<code>onError()</code>。</p>
<ul>
<li><code>onCompleted()</code>: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的<code>onNext()</code>发出时，需要触发<code>onCompleted()</code>方法作为标志。</li>
<li><code>onError()</code>: 事件队列异常。在事件处理过程中出异常时，<code>onError()</code>会被触发，同时队列自动终止，不允许再有事件发出。</li>
</ul>
<p>在一个正确运行的事件序列中,<code>onCompleted()</code>和<code>onError()</code>有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code>:和<code>onError()</code>二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p>
<h2 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h2><p><code>Observable</code> 即被观察者，它决定什么时候触发事件以及触发怎样的事件。可以使用<code>create()</code>、<code>just(T...)</code>、<code>from(T[])</code>或<code>from(Iterable&lt;? extends T&gt;)</code>来创建一个 <code>Observable</code> ，并为它定义事件触发规则。</p>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>创建了<code>Observable</code>和<code>Observer</code>之后，再用<code>subscribe()</code>方法将它们联结起来</p>
<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>例：打印字符串</p>
<ol>
<li><p>添加依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava:1.0.14'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依次创建观察者，被观察者，订阅</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用Observable.create()创建被观察者</span></span><br><span class="line">Observable observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Wrold"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//订阅</span></span><br><span class="line">observable1.subscribe(observer);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上用到的都是rx包里面的，别用错了！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.Observer;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br></pre></td></tr></table></figure></p>
<p>上面完成了一次Rxjava的基本使用，会在log里显示<code>Hello World</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/19cac3c5b106" target="_blank" rel="noopener">https://www.jianshu.com/p/19cac3c5b106</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android抽象布局——include、merge 、ViewStub]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%E6%8A%BD%E8%B1%A1%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94include%E3%80%81merge%20%E3%80%81ViewStub/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在布局优化中，Androi的官方提到了这三种布局<code>&lt;include /&gt;</code>、<code>&lt;merge /&gt;</code>、<code>&lt;ViewStub /&gt;</code>，并介绍了这三种布局各有的优势，下面也是简单说一下他们的优势，以及怎么使用，记下来权当做笔记。</p>
<h1 id="布局重用-lt-include-gt"><a href="#布局重用-lt-include-gt" class="headerlink" title="布局重用&lt;include /&gt;"></a>布局重用<code>&lt;include /&gt;</code></h1><p><code>&lt;include /&gt;</code>标签能够重用布局文件，简单的使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/app_bg"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/titlebar"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"@string/hello"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    ...  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>&lt;include /&gt;</code>标签可以使用单独的layout属性，这个也是必须使用的。</li>
<li>可以使用其他属性。<code>&lt;include /&gt;</code>标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖，解决方案。</li>
<li>在<code>include</code>标签中所有的<code>android:layout_*</code>都是有效的，前提是必须要写<code>layout_width</code>和<code>layout_height</code>两个属性。</li>
<li>布局中可以包含两个相同的<code>include</code>标签，引用时可以使用如下方法解决（参考）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View bookmarks_container_2 = findViewById(R.id.bookmarks_favourite);   </span><br><span class="line">  </span><br><span class="line">bookmarks_container_2.findViewById(R.id.bookmarks_list);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="减少视图层级-lt-merge-gt"><a href="#减少视图层级-lt-merge-gt" class="headerlink" title="减少视图层级&lt;merge /&gt;"></a>减少视图层级<code>&lt;merge /&gt;</code></h1><p><code>&lt;merge/&gt;</code>标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级，优化UI。<code>&lt;merge/&gt;</code>多用于替换FrameLayout或者当一个布局包含另一个时，<code>&lt;merge/&gt;</code>标签消除视图层次结构中多余的视图组。例如你的主布局文件是垂直布局，引入了一个垂直布局的<code>include</code>，这是如果<code>include</code>布局使用的<code>LinearLayout</code>就没意义了，使用的话反而减慢你的UI表现。这时可以使用<code>&lt;merge/&gt;</code>标签优化。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/add"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/delete"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>现在，当你添加该布局文件时(使用<code>&lt;include /&gt;</code>标签)，系统忽略<code>&lt;merge /&gt;</code>节点并且直接添加两个Button。更多<code>&lt;merge /&gt;</code>介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize by merging》</a></p>
<h1 id="需要时使用-lt-ViewStub-gt"><a href="#需要时使用-lt-ViewStub-gt" class="headerlink" title="需要时使用&lt;ViewStub /&gt;"></a>需要时使用<code>&lt;ViewStub /&gt;</code></h1><p><code>&lt;ViewStub /&gt;</code>标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。各种不常用的布局想进度条、显示错误消息等可以使用<code>&lt;ViewStub /&gt;</code>标签，以减少内存使用量，加快渲染速度。<code>&lt;ViewStub /&gt;</code>是一个<code>不可见的，大小为0的View</code>。<code>&lt;ViewStub /&gt;</code>标签使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/stub_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:inflatedId</span>=<span class="string">"@+id/panel_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout</span>=<span class="string">"@layout/progress_overlay"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当你想加载布局时，可以使用下面其中一种方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub) findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);  </span><br><span class="line"><span class="comment">// or  </span></span><br><span class="line">View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();</span><br></pre></td></tr></table></figure></p>
<p>当调用<code>inflate()</code>函数的时候，<code>ViewStub</code>被引用的资源替代，并且返回引用的view。 这样程序可以直接得到引用的<code>view</code>而不用再次调用函数<code>findViewById()</code>来查找了。<br>注：<code>ViewStub</code>目前有个缺陷就是还不支持 <code>&lt;merge /&gt;</code> 标签。</p>
<p>更多<code>&lt;ViewStub /&gt;</code>标签介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-with.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize with stubs》</a></p>
<p>参考：<br><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/reusing-layouts.html</a><br><a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html</a><br><a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint</a><br><a href="http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html</a><br><a href="http://developer.android.com/training/improving-layouts/loading-ondemand.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/loading-ondemand.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（三）封装]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>封装后方便对 OrmLite 的使用</p>
<p><a href="https://github.com/triline3/timecat/blob/master/app/src/main/java/com/time/cat/database/GenericDao.java" target="_blank" rel="noopener">见项目</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（二）高级操作]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>这篇文章主要介绍 <code>OrmLite 框架</code>中使用到的一些查询方法.</p>
<h1 id="WEHRE子句"><a href="#WEHRE子句" class="headerlink" title="WEHRE子句"></a>WEHRE子句</h1><p>在SQL语句中，经常会用到where语句，where 进行条件筛选。<br><code>dao.queryBuilder.()where()</code>方法返回一个<code>where对象</code>，<code>where</code>中提供了很多方法来进行条件筛选,下边逐个讲<code>where</code>中的方法。</p>
<p>方法 ：eq(columnName,value) 等于（=）equals<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id = 2</code></p>
<p>方法 ：lt(columnName,value) 小于（&lt;） less than<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt; 2</code></p>
<p>方法 ：gt(columnName,value) 大于（&gt;） greater than<br>使用示范：<code>mDao.queryBuilder().where().gt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt; 2</code></p>
<p>方法 ：ge(columnName,value) 大于等于（&gt;=）greater-than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().ge(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt;= 2</code></p>
<p>方法 ：le(columnName,value) 小于等于（&lt;=）less than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().le(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;= 2</code></p>
<p>方法 ：ne(columnName,value) 不等于（&lt;&gt;）not-equal-to<br>使用示范：<code>mDao.queryBuilder().where().ne(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;&gt; 2</code></p>
<p>方法 ：in(columnName,object…) 在指定列中匹配object数组所对应的值，返回匹配到的结果行集合,in还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().in(“id”, 1，2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id IN (1，2 )</code></p>
<p>方法 ：notIn(columnName,object…) 在指定列中匹配object数组所对应的值，返回没有匹配到的结果行集合notIn还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().notIn(“id”,1,2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id NOT IN (1 ,2 )</code></p>
<p>方法 ：like(columnName,pattern) 使用%通配符来匹配，指定行数据，返回匹配到的结果<br>使用示范：<code>mDao.queryBuilder().where().like(“LastName”, “A%”).query();</code> 匹配A开头的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%s”).query();</code> 匹配s结尾的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%art%”).query();</code> 匹配中间为art的LastName<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `LastName` LIKE &#39;A%&#39;</code></p>
<p>方法 ：between(columnName,low,high) 获取指定范围内的结果<br>使用示范：<code>mDao.queryBuilder().where().between(“id”, 1, 2).query();</code>获取id是1到2之间的结果<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `id` BETWEEN 1 AND 2</code></p>
<p>方法and()，or()用来组合上述where子语句。进行与，或操作。<br>方法 ：and() where子句与操作<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 3).and().gt(“id”, 1).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` &lt; 3 AND `id` &gt; 1 )</code></p>
<p>方法 ：or() where子句或操作<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 1).or().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` = 1 OR `id` = 2 )</code></p>
<h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p>根据指定列名排序，降序，升序<br>使用示范：<code>mDao.queryBuilder().orderBy(“id”, false).query(); //参数false表示降序，true表示升序。</code><br>对应SQL：<code>SELECT * FROM `t_person` ORDER BY `id` DESC（降序）</code></p>
<h1 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h1><p>过滤指定列不重复数据行，重复的只返回一次。<br>使用示范：<code>mDao.queryBuilder().selectColumns(“City”).distinct().query();</code><br>对应SQL：<code>SELECT DISTINCT `City` FROM `t_person`</code></p>
<h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h1><p>按照指定列分组<br>使用示范：<code>mDao.queryBuilder().groupBy(“city”).query();</code><br>对应SQL：<code>SELECT * FROM t_person GROUP BY city</code></p>
<h1 id="offset-Limit"><a href="#offset-Limit" class="headerlink" title="offset Limit"></a>offset Limit</h1><p>offset跳过指定的行数<br>limit限制获取指定行数<br>使用示范：<code>mDao.queryBuilder().offset(2).limit(2).query();</code> 可以用来分页<br>对应SQL：<code>SELECT * FROM t_person LIMIT 2 OFFSET 2</code></p>
<h1 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h1><p>等同于sql中的Having，针对分组数据，进行聚合函数（SUM, COUNT, MAX, AVG）运算。<br>使用示范：  <code>mPersonList = mDao.queryBuilder().groupBy(“City”).having(“SUM(id)&gt;4”).query()</code><br>对应SQL： <code>SELECT * FROM t_person GROUP BY City HAVING SUM(id)&gt;4</code></p>
<h1 id="countOf"><a href="#countOf" class="headerlink" title="countOf"></a>countOf</h1><p>返回查询结果的总数<br>使用示范：<code>mDao.queryBuilder().countOf()</code><br>对应SQL：<code>SELECT COUNT(*) FROM t_person</code></p>
<h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>返回一个结果集的迭代器。<br>使用示范：<code>Iterator iterator = mDao.queryBuilder().iterator();</code></p>
<h1 id="queryForFirst"><a href="#queryForFirst" class="headerlink" title="queryForFirst"></a>queryForFirst</h1><p>返回所有行的第一行。<br>使用示范：<code>mDao.queryBuilder().queryForFirst();</code></p>
<p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 OrmLite框架入门与封装（一）快速入门]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。</p>
<p>本文主要针对 Android 使用 <code>OrmLite 框架</code> 对数据库的基本操作介绍，如有那些地方介绍的不对，请指出来，一起学习，一起进步。</p>
<h1 id="添加-OrmLite-包"><a href="#添加-OrmLite-包" class="headerlink" title="添加 OrmLite 包"></a>添加 OrmLite 包</h1><p>向工程中添加 OrmLite 的 jar 包有两种方式：</p>
<ol>
<li>到 OrmLite 官网下载 ormlite-core-4.49.jar 和 ormlite-android-4.49.jar 两个jar 包添加到工程中。</li>
<li>在项目中添加依赖的方式。</li>
</ol>
<h1 id="创建项目中使用DatabaseHelper类"><a href="#创建项目中使用DatabaseHelper类" class="headerlink" title="创建项目中使用DatabaseHelper类"></a>创建项目中使用DatabaseHelper类</h1><p>首先要简单说一下 <code>OrmLite 框架</code>中 <code>OrmLiteSqliteOpenHelper</code> 类 ，<code>OrmLiteSqliteOpenHelper</code> 类继承了 <code>SQLiteOpenHelper</code>。所以，创建项目中的D<code>atabaseHelper</code> 类，要使该类继承 <code>OrmLite 框架</code> 的 <code>OrmLiteSqliteOpenHelper</code> 类来获得 <code>SQLiteHelper</code>.</p>
<h1 id="继承-OrmLiteSqliteOpenHelper-实现几个方法说明"><a href="#继承-OrmLiteSqliteOpenHelper-实现几个方法说明" class="headerlink" title="继承 OrmLiteSqliteOpenHelper 实现几个方法说明"></a>继承 <code>OrmLiteSqliteOpenHelper</code> 实现几个方法说明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context, String databaseName, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> databaseVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, databaseName, factory, databaseVersion);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数说明：</span></span><br><span class="line"><span class="comment">         * context：上下文。</span></span><br><span class="line"><span class="comment">         * databaseName： 数据库名。</span></span><br><span class="line"><span class="comment">         * factory： 游标实例，多数时候设置成NULL。</span></span><br><span class="line"><span class="comment">         * databaseVersion：数据库版本，当数据库版本升高时，会调用onUpgrade（）方法。</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure>
<h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource)</span> </span>&#123; </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在该方法中进行创建表操作</span></span><br><span class="line"><span class="comment">         * 使用`OrmLite 框架`的 TableUtils.createTable进行创建表操作。</span></span><br><span class="line"><span class="comment">         *eg.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TableUtils.createTable(connectionSource, UserInfo.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据库版本提升更新方法"><a href="#数据库版本提升更新方法" class="headerlink" title="数据库版本提升更新方法"></a>数据库版本提升更新方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//在该方法中进行更新操作</span></span><br></pre></td></tr></table></figure>
<h1 id="创建数据库表对应的-Bean"><a href="#创建数据库表对应的-Bean" class="headerlink" title="创建数据库表对应的 Bean"></a>创建数据库表对应的 Bean</h1><p>Bean 类中的变量对应数据库中的字段，在 Bean 中使用注解方式进行设置。<br>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DatabaseTable</span>(tableName = <span class="string">"tb_user_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DatabaseField</span>(generatedId = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"addr"</span>)</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应字段的set 和 get 方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="数据库中字段注解设置说明："><a href="#数据库中字段注解设置说明：" class="headerlink" title="数据库中字段注解设置说明："></a>数据库中字段注解设置说明：</h1><table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">参数名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">@DatabaseTable</td>
<td style="text-align:center">tableName</td>
<td style="text-align:center">指定表明,没有将使用类名作为表明</td>
</tr>
<tr>
<td style="text-align:center">@DatabaseField</td>
<td style="text-align:center">cloumnName</td>
<td style="text-align:center">指定字段名,不指定则变量名作为字段名</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">canBeNull</td>
<td style="text-align:center">是否可以为null</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">dataType</td>
<td style="text-align:center">指定字段的类型</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">defaultValue</td>
<td style="text-align:center">指定默认值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">width</td>
<td style="text-align:center">指定长度</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">id</td>
<td style="text-align:center">指定字段为id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">generatedId</td>
<td style="text-align:center">指定字段为自增长的id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">generatedIdSequence</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreign</td>
<td style="text-align:center">指定这个字段的对象是一个外键,外键值是这个对象的id</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">useGetSet</td>
<td style="text-align:center">指定ormlite访问变量使用set,get方法默认使用的是反射机制直接访问变量</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">throwIfNull</td>
<td style="text-align:center">如果空值抛出异常</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">persisted</td>
<td style="text-align:center">指定是否持久化此变量,默认true</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">unique</td>
<td style="text-align:center">字段值唯一</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueCombo</td>
<td style="text-align:center">整列的值唯一</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">index</td>
<td style="text-align:center">索引</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueIndex</td>
<td style="text-align:center">唯一索引</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignAutoRefresh</td>
<td style="text-align:center">外键值,自动刷新</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">uniqueIndex</td>
<td style="text-align:center">外键值,自动刷新</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignAutoCreate</td>
<td style="text-align:center">外键不存在时是否自动添加到外间表中</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">foreignColumnName</td>
<td style="text-align:center">外键字段指定的外键表中的哪个字段</td>
</tr>
</tbody>
</table>
<h1 id="获取操作数据库对应表的-Bean-的-Dao"><a href="#获取操作数据库对应表的-Bean-的-Dao" class="headerlink" title="获取操作数据库对应表的 Bean 的 Dao"></a>获取操作数据库对应表的 Bean 的 Dao</h1><p>在<code>OrmLite 框架</code>中。操作数据是通过 对应<code>Bean</code>的<code>Dao</code> 实现的。 </p>
<p>那么Dao 是如何获取的呢？ </p>
<p>Dao 的获取方式： </p>
<p>对应Bean是通过 <code>OrmLiteSqliteOpenHelper</code> 类中 <code>getDao(Class clazz)</code> 方法获取。</p>
<p>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatabaseHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dao&lt;UserInfo,Integer&gt; <span class="title">getUserDao</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        helper = <span class="keyword">new</span> DatabaseHelper(context);</span><br><span class="line">        <span class="keyword">return</span> helper.getDao(UserInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过 <code>Dao</code> 对数据库进行简单增、删、改、查操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDao mDao = <span class="keyword">new</span> UserDao();</span><br></pre></td></tr></table></figure></p>
<p>增：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        UserInfo u1 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"beijng"</span>,<span class="string">"nan"</span>);</span><br><span class="line">        mDao.getUserDao(mContext).create(u1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>删：<br>下面的示例是使用删除集合完成删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改和删除要通过id 进行操作</span></span><br><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">UserInfo u3 = <span class="keyword">new</span> UserInfo(<span class="string">"招商"</span>,<span class="string">"beijng"</span>,<span class="string">"女"</span>);</span><br><span class="line">u3.setUserId(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Collection&lt;UserInfo&gt; collection = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</span><br><span class="line">    collection.add(u4);</span><br><span class="line">    collection.add(u3);</span><br><span class="line">    mDao.getUserDao(mContext).delete(collection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"updateMan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mDao.getUserDao(mContext).update(u4);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>查：<br>注：这里只举了一个查询方式，查询全部。条件查询请参考（OrmLite 复杂条件查询）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;UserInfo&gt; infos =  mDao.getUserDao(mContext).queryForAll();</span><br><span class="line">    <span class="keyword">for</span>(UserInfo info : infos)&#123;</span><br><span class="line">        <span class="comment">//在此处使用TextView进行显示</span></span><br><span class="line">        mUserText.append(<span class="string">"\n"</span> + info.toString() + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> OrmLite </tag>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 制作捐赠二维码，实现捐赠收款]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E5%88%B6%E4%BD%9C%E6%8D%90%E8%B5%A0%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%8D%90%E8%B5%A0%E6%94%B6%E6%AC%BE/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>撰写了一篇对读者有帮助的博客，</p>
<p>贡献了一套对开发者有用的开源项目，<br>上架了一个免费的App，用户觉得好用想回报作者，<br>上架了一个收费的App，小白用户因不会使用 苹果支付（Apple Pay），谷歌钱包（Google Wallet Card），PayPal，没办法只要使用越狱破解版本，但又想获得版本更新，好用想回报作者，</p>
<p>以上问题因为有了 阿里支付宝（alipay）的二维码支付（捐赠），一切皆不是问题。平时你在互联网上看到的快捷捐赠就是这样实现的，你也可以实现.</p>
<h1 id="步骤分解："><a href="#步骤分解：" class="headerlink" title="步骤分解："></a>步骤分解：</h1><ol>
<li>PC端登陆支付宝官方网站 <a href="https://qr.alipay.com" target="_blank" rel="noopener">https://qr.alipay.com</a> </li>
<li>免费领取“向我付款”的二维码。</li>
<li>个性化设置可以自行上传头像照片，并设置收款人姓名</li>
<li>下载“向我付款”的二维码，放到你的博客、github、App下载页面（注意不要放到AppStore或App内，会违反AppStore审核规则被Reject！）</li>
</ol>
<h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><ol>
<li>支付宝二维码实则为一个可以打开支付宝客户端的url地址。也可以用手机原生浏览器，如iOS的Safari，Android的浏览器，直接访问二维码的Web地址，如我的二维码地址为<a href="https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5" target="_blank" rel="noopener">https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5</a></li>
<li>必须使用支付宝android，iOS客户端的“扫一扫”功能，如没有安装，先安装。</li>
<li>使用微信扫描时，微信会禁止跳转到支付宝（竞争对手关系吧），这时候需要选择扫描结果页面–右上角的打开方式“…”，使用原生浏览器打开，并拷贝支付地址</li>
</ol>
<h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><ol>
<li>WeiboX：新浪微博 MAC客户端，个人开发者<a href="http://weiboformac.sinaapp.com/donates.php" target="_blank" rel="noopener">http://weiboformac.sinaapp.com/donates.php</a></li>
<li>JeepREC：iPhone版行车记录仪，个人开发者<br>专业版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8</a><br>免费版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8</a></li>
</ol>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.csdn.net/huanghr_1/article/details/41118059" target="_blank" rel="noopener">如何制作捐赠二维码，实现开源项目或免费应用的捐赠收款（支付宝篇）</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> alipay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 跳转QQ加群]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E8%B7%B3%E8%BD%ACQQ%E5%8A%A0%E7%BE%A4/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目内测需要用到</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>访问<a href="https://qun.qq.com/join.html" target="_blank" rel="noopener">https://qun.qq.com/join.html</a></li>
<li>登录</li>
<li>左边选择QQ群，右边有代码，直接复制到项目即可</li>
</ol>
<p><img src="/assets/blog/img/2018-02-26/30.png" width="700"></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>必须明确QQ群号</li>
<li>该用户必须是QQ群号的管理员或群主</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> QQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android Studio 高效配置]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E9%AB%98%E6%95%88%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="1、代码提示不区分大小写"><a href="#1、代码提示不区分大小写" class="headerlink" title="1、代码提示不区分大小写"></a>1、代码提示不区分大小写</h1><p>File | Settings 打开设置，选择Editor | General | Code Completion</p>
<p>Case sensitive completion：选择None。</p>
<p><img src="/assets/blog/img/2018-02-26/5.png" width="700"></p>
<h1 id="2、显示行号"><a href="#2、显示行号" class="headerlink" title="2、显示行号"></a>2、显示行号</h1><p>File | Settings 打开设置，选择Editor | General | Appearance</p>
<p>如图勾选 Show line numbers。</p>
<p><img src="/assets/blog/img/2018-02-26/6.png" width="700"></p>
<h1 id="3、自动导包"><a href="#3、自动导包" class="headerlink" title="3、自动导包"></a>3、自动导包</h1><p>在 Android Studio 中， Alt + Enter 和 Control + Alt + O 是用来导包和清除无用导包。但是，你可以设置其快速自动导包的。</p>
<p>File | Settings打开设置，选择 Editor | General | Auto Import，勾选 Optimize imports on the fly 和 Add unambiguous imports on the fly 。</p>
<p><img src="/assets/blog/img/2018-02-26/7.png" width="700"></p>
<h1 id="4、Log日志的颜色自定义"><a href="#4、Log日志的颜色自定义" class="headerlink" title="4、Log日志的颜色自定义"></a>4、Log日志的颜色自定义</h1><p>Android Studio中 Logcat 的默认只有红白两种颜色，这样不利于我们分析Log打印的信息。建议还是采用Android Holo主题的配色方案。</p>
<p>File | Settings 打开设置，选择Editor | Color &amp; Fonts | Android Logcat，点击 Click on Save As…按钮创建一个新的配色 myLog。</p>
<p>注意：修改之前一定要取消勾选 Use inherited attributes</p>
<p><img src="/assets/blog/img/2018-02-26/8.png" width="700"></p>
<h1 id="5、屏幕截图与屏幕录屏"><a href="#5、屏幕截图与屏幕录屏" class="headerlink" title="5、屏幕截图与屏幕录屏"></a>5、屏幕截图与屏幕录屏</h1><p>Android Studio中 自带了截屏与录屏的功能。如图</p>
<p>截屏：</p>
<p><img src="/assets/blog/img/2018-02-26/9.png" width="200"><br><img src="/assets/blog/img/2018-02-26/10.png" width="200"></p>
<p>录屏：</p>
<p><img src="/assets/blog/img/2018-02-26/11.png" width="700"><br><img src="/assets/blog/img/2018-02-26/12.png" width="700"><br><img src="/assets/blog/img/2018-02-26/13.png" width="400"></p>
<h1 id="6、Android-Studio真机ADB-WiFi调试"><a href="#6、Android-Studio真机ADB-WiFi调试" class="headerlink" title="6、Android Studio真机ADB WiFi调试"></a>6、Android Studio真机ADB WiFi调试</h1><p>第一步，安装ADBWIFI插件，安装后之后重启AndroidStudio。</p>
<p><img src="/assets/blog/img/2018-02-26/14.png" width="300"><br><img src="/assets/blog/img/2018-02-26/15.png" width="300"><br><img src="/assets/blog/img/2018-02-26/16.png" width="300"></p>
<p>第二步，重启后，你会发现Tools | Android 多了一个 ADB WIFI。</p>
<p><img src="/assets/blog/img/2018-02-26/17.png" width="700"></p>
<p>手机通过数据线连上电脑，如图点击ADB Restart，出现如下图则成功</p>
<p><img src="/assets/blog/img/2018-02-26/18.png" width="700"></p>
<p>再点击 ADB USB to WIFI，出现如下图则成功，便可拔掉数据线无线调试了。</p>
<p><img src="/assets/blog/img/2018-02-26/19.png" width="700"></p>
<h1 id="7、WaKaTime"><a href="#7、WaKaTime" class="headerlink" title="7、WaKaTime"></a>7、WaKaTime</h1><p>一款可以记录你敲代码时间的插件。</p>
<p>安装wakatime插件如上面，安装后重启。记得在官网上注册账号获取API Key。在Tools下面点击WaKaTime Settings 设置你的API Key。</p>
<p>官网地址：<a href="https://wakatime.com/" target="_blank" rel="noopener">https://wakatime.com/</a></p>
<p><img src="/assets/blog/img/2018-02-26/20.png" width="700"><br><img src="/assets/blog/img/2018-02-26/21.png" width="700"><br><img src="/assets/blog/img/2018-02-26/22.png" width="700"></p>
<h1 id="8、SexyEditor插件（AndroidStudio设置背景）"><a href="#8、SexyEditor插件（AndroidStudio设置背景）" class="headerlink" title="8、SexyEditor插件（AndroidStudio设置背景）"></a>8、SexyEditor插件（AndroidStudio设置背景）</h1><p>你可以在你的AndroidStudio上设置一张背景图片。File | Settings 打开设置，Other Settings下面的SexyEditor。</p>
<p>opacity：设置图片的 透明度 0-100 数值越大  背景图片越清晰。</p>
<p>shrink to fit: 缩小到适合尺寸。设置图片的缩放。</p>
<p>random:设置图片随机循环播放。</p>
<p>file list ：批量选择图片列表。</p>
<p>往下拉有个Insert 插入图片的按钮。</p>
<p><img src="/assets/blog/img/2018-02-26/23.png" width="700"><br><img src="/assets/blog/img/2018-02-26/24.png" width="700"></p>
<p>效果怎么样，是不是高大上。</p>
<p><img src="/assets/blog/img/2018-02-26/25.png" width="700"></p>
<h1 id="9、ECTranslation翻译插件"><a href="#9、ECTranslation翻译插件" class="headerlink" title="9、ECTranslation翻译插件"></a>9、ECTranslation翻译插件</h1><p>选中某个单词，翻译中文。</p>
<p><img src="/assets/blog/img/2018-02-26/26.png" width="700"></p>
<p>安装完插件重启，然后在Preferences -&gt; Keymap -&gt; 搜索Translate，右键设置快捷键。</p>
<p><img src="/assets/blog/img/2018-02-26/27.png" width="700"></p>
<p>选中某个单词+快捷键如图：</p>
<p><img src="/assets/blog/img/2018-02-26/28.png" width="700"></p>
<h1 id="10、GsonFormat"><a href="#10、GsonFormat" class="headerlink" title="10、GsonFormat"></a>10、GsonFormat</h1><p>json数据自动生成实体类。安装插件和上面一样，重启之后你可以设置一下快捷键，方法和上面一样，我的快捷键设置的是Alt+S。下面是演示。</p>
<p><img src="/assets/blog/img/2018-02-26/29.png" width="700"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android Studio拾色器]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E6%8B%BE%E8%89%B2%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在考虑UI颜色配置的时候需要颜色对齐，需要用的次数多了，给Android Studio自带的拾色器作个小总结。</p>
<p>你可能下载过一些获取颜色值的一些小工具，<br>　　这种方式获取颜色，需要先切换窗口转跳到桌面，然后打开拾色器小工具程序，然后去拾取颜色；</p>
<p>你可能也知道Android Studio自带一个颜色拾色器，通过下面这种方式才能找到<br>　　这种方式获取颜色值限制性很强，需要特定的窗口，需要点击那么一小块颜色才能弹出窗口，才能使用</p>
<p><img src="/assets/blog/img/2018-02-26/1.png" width="700"></p>
<p>那有没有更好的方式？ 答案是肯定的，不然这些个干嘛~~<br>不用向上面那样去打开拾色器小工具程序，不用在特定的窗口点击特定的位置弹出拾色器工具，是用我们最喜欢的快捷键的方式打开<br>Android Studio自带了颜色拾色器工具，但是它没有设置快捷键，也没有告诉我们， 这才是问题，<br>不罗嗦了，跟着下面的设置去设置快捷键吧 </p>
<p><img src="/assets/blog/img/2018-02-26/2.png" width="700"></p>
<p><img src="/assets/blog/img/2018-02-26/3.png" width="700"></p>
<p>设置好之后Apply应用 + OK确认下就好了</p>
<p>下面就能愉快的玩耍了，Alt+C~~ </p>
<p><img src="/assets/blog/img/2018-02-26/4.png" width="700"></p>
<p>参考：<br><a href="http://blog.csdn.net/shibin1990_/article/details/51684877" target="_blank" rel="noopener">Android Studio设置颜色拾色器工具Color Picker</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 懒加载需求下的BaseFragment封装]]></title>
      <url>/2018/02/26/2018-02-26-Android-TimeCat-%E6%87%92%E5%8A%A0%E8%BD%BD%E9%9C%80%E6%B1%82%E4%B8%8B%E7%9A%84BaseFragment%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在多个Fragment需要加载的时候,启动速度往往会变慢，影响用户体验。分析发现并非所有的Fragment都需要第一时间将数据填充完毕，因为它们都还没有被用户所”看见”.所以我们要达到的效果是Fragment被显示后才加载数据(lazy load)。由于这种需求具有共性，即每个Fragment都可能有懒加载的需要，故封装成基类BaseFragment.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fragment title</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String fragmentTitle;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可见状态 为了避免和&#123;<span class="doctag">@link</span> Fragment#isVisible()&#125;冲突 换个名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFragmentVisible;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标志位，View已经初始化完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否第一次加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     * 一般用于PagerAdapter需要刷新各个子Fragment的场景</span></span><br><span class="line"><span class="comment">     * 不要new 新的 PagerAdapter 而采取reset数据的方式</span></span><br><span class="line"><span class="comment">     * 所以要求Fragment重新走initData方法</span></span><br><span class="line"><span class="comment">     * 故使用 &#123;<span class="doctag">@link</span> BaseFragment#setForceLoad(boolean)&#125;来让Fragment下次执行initData</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceLoad = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Bundle bundle = getArguments();</span><br><span class="line">        <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; bundle.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            initVariables(bundle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若 viewpager 不设置 setOffscreenPageLimit 或设置数量不够</span></span><br><span class="line">        <span class="comment">// 销毁的Fragment onCreateView 每次都会执行(但实体类没有从内存销毁)</span></span><br><span class="line">        isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">        View view = initViews(inflater, container, savedInstanceState);</span><br><span class="line">        isPrepared = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是与ViewPager一起使用，调用的是setUserVisibleHint</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isVisibleToUser 是否显示出来了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是通过FragmentTransaction的show和hide的方法来控制显示，调用的是onHiddenChanged.</span></span><br><span class="line"><span class="comment">     * 若是初始就show的Fragment 为了触发该事件 需要先hide再show</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hidden hidden True if the fragment is now hidden, false if it is not</span></span><br><span class="line"><span class="comment">     * visible.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onHiddenChanged(hidden);</span><br><span class="line">        <span class="keyword">if</span> (!hidden) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要实现延迟加载Fragment内容,需要在 onCreateView</span></span><br><span class="line"><span class="comment">     * isPrepared = true;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrepared() &amp;&amp; isFragmentVisible()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forceLoad || isFirstLoad()) &#123;</span><br><span class="line">                forceLoad = <span class="keyword">false</span>;</span><br><span class="line">                isFirstLoad = <span class="keyword">false</span>;</span><br><span class="line">                initData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        isPrepared = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被ViewPager移出的Fragment 下次显示时会从getArguments()中重新获取数据</span></span><br><span class="line"><span class="comment">     * 所以若需要刷新被移除Fragment内的数据需要重新put数据 eg:</span></span><br><span class="line"><span class="comment">     * Bundle args = getArguments();</span></span><br><span class="line"><span class="comment">     * if (args != null) &#123;</span></span><br><span class="line"><span class="comment">     * args.putParcelable(KEY, info);</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initVariables</span><span class="params">(Bundle bundle)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initViews</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isPrepared;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceLoad</span><span class="params">(<span class="keyword">boolean</span> forceLoad)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceLoad = forceLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirstLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFirstLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFragmentVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFragmentVisible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fragmentTitle) &#123;</span><br><span class="line">            setDefaultFragmentTitle(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TextUtils.isEmpty(fragmentTitle) ? <span class="string">""</span> : fragmentTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        fragmentTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置fragment的Title直接调用 &#123;<span class="doctag">@link</span> BaseFragment#setTitle(String)&#125;,若不显示该title 可以不做处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 一般用于显示在TabLayout的标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setDefaultFragmentTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://github.com/xmagicj/LazyFragment" target="_blank" rel="noopener">LazyFragment</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android中使用矢量图（SVG, VectorDrawable）]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%EF%BC%88SVG,%20VectorDrawable%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目中需要根据不同的场景动态改变图标颜色，如果用png等格式，会使图片资源过多。明明图案是一样的，为什么改变个颜色就得多一张图?如果整体颜色风格改变，那之前的图片资源就都废了？所以选择用xml文件来描述图片颜色，想用什么色就用什么色。</p>
<p>图片本质上是一个存像素点的矩阵，而svg高级一点，存一些点，比如一个圆，那么就存圆心和半径数据就行了，这是轨迹，然后再规定颜色，这样和png资源相比，内存大大减少，还容易自定义，改个图标颜色简直不要太方便！</p>
<h1 id="SVG-和-VectorDrawable"><a href="#SVG-和-VectorDrawable" class="headerlink" title="SVG 和 VectorDrawable"></a>SVG 和 VectorDrawable</h1><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><blockquote>
<p>可缩放矢量图形（英语：Scalable Vector Graphics，SVG）是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。SVG由W3C制定，是一个开放标准。——摘自维基百科</p>
</blockquote>
<p><code>.svg</code>格式相对于<code>.jpg</code>、<code>.png</code>甚至<code>.webp</code>具有较多优势，我认为核心有两点：</p>
<ul>
<li>省时间。图像与分辨率无关，收放自如，适配安卓机坑爹的分辨率真是一劳永逸；</li>
<li>省空间。体积小，一般复杂图像也能在数KB搞定，图标更不在话下。</li>
</ul>
<h2 id="VectorDrawable"><a href="#VectorDrawable" class="headerlink" title="VectorDrawable"></a>VectorDrawable</h2><p><code>VectorDrawable</code>是Google从Android 5.0开始引入的一个新的<code>Drawable</code>子类，能够加载矢量图。到现在通过<code>support-library</code>已经至少能适配到Android 4.0了（通过AppBrain统计的Android版本分布来看，Android 4.1以下（api&lt;15）几乎可以不考虑了）。Android中的<code>VectorDrawable</code>只支持SVG的部分属性，相当于阉割版。</p>
<p>它虽然是个类，但是一般通过配置xml再设置到要使用的控件上。在Android工程中，在资源文件夹<code>res/drawable/</code>的目录下（没有则需新建），通过<code>&lt;vector&gt;&lt;/vector&gt;</code>标签描述，例如<code>svg_ic_arrow_right.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportHeight</span>=<span class="string">"24.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportWidth</span>=<span class="string">"24.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillColor</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本属性说明：</p>
<ul>
<li><code>width</code>, <code>height</code>：图片的宽高。可手动修改到需要尺寸；</li>
<li><code>viewportHeight</code>, <code>viewportWidth</code>：对应将上面height width等分的份数。以svg_ic_arrow_right.xml举例，可以想象将长宽都为8dp的正方形均分为24x24的网格，在这个网格中就可以很方便地描述点的坐标，图像就是这些点连接起来构成的。</li>
<li><code>fillColor</code>：填充颜色。最好直接在这里写明色值<code>#xxxxxxxx</code>，而不要用<code>@color/some_color</code>的形式，避免某些5.0以下机型可能会报错。</li>
<li><code>pathData</code>：在2中描述的网格中作画的路径。具体语法不是本文的重点，故不展开。</li>
</ul>
<p>下面这段代码描述出来的是一个蓝色闹钟，可以从Android Studio的<code>preview</code>功能栏里预览到它的样子：</p>
<p><img src="/assets/blog/img/2018-02-25/2.png" width="700"></p>
<p>emm…既然xml资源作图标这么方便，应该怎么获取呢？</p>
<h1 id="获取矢量图方式一：Android-Studio的Material-Icon"><a href="#获取矢量图方式一：Android-Studio的Material-Icon" class="headerlink" title="获取矢量图方式一：Android Studio的Material Icon"></a>获取矢量图方式一：<code>Android Studio</code>的<code>Material Icon</code></h1><p>鼠标选中<code>drawable</code>文件夹，右键， <code>New</code>， <code>Vector Asset</code></p>
<p><img src="/assets/blog/img/2018-02-25/3.png" width="700"></p>
<p>然后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/4.png" width="700"></p>
<p>点击机器人进入搜索筛选：</p>
<p><img src="/assets/blog/img/2018-02-25/5.png" width="700"></p>
<p>左侧的搜索和分类可以快速索引。这里都是由谷歌官方制作的MD标准图标，建议先到这里搜索，如果没有再到网上搜索。</p>
<h1 id="获取矢量图方式二：iconfont"><a href="#获取矢量图方式二：iconfont" class="headerlink" title="获取矢量图方式二：iconfont"></a>获取矢量图方式二：<a href="https://link.jianshu.com/?t=http://iconfont.cn" target="_blank" rel="noopener">iconfont</a></h1><p>墙裂安利一个网站，阿里的iconfont，海量在线矢量图，早收藏早致富！我已经离不开它了=￣ω￣=</p>
<p>第一步，搜索你要的资源名字，中英文一般都会有结果。比如“arrow”，结果：</p>
<p><img src="/assets/blog/img/2018-02-25/6.png" width="700"></p>
<p>第二步，鼠标移动到某一图标上点击，比如上面第一排第二个，出现：</p>
<p><img src="/assets/blog/img/2018-02-25/7.png" width="200"></p>
<p>三个选项，第一相当于购物车，可不用登录，第二是收藏，第三是下载，均需要登录。如果未登录，点击后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/8.png" width="700"></p>
<p>选择GitHub或微博都行。<br>第三步，登录成功，点击下载，弹出：</p>
<p><img src="/assets/blog/img/2018-02-25/9.png" width="700"></p>
<p>可以对图标属性进行编辑，如色值和大小（单位dp），然后点按钮“SVG下载”。下载成功后在下载目录找到一个.svg格式的文件，这个文件可以用浏览器打开-&gt;查看网页源码，或者用NotePad++等编辑器打开看到里面的内容，格式化后是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> standalone=<span class="string">"no"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"</span></span><br><span class="line"><span class="meta">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">"1490517024583"</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">style</span>=<span class="string">""</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">p-id</span>=<span class="string">"1010"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"16"</span> <span class="attr">height</span>=<span class="string">"16"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M288.86749 12.482601C272.260723-4.160867 245.369563-4.160867 228.720647 12.482601 212.15603 29.126068 212.15603 56.438425 228.720647 73.081892L704.289552 511.786622 228.720647 950.918109C212.15603 967.561574 212.15603 994.447175 228.720647 1011.517401 245.369563 1028.160866 272.260723 1028.160866 288.86749 1011.517401L794.952385 544.646802C803.803707 535.684935 807.597131 523.735776 807.007043 511.786622 807.597131 500.264224 803.803707 488.315065 794.952385 479.353198L288.86749 12.482601Z"</span> <span class="attr">p-id</span>=<span class="string">"1011"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件里好多标签Android是不认识的。不过没关系，有三种解决办法</p>
<h2 id="手动转化成xml"><a href="#手动转化成xml" class="headerlink" title="手动转化成xml"></a>手动转化成xml</h2><p>新建一个<code>&lt;vector&gt;&lt;/vector&gt;</code>标签的<code>xml文件</code>，通过观察文件内容，很容易获取到关键信息。</p>
<ul>
<li><code>width</code>, <code>height</code>自然对应<code>&lt;vector/&gt;</code>中宽高，</li>
<li><code>viewBox</code>后两位数字是分别对应<code>&lt;vector/&gt;</code>中的<code>viewportWidth</code>和<code>viewportHeight</code>，</li>
<li><code>&lt;path/&gt;</code>中的<code>d</code>的数据的对应<code>&lt;vector/&gt;</code>中<code>&lt;path/&gt;</code>中的<code>pathData</code>。</li>
<li><code>fillColor</code>自己手动设置。</li>
</ul>
<h2 id="svgtoandroid插件"><a href="#svgtoandroid插件" class="headerlink" title="svgtoandroid插件"></a>svgtoandroid插件</h2><p>安装：File -&gt; Setting -&gt; Plugins -&gt; Browser repositories -&gt; 搜“svg2VectorDrawable” -&gt; 安装并重启Android Studio，再次进来后顶部工具栏会多一个图标：</p>
<p><img src="/assets/blog/img/2018-02-25/10.png" width="200"></p>
<p>点击图标弹出对话框：</p>
<p><img src="/assets/blog/img/2018-02-25/12.png" width="700"></p>
<p>勾选Batch选项，将对被选中文件夹中的.svg文件进行批量转换。nodpi会自动添加到没有后缀的drawable文件夹中。</p>
<blockquote>
<p>网上下载的svg资源往往一步到位，有个这个插件将会事半功倍。导入第一个svg文件时就命名成我们想要的名字，如果不满意再导入时无需再关注命名，将后面导入的pathData覆盖第一个观察效果，直到满意后删除不需要的文件。</p>
</blockquote>
<h2 id="Android-Studio自带转化"><a href="#Android-Studio自带转化" class="headerlink" title="Android Studio自带转化"></a>Android Studio自带转化</h2><p>鼠标选中drawable文件夹，右键， New， Vector Asset， Local file，然后出现：</p>
<p><img src="/assets/blog/img/2018-02-25/13.png" width="700"></p>
<p>先选本地文件（还能支持PSD，强吧），再到磁盘中找到之前下载的.svg矢量图。导入后可以为文件重命名（建议用svg_或者有区别于其它格式的前缀），默认导入宽高均为24dp，选中Override框则读取文件本来宽高，其它配置视需求而定。点击Next到下一页最后点Finish就导入了。自动导入需要格式化一下就是前面svg_ic_arrow_right.xml的样子了。</p>
<blockquote>
<p>海搜比较耗时间，线条粗细啦，位置没居中啦，大小不搭配啦，关键是这些问题都是导入项目或者运行到手机后才能发现（非强迫症当我没说）。<br>iconfont还有诸多成套的图标库，优点是风格大小一致，或者多彩图标。</p>
</blockquote>
<h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>项目的<code>build.gradle</code>配置有：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    vectorDrawables.useSupportLibrary = <span class="keyword">true</span></span><br><span class="line">   &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  compile <span class="string">"com.android.support:appcompat-v7:21+"</span> <span class="comment">// 至少Api21</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>项目的Activity中都包含（通用做法是在BaseActivity中加）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  AppCompatDelegate.setCompatVectorFromResourcesEnabled(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="AppCompatImageView"><a href="#AppCompatImageView" class="headerlink" title="AppCompatImageView"></a>AppCompatImageView</h2><p>这是继承自ImageView用于5.0以下加载矢量图的控件，只需要替换src为srcCompat属性，其它没什么不同。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.AppCompatImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你的<code>Activity</code>直接或间接继承自<code>AppCompatActivity</code>，当前视图中的<code>ImageView</code>在编译过程中会被自动转为<code>AppCompatImageView</code>（<code>support包</code>中所有含有<code>AppCompat</code>前缀的控件均受相同处理），因而在<code>Activity</code>中通过<code>findViewById()</code>的实例用<code>ImageView</code>或<code>AppCompatActivity</code>接收是没有区别的。<br>用以上条件的<code>Activity</code>中装载的<code>Fragment</code>，或者通过动态注入（如<code>Dialog</code>的<code>contentView</code>）的<code>ImageView</code>，均将被自动转为<code>AppCompatActivity</code>。<br>从<code>xml</code>文件中初始化<code>ImageView</code>并加载矢量图，必须使用<code>AppCompatImageView</code>的<code>srcCompat</code>属性。<br><code>ImageView</code>的染色属性tint同样适合矢量图。</p>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>在我的经验中，<code>TextView</code>可以用到矢量图的场景是最多的，主要是设置<code>CompoundDrawable</code>。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawableRight</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawablePadding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"drawable right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样设置后，没有任何不适，编译器也不报错，可能你自己运行也没问题。但是！这才是深坑啊。5.0以下某些机型可能会崩溃的。</p>
<p><code>AppCompatTextView</code>是没有对<code>CompoundDrawable</code>进行适配的，所以需要自己动手才能丰衣足食。简单原理是，判断系统版本如果小于5.0，就用<code>ContextCompat.getDrawable</code>获取到<code>Drawable</code>实例，再<code>setCompoundDrawablesWithIntrinsicBounds</code>。</p>
<p>这个部分已经有人做好并开源了，地址：<a href="https://link.jianshu.com/?t=https://github.com/woxingxiao/VectorCompatTextView" target="_blank" rel="noopener">VectorCompatTextView</a>，轻松compile到项目中使用。他还特意添加了一个实用功能——tint染色——可以选择是否让图标与文字颜色一样，这样就不必关心xml里的fillColor属性了。用例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xw.repo.VectorCompatTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/color_gray_light"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Next"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:drawableRightCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:tintDrawableInTextColor</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<h2 id="MenuItem"><a href="#MenuItem" class="headerlink" title="MenuItem"></a>MenuItem</h2><p><code>MenuItem</code>就是在<code>res/menu/</code>目录下通过xml配置的菜单，适用于<code>NavigationView</code>的<code>menu属性</code>和<code>Activity</code>中<code>onCreateOptionsMenu()</code>注入的选项菜单。</p>
<h2 id="VectorDrawable-转-Bitmap"><a href="#VectorDrawable-转-Bitmap" class="headerlink" title="VectorDrawable 转 Bitmap"></a>VectorDrawable 转 Bitmap</h2><p>自定义View中也可以自由使用矢量图。<br>首先需要将<code>VectorDrawable</code> 转为 <code>Bitmap</code>，看码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromVectorDrawable</span><span class="params">(Context context, <span class="keyword">int</span> drawableId)</span> </span>&#123;</span><br><span class="line">        Drawable drawable = ContextCompat.getDrawable(context, drawableId);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            drawable = (DrawableCompat.wrap(drawable)).mutate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),</span><br><span class="line">                Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">        drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, canvas.getWidth(), canvas.getHeight());</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>执行以上方法获得一个<code>Bitmap</code>的实例（设为<code>mVectorBitmap</code>），然后再在<code>ondraw()</code>里根据你的需求画出<code>bitmap</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">     canvas.drawBitmap(mVectorBitmap, left, top, paint);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.jianshu.com/p/0555b8c1d26a" target="_blank" rel="noopener">https://www.jianshu.com/p/0555b8c1d26a</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> svg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Android中用intent传递对象的三种方法]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-Android%E4%B8%AD%E7%94%A8intent%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目中需要根据上一个Activity的数据来初始化当前Activity，考虑到启动Activity时可以传数据，那么就用intent实现了。<br>Android中，Activity和Fragment之间传递对象，可以通过将对象序列化并存入Bundle或者Intent中进行传递，也可以将对象转化为JSON字符串，进行传递。</p>
<p>序列化对象可以使用Java的<code>Serializable的接口</code>、<code>Parcelable接口</code>。转化成JSON字符串，可以使用<code>Gson</code>等库。</p>
<h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book(); </span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>); </span><br><span class="line">Author author=<span class="keyword">new</span> Author(); </span><br><span class="line">author.setId(<span class="number">1</span>); </span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>); </span><br><span class="line">book.setAuthor(author); </span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class); </span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,book); </span><br><span class="line">startActivity(intent);.</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book= (Book) getIntent().getSerializableExtra(<span class="string">"book"</span>);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="转化为JSON字符串"><a href="#转化为JSON字符串" class="headerlink" title="转化为JSON字符串"></a>转化为JSON字符串</h1><p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,<span class="keyword">new</span> Gson().toJson(book));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String bookJson=getIntent().getStringExtra(<span class="string">"book"</span>);</span><br><span class="line">Book book=<span class="keyword">new</span> Gson().fromJson(bookJson,Book.class);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="使用Parcelable"><a href="#使用Parcelable" class="headerlink" title="使用Parcelable"></a>使用Parcelable</h1><p>实现Parcelable接口需要实现两个方法</p>
<p><code>describeContents</code>方法。内容接口描述，默认返回0就可以;</p>
<p><code>writeToParcel</code>方法。将传递的数据打包到Parcel容器中。</p>
<p>除了要实现这两个方法还必须创建一个<code>Parcelable.Creator</code>接口的实例，用于读取Parcel容器中的数据</p>
<p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//该方法将类的数据写入外部提供的Parcel中.即打包需要传递的数据到Parcel容器保存，</span></span><br><span class="line">        <span class="comment">// 以便从parcel容器获取数据</span></span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(id);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Author&gt; CREATOR=<span class="keyword">new</span> Creator&lt;Author&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Author <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层。</span></span><br><span class="line">            Author author=<span class="keyword">new</span> Author();</span><br><span class="line">            author.setName(source.readString());</span><br><span class="line">            author.setId(source.readInt());</span><br><span class="line">            <span class="keyword">return</span> author;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Author[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="comment">//创建一个类型为T，长度为size的数组，仅一句话（return new T[size])即可。方法是供外部类反序列化本类数组使用。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Author[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(title);</span><br><span class="line">        dest.writeParcelable(author,flags);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Book&gt; CREATOR=<span class="keyword">new</span> Creator&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            Book book=<span class="keyword">new</span> Book();</span><br><span class="line">            book.setTitle(source.readString());</span><br><span class="line">            book.setAuthor(source.&lt;Author&gt;readParcelable(Author.class.getClassLoader()));</span><br><span class="line">            <span class="keyword">return</span> book;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Book[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Book[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>,book);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book=getIntent().getParcelableExtra(<span class="string">"book"</span>);</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>经过测试，我们得到下图的效果</p>
<p><img src="/assets/blog/img/2018-02-25/1.png" width="700"></p>
<h1 id="简化Parcel操作"><a href="#简化Parcel操作" class="headerlink" title="简化Parcel操作"></a>简化Parcel操作</h1><p>可以看出，通过转换为字符串的速度是最慢的。<code>Seralizable</code>次之，<code>Parcelable</code>比<code>Seralizable</code>快10倍。所以从性能上考虑，我们必定优先选择<code>Parcelable</code>。但是<code>Parcelable</code>有大量重复的模板代码，如何简化这些操作，将是下面主要讲解的内容。</p>
<p>如果你使用<code>android Studio</code> 可以通过安装<a href="https://github.com/mcharmas/android-parcelable-intellij-plugin" target="_blank" rel="noopener">android-parcelable-intellij-plugin</a>插件，或者自己配置模板进行操作。</p>
<h2 id="parceler"><a href="#parceler" class="headerlink" title="parceler"></a>parceler</h2><p>除了上面的操作，还有大量的第三方库来简化Parcelable操作。当然使用这些库也许会降低Parcelable的性能。Parceler就是这样一个库。</p>
<p>Parceler使用非常简单，在定义Model时用<code>@Parcel</code>进行注解，在传递数据的时候使用Parcels的wrap方法来包装成一个Parcelable对象。获取数据时用Parcels的unwrap方法来获取对象。</p>
<p>Model<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Parcel</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//setter &amp; getter...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Parcel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    String title;</span><br><span class="line">    Author author;</span><br><span class="line">    <span class="comment">//setter &amp; getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book book=<span class="keyword">new</span> Book();</span><br><span class="line">book.setTitle(<span class="string">"Java编程思想"</span>);</span><br><span class="line">Author author=<span class="keyword">new</span> Author();</span><br><span class="line">author.setId(<span class="number">1</span>);</span><br><span class="line">author.setName(<span class="string">"Bruce Eckel"</span>);</span><br><span class="line">book.setAuthor(author);</span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"book"</span>, Parcels.wrap(book));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book= Parcels.unwrap(getIntent().getParcelableExtra(<span class="string">"book"</span>));</span><br><span class="line">Log.d(TAG,<span class="string">"book title-&gt;"</span>+book.getTitle());</span><br><span class="line">Log.d(TAG,<span class="string">"book author name-&gt;"</span>+book.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<p>除了Parceler之外，还有如<a href="https://github.com/frankiesardo/auto-parcel" target="_blank" rel="noopener">auto-parcel</a>,<a href="https://github.com/foxykeep/ParcelableCodeGenerator" target="_blank" rel="noopener">ParcelableCodeGenerator</a>,<a href="https://github.com/baoyongzhang/ParcelableGenerator" target="_blank" rel="noopener">ParcelableGenerator</a>等第三方库，这里我将不进行讲解，有兴趣的朋友，可以自行研究。</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0104/2256.html" target="_blank" rel="noopener">Android中传递对象的三种方法</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 比较Fragment中获取Context对象的两种方法]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-%E6%AF%94%E8%BE%83Fragment%E4%B8%AD%E8%8E%B7%E5%8F%96Context%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们在使用<code>Fragment</code>的时候经常需要传递<code>Context</code>类型的参数，比如弹出一个<code>dialog</code>，而<code>Fragment</code>自己又不是一个<code>Context</code>类型的对象，于是我们有下面两种方法获取<code>Context</code>对象。</p>
<h1 id="两种方法介绍"><a href="#两种方法介绍" class="headerlink" title="两种方法介绍"></a>两种方法介绍</h1><ol>
<li><code>this.getActivity()</code>（可以不写this.）</li>
</ol>
<p>在<code>Fragment</code>中直接调用<code>getActivity()</code>方法，可以直接得到<code>Fragment</code>依附的<code>Activity</code>，而<code>Activity</code>是一个<code>Context</code>类型的对象。</p>
<ol>
<li>获取<code>Application</code>对象</li>
</ol>
<p>如下自己写一个<code>MyApplication</code>类继承<code>Application</code>，通过<code>getInstance</code>获取一个<code>Application</code>类型的对象，也是<code>Context</code>对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyApplication mInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> MyApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="两种方法比较"><a href="#两种方法比较" class="headerlink" title="两种方法比较"></a>两种方法比较</h1><ol>
<li>this.getActivity()</li>
</ol>
<ul>
<li>优点：不需要写<code>MyApplication</code>类</li>
<li>缺点：<code>Fragment</code>很容易被销毁，调用<code>getActivity()</code>方法会报空指针错误（注意：并不是<code>getActivity()</code>返回值为null，而是<code>this.getActivity()</code>中的this，也就是<code>Fragment</code>自己是null，因为它已经被销毁了）</li>
</ul>
<ol>
<li>获取Application对象</li>
</ol>
<ul>
<li>优点：不会遇到类似<code>this.getActivity()</code>的空指针问题</li>
<li>缺点：某些情况下的Context必须是Activity，特别是实例化Dialog等需要依附于一个Activity的可视化的对象时传参必须是Activity对象（Toast是Android的一种通知机制，不需要依附于Activity）</li>
</ul>
<h1 id="两全其美的解决方案"><a href="#两全其美的解决方案" class="headerlink" title="两全其美的解决方案"></a>两全其美的解决方案</h1><p>1.<code>MyApplication</code>是一定要写的</p>
<p>2.写一个如下的<code>BaseFragment</code>类：所有的<code>Fragment</code>都继承这个<code>BaseFragment</code>,直接通过<code>getContext()</code>方法即可得到<code>Context</code>对象，当然实例化Dialog等需要依附于<code>Activity</code>的对象时，还是老老实实的<code>getActivity()</code>吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activity == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> MyApplication.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(activity);</span><br><span class="line">        activity = getActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】快速构建APP BottomNavigationView + ViewPager + Fragment]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-BottomNavigationView+ViewPager+Fragment%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAApp/</url>
      <content type="html"><![CDATA[<p>先上图</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-02-25/0.gif" width="400"><br></div>


<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用Android-Studio创建一个BottomNavigationView项目</p>
<p><div class="image-package"><br><img src="/assets/blog/img/2018-02-25/0.png" width="700"><br></div></p>
<h2 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h2><p>修改activity_main.xml文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.design.widget.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"?android:attr/windowBackground"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:menu</span>=<span class="string">"@menu/navigation"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建三个Fragment-布局及类"><a href="#创建三个Fragment-布局及类" class="headerlink" title="创建三个Fragment(布局及类)"></a>创建三个Fragment(布局及类)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"fragment1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inflater.inflate(R.layout.fragment1, container, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改menu-navigation-xml文件"><a href="#修改menu-navigation-xml文件" class="headerlink" title="修改menu/navigation.xml文件"></a>修改menu/navigation.xml文件</h2><p>在item项里添加上<code>android:orderInCategory</code>用于标记item的位置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_home"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_home_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_home"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_dashboard"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_dashboard_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_dashboard"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation_notifications"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orderInCategory</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_notifications_black_24dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">"@string/title_notifications"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编辑MainActivity类"><a href="#编辑MainActivity类" class="headerlink" title="编辑MainActivity类"></a>编辑MainActivity类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.BottomNavigationView;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">OnPageChangeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> BottomNavigationView navigation;</span><br><span class="line">  <span class="keyword">private</span> ViewPager viewPager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Fragment1 fragment1 = <span class="keyword">new</span> Fragment1();</span><br><span class="line">  <span class="keyword">private</span> Fragment2 fragment2 = <span class="keyword">new</span> Fragment2();</span><br><span class="line">  <span class="keyword">private</span> Fragment3 fragment3 = <span class="keyword">new</span> Fragment3();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    viewPager = (ViewPager) findViewById(R.id.viewPager);</span><br><span class="line">    <span class="comment">//添加viewPager事件监听（很容易忘）</span></span><br><span class="line">    viewPager.addOnPageChangeListener(<span class="keyword">this</span>);</span><br><span class="line">    navigation = (BottomNavigationView) findViewById(R.id.navigation);</span><br><span class="line">    navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);</span><br><span class="line"></span><br><span class="line">    viewPager.setAdapter(<span class="keyword">new</span> FragmentPagerAdapter(getSupportFragmentManager()) &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment1;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment2;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> fragment3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class="line">      = <span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//点击BottomNavigationView的Item项，切换ViewPager页面</span></span><br><span class="line">      <span class="comment">//menu/navigation.xml里加的android:orderInCategory属性就是下面item.getOrder()取的值</span></span><br><span class="line">      viewPager.setCurrentItem(item.getOrder());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//页面滑动的时候，改变BottomNavigationView的Item高亮</span></span><br><span class="line">    navigation.getMenu().getItem(position).setChecked(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这么简单，快拿去添加自己的逻辑吧！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ViewPager </tag>
            
            <tag> Fragment </tag>
            
            <tag> BottomNavigationView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android TimeCat】 Java 回调及其在项目中的运用]]></title>
      <url>/2018/02/25/2018-02-25-Android-TimeCat-java%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>TImeCat</code>项目中的Activity和Fragment是分开管理的，有需求是点击ActionBar上的刷新，对应的fragment就重新拉取数据，或者在fragment中选择日期，对应在activity的标题位置要更新日期，考虑到性能问题，用回调实现。</p>
<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>以前不理解什么叫回调，天天听人家说加一个回调方法啥的，心里想我草，什么叫回调方法啊？然后自己就在网上找啊找啊找，找了很多也不是很明白，现在知道了，所谓回调：就是A类中调用B类中的某个方法C，然后B类中反过来调用A类中的方法D，D这个方法就叫回调方法，这样子说你是不是有点晕晕的，其实我刚开始也是这样不理解，看了人家说比较经典的回调方式：</p>
<p><code>Class A</code>实现接口<code>CallBack callback</code>——<code>背景1</code><br><code>class A</code>中包含一个<code>class B的引用b</code>——<code>背景2</code><br><code>class B</code>有一个参数为<code>callback</code>的方法<code>f(CallBack callback)</code>——<code>背景3</code><br>A的对象a调用B的方法 <code>f(CallBack callback)</code> ——<code>A类调用B类的某个方法 C</code><br>然后b就可以在<code>f(CallBack callback)</code>方法中调用A的方法 ——<code>B类调用A类的某个方法D</code><br>大家都喜欢用打电话的例子，好吧，为了跟上时代，我也用这个例子好了，我这个例子采用异步加回调</p>
<h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p>有一天小王遇到一个很难的问题，问题是“1 + 1 = ?”，就打电话问小李，小李一下子也不知道，就跟小王说，等我办完手上的事情，就去想想答案，小王也不会傻傻的拿着电话去等小李的答案吧，于是小王就对小李说，我还要去逛街，你知道了答案就打我电话告诉我，于是挂了电话，自己办自己的事情，过了一个小时，小李打了小王的电话，告诉他答案是2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这是一个回调接口 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 这个是小李知道答案时要调用的函数告诉小王，也就是回调函数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 是答案 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(String result)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个是小王 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * 实现了一个回调接口CallBack，相当于-----&gt;背景一 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wang</span> <span class="keyword">implements</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小李对象的引用 </span></span><br><span class="line"><span class="comment">     * 相当于-----&gt;背景二 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Li li;   </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小王的构造方法，持有小李的引用 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> li </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wang</span><span class="params">(Li li)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.li = li;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小王通过这个方法去问小李的问题 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question  就是小王要问的问题,1 + 1 = ? </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askQuestion</span><span class="params">(<span class="keyword">final</span> String question)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//这里用一个线程就是异步，  </span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">/** </span></span><br><span class="line"><span class="comment">                 * 小王调用小李中的方法，在这里注册回调接口 </span></span><br><span class="line"><span class="comment">                 * 这就相当于A类调用B的方法C </span></span><br><span class="line"><span class="comment">                 */</span>  </span><br><span class="line">                li.executeMessage(Wang.<span class="keyword">this</span>, question);   </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//小网问完问题挂掉电话就去干其他的事情了，诳街去了  </span></span><br><span class="line">        play();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"我要逛街去了"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小李知道答案后调用此方法告诉小王，就是所谓的小王的回调方法 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(String result)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"小李告诉小王的答案是---&gt;"</span> + result);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个就是小李啦 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Li</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 相当于B类有参数为CallBack callBack的f()----&gt;背景三 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callBack   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question  小王问的问题 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeMessage</span><span class="params">(CallBack callBack, String question)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"小王问的问题---&gt;"</span> + question);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//模拟小李办自己的事情需要很长时间  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>;i++)&#123;  </span><br><span class="line">              </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 小李办完自己的事情之后想到了答案是2 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        String result = <span class="string">"答案是2"</span>;  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 于是就打电话告诉小王，调用小王中的方法 </span></span><br><span class="line"><span class="comment">         * 这就相当于B类反过来调用A的方法D </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        callBack.solve(result);   </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * new 一个小李 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        Li li = <span class="keyword">new</span> Li();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * new 一个小王 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        Wang wang = <span class="keyword">new</span> Wang(li);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 小王问小李问题 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        wang.askQuestion(<span class="string">"1 + 1 = ?"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面的那个例子你是不是差不多明白了回调机制呢，上面是一个异步回调，我们看看同步回调吧，<code>onClick()</code>方法</p>
<h1 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h1><p>现在来分析分析下Android View的点击方法<code>onclick()</code>;我们知道<code>onclick()</code>是一个回调方法，当用户点击<code>View</code>就执行这个方法，我们用<code>Button</code>来举例好了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是View的一个回调接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Called when a view has been clicked. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v The view that was clicked. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demoactivity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.view.View;  </span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个就相当于Class A </span></span><br><span class="line"><span class="comment"> * 实现了 OnClickListener接口----&gt;背景一 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Class A 包含Class B的引用-----&gt;背景二 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Button button;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        button = (Button)findViewById(R.id.button1);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * Class A 调用View的方法,而Button extends View-----&gt;A类调用B类的某个方法 C </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 用户点击Button时调用的回调函数，你可以做你要做的事 </span></span><br><span class="line"><span class="comment">     * 这里我做的是用Toast提示OnClick </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        Toast.makeText(getApplication(), <span class="string">"OnClick"</span>, Toast.LENGTH_LONG).show();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是<code>View</code>类的<code>setOnClickListener</code>方法，就相当于B类咯，只把关键代码贴出来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 这个View就相当于B类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaanming </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Listener used to dispatch click events. </span></span><br><span class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK. </span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">protected</span> OnClickListener mOnClickListener;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * setOnClickListener()的参数是OnClickListener接口------&gt;背景三 </span></span><br><span class="line"><span class="comment">     * Register a callback to be invoked when this view is clicked. If this view is not </span></span><br><span class="line"><span class="comment">     * clickable, it becomes clickable. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l The callback that will run </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setClickable(boolean) </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (!isClickable()) &#123;  </span><br><span class="line">            setClickable(<span class="keyword">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        mOnClickListener = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Call this view's OnClickListener, if it is defined. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false </span></span><br><span class="line"><span class="comment">     *         otherwise is returned. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (mOnClickListener != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            playSoundEffect(SoundEffectConstants.CLICK);  </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//这个不就是相当于B类调用A类的某个方法D，这个D就是所谓的回调方法咯  </span></span><br><span class="line">            mOnClickListener.onClick(<span class="keyword">this</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子就是Android典型的回调机制，看完这个你是不是更进一步的理解了回调机制呢？ 线程<code>run()</code>也是一个回调方法，当执行Thread的<code>start()</code>方法就会回调这个<code>run()</code>方法，还有处理消息都比较经典等等</p>
<h1 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h1><p>点击Activity的刷新按钮，对应fragment重新拉取数据</p>
<p>为了简明起见，压缩代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        RefreshFragment refreshFragment = <span class="keyword">new</span> RefreshFragment();</span><br><span class="line">        setOnRefreshClickListener(refreshFragment); <span class="comment">// refreshFragment实现了回调接口，把fragment传进来即可</span></span><br><span class="line"></span><br><span class="line">        button = (Button)findViewById(R.id.button1);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="keyword">if</span> (onRefreshClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                onRefreshClickListener.OnRefresh();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他代码</span></span><br><span class="line">    OnRefreshClickListener onRefreshClickListener;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnRefreshClickListener</span><span class="params">(OnRefreshClickListener onRefreshClickListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onRefreshClickListener = onRefreshClickListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RefreshFragment.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">OnRefreshClickListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略其他代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在这里实现刷新数据，例如</span></span><br><span class="line">        <span class="keyword">if</span> (mAdapter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OnRefreshClickListener.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnRefreshClickListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnRefresh</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新手一般会踩的坑<a href="https://stackoverflow.com/questions/23811904/cyclic-inheritance-when-implementing-inner-interface-in-enum" target="_blank" rel="noopener">循环继承</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/xiaanming/article/details/8703708/" target="_blank" rel="noopener">一个经典例子让你彻彻底底理解java回调机制</a></li>
<li><a href="http://blog.csdn.net/gaolei1201/article/details/47084111" target="_blank" rel="noopener">Android实战之 万能的接口回调</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> 回调 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github issue 的用法]]></title>
      <url>/2018/01/31/2018-01-31-github-issue-usage/</url>
      <content type="html"><![CDATA[<p>小结一下GitHub上的issues功能，很有意思。</p>
<p>今天玩了一下gitment，尝试在博客中加上评论功能。</p>
<p>测试gitment的功能之后想删除测试的issue，但发现是删不掉的！！！如同版本提交commits，也是删不掉的。另外，对应issues的每一个操作都会记录下来。<br>这样的设计应该是有原因的，现在想不明白，以后再探究吧。<br>今天也大概了解了一下GitHub的API，也挺好玩的。</p>
<h1 id="issues的属性"><a href="#issues的属性" class="headerlink" title="issues的属性"></a>issues的属性</h1><p>GitHub中每一个仓库都会有对应的一个issues的功能，issues中可以新建多个issue，每一个issue就像一篇文章，有标题和内容，还有评论。另外，每个issue都有唯一的编号“#n”。 issue可以设置：Opened和Closed两种状态。</p>
<p>issue 还可以有额外的属性：</p>
<ul>
<li>Labels，标签。包括bug、invalid等，可以自定义。表示issue的类型，解决的方式。</li>
<li>Milestone，里程碑。通常用来做版本管理，v0.1、v1.0之类的，也可以是任意自定义字符串。一个里程碑对应的所有 issue 都被关闭后，这个里程碑会被自动认为已经达成。</li>
<li>Assignee，责任人。指定这个issue由谁负责来解决。</li>
</ul>
<h1 id="个人如何利用issues的功能？"><a href="#个人如何利用issues的功能？" class="headerlink" title="个人如何利用issues的功能？"></a>个人如何利用issues的功能？</h1><p>GitHub 的<code>issue</code>功能，对个人而言，就如同 <code>TODO list</code>。</p>
<p>可以把所有想要在下一步完成的工作，如<code>feature 添加</code>、<code>bug 修复</code>等，都写成一个个的 <code>issue</code> ，放在上面。既可以作为提醒，也可以统一管理。 另外，每一次 <code>commit</code> 都可以选择性的与某个 <code>issue</code> 关联。比如在 <code>message</code> 中添加 <code>#n</code>，就可以与第 <code>n</code> 个 <code>issue</code> 进行关联。 <code>commit message title, #1</code> 这个提交会作为一个 <code>comment</code> ，出现在编号为<code>1</code>的 <code>issue</code> 记录中。 如果添加：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fix #n</span><br><span class="line">fixes #n</span><br><span class="line">fixed #n</span><br><span class="line">close #n</span><br><span class="line">closes #n</span><br><span class="line">closed #n</span><br></pre></td></tr></table></figure></p>
<p>比如<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit <span class="keyword">message</span> title, fix <span class="comment">#n</span></span><br></pre></td></tr></table></figure></p>
<p>则可以自动关闭第 <code>n</code> 个 <code>issue</code>，即<code>issue</code>的状态从<code>Opened</code>变成了<code>Closed</code>。</p>
<p>充分利用这些功能，让每一个 <code>commit</code> 的意义更加明确，可以起到了良好的过程管理作用，使得这个Git库的项目进度更加显然。而且，这也是项目后期，写文档的绝佳素材。</p>
<h2 id="团队如何利用issues的功能？"><a href="#团队如何利用issues的功能？" class="headerlink" title="团队如何利用issues的功能？"></a>团队如何利用issues的功能？</h2><p>对团队而言，这就是一个协作系统。</p>
<p>现在，很多大公司的软件研发团队协作，都是通过JIRA来实现的。</p>
<p>目前也流行很多非代码的团队协作，比如teambition、Tower.im、Worktile、trello等。</p>
<p>其实，GitHub 的issues，就是一个轻量级协作系统。它的comment支持<code>GitHub Flavored Markdown</code>，可以进行内容丰富的交流。</p>
<p>Git本身就是分布式的代码版本控制软件，是为了程序员的协作而设计的。而 issues 的 Assignee 功能，就是这个在线协作系统的核心，足以让一群线上的开发者，一起完成一个软件项目。</p>
<h2 id="作为一个路人如何给别人的项目提bug？"><a href="#作为一个路人如何给别人的项目提bug？" class="headerlink" title="作为一个路人如何给别人的项目提bug？"></a>作为一个路人如何给别人的项目提bug？</h2><p>用 issues 给别人的项目提 bug。</p>
<h2 id="其他利用？"><a href="#其他利用？" class="headerlink" title="其他利用？"></a>其他利用？</h2><ul>
<li>可以拿来写blog，虽然很丑…也不方便</li>
<li>可以做评论的后端，比如gitment</li>
<li>可以拿来给小组成员交作业，进行项目管理（我的一个同学就是这么搞，感觉很挫…）</li>
<li>更多。。。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Github Issue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[添加Gitment评论系统踩过的坑]]></title>
      <url>/2018/01/31/2018-01-31-gitment/</url>
      <content type="html"><![CDATA[<h1 id="备忘-配置流程"><a href="#备忘-配置流程" class="headerlink" title="备忘-配置流程"></a>备忘-配置流程</h1><h2 id="在setting-OAuth-Application-注册页面完成注册"><a href="#在setting-OAuth-Application-注册页面完成注册" class="headerlink" title="在setting - OAuth Application 注册页面完成注册"></a>在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">setting - OAuth Application 注册页面</a>完成注册</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application <span class="string">Name:</span> gitment 评论 <span class="comment">//随便填</span></span><br><span class="line">Homepage <span class="string">Url:</span> <span class="string">http:</span><span class="comment">//XiChen.pub //自己的域名</span></span><br><span class="line">Application <span class="string">description:</span> <span class="comment">//随便填，留空也可以</span></span><br><span class="line">Authorization Callback <span class="string">URL:</span> <span class="string">http:</span><span class="comment">//XiChen.pub //自己的域名</span></span><br></pre></td></tr></table></figure>
<p>注册成功后会得到<code>Client ID</code>和<code>Client Secret</code></p>
<h2 id="在-config-yaml添加"><a href="#在-config-yaml添加" class="headerlink" title="在_config.yaml添加"></a>在<code>_config.yaml</code>添加</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">''</span> <span class="comment">#页面 ID, 可选。默认为 location.href</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">linxueyuanstdio</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">linxueyuanstdio.github.io</span> <span class="comment">#存储评论的 repo</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="string">'2f7f71f1ba398039ff23'</span> <span class="comment">#你的 Client ID</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">'3ebc908a7042fef2d56a83a2eb8c18777374a087'</span> <span class="comment">#你的 Client secret</span></span><br></pre></td></tr></table></figure>
<h2 id="在comment-ejs添加"><a href="#在comment-ejs添加" class="headerlink" title="在comment.ejs添加"></a>在<code>comment.ejs</code>添加</h2><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (theme.gitment.client_id &amp;&amp; theme.gitment.client_secret &amp;&amp; theme.gitment.enable )&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitment_container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var gitment = new Gitment(&#123;</span></span><br><span class="line"><span class="xml">        id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> page.title </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        owner: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.owner </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        repo: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.repo </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        oauth: &#123;</span></span><br><span class="line"><span class="xml">            client_id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.client_id </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">            client_secret: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> theme.gitment.client_secret </span><span class="xml"><span class="tag">%&gt;</span>',</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">    gitment.render('gitment_container')</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>其实到这里差不多已经配置好了 只需要初始化一下</p>
<ol>
<li>发布你的页面</li>
<li>然后在评论框登录你的github账号，必须跟第二步owner用户名相同的账号</li>
<li>登录之后点击初始化按钮</li>
</ol>
<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="Error：NOT-FOUND"><a href="#Error：NOT-FOUND" class="headerlink" title="Error：NOT FOUND"></a>Error：NOT FOUND</h2><p>owner或者repo配置错误了，照着第二步来就好，网页端生成后如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="actionscript">        id: <span class="string">'blog comment'</span>,</span></span><br><span class="line"><span class="actionscript">        owner: <span class="string">'linxueyuanstdio'</span>,</span></span><br><span class="line"><span class="actionscript">        repo: <span class="string">'linxueyuanstdio.github.io'</span>,</span></span><br><span class="line"><span class="undefined">        oauth: &#123;</span></span><br><span class="line"><span class="actionscript">            client_id: <span class="string">'2f7f71f1ba398039ff23'</span>,</span></span><br><span class="line"><span class="actionscript">            client_secret: <span class="string">'3ebc908a7042fef2d56a83a2eb8c18777374a087'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="actionscript">    gitment.render(<span class="string">'gitment_container'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h2 id="Error-Comments-Not-Initialized"><a href="#Error-Comments-Not-Initialized" class="headerlink" title="Error: Comments Not Initialized"></a>Error: Comments Not Initialized</h2><ul>
<li>在注册<code>OAuth Application</code>这个步骤中，给<code>Authorization callback URL</code>指定的地址错了</li>
<li>还没有在该页面的Gitment评论区登陆GitHub账号</li>
</ul>
<h2 id="初始化时在评论框点击登录，但是没有跳到授权页面"><a href="#初始化时在评论框点击登录，但是没有跳到授权页面" class="headerlink" title="初始化时在评论框点击登录，但是没有跳到授权页面"></a>初始化时在评论框点击登录，但是没有跳到授权页面</h2><p>不要在本地测试，因为在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">setting - OAuth Application 注册页面</a>填的<code>Authorization Callback URL</code>是自己的域名，不是本地调试的域名，比如<code>http://localhost:4000/</code>。当然，蛋疼的话可以另外申请一个<code>OAuth Application</code>填<code>http://localhost:4000/</code>也是可以的。</p>
<h2 id="Error：validation-failed"><a href="#Error：validation-failed" class="headerlink" title="Error：validation failed"></a>Error：validation failed</h2><p>看开发者工具的console，跟踪过去</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="keyword">to</span> load resource: the<span class="built_in"> server </span>responded with a status of 422 (Unprocessable Entity)</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST https:<span class="regexp">//</span>api.github.com<span class="regexp">/repos/</span>linxueyuanstdio<span class="regexp">/linxueyuanstdio.github.io/i</span>ssues <span class="number">422</span> (Unprocessable Entity)</span><br></pre></td></tr></table></figure>
<p>在<code>Network</code>那里找到原因，是id不合法。原来的gitment有一项id配置成了<code>window.location.pathname</code>，但仍报错。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/0.png" width="700"><br></div>

<p>尝试去掉id，留空行不行？按官网文档应该可以的，但是报错=. =。</p>
<p>思考一下，设定的id给评论对应的issue一个label，这个label的值就是id的值，那么id的作用应该是使issue和文章通过label连接在一起。</p>
<p>那么写死<code>id: &#39;blog comment&#39;</code>行不行呢？不行，每篇文章的评论是要根据id动态加载的，写死的话导致所有的文章共享一个issue。</p>
<p>麻痹，感觉这篇文章坑了我<a href="https://extremegtr.github.io/2017/09/07/Add-Gitment-comment-system-to-hexo-theme-NexT/" target="_blank" rel="noopener">添加Gitment评论系统到Hexo主题NexT</a>，而且官网的默认配置（把id留空）不对。</p>
<p>冷静，继续追踪</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/2.png" width="700"><br></div>

<p>传值是对的呀…</p>
<p>既然知道传值对了，id的作用也清楚了，难道是GitHub在搞事情？</p>
<p>去新建一个label，把值复制进去…</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-31/1.png" width="700"><br></div>

<p>卧槽，真的有长度限制！</p>
<p>那就简单了，只取title做id，平时写标题不要太浪~~~</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">id: '<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> page.title </span><span class="xml"><span class="tag">%&gt;</span>'</span></span><br></pre></td></tr></table></figure>
<h3 id="2018-02-25更新"><a href="#2018-02-25更新" class="headerlink" title="2018-02-25更新"></a>2018-02-25更新</h3><p>最近在整理项目开发的系列文章，发现标题不是想不浪就能克制得住的哇。评论中<a href="https://github.com/iHTCboy" target="_blank" rel="noopener">iHTCboy</a>的解决方法很有通用性，就采用他的方法好了。</p>
<p>主要思想是用时间作id</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span>: '&lt;%= page.<span class="built_in">date</span> %&gt;'</span><br></pre></td></tr></table></figure>
<p>这样传给github的标签是定长的，不会超过长度限制。同时<code>date</code>可以自己写，只要精确到分秒，区分文章不是问题。Good job!</p>
<p>哇！！！写标题快浪起来！！！</p>
<ul>
<li>PS：一个date的例子：<code>date: 2018-02-25 11:48:00.000000000+8:00</code> 更改后面的0可以达到毫秒微秒纳秒级别</li>
<li>PS：<a href="https://github.com/xjzsq" target="_blank" rel="noopener">xjzsq</a>的方法也很好，思想是用副标题作id，可以看下<a href="http://www.xjdesyxx.top/2018/02/07/errsln/" target="_blank" rel="noopener">他的文章</a></li>
</ul>
<h2 id="大小写问题"><a href="#大小写问题" class="headerlink" title="大小写问题"></a>大小写问题</h2><p>配置项中，可能github账号中含大小写，比如我的是<code>LinXueyuanStdio</code>，但是在配置时不用关心大小写问题，因为POST的时候一律转成小写</p>
<h2 id="测试时产生的issue何去何从"><a href="#测试时产生的issue何去何从" class="headerlink" title="测试时产生的issue何去何从"></a>测试时产生的issue何去何从</h2><p>删不掉的，死心吧。<br>不过可以改title，改内容，改label等等，对应issues的每一个操作都会记录下来。<br>另外，版本提交的commits，也是删不掉的。</p>
<p>顺便总结一下<a href="http://xichen.pub/2018/01/31/2018-01-31-github-issue-usage/">github issue 的用法</a></p>
<p>参考：</p>
<ul>
<li><a href="https://extremegtr.github.io/2017/09/07/Add-Gitment-comment-system-to-hexo-theme-NexT/" target="_blank" rel="noopener">添加Gitment评论系统到Hexo主题NexT</a></li>
<li><a href="http://vayi.site/2017/08/16/Hexo-gitment/" target="_blank" rel="noopener">Hexo+gitment</a></li>
<li><a href="https://imsun.net/posts/gitment-introduction/#more" target="_blank" rel="noopener">Gitment：使用 GitHub Issues 搭建评论系统</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitment </tag>
            
            <tag> github </tag>
            
            <tag> github issue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 3]]></title>
      <url>/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>中，我们构建了一个简单的投票dapp，并在本地机器上运行。在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们将应用程序移动到使用<code>truffle</code>框架，并将其部署到公共Ropsten testnet，并通过<code>truffle</code>控制台和网页进行交互。在本节中，我们将添加更多的功能到我们的投票dapp</p>
<p>学习内容：</p>
<ol>
<li>使用像struct这样的新数据类型来组织和存储区块链上的数据。</li>
<li>tokens的概念及其用法。</li>
<li>使用Ethereum区块链平台的货币Ether进行支付。</li>
</ol>
<p>可以在这个仓库的<code>chapter3</code>目录中找到所有的代码：<a href="https://github.com/maheshmurthy/ethereum_voting_dapp" target="_blank" rel="noopener">https://github.com/maheshmurthy/ethereum_voting_dapp</a></p>
<p>在大选中，每个公民都会为自己喜欢的候选人投一票。然而，有的选举如选举股东的公司董事会，可以根据你在该公司拥有的股份数量进行投票。所以，你拥有的股票越多，得到的选票就越多。</p>
<p>为了支持这种选举，我们来增强我们的投票权。我们将增加购买公司股票的功能。然后他们可以用这些股票投票给候选人。我们还将添加一个功能来查找选民信息。在以太坊区块链世界中，这些股票通常被称为代币，将这些共享作为tokens。</p>
<p>如果你想跳过所有的解释，只想看看合同文件，你可以在这里找到它：<a href="https://github.com/maheshmurthy/ethereum_voting_dapp/blob/master/chapter3/contracts/Voting.sol。" target="_blank" rel="noopener">https://github.com/maheshmurthy/ethereum_voting_dapp/blob/master/chapter3/contracts/Voting.sol。</a></p>
<p>第一步是声明我们需要存储所有我们感兴趣的信息的变量。下面是有解释的合同变量。</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// We use the struct datatype to store the voter information.</span><br><span class="line">  struct voter &#123;</span><br><span class="line">    address voterAddress; // The address of the voter</span><br><span class="line">    uint tokensBought;    // The total no. of tokens this voter owns</span><br><span class="line">    uint[] tokensUsedPerCandidate; // Array to keep track of votes per candidate.</span><br><span class="line">    /* We have an<span class="built_in"> array </span>called candidateList initialized below.</span><br><span class="line">     Every time this voter votes with her tokens, the value at that</span><br><span class="line">     index is incremented. Example,<span class="built_in"> if </span>candidateList<span class="built_in"> array </span>declared</span><br><span class="line">     below has [<span class="string">"Rama"</span>, <span class="string">"Nick"</span>, <span class="string">"Jose"</span>]<span class="built_in"> and </span>this</span><br><span class="line">     voter votes 10 tokens to Nick, the tokensUsedPerCandidate[1] </span><br><span class="line">     will be incremented by 10.</span><br><span class="line">     */</span><br><span class="line">  &#125;</span><br><span class="line">/* mapping is equivalent to an associate<span class="built_in"> array </span>or hash.</span><br><span class="line"> The key of the mapping is candidate name stored as type bytes32 </span><br><span class="line"><span class="built_in"> and </span>value is an unsigned integer which used to store the vote </span><br><span class="line"> count</span><br><span class="line"> */</span><br><span class="line">mapping (bytes32 =&gt; uint)<span class="keyword"> public</span> votesReceived;</span><br><span class="line">mapping (address =&gt; voter)<span class="keyword"> public</span> voterInfo;</span><br><span class="line">/* Solidity doesn't let you<span class="built_in"> return </span>an<span class="built_in"> array </span>of strings yet. We will </span><br><span class="line"> use an<span class="built_in"> array </span>of bytes32 instead to store the list of candidates</span><br><span class="line"> */</span><br><span class="line">bytes32[]<span class="keyword"> public</span> candidate<span class="class">List;</span></span><br><span class="line">uint<span class="keyword"> public</span> totalTokens; // Total no. of tokens available for this election</span><br><span class="line">uint<span class="keyword"> public</span> balanceTokens; // Total no. of tokens still available for purchase</span><br><span class="line">uint<span class="keyword"> public</span> tokenPrice; // Price per token</span><br></pre></td></tr></table></figure>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>和<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们初始化了在构造函数中竞争的候选者列表。但是，在合约部署在区块链上时，构造函数只会被调用一次。在这里，我们还必须初始化可用于销售的token总数和每个token的成本。所以，我们更新我们的合约构造函数，如下所示：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* When the contract is deployed on the blockchain, we will </span></span><br><span class="line"><span class="comment"> initialize the total number of tokens for sale, cost per token and</span></span><br><span class="line"><span class="comment"> all the candidates</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  function Voting(uint tokens, uint pricePerToken, <span class="keyword">bytes32[] </span>candidateNames) public &#123;</span><br><span class="line">    candidateList = candidateNames<span class="comment">;</span></span><br><span class="line">    totalTokens = tokens<span class="comment">;</span></span><br><span class="line">    <span class="keyword">balanceTokens </span>= tokens<span class="comment">;</span></span><br><span class="line">    tokenPrice = pricePerToken<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>truffle</code>中，使用<code>migration</code>将代码部署到区块链。可以在<a href="">这里</a>查看迁移文件。<code>truffle</code>的<code>migration</code>文件中的示例部署调用如下所示：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">deployer</span><span class="selector-class">.deploy</span>(Voting, <span class="number">1000</span>, web3.toWei(<span class="string">'0.1'</span>, <span class="string">'ether'</span>), [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>]);</span><br></pre></td></tr></table></figure>
<p>现在我们已经初始化了token并设置了价格，让我们看看有人可以通过支付以太币来购买这些<code>token</code>。这是购买<code>token</code>的函数。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is used to purchase the tokens. Note the keyword </span></span><br><span class="line"><span class="comment"> 'payable' below. By just adding that one keyword to a function, </span></span><br><span class="line"><span class="comment"> your contract can now accept Ether from anyone who calls this </span></span><br><span class="line"><span class="comment"> function. Accepting money can not get any easier than this!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">function <span class="title">buy</span>(<span class="params"></span>) payable <span class="keyword">public</span> <span class="title">returns</span> (<span class="params"><span class="keyword">uint</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">uint</span> tokensToBuy = msg.<span class="keyword">value</span> / tokenPrice;</span><br><span class="line">    <span class="keyword">if</span> (tokensToBuy &gt; balanceTokens) <span class="keyword">throw</span>;</span><br><span class="line">    voterInfo[msg.sender].voterAddress = msg.sender;</span><br><span class="line">    voterInfo[msg.sender].tokensBought += tokensToBuy;</span><br><span class="line">    balanceTokens -= tokensToBuy;</span><br><span class="line">    <span class="keyword">return</span> tokensToBuy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个示例购买电话如下所示</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">truffle</span>(development)&gt; <span class="selector-tag">Voting</span><span class="selector-class">.deployed</span>()<span class="selector-class">.then</span>(function(contract) &#123;<span class="selector-tag">contract</span><span class="selector-class">.buy</span>(&#123;<span class="attribute">value</span>: web3.toWei(<span class="string">'1'</span>, <span class="string">'ether'</span>), <span class="attribute">from</span>: web3.eth.accounts[<span class="number">1</span>]&#125;)&#125;)</span><br></pre></td></tr></table></figure>
<p><code>value: web3.toWei(‘1’, ‘ether’)</code>参数使用<code>msg.value</code>在<code>buy()</code>函数访问和<code>msg.sender</code>给我们<code>web3.eth.accounts[1]</code>的帐户地址。假设每个标记的值为0.1 Ether，则<code>web3.eth.accounts[1]</code>将接收1个Ether/0.1Ether=10tokens。</p>
<p>让我们休息一会儿，看看代码，并可视化账户（选民）和合同之间的交互。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-27/0.png" width="700"><br></div>

<p><code>index.html</code>文件更新：</p>
<ul>
<li>为了投票给候选人，你现在必须指定否。您想要投票的标记。</li>
<li>有一个新的部分，你可以购买令牌。</li>
<li>现在可以查询选民信息 - 他们拥有多少令牌，不可以。他们投给了每个候选人。</li>
<li>候选人不再被硬编码。我们从区块链中获取候选人并填充它。</li>
<li>在app.js文件必须支持上述所有的UI功能的更新。</li>
</ul>
<p>更新部署文件<code>2_deploy_contracts.js</code>以传递总共令牌和令牌价格以及候选名称。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Voting = artifacts.require(<span class="string">"./Voting.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Voting, <span class="number">1000</span>, web3.toWei(<span class="string">'0.1'</span>, <span class="string">'ether'</span>), [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>总而言之，在本教程中更新的四个文件是<code>Voting.sol</code>，<code>index.html</code>，<code>app.js</code>和<code>2_deploy_contracts.js</code>。一旦你用这些文件更新了<code>truffle</code>储存库，我们可以将合同部署到区块链。部署过程与之前的教程完全相同。</p>
<p>只需要使用<code>truffle</code>命令进行编译和<code>migrate</code>。</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> truffle migrate</span><br><span class="line"><span class="keyword">Using</span> network <span class="string">'development'</span>.</span><br><span class="line">Compiling Migrations.sol...</span><br><span class="line">Compiling Voting.sol...</span><br><span class="line">Writing artifacts to ./build/contracts</span><br><span class="line">Running migration: <span class="number">1</span>_initial_migration.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Migrations...</span><br><span class="line">Migrations: <span class="number">0xc9249947010675b8a3b1defb12334148f7f59010</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line">Running migration: <span class="number">2</span>_deploy_contracts.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Voting...</span><br><span class="line">Voting: <span class="number">0x795d6d1f7cf467f27e48181da5f1ebd5bbd0a8df</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br></pre></td></tr></table></figure>
<p>如果您能够成功部署合同并启动您的Web服务器，则您的页面如下所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-27/1.png" width="700"><br></div>

<p>将能够购买<code>tokens</code>，使用<code>tokens</code>投票给候选人并根据他们的地址查找选举人信息。如果你能够得到所有这些功能，Congratulation！</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 2]]></title>
      <url>/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a>中，我们用<code>ganache</code>在开发环境中构建了一个简单的投票应用程序。现在在真正的区块链上获得这个应用程序。</p>
<p>以太坊有2个公共区块链。</p>
<ul>
<li>Testnet（也叫Ropsten）：这是一个测试区块链。可以把它看作一个QA或一个临时服务器，它仅用于测试目的。</li>
<li>Mainnet（也叫Homestead）：这是全世界真实交易的区块链。在这个网络上使用以太网是有实际价值的。</li>
</ul>
<p>学习目标:</p>
<ol>
<li>安装<code>geth</code>用于下载区块链的客户端软件，并在本地计算机上运行以太坊节点</li>
<li>安装名为<code>Truffle</code>的Ethereum dapp框架，将用于编译和部署智能合约</li>
<li>对投票应用程序进行小小的更新，使其用<code>Truffle</code></li>
<li>将合约编译并部署到<code>Ropsten testnet</code></li>
<li>通过<code>Truffle</code>控制台，然后通过网页与合约进行交互</li>
</ol>
<h1 id="安装geth并同步区块链"><a href="#安装geth并同步区块链" class="headerlink" title="安装geth并同步区块链"></a>安装geth并同步区块链</h1><p>安装非常简单：</p>
<h2 id="在Mac上"><a href="#在Mac上" class="headerlink" title="在Mac上"></a>在Mac上</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap ethereum / ethereum mahesh </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install ethereum</span></span><br></pre></td></tr></table></figure>
<h2 id="在Ubuntu上"><a href="#在Ubuntu上" class="headerlink" title="在Ubuntu上"></a>在Ubuntu上</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install software-properties-common </span><br><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>-y ppa：ethereum / ethereum </span><br><span class="line">$ sudo apt-get update </span><br><span class="line">$ sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>
<p>在这有各种平台的安装说明：<a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum</a></p>
<p>安装<code>geth</code>后，在命令行控制台中运行下面的命令：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="string">geth </span><span class="built_in">--testnet</span> <span class="built_in">--syncmode</span> <span class="string">"fast"</span> <span class="built_in">--rpc</span> <span class="built_in">--rpcapi</span> <span class="string">db,</span><span class="string">eth,</span><span class="string">net,</span><span class="string">web3,</span><span class="string">personal </span><span class="built_in">--cache=1024</span>  <span class="built_in">--rpcport</span> <span class="string">8545 </span><span class="built_in">--rpcaddr</span> <span class="string">127.</span>0.0.1 <span class="built_in">--rpccorsdomain</span> <span class="string">"*"</span> <span class="built_in">--bootnodes</span> <span class="string">"enode://20c9ad97c081d63397d7b685a412227a40e23c8bdc6688c6f37e97cfbc22d2b4d1db1510d8f61e6a8866ad7f0e17c02b14182d37ea7c3c8b9c2683aeb6b733a1@52.169.14.227:30303,enode://6ce05930c72abc632c58e2e4324f7c7ea478cec0ed4fa2528982cf34483094e9cbc9216e7aa349691242576d552a2a56aaeae426c5303ded677ce455ba1acd9d@13.84.180.240:30303"</span></span><br></pre></td></tr></table></figure>
<p>这将启动以太坊节点，连接到其他对等节点并开始下载区块链。下载区块链所需的时间取决于各种因素，例如您的网络连接速度，计算机上的RAM，硬盘驱动器的类型等等。在一台拥有8GB RAM和50Mbps连接的计算机上花了我10-15分钟时间。</p>
<p>在您正在运行的控制台中，您将看到如下所示的输出。寻找粗体的块号。当区块链完全同步时，区块编号和此页面上的区块编号接近：<a href="https://ropsten.etherscan.io/" target="_blank" rel="noopener">https://ropsten.etherscan.io/</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:15.116332</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>   <span class="selector-tag">32</span> <span class="selector-tag">blocks</span>,    <span class="selector-tag">49</span> <span class="selector-tag">txs</span> (  <span class="number">6.256</span> Mg) <span class="selector-tag">in</span> <span class="selector-tag">185</span><span class="selector-class">.716ms</span> (<span class="number">33.688</span> Mg/s). <span class="selector-id">#445097</span> <span class="selector-attr">[e1199364… / bce20913…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:20.267142</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">1</span> <span class="selector-tag">txs</span> (  <span class="number">0.239</span> Mg) <span class="selector-tag">in</span>  <span class="selector-tag">11</span><span class="selector-class">.379ms</span> (<span class="number">20.963</span> Mg/s). <span class="selector-id">#445097</span> <span class="selector-attr">[b4d77c46…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:21.059414</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">0</span> <span class="selector-tag">txs</span> (  <span class="number">0.000</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">7</span><span class="selector-class">.807ms</span> ( <span class="number">0.000</span> Mg/s). <span class="selector-id">#445098</span> <span class="selector-attr">[f990e694…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:34.367485</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">0</span> <span class="selector-tag">txs</span> (  <span class="number">0.000</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">4</span><span class="selector-class">.599ms</span> ( <span class="number">0.000</span> Mg/s). <span class="selector-id">#445099</span> <span class="selector-attr">[86b4f29a…]</span></span><br><span class="line"><span class="selector-tag">I0130</span> <span class="selector-tag">22</span><span class="selector-pseudo">:18</span><span class="selector-pseudo">:42.953523</span> <span class="selector-tag">core</span>/<span class="selector-tag">blockchain</span><span class="selector-class">.go</span><span class="selector-pseudo">:1064</span>] <span class="selector-tag">imported</span>    <span class="selector-tag">1</span> <span class="selector-tag">blocks</span>,     <span class="selector-tag">2</span> <span class="selector-tag">txs</span> (  <span class="number">0.294</span> Mg) <span class="selector-tag">in</span>   <span class="selector-tag">9</span><span class="selector-class">.149ms</span> (<span class="number">32.136</span> Mg/s). <span class="selector-id">#445100</span> <span class="selector-attr">[3572f223…]</span></span><br></pre></td></tr></table></figure>
<h1 id="安装Truffle框架"><a href="#安装Truffle框架" class="headerlink" title="安装Truffle框架"></a>安装Truffle框架</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g truffle</span><br></pre></td></tr></table></figure>
<h1 id="建立voting合约"><a href="#建立voting合约" class="headerlink" title="建立voting合约"></a>建立voting合约</h1><p>首先建立一个truffle project</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir voting</span><br><span class="line">$ cd voting</span><br><span class="line">$ npm install -g webpack</span><br><span class="line">$ truffle unbox webpack</span><br><span class="line">$ ls</span><br><span class="line">README<span class="selector-class">.md</span>               contracts               node_modules            test                    webpack<span class="selector-class">.config</span><span class="selector-class">.js</span>       truffle.js</span><br><span class="line">app                     migrations              package<span class="selector-class">.json</span>            </span><br><span class="line">$ ls app/</span><br><span class="line">index<span class="selector-class">.html</span>  javascripts  stylesheets</span><br><span class="line">$ ls contracts/</span><br><span class="line">ConvertLib<span class="selector-class">.sol</span>  MetaCoin<span class="selector-class">.sol</span>  Migrations.sol</span><br><span class="line">$ ls migrations/</span><br><span class="line"><span class="number">1</span>_initial_migration<span class="selector-class">.js</span>  <span class="number">2</span>_deploy_contracts.js</span><br></pre></td></tr></table></figure>
<p><code>truffle</code>创建了运行<code>dapp</code>所需的必要文件和目录。<code>truffle</code>还创建了一个示例应用程序，让你快速上手（我们不会在本教程中使用它）。可以删除<code>contracts</code>目录中的<code>ConvertLib.sol</code>和<code>MetaCoin.sol</code>文件。</p>
<p><code>migrations</code>目录很重要。这些<code>migrations</code>里文件用于将合约部署到区块链。（在上一篇文章中，我们使用了<code>VotingContract.new</code>将合约部署到区块链，现在不需要这样做）。</p>
<p><code>1_initial_migration.js</code>将一个名为<code>Migrations</code>的合约部署到区块链中，并用于存储已部署的最新合约。每次运行<code>migration</code>时，<code>truffle</code>都会查询区块链以获取已部署的最后一个合约，然后部署尚未部署的任何合约。然后更新<code>Migrations</code>合约中的<code>last_completed_migration</code>字段，以指示部署的最新合约。可以简单地将其视为一个名为<code>Migration</code>的数据库表，其中名为<code>last_completed_migration</code>的列始终保持最新状态。<a href="http://truffleframework.com/docs/getting_started/migrations" target="_blank" rel="noopener">更多</a></p>
<p>现在用上面的教程中所写的所有代码更新项目，下面将对其进行一些更改。</p>
<p>首先，将<code>Voting.sol</code>从前一个教程复制到<code>contracts</code>目录（这个文件没有改变）。</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line"><span class="comment">// We have to specify what version of compiler this code will compile with</span></span><br><span class="line"></span><br><span class="line">contract Voting &#123;</span><br><span class="line">  <span class="comment">/* mapping field below is equivalent to an associative array or hash.</span></span><br><span class="line"><span class="comment">  The key of the mapping is candidate name stored as type bytes32 and value is</span></span><br><span class="line"><span class="comment">  an unsigned integer to store the vote count</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  mapping (bytes32 =&gt; uint8) <span class="keyword">public</span> votesReceived;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Solidity doesn't let you pass in an array of strings in the constructor (yet).</span></span><br><span class="line"><span class="comment">  We will use an array of bytes32 instead to store the list of candidates</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  bytes32[] <span class="keyword">public</span> candidateList;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This is the constructor which will be called once when you</span></span><br><span class="line"><span class="comment">  deploy the contract to the blockchain. When we deploy the contract,</span></span><br><span class="line"><span class="comment">  we will pass an array of candidates who will be contesting in the election</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Voting</span><span class="params">(bytes32[] candidateNames)</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    candidateList = candidateNames;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function returns the total votes a candidate has received so far</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">totalVotesFor</span><span class="params">(bytes32 candidate)</span> <span class="title">view</span> <span class="title">public</span> <span class="title">returns</span> <span class="params">(uint8)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(validCandidate(candidate));</span><br><span class="line">    <span class="keyword">return</span> votesReceived[candidate];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function increments the vote count for the specified candidate. This</span></span><br><span class="line">  <span class="comment">// is equivalent to casting a vote</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">voteForCandidate</span><span class="params">(bytes32 candidate)</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(validCandidate(candidate));</span><br><span class="line">    votesReceived[candidate] += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validCandidate</span><span class="params">(bytes32 candidate)</span> <span class="title">view</span> <span class="title">public</span> <span class="title">returns</span> <span class="params">(bool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">uint</span> i = <span class="number">0</span>; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (candidateList[i] == candidate) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls contracts/</span></span><br><span class="line">Migrations.sol  Voting.sol</span><br></pre></td></tr></table></figure>
<p>接下来，将<code>migrations</code>目录中的<code>2_deploy_contracts.js</code>的内容替换为以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Voting = artifacts.require(<span class="string">"./Voting.sol"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Voting, [<span class="string">'Rama'</span>, <span class="string">'Nick'</span>, <span class="string">'Jose'</span>], &#123;<span class="attr">gas</span>: <span class="number">6700000</span>&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也可以在<code>truffle.js</code>中将气体值设置为全局设置。继续添加如下所示的<code>gas</code>选项，如果忘记将<code>gas</code>设置为特定的迁移文件，则默认使用全局值。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'babel-register'</span>)</span></span></span><br><span class="line">module<span class="selector-class">.exports</span> = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">'localhost'</span>,</span><br><span class="line">      port: <span class="number">8545</span>,</span><br><span class="line">      network_id: <span class="string">'*'</span>,</span><br><span class="line">      gas: <span class="number">470000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用下面的内容替换<code>app/javascripts/app.js</code>的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Import the page's CSS. Webpack will know what to do with it.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"../stylesheets/app.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import libraries we need.</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Web3&#125; <span class="keyword">from</span> <span class="string">'web3'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> contract &#125; <span class="keyword">from</span> <span class="string">'truffle-contract'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When you compile and deploy your Voting contract,</span></span><br><span class="line"><span class="comment"> * truffle stores the abi and deployed address in a json</span></span><br><span class="line"><span class="comment"> * file in the build directory. We will use this information</span></span><br><span class="line"><span class="comment"> * to setup a Voting abstraction. We will use this abstraction</span></span><br><span class="line"><span class="comment"> * later to create an instance of the Voting contract.</span></span><br><span class="line"><span class="comment"> * Compare this against the index.js from our previous tutorial to see the difference</span></span><br><span class="line"><span class="comment"> * https://gist.github.com/maheshmurthy/f6e96d6b3fff4cd4fa7f892de8a1a1b4#file-index-js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> voting_artifacts <span class="keyword">from</span> <span class="string">'../../build/contracts/Voting.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Voting = contract(voting_artifacts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> candidates = &#123;<span class="string">"Rama"</span>: <span class="string">"candidate-1"</span>, <span class="string">"Nick"</span>: <span class="string">"candidate-2"</span>, <span class="string">"Jose"</span>: <span class="string">"candidate-3"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.voteForCandidate = <span class="function"><span class="keyword">function</span>(<span class="params">candidate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> candidateName = $(<span class="string">"#candidate"</span>).val();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    $(<span class="string">"#msg"</span>).html(<span class="string">"Vote has been submitted. The vote count will increment as soon as the vote is recorded on the blockchain. Please wait."</span>)</span><br><span class="line">    $(<span class="string">"#candidate"</span>).val(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Voting.deployed() returns an instance of the contract. Every call</span></span><br><span class="line"><span class="comment">     * in Truffle returns a promise which is why we have used then()</span></span><br><span class="line"><span class="comment">     * everywhere we have a transaction call</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;</span><br><span class="line">      contractInstance.voteForCandidate(candidateName, &#123;<span class="attr">gas</span>: <span class="number">140000</span>, <span class="attr">from</span>: web3.eth.accounts[<span class="number">0</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> div_id = candidates[candidateName];</span><br><span class="line">        <span class="keyword">return</span> contractInstance.totalVotesFor.call(candidateName).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">          $(<span class="string">"#"</span> + div_id).html(v.toString());</span><br><span class="line">          $(<span class="string">"#msg"</span>).html(<span class="string">""</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">"Using web3 detected from external source like Metamask"</span>)</span><br><span class="line">    <span class="comment">// Use Mist/MetaMask's provider</span></span><br><span class="line">    <span class="built_in">window</span>.web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">"No web3 detected. Falling back to http://localhost:8545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask"</span>);</span><br><span class="line">    <span class="comment">// fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)</span></span><br><span class="line">    <span class="built_in">window</span>.web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Voting.setProvider(web3.currentProvider);</span><br><span class="line">  <span class="keyword">let</span> candidateNames = <span class="built_in">Object</span>.keys(candidates);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; candidateNames.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = candidateNames[i];</span><br><span class="line">    Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;</span><br><span class="line">      contractInstance.totalVotesFor.call(name).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#"</span> + candidates[name]).html(v.toString());</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>将<code>app/index.html</code>的内容替换为以下内容。即使这个文件与上一章几乎相同，除了包含的js文件是41行的<code>app.js</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World DApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans:400,700'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A Simple Hello World Voting Application<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Candidate<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Votes<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Rama<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Nick<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"candidate"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"voteForCandidate()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Vote<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.slim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="将合同部署到Ropsten-testnet"><a href="#将合同部署到Ropsten-testnet" class="headerlink" title="将合同部署到Ropsten testnet"></a>将合同部署到Ropsten testnet</h1><p>在部署合同之前需要一个账号和一些ether。当我们使用ganache时，它创建了10个测试帐户，并预装了100个测试用例。但是对于testnet和mainnet，我们必须创建帐户并自己添加一些ether。</p>
<p>在您的命令行终端中，执行以下操作：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.personal</span><span class="selector-class">.newAccount</span>(<span class="string">'verystrongpassword'</span>)</span><br><span class="line"><span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span></span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.eth</span><span class="selector-class">.getBalance</span>(<span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span>)</span><br><span class="line">&#123; [String: <span class="string">'0'</span>] s: <span class="number">1</span>, e: <span class="number">0</span>, c: [ <span class="number">0</span> ] &#125;</span><br><span class="line"><span class="function"><span class="title">truffle</span><span class="params">(default)</span></span>&gt; web3<span class="selector-class">.personal</span><span class="selector-class">.unlockAccount</span>(<span class="string">'0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1'</span>, <span class="string">'verystrongpassword'</span>, <span class="number">15000</span>)</span><br></pre></td></tr></table></figure>
<p>在之前的文章中，我们启动了一个节点控制台并初始化了web3对象。当我们执行<code>truffle</code>控制台，所有这一切都为我们完成，我们得到一个web3对象准备使用。我们现在有一个地址为<code>“0x95a94979d86d9c32d1d2ab5ace2dcc8d1b446fa1”</code>的帐户（您将在您的情况下有不同的地址），余额将为0。</p>
<p>可以通过传递一个额外的option<code>--mine</code>来运行geth节点来挖掘一些ether。建议更简单是从<a href="https://www.reddit.com/r/ethdev/" target="_blank" rel="noopener">reddit thread</a>获得ether 或<a href="twitter.com/cwBQ3A5cz3Jzso7">ping我</a>，我给你一些。再次尝试<code>web3.eth.getBalance</code>，以确保有ether。也可以在<code>ropsten.etherscan.io</code>上输入地址以查看帐户余额</p>
<p>现在你已经有了一些了，继续编译并将合约部署到区块链。下面是运行命令和输出</p>
<ul>
<li>在部署合同之前，记得解锁账户</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> truffle migrate</span><br><span class="line">Compiling Migrations.sol...</span><br><span class="line">Compiling Voting.sol...</span><br><span class="line">Writing artifacts to ./build/contracts</span><br><span class="line">Running migration: <span class="number">1</span>_initial_migration.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Migrations...</span><br><span class="line">Migrations: <span class="number">0x3cee101c94f8a06d549334372181bc5a7b3a8bee</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line">Running migration: <span class="number">2</span>_deploy_contracts.js</span><br><span class="line"><span class="function"><span class="title">Deploying</span></span> Voting...</span><br><span class="line">Voting: <span class="number">0xd24a32f0ee12f5e9d233a2ebab5a53d4d4986203</span></span><br><span class="line"><span class="function"><span class="title">Saving</span></span> successful migration to network...</span><br><span class="line"><span class="function"><span class="title">Saving</span></span> artifacts...</span><br><span class="line"><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<h1 id="与voting合约交互"><a href="#与voting合约交互" class="headerlink" title="与voting合约交互"></a>与voting合约交互</h1><p>成功部署合同后，现在应该能够获取投票计数并通过<code>truffle</code>控制台进行投票。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ truffle <span class="built_in">console</span></span><br><span class="line">truffle(<span class="keyword">default</span>)&gt; Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;contractInstance.voteForCandidate(<span class="string">'Rama'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;<span class="built_in">console</span>.log(v)&#125;)&#125;)</span><br><span class="line"><span class="comment">// After a few seconds, you should see a transaction receipt like this:</span></span><br><span class="line">receipt:</span><br><span class="line">&#123; <span class="attr">blockHash</span>: <span class="string">'0x7229f668db0ac335cdd0c4c86e0394a35dd471a1095b8fafb52ebd7671433156'</span>,</span><br><span class="line">blockNumber: <span class="number">469628</span>,</span><br><span class="line">contractAddress: <span class="literal">null</span>,</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">truffle(<span class="keyword">default</span>)&gt; Voting.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">contractInstance</span>) </span>&#123;contractInstance.totalVotesFor.call(<span class="string">'Rama'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;<span class="built_in">console</span>.log(v)&#125;)&#125;)</span><br><span class="line">&#123; [<span class="built_in">String</span>: <span class="string">'1'</span>] s: <span class="number">1</span>, <span class="attr">e</span>: <span class="number">0</span>, <span class="attr">c</span>: [ <span class="number">1</span>] &#125;</span><br></pre></td></tr></table></figure>
<p>现在启动服务器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run dev</span></span><br></pre></td></tr></table></figure>
<p>应该在<code>localhost：8080</code>看到投票页面，并且能够投票并看到所有候选人的投票数量。由于我们正在处理一个真正的区块链，所以每次写入区块链（voteForCandidate）将需要几秒钟的时间（矿工必须将您的交易包括在区块中，区块中包含区块链）。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-26/0.png" width="700"><br></div>

<p>如果你看到这个页面并且能够投票，你就可以在公共测试网络上建立一个完整的以太坊应用程序，Congratulation！</p>
<p>由于所有的交易都是公开的，可以在这里查看：<code>https://testnet.etherscan.io/</code>。只需输入帐户地址，就会显示所有的交易与时间戳。</p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 1]]></title>
      <url>/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">上一篇文章</a>中，通过和传统的 web程序相比较解释了以太坊平台的结构。作为一个开发者，学习新技术的最好的方式就是构建一个玩具程序。</p>
<p>在这篇文章中构建一个简单的“hello word”程序，这个程序是一个投票程序。</p>
<p>这个程序非常简单，包括：<code>初始化一个参加者集合</code>，<code>让任何人为候选人投票</code>，<code>显示每一个候选人获得的投票数</code>。我们的目的不仅仅是编写一个应用，目的是学习应用编译，部署，交互的过程。</p>
<p>总的来说这章是对上一篇文章的延续，如果你是刚接触Ethereum，我建议你最好读一读上一篇文章。</p>
<p>练习目的：</p>
<ol>
<li>搭建开发环境</li>
<li>学习在开发环境下编写，编译，部署合约。</li>
<li>在区块链上通过node.js控制台利用合约进行交互。</li>
<li>通过一个简单的web页面利用合约来交互，通过这个页面显示投票数，以及每个候选人的获得的投票数。</li>
</ol>
<p>整个应用部署在<code>ubuntu 16.04</code>上，在<code>macos</code>上也行。</p>
<h1 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h1><div class="image-package"><br><img src="/assets/blog/img/2018-01-25/0.png" width="700"><br></div>

<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>这里不是基于活跃的区块链的开发app，而是使用一个叫做<code>testrpc</code>的内存区块链。在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>中，我们将会在真正的区块链上进行交互，<br>下面来<code>安装testrpc,web3js</code>以及<code>在linux环境中启动一个测试区块链</code>。对于<code>windows</code>来说可以使用下面的方式：<a href="https://medium.com/@PrateeshNanada/steps-to-install-testrpc-in-windows-10-96989a6cd594" target="_blank" rel="noopener">https://medium.com/@PrateeshNanada/steps-to-install-testrpc-in-windows-10-96989a6cd594</a></p>
<blockquote>
<p>注意：这个教程当前工作的<code>web3js</code>的版本是0.20.1，运行<code>npm install ethereumjs-testrpc web3@0.20.1</code><br>  而不是运行<code>npm install ethereumjs-testrpc web3</code> ，在web3js的1.0文档版发布之后我会更新这个教程。</p>
</blockquote>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-25/1.png" width="700"><br></div>

<p>注意<code>testrpc</code>在自动运行的时候会自动创建10个测试帐号。这些帐号都预装了100个假的以太网节点。</p>
<h2 id="简单的投票合约"><a href="#简单的投票合约" class="headerlink" title="简单的投票合约"></a>简单的投票合约</h2><p>用solidity语言来编写合约。</p>
<p>编写的智能合约叫做Voting（在你熟悉的面相对象语言中想象合约就是一个类），Voting有一个初始化候选人的数组结构。<br>有两个方法，一个是返回候选人获得的总选票，另一个是给候选人加票的方法。</p>
<blockquote>
<p>注意：把合约部署到区块链上的时候，构造函数只能被调用一次，和web世界不同，web世界中你的代码部署的时候你可以使用新代码来覆盖以前的老代码，但是在区块链上部署的代码是不可更改的。如果你更新合约重新部署代码，旧的合约以及数据依然在区块链上。新部署的将会创建一个新的合约实例。</p>
</blockquote>
<p>下面是一个投票合约的代码，每一行都有注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">// We have to specify what version of compiler this code will compile with</span><br><span class="line"></span><br><span class="line">contract Voting &#123;</span><br><span class="line">  /* mapping field below is equivalent to an associative array or hash.</span><br><span class="line">  The key of the mapping is candidate name stored as type bytes32 and value is</span><br><span class="line">  an unsigned integer to store the vote count</span><br><span class="line">  */</span><br><span class="line">  </span><br><span class="line">  mapping (bytes32 =&gt; uint8) public votesReceived;</span><br><span class="line">  </span><br><span class="line">  /* Solidity doesn&apos;t let you pass in an array of strings in the constructor (yet).</span><br><span class="line">  We will use an array of bytes32 instead to store the list of candidates</span><br><span class="line">  */</span><br><span class="line">  </span><br><span class="line">  bytes32[] public candidateList;</span><br><span class="line"></span><br><span class="line">  /* This is the constructor which will be called once when you</span><br><span class="line">  deploy the contract to the blockchain. When we deploy the contract,</span><br><span class="line">  we will pass an array of candidates who will be contesting in the election</span><br><span class="line">  */</span><br><span class="line">  function Voting(bytes32[] candidateNames) &#123;</span><br><span class="line">    candidateList = candidateNames;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // This function returns the total votes a candidate has received so far</span><br><span class="line">  function totalVotesFor(bytes32 candidate) returns (uint8) &#123;</span><br><span class="line">    if (validCandidate(candidate) == false) throw;</span><br><span class="line">    return votesReceived[candidate];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // This function increments the vote count for the specified candidate. This</span><br><span class="line">  // is equivalent to casting a vote</span><br><span class="line">  function voteForCandidate(bytes32 candidate) &#123;</span><br><span class="line">    if (validCandidate(candidate) == false) throw;</span><br><span class="line">    votesReceived[candidate] += 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function validCandidate(bytes32 candidate) returns (bool) &#123;</span><br><span class="line">    for(uint i = 0; i &lt; candidateList.length; i++) &#123;</span><br><span class="line">      if (candidateList[i] == candidate) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拷贝下面代码到<code>hello_world_voting</code>目录的文件<code>Voting.sol</code>文件中，现在编译代码，并把它部署到<code>testrps</code>上面。</p>
<p>编译<code>solidity</code>代码，首先要通过<code>npm</code>安装<code>npm module</code>：<code>solc</code></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> solc</span><br></pre></td></tr></table></figure>
<p>用带有<code>node.js</code>控制台的包，来编译智能合约，从上一章知道，<code>web3js</code>是一个让你通过RPC来和区块链交互的包。<br>用<code>web3js</code>这个包来进行部署与交互。</p>
<p>首先，在控制台运行node命令来调用node控制台，并初始化solc和web3js对象。下面所有的代码片段，都需要在node的交互式环境下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Web3 = require(<span class="string">'web3'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> web3 = new Web3(new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span></span><br></pre></td></tr></table></figure>
<p>为了确保<code>web3js对象</code>被初始化了，并且可以和区块链通信，查询所有在区块链上的账户。你会看到类似下面的输出结果：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; web3.eth.accounts</span><br><span class="line">['0x9c02f5c68e<span class="number">0239</span>0a3ab81f<span class="number">6334</span>1edc1ba5dbb39e',</span><br><span class="line">'0x7d920be073e92a590dc47e4ccea2f28db3f218cc',</span><br><span class="line">'0xf8a9c7c65c4d1c0c21b06c06ee5da80bd8f074a9',</span><br><span class="line">'0x9d8ee8c3d4f8b1e<span class="number">0880</span>3da274bdaff80c<span class="number">2204</span>fc6',</span><br><span class="line">'0x26bb5d139aa7bdb<span class="number">1380</span>af0e1e8f<span class="number">9814</span>7ef4c406a',</span><br><span class="line">'0x622e557aad13c<span class="number">3645</span>9fac<span class="number">8324</span>0f25ae<span class="number">91882127</span>c',</span><br><span class="line">'0xbf8b<span class="number">1630</span>d<span class="number">5640</span>e272f<span class="number">3365</span>3e<span class="number">8309</span>2ce33d302fd2',</span><br><span class="line">'0xe37a<span class="number">3157</span>cb<span class="number">3081</span>ea7a96ba9f9e942c72cf7ad87b',</span><br><span class="line">'0x175dae<span class="number">8134</span>5f<span class="number">3677</span>5db285d368f0b1d49f61b2f8',</span><br><span class="line">'0xc26bda5f<span class="number">3370</span>bdd46e7c84bdb909aead4d8f35f3']</span><br></pre></td></tr></table></figure>
<p>编译智能合约：通过从<code>Voting.sol</code>文件中加载智能合约到一个字符串变量中，然后编译。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> code = fs.readFileSync(<span class="string">'Voting.sol'</span>).toString()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> solc = require(<span class="string">'solc'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> compiledCode = solc.compile(code)</span></span><br></pre></td></tr></table></figure>
<p>当你成功编译了代码，打印了合约对象（仅仅是在控制台中查看到的上面<code>compiledCode</code>类型的内容），你会发现这里有两个重要的字段，理解他们十分重要：</p>
<ol>
<li><code>compiledCode.contracts[‘:Voting’].bytecode</code>：<code>Voting.sol</code>编译得到的是二进制代码。这个就是将要部署到区块链上的代码。</li>
<li><code>compiledCode.contracts[‘:Voting’].interface</code>：这是一个智能合约接口或者是智能合约模版（叫做abi），他告诉合约使用者，合约中可以使用的方法。<br>在将来无论你在什么时候要与智能合约交互，你都会用到这个abi的定义。你可以在这里查看更多<a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI" target="_blank" rel="noopener">关于abi的详细描述</a></li>
</ol>
<p>现在来部署智能合约。首先你要创建一个合约对象（下面的<code>VotingContract</code>），这个合约对象用来在区块链上部署和初始化合约。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; abiDefinition = JSON.parse(compiledCode<span class="selector-class">.contracts</span>[<span class="string">':Voting'</span>].interface)</span><br><span class="line">&gt; VotingContract = web3<span class="selector-class">.eth</span><span class="selector-class">.contract</span>(abiDefinition)</span><br><span class="line">&gt; byteCode = compiledCode<span class="selector-class">.contracts</span>[<span class="string">':Voting'</span>].bytecode</span><br><span class="line">&gt; deployedContract = VotingContract.new([<span class="string">'Rama'</span>,<span class="string">'Nick'</span>,<span class="string">'Jose'</span>],&#123;data: byteCode, from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>], gas: <span class="number">4700000</span>&#125;)</span><br><span class="line">&gt; deployedContract.address</span><br><span class="line">&gt; contractInstance = VotingContract.at(deployedContract.address)</span><br></pre></td></tr></table></figure>
<p>上面的<code>VotingContract.new</code>用来在区块链上部署智能合约。<br>第一个参数是候选人数组，这些候选人在选举竞争中都是相对简单的。<br>第二个参数的hash：</p>
<ol>
<li><code>data</code>：这是在区块链上部署的编译后的二进制代码。</li>
<li><code>from</code>：区块链必须记录谁部署了这个智能合约。在这个例子中选择第一个账户来作为这个智能合约的拥有者（将会部署这个合约到区块链上）。<br>这第一个账户通过调用<code>web3.eth.accounts</code>来获取。上面代码<code>web3.eth.accounts</code>返回一个数组，数组里面包含10个由<code>testrpc</code>创建的测试账户，<br>这10个账户是在启动测试区块链的时候创建。在真实活跃的区块链中，在没创建之前，不能使用任何账户。必须在交易（通信／交流）前拥有这个账户，并解锁。<br>创建账户时要求填写密码，这个密码用来证明你和账户的关系。为了方便<code>testrpc</code>默认解锁了10个账户。</li>
<li><code>gas</code>：和区块链交互花费的钱，这些钱是给矿工的，矿工的所有工作是在区块链上引入你的代码。必须指定你会支付多少钱给把你的代码包含到区块链上的人。这些钱就是通过设置gas的值来指定的。你的上面代码from中的账户的以太坊余额可以用来购买gas。gas的价格由网络来设定。</li>
</ol>
<p>现在已经部署了智能合约并有了一个合约实例（上面的<code>contractInstance变量</code>）。可以使用这个合约来进行交互。<br>区块链上有成千上万的合约部署在上面。但是，在区块链上怎么辨别自己的合约呢？答案就是<code>deployedContract.address</code>。<br>当你利用你的合约进行交互的时候，你需要这个部署地址，以及上面提到的abi的描述。</p>
<h2 id="在nodes控制台和合约进行交互"><a href="#在nodes控制台和合约进行交互" class="headerlink" title="在nodes控制台和合约进行交互"></a>在nodes控制台和合约进行交互</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; contractInstance<span class="selector-class">.totalVotesFor</span><span class="selector-class">.call</span>(<span class="string">'Rama'</span>)</span><br><span class="line">&#123; [String: <span class="string">'0'</span>] s: <span class="number">1</span>, e: <span class="number">0</span>, c: [ <span class="number">0</span> ] &#125;</span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53'</span></span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0x02c054d238038d68b65d55770fabfca592a5cf6590229ab91bbe7cd72da46de9'</span></span><br><span class="line">&gt; contractInstance.voteForCandidate(<span class="string">'Rama'</span>, &#123;from: web3<span class="selector-class">.eth</span><span class="selector-class">.accounts</span>[<span class="number">0</span>]&#125;)</span><br><span class="line"><span class="string">'0x3da069a09577514f2baaa11bc3015a16edf26aad28dffbcd126bde2e71f2b76f'</span></span><br><span class="line">&gt; contractInstance<span class="selector-class">.totalVotesFor</span><span class="selector-class">.call</span>(<span class="string">'Rama'</span>).toLocaleString()</span><br><span class="line"><span class="string">'3'</span></span><br></pre></td></tr></table></figure>
<p>在你的node交互控制台上试试上面的命令，你将会看到投票的数量增加。每次当你为一个候选人投票，你就会获得一个交易的ID：<br>例如:上面的: <code>&#39;0xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53&#39;</code> 这个交易ID是交易发生的证据。<br>将来你可以在任何时间来返回去查看他（数据可追踪）。这个交易是不可更改的。这种不可更改的特性是以太坊这种区块链的很大优势之一。<br>在接下来的教程中，会用其不可更改性来构建应用。</p>
<h2 id="web页面链接区块链和投票"><a href="#web页面链接区块链和投票" class="headerlink" title="web页面链接区块链和投票"></a>web页面链接区块链和投票</h2><p>现在所有的工作都完成了，现在要做的就是构建一个包含候选人的简单的html文件。<br>并在一个js文件中调用投票命令（这个投票命令已经在前面的node控制台中测试过了）。下面你会看到html代码和js文件。</p>
<p>在<code>hello_world_voting</code>文件夹下复制，并在你的浏览器中打开<code>index.html</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World DApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Open+Sans:400,700'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A Simple Hello World Voting Application<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Candidate<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Votes<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Rama<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Nick<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">"candidate-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"candidate"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"voteForCandidate()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Vote<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.rawgit.com/ethereum/web3.js/develop/dist/web3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.slim.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>index.js</code>文件：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">web3 = new Web3(new Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>));</span><br><span class="line">abi = JSON.parse('[&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"totalVotesFor"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint8"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"validCandidate"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bool"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"votesReceived"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint8"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"x"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"bytes32ToString"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"string"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"uint256"</span>&#125;],<span class="string">"name"</span>:<span class="string">"candidateList"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidate"</span>,<span class="string">"type"</span>:<span class="string">"bytes32"</span>&#125;],<span class="string">"name"</span>:<span class="string">"voteForCandidate"</span>,<span class="string">"outputs"</span>:[],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"contractOwner"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"function"</span>&#125;,&#123;<span class="string">"inputs"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"candidateNames"</span>,<span class="string">"type"</span>:<span class="string">"bytes32[]"</span>&#125;],<span class="string">"payable"</span>:<span class="literal">false</span>,<span class="string">"type"</span>:<span class="string">"constructor"</span>&#125;]')</span><br><span class="line">VotingContract = web3.eth.contract(abi);</span><br><span class="line"><span class="comment">// In your nodejs console, execute contractInstance.address to get the address at which the contract is deployed and change the line below to use your deployed address</span></span><br><span class="line">contractInstance = VotingContract.at('<span class="number">0</span>x2a9c1d265d06d47e8f7b00ffa987c9185aecf672');</span><br><span class="line">candidates = &#123;<span class="string">"Rama"</span>: <span class="string">"candidate-1"</span>, <span class="string">"Nick"</span>: <span class="string">"candidate-2"</span>, <span class="string">"Jose"</span>: <span class="string">"candidate-3"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">voteForCandidate</span><span class="params">()</span> &#123;</span></span><br><span class="line">  candidateName = $(<span class="string">"#candidate"</span>).val();</span><br><span class="line">  contractInstance.voteForCandidate(candidateName, &#123;from: web3.eth.accounts[<span class="number">0</span>]&#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    <span class="built_in">let</span> div_id = candidates[candidateName];</span><br><span class="line">    $(<span class="string">"#"</span> + div_id).html(contractInstance.totalVotesFor.call(candidateName).toString());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(document).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">  candidateNames = Object.keys(candidates);</span><br><span class="line">  <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; candidateNames.length; i++) &#123;</span><br><span class="line">    <span class="built_in">let</span> name = candidateNames[i];</span><br><span class="line">    <span class="built_in">let</span> val = contractInstance.totalVotesFor.call(name).toString()</span><br><span class="line">    $(<span class="string">"#"</span> + candidates[name]).html(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不知道还记得前面说过和任何合约进行交互必须需要abi和地址。在上面的<code>index.js</code>文件中可以看到是怎么使用合约来进行交互的</p>
<p>下面是你在浏览器中打开<code>index.html</code>文件。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-25/2.png" width="700"><br></div>

<p>如果你可以进入上面文本框的候选人名字，并投票并且会看到投票增加。你已经成功构建了你的第一个应用。Congratulation！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>搭建环境</li>
<li>编写简单合约</li>
<li>编译及部署合约到区块链上</li>
<li>能够通过nodejs控制台进行交互，同时也能通过web页面进行同样交互。</li>
</ul>
<p>在<a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>会部署这个合约到一个公共的测试网络，这样整个世界都会看到并给候选人进行投票。</p>
<p><a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a>使用truffle框架来开发（不要使用node的控制台来管理整个过程）。</p>
<p>参考：<br><a href="https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2" target="_blank" rel="noopener">https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2</a></p>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ethereum Dapp Tutorial — Part 0]]></title>
      <url>/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="http://xichen.pub/2018/01/24/2018-01-24-Ethereum-Dapp-Tutorial-Part-0/">Part 0</a></li>
<li><a href="http://xichen.pub/2018/01/25/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/26/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<p>学以太坊区块链平台已经有一段时间了，网络上有很多关于以太坊的资料（文章，视频，平台官网），这些很容易就能找到。由于以太坊平台还在快速迭代，所以相关的资料内容普遍滞后。然后自己基于所学整理了一下关于<code>啥是以太坊</code>，以及<code>怎么搞以太坊</code>的图。在学习过程中遇到了很多问题，本文整理一下，顺便从一个web开发者的角度来解释以太坊。</p>
<h1 id="什么是webapp"><a href="#什么是webapp" class="headerlink" title="什么是webapp"></a>什么是webapp</h1><p>构架webapp的客户端以及服务端：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-24/0.png" width="700"><br></div>

<p>一个web应用托管在托管服务器上，像AWS，Heroku，VPS等，所有的客户端都是通过一个中心的应用程序进行交流。客户端可以是web浏览器，或者是其它的消费你程序的API等。当一个客户端像服务端发起一个请求，服务器会和数据库进行通信，对数据库进行增删改查，然后相应客户端请求。</p>
<p>这种结构大部分情况下都能很好的运行，但是如果数据库是公开的任何人都可以访问，那么有一些应用就会变得很有用，这样我就不用依赖上面的webapp来获取自己个人的数据了，也就是说我可以从其它渠道获取我的个人数据。</p>
<p>下面举例说明：例如eBay，如果你是一个超级卖家，已经获得了数百的好评。由于某些原因eBay封停了你的帐号。这事会严重的影响你的生意。如果你能够把这数百的好评与评分转移到其他平台（eBay的竞争者）的话，这就很爽了。eBay在买家和卖家之间提供了一个第三方信任服务。并且从买卖双方都要收取佣金。是否有这么一种方式买卖双方在交易的时候完全忽略eBay，这样双方也节省了佣金，同时你又可以访问到你的交易数据？这就是下面的图片提出的去中心化应用。以太坊让你很容易的创建Dapps(去中心化应用)。</p>
<h1 id="什么是以太坊Dapp"><a href="#什么是以太坊Dapp" class="headerlink" title="什么是以太坊Dapp"></a>什么是以太坊Dapp</h1><div class="image-package"><br><img src="/assets/blog/img/2018-01-24/1.png" width="700"><br></div>

<p>你是否发现，每一个客户端交流使用的都是它自己的应用实例。没有一个所有的客户端都链接到服务器上的中心化服务器。这就意味着，每一个想通过去中心化应用交互的人，需要在他们的电脑或者是手机上完整的拷贝区块链。这就意味着，在你可以使用应用之前，你需要下载完整的区块链，然后启动使用这个应用。第一次听说感觉很荒唐，但是他有一个好处就是不需要依赖一个中心化的服务，而且这个中心化的服务有可能明天就不存在了。</p>
<p>现实中你不需要花费很多的内存和硬盘，来下载完整的区块链。已经有了一些变通的方法或者是优化来使的应用去中心化，保证交互方便快捷。</p>
<h1 id="什么是区块链"><a href="#什么是区块链" class="headerlink" title="什么是区块链"></a>什么是区块链</h1><ol>
<li><p>Database(数据库)：在以太坊网络上每发生一个交易就会被包装到一个区块中，每一个区块都和下一个区块相连。这些包含所有交易数据相连的一系列的块就是区块链。如果我们返回去看刚才的eBay的例子，买卖双方无论是出售，退款还是纠纷都将会被记录在区块链上，并且每个人都可以看到。为了保证以太坊网络上的所以网络节点对这条信息都有同样的拷贝，而且为了确保非法数据写入的这个数据库中（区块链的区块中），以太坊使用一个叫做<a href="http://ethereum.stackexchange.com/questions/14/what-proof-of-work-function-does-ethereum-use" target="_blank" rel="noopener">proof的算法</a>来做这件工作。</p>
</li>
<li><p>Code：区块链的数据库部分只是存储了数据，但是像买，买，取消，退款等操作逻辑在什么地方呢？在以太坊的世界里，你可以使用一个叫做Solidity的语言来写应用（合约）代码。然后可以使用Solidity编译器来把代码编译成以太坊二进制文件，然后把这个二进制代码部署到区块链上。除此之外和Solidity很少有其他的交互，但是Solidity是目前开发合约最流行的开发语言。</p>
</li>
</ol>
<p>所以从根本上来说：区块链<code>存储数据</code>，<code>存储代码</code>，而且<code>运行EVM（Ethereum Virtual Machine）中的代码</code>。</p>
<h1 id="如何开发Dapp"><a href="#如何开发Dapp" class="headerlink" title="如何开发Dapp"></a>如何开发Dapp</h1><p>基于Dapps构建web，Ethereal有一个很好用的javascript包叫<code>web3.js</code>，这个包可以和你的区块链接点建立连接。所以只需在javascript框架（reactjs, angularjs等）中引入这个包，然后就可以开始构建应用了。</p>
<p>另一个大而重要的应用方面是平台的财务能力。因为在使用Dapp的时候，你就拥有了一个内置的银行帐户。事实上不只是一个银行帐户，你可以在一分钟内创建多个帐户。这些银行帐户被叫做钱包，你可以用来存钱（用在以太坊生态系统的货币）和交易。</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>有许多关于区块链的内部细节我故意没有讲，因为我想集中精力在<code>基于区块链的Dapp</code>和<code>中心化的webapp</code>进行比较。希望这篇文章可以很好的达到说明以太坊是什么，以及怎么去构建去中心化的应用。</p>
<p>请看接下来的3个指导教程来构建全栈的dapp</p>
<ol>
<li><a href="http://xichen.pub/2018/01/27/2018-01-25-Ethereum-Dapp-Tutorial-Part-1/">Part 1</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-26-Ethereum-Dapp-Tutorial-Part-2/">Part 2</a></li>
<li><a href="http://xichen.pub/2018/01/27/2018-01-27-Ethereum-Dapp-Tutorial-Part-3/">Part 3</a></li>
</ol>
<h1 id="延伸阅读："><a href="#延伸阅读：" class="headerlink" title="延伸阅读："></a>延伸阅读：</h1><ol>
<li><a href="https://github.com/ethereum/wiki/wiki/White-Paper" target="_blank" rel="noopener">Ethereum white paper</a></li>
<li><a href="http://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener">写智能合约的语言Solidity</a></li>
<li><a href="https://gitter.im/ethereum/web3.js" target="_blank" rel="noopener">https://gitter.im/ethereum/solidityand</a></li>
<li><a href="https://gitter.im/ethereum/web3.js" target="_blank" rel="noopener">https://gitter.im/ethereum/web3.js</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> Ethereum </tag>
            
            <tag> Dapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的4个阶段的撤销更改]]></title>
      <url>/2018/01/23/2018-01-23-Git%E7%9A%844%E4%B8%AA%E9%98%B6%E6%AE%B5%E7%9A%84%E6%92%A4%E9%94%80%E6%9B%B4%E6%94%B9/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="3个步骤"><a href="#3个步骤" class="headerlink" title="3个步骤"></a>3个步骤</h2><div class="image-package"><br><img src="/assets/blog/img/2018-01-23/0.png" width="700"><br></div>

<p>正常情况下，我们的工作流就是3个步骤，对应上图中的3个箭头线：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"comment"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<ol>
<li><code>git add .</code>把所有文件放入暂存区；</li>
<li><code>git commit</code>把所有文件从暂存区提交进本地仓库；</li>
<li><code>git push</code>把所有文件从本地仓库推送进远程仓库。</li>
</ol>
<h2 id="4个区"><a href="#4个区" class="headerlink" title="4个区"></a>4个区</h2><p>git之所以令人费解，主要是它相比于svn等等传统的版本管理工具，多引入了一个暂存区(Stage)的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么4个区就够了：</p>
<ul>
<li>工作区(Working Area)</li>
<li>暂存区(Stage)</li>
<li>本地仓库(Local Repository)</li>
<li>远程仓库(Remote Repository)</li>
</ul>
<h2 id="5种状态"><a href="#5种状态" class="headerlink" title="5种状态"></a>5种状态</h2><p>以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：</p>
<ul>
<li>未修改(Origin)</li>
<li>已修改(Modified)</li>
<li>已暂存(Staged)</li>
<li>已提交(Committed)</li>
<li>已推送(Pushed)</li>
</ul>
<h1 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h1><p>了解了基本概念之后，我们来谈一谈犯错误之后如何撤销的问题。首先，我们要了解如何检查这3个步骤当中每一个步骤修改了什么，然后才好判断有没有修改成功。检查修改的二级命令都相同，都是diff，只是参数有所不同。</p>
<h2 id="已修改，未暂存"><a href="#已修改，未暂存" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>
<p>首先，我们来看一下，如果我们只是简单地在浏览器里保存了一下文件，但是还没有做<code>git add .</code>之前，我们如何检查有哪些修改。我们先随便拿一个文件来做一下实验：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/1.png" width="700"><br></div>

<p>我们在文件开头的第2行胡乱加了4个数字1234，存盘，这时文件进入了已修改状态，但是还没有进入暂存区，我们运行<code>git diff</code>，结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/index.md b/index.md</span><br><span class="line">index 73ff1ba..1066758 100644</span><br><span class="line">--- a/index.md</span><br><span class="line">+++ b/index.md</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> ---</span><br><span class="line">-layout: main</span><br><span class="line">+1234layout: main</span><br><span class="line"> color: black</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>
<p><code>git diff</code>的结果告诉我们哪些文件已经做了哪些修改。</p>
<h2 id="已暂存，未提交"><a href="#已暂存，未提交" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>
<p>现在我们把修改放入暂存区看一下。先执行<code>git add .</code>，然后执行<code>git diff</code>，你会发现没有任何结果：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/2.png" width="700"><br></div>

<p>这说明<code>git diff</code>这个命令只检查我们的工作区和暂存区之间的差异，如果我们想看到暂存区和本地仓库之间的差异，就需要加一个参数<code>git diff --cached</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/index.md b/index.md</span><br><span class="line">index 73ff1ba..1066758 100644</span><br><span class="line">--- a/index.md</span><br><span class="line">+++ b/index.md</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> ---</span><br><span class="line">-layout: main</span><br><span class="line">+1234layout: main</span><br><span class="line"> color: black</span><br><span class="line"> ---</span><br></pre></td></tr></table></figure>
<p>这时候我们看到的差异是暂存区和本地仓库之间的差异。</p>
<h2 id="已提交，未推送"><a href="#已提交，未推送" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff master origin/master</span><br></pre></td></tr></table></figure>
<p>现在，我们把修改从暂存区提交到本地仓库，再看一下差异。先执行<code>git commit</code>，然后再执行<code>git diff --cached</code>，没有差异，执行<code>git diff master origin/master</code>，可以看到差异：</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/3.png" width="700"><br></div>

<p>在这里，<code>master</code>就是你的本地仓库，而<code>origin/master</code>就是你的远程仓库，<code>master</code>是主分支的意思，因为我们都在主分支上工作，所以这里两边都是<code>master</code>，而<code>origin</code>就代表远程。</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p>了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。</p>
<h2 id="已修改，未暂存-1"><a href="#已修改，未暂存-1" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h2><p>如果我们只是在编辑器里修改了文件，但还没有执行<code>git add .</code>，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<p>来进行撤销操作。</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/4.png" width="700"><br></div>

<p>可以看到，在执行完<code>git checkout .</code>之后，修改已被撤销，<code>git diff</code>没有任何内容了。</p>
<h3 id="一对反义词"><a href="#一对反义词" class="headerlink" title="一对反义词"></a>一对反义词</h3><p><code>git add .</code>的反义词是<code>git checkout .</code>。做完修改之后，如果你想向前走一步，让修改进入暂存区，就执行<code>git add .</code>，如果你想向后退一步，撤销刚才的修改，就执行<code>git checkout .</code>。</p>
<h2 id="已暂存，未提交-1"><a href="#已暂存，未提交-1" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h2><p>你已经执行了<code>git add .</code>，但还没有执行<code>git commit -m &quot;comment&quot;</code>。这时候你意识到了错误，想要撤销，你可以执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>
<p><code>git reset</code>只是把修改退回到了<code>git add .</code>之前的状态，也就是说文件本身还处于已修改未暂存状态，你如果想退回未修改状态，还需要执行<code>git checkout .</code>。</p>
<p>或许你已经注意到了，以上两个步骤都可以用同一个命令<code>git reset --hard</code>来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到未修改的状态。</p>
<h2 id="已提交，未推送-1"><a href="#已提交，未推送-1" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h2><p>你的手太快，你既执行了<code>git add .</code>，又执行了<code>git commit</code>，这时候你的代码已经进入了你的本地仓库，然而你后悔了，怎么办？不要着急，还有办法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>还是这个<code>git reset --hard</code>命令，只不过这次多了一个参数<code>origin/master</code>，正如我们上面讲过的，<code>origin/master</code>代表远程仓库，既然你已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧。</p>
<h2 id="已推送"><a href="#已推送" class="headerlink" title="已推送"></a>已推送</h2><p>很不幸，你的手实在是太快了，你既<code>git add</code>了，又<code>git commit</code>了，并且还<code>git push</code>了，这时你的代码已经进入远程仓库。如果你想恢复的话，还好，由于你的本地仓库和远程仓库是等价的，你只需要先恢复本地仓库，再强制push到远程仓库就好了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-23/5.png" width="700"><br></div>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上4种状态的撤销我们都用到了同一个命令<code>git reset --hard</code>，前2种状态的用法甚至完全一样，所以只要掌握了<code>git reset --hard</code>这个命令的用法，从此你再也不用担心提交错误了。</p>
<h1 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h1><p><a href="https://segmentfault.com/a/1190000011910766" target="_blank" rel="noopener">独孤求败：Git中的各种后悔药</a></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 3.0及Gradle Plugin 3.0升级注意事项]]></title>
      <url>/2018/01/23/2018-01-23-Android-Studio-3.0%E5%8F%8AGradle-Plugin-3.0%E5%8D%87%E7%BA%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>最近终于有空升级了一下项目中的<code>Gradle</code>和<code>Gradle Plugin</code>的版本，还是踩了蛮多的坑。特别是依赖以及渠道编译这块变动较大，因此把遇到的一些问题点记录下来，分享给后人查阅~</p>
<h2 id="Gradle版本升级"><a href="#Gradle版本升级" class="headerlink" title="Gradle版本升级"></a>Gradle版本升级</h2><p>其实当AS升级到3.0之后，Gradle Plugin和Gradle不升级也是可以继续使用的，但很多新的特性如：Java8支持、新的依赖匹配机制、AAPT2等新功能都无法正常使用~  所以长期看来，最后还是得升的。</p>
<ul>
<li><p>Gradle Plugin升级到<code>3.0.0</code>及以上，修改<code>project/build.gradle</code>文件：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// You need to add the following repository to download the</span></span><br><span class="line">        <span class="comment">// new plugin.</span></span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Gradle升级到<code>4.1</code>及以上，修改<code>project/gradle/gradle-wrapper.properties</code>文件：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">4.1</span>-all.zip</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="生成APK文件名属性outputFile变为只读"><a href="#生成APK文件名属性outputFile变为只读" class="headerlink" title="生成APK文件名属性outputFile变为只读"></a>生成APK文件名属性<code>outputFile</code>变为只读</h2><p>改完第一步后会提示如下报错：</p>
<blockquote>
<p>Error:(88, 0) Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=appDebug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl.</p>
</blockquote>
<p>之前改apk名字的代码类似：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</span><br><span class="line">        <span class="keyword">def</span> <span class="keyword">file</span> = output.outputFile</span><br><span class="line">        <span class="keyword">def</span> apkName = <span class="string">'xxx-xxx-xxx-signed.apk'</span></span><br><span class="line">        output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="keyword">file</span>.parent, apkName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于<code>outputFile</code>属性变为只读，需要进行如下修改，直接对<code>outputFileName</code>属性赋值即可：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.all &#123;</span><br><span class="line">        <span class="keyword">def</span> apkName = <span class="string">'xxx-xxx-xxx-signed.apk'</span></span><br><span class="line">        outputFileName = apkName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="依赖关键字的改变"><a href="#依赖关键字的改变" class="headerlink" title="依赖关键字的改变"></a>依赖关键字的改变</h2><ul>
<li>api: 对应之前的<code>compile</code>关键字，功能一模一样。会传递依赖，导致gradle编译的时候遍历整颗依赖树</li>
<li>implementation: 对应之前的<code>compile</code>，与<code>api</code>类似，关键区别是不会有依赖传递</li>
<li>compileOnly: 对应之前的<code>provided</code>，依赖仅用于编译期不会打包进最终的apk中</li>
<li>runtimeOnly: 对应之前的’apk’，与上面的<code>compileOnly</code>相反</li>
</ul>
<p>关于<code>implementation</code>与<code>api</code>的区别，主要在依赖是否会传递上。如：A依赖B，B依赖C，若使用<code>api</code>则A可以引用C，而<code>implementation</code>则不能引用。</p>
<p>这里更推荐用<code>implementation</code>，一是不会间接的暴露引用，清晰知道目前项目的依赖情况；二是可以提高编译时依赖树的查找速度，进而提升编译速度。详见SO的这个回答，讲得非常详细了：<a href="https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration" target="_blank" rel="noopener">https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration</a></p>
<h2 id="渠道需要声明flavor-dimensions"><a href="#渠道需要声明flavor-dimensions" class="headerlink" title="渠道需要声明flavor dimensions"></a>渠道需要声明flavor dimensions</h2><p>刚开始Sync的时候应该会报错：</p>
<blockquote>
<p>Error:All flavors must now belong to a named flavor dimension. Learn more at <a href="https://d.android.com/r/tools/flavorDimensions-missing-error-message.html" target="_blank" rel="noopener">https://d.android.com/r/tools/flavorDimensions-missing-error-message.html</a></p>
</blockquote>
<p>也就是每个flavor渠道都必须归属一个dimension维度，若只有一个维度，渠道中可以不写dimension属性，默认分配到该维度。直接添加一个默认的维度即可，如：<code>flavorDimensions &quot;dimension&quot;</code>。当然<code>flavorDimensions</code>也可以设置多个维度，详见官方实例：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Specifies two flavor dimensions.</span></span><br><span class="line">flavorDimensions <span class="string">"mode"</span>, <span class="string">"minApi"</span></span><br><span class="line"></span><br><span class="line">productFlavors &#123;</span><br><span class="line">    free &#123;</span><br><span class="line">        <span class="comment">// Assigns this product flavor to the "tier" flavor dimension. Specifying</span></span><br><span class="line">        <span class="comment">// this property is optional if you are using only one dimension.</span></span><br><span class="line">        dimension <span class="string">"mode"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">        dimension <span class="string">"mode"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minApi23 &#123;</span><br><span class="line">        dimension <span class="string">"minApi"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minApi18 &#123;</span><br><span class="line">        dimension <span class="string">"minApi"</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="库多variant依赖方式的修改"><a href="#库多variant依赖方式的修改" class="headerlink" title="库多variant依赖方式的修改"></a>库多variant依赖方式的修改</h2><p><code>Gradle plugin 3.0.0+</code>之后引入了新的variant自动匹配机制，也就是说app的flavorDebug变体会自动匹配library的flavorDebug变体。</p>
<p>回顾一下旧的方式，如果app在某个variant下需要依赖library相应的类型，需要按照下面的方式声明依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// This is the old method and no longer works for local</span></span><br><span class="line">    <span class="comment">// library modules:</span></span><br><span class="line">    debugCompile <span class="keyword">project</span>(path: <span class="string">':library'</span>, configuration: <span class="string">'debug'</span>)</span><br><span class="line">    releaseCompile <span class="keyword">project</span>(path: <span class="string">':library'</span>, configuration: <span class="string">'release'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新的方式，gradle会自动感知并匹配对应的variant（前提是app与library中有对应的variant类型）：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// Instead, simply use the following to take advantage of</span></span><br><span class="line">    <span class="comment">// variant-aware dependency resolution. You can learn more about</span></span><br><span class="line">    <span class="comment">// the 'implementation' configuration in the section about</span></span><br><span class="line">    <span class="comment">// new dependency configurations.</span></span><br><span class="line">    implementation <span class="keyword">project</span>(<span class="string">':library'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="处理app与lib的依赖匹配问题"><a href="#处理app与lib的依赖匹配问题" class="headerlink" title="处理app与lib的依赖匹配问题"></a>处理app与lib的依赖匹配问题</h2><p>上面我们了解到新的variant匹配机制，但若app或library中不存在对应的variant类型呢？匹配将如何进行？下面列出了可能出现的几种情形：</p>
<h3 id="情形1：app中有某个build-type但library却木有"><a href="#情形1：app中有某个build-type但library却木有" class="headerlink" title="情形1：app中有某个build type但library却木有"></a>情形1：app中有某个build type但library却木有</h3><p>可以通过<code>matchingFallbacks</code>属性来设置回退策略，提供可能的匹配列表，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;&#125;</span><br><span class="line">        release &#123;&#125;</span><br><span class="line">        staging &#123;</span><br><span class="line">            <span class="comment">// Specifies a sorted list of fallback build types that the</span></span><br><span class="line">            <span class="comment">// plugin should try to use when a dependency does not include a</span></span><br><span class="line">            <span class="comment">// "staging" build type. You may specify as many fallbacks as you</span></span><br><span class="line">            <span class="comment">// like, and the plugin selects the first build type that's</span></span><br><span class="line">            <span class="comment">// available in the dependency.</span></span><br><span class="line">            matchingFallbacks = [<span class="string">'debug'</span>, <span class="string">'qa'</span>, <span class="string">'release'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>若希望可以针对app的每个build type都执行相同的回退策略（例如我们大量的library只有一个release的build type），则可以使用批量指令：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buildTypes.all &#123; type -&gt;</span><br><span class="line">    type.matchingFallbacks = [<span class="string">'release'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若library中有某个build type但app却木有，不会对app有任何影响）</strong></p>
<h3 id="情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有："><a href="#情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有：" class="headerlink" title="情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有："></a>情景2：在同一个dimension维度下，如：tier。若app中有某个flavor但library却木有：</h3><p>同样可以通过<code>matchingFallbacks</code>属性来设置回退策略，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">    <span class="comment">// Do not configure matchingFallbacks in the defaultConfig block.</span></span><br><span class="line">    <span class="comment">// Instead, you must specify fallbacks for a given product flavor in the</span></span><br><span class="line">    <span class="comment">// productFlavors block, as shown below.</span></span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">'tier'</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        paid &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// Because the dependency already includes a "paid" flavor in its</span></span><br><span class="line">            <span class="comment">// "tier" dimension, you don't need to provide a list of fallbacks</span></span><br><span class="line">            <span class="comment">// for the "paid" flavor.</span></span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// Specifies a sorted list of fallback flavors that the plugin</span></span><br><span class="line">            <span class="comment">// should try to use when a dependency's matching dimension does</span></span><br><span class="line">            <span class="comment">// not include a "free" flavor. You may specify as many</span></span><br><span class="line">            <span class="comment">// fallbacks as you like, and the plugin selects the first flavor</span></span><br><span class="line">            <span class="comment">// that's available in the dependency's "tier" dimension.</span></span><br><span class="line">            matchingFallbacks = [<span class="string">'demo'</span>, <span class="string">'trial'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若library中有某个flavor但app却木有，不会对app有任何影响）</strong></p>
<h3 id="情景3：library中有某个dimension维度，但app中却没有"><a href="#情景3：library中有某个dimension维度，但app中却没有" class="headerlink" title="情景3：library中有某个dimension维度，但app中却没有:"></a>情景3：library中有某个dimension维度，但app中却没有:</h3><p>可以通过<code>missingDimensionStrategy</code>属性来设置选择策略，代码如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In the app's build.gradle file.</span></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">    <span class="comment">// Specifies a sorted list of flavors that the plugin should try to use from</span></span><br><span class="line">    <span class="comment">// a given dimension. The following tells the plugin that, when encountering</span></span><br><span class="line">    <span class="comment">// a dependency that includes a "minApi" dimension, it should select the</span></span><br><span class="line">    <span class="comment">// "minApi18" flavor. You can include additional flavor names to provide a</span></span><br><span class="line">    <span class="comment">// sorted list of fallbacks for the dimension.</span></span><br><span class="line">    missingDimensionStrategy <span class="string">'minApi'</span>, <span class="string">'minApi18'</span>, <span class="string">'minApi23'</span></span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">'tier'</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        free &#123;</span><br><span class="line">            dimension <span class="string">'tier'</span></span><br><span class="line">            <span class="comment">// You can override the default selection at the product flavor</span></span><br><span class="line">            <span class="comment">// level by configuring another missingDimensionStrategy property</span></span><br><span class="line">            <span class="comment">// for the "minApi" dimension.</span></span><br><span class="line">            missingDimensionStrategy <span class="string">'minApi'</span>, <span class="string">'minApi23'</span>, <span class="string">'minApi18'</span></span><br><span class="line">        &#125;</span><br><span class="line">        paid &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>说明：其中<code>missingDimensionStrategy</code>属性的第一个值为dimension维度，后面的Strings为该维度下的渠道flavors。我们可以看下它的函数原型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, String requestedValue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, String... requestedValues)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">missingDimensionStrategy</span><span class="params">(String dimension, List&lt;String&gt; requestedValues)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>（注意：在该情景下，若app中有某个dimension维度，但library中却没有，不会对app有任何影响）</strong></p>
<h3 id="情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理"><a href="#情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理" class="headerlink" title="情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理~"></a>情景4：若library没有任何dimension和flavor，则不需app做任何flavor的回退处理~</h3><p>说了这么多种场景，是不是快被绕晕了？其实诸如dimension的声明以及提供匹配回退策略都是为了实现精确的variant匹配。但是这么多的场景咋看之下还是比较晕，在遇到具体的业务依赖场景后再回来看这一块的内容，你会更加的有收获~</p>
<h2 id="Java8特性的支持"><a href="#Java8特性的支持" class="headerlink" title="Java8特性的支持"></a>Java8特性的支持</h2><p>升级到Gradle Plugin 3.0.0之后，一直被诟病的<code>Jack</code>已经被官方弃用了，取而代之的是最新的<code>desugar</code>方案。</p>
<p>若项目之前用了类似<code>retrolambda</code>或者<code>Jack</code>这种旧方案的话，会出现以下提示告诉你移除相关的代码：</p>
<blockquote>
<p>Warning:One of the plugins you are using supports Java 8 language features. To try the support built into the Android plugin, remove the following from your build.gradle: apply plugin: ‘me.tatarka.retrolambda’ To learn more, go to <a href="https://d.android.com/r/tools/java-8-support-message.html" target="_blank" rel="noopener">https://d.android.com/r/tools/java-8-support-message.html</a></p>
</blockquote>
<p>启用最新的<code>desugar</code>也非常简单，设置一下<code>sourceCompatibility</code>和<code>targetCompatibility</code>即可：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Configure only for each module that uses Java 8</span></span><br><span class="line">  <span class="comment">// language features (either in its source code or</span></span><br><span class="line">  <span class="comment">// through dependencies).</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">    <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>目前所支持Java8的特性有：</p>
<ul>
<li>Lambda expressions</li>
<li>Method References</li>
<li>Type Annotations</li>
<li>Default and static interface methods</li>
<li>Repeating annotations</li>
</ul>
<p><strong>（注意：stream及function包下的api只能在API level 24+以上才可以使用）</strong></p>
<p>禁用该特性也是分分钟的事情：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableDesugar=<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<p>官方文档：<br><a href="https://developer.android.com/studio/write/java8-support.html" target="_blank" rel="noopener">https://developer.android.com/studio/write/java8-support.html</a></p>
<h2 id="android-apt相关的异常"><a href="#android-apt相关的异常" class="headerlink" title="android-apt相关的异常"></a>android-apt相关的异常</h2><p>最后的最后很多同学会遇到以下关于<code>android-apt</code>的报错：</p>
<p>解决方法：</p>
<ul>
<li><p>移除<code>android-apt</code>相关的plugin，如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖中的<code>apt</code>改成<code>annotationProcessor</code>，如：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">annotationProcessor <span class="string">'com.android.databinding:compiler:3.0.0'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有用到类似Realm这种第三方的plugin，确保升级到最新版试试（旧版的Realm用的还是<code>android-apt</code>），突然发现升级到最新版后api接口被改了，泪奔中…</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:4.2.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>还有更多的迁移变化，由于项目中还没涉及到，就先不写了，大家可以参考官方文档：<br><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[update nodejs and npm]]></title>
      <url>/2018/01/22/2018-01-22-update-nodejs-and-npm/</url>
      <content type="html"><![CDATA[<h1 id="升级node-js和npm"><a href="#升级node-js和npm" class="headerlink" title="升级node.js和npm"></a>升级node.js和npm</h1><p>一行命令搞定npm和node.js的升级，省去了重新编译和安装的过程。具体如下：</p>
<h2 id="升级node-js"><a href="#升级node-js" class="headerlink" title="升级node.js"></a>升级node.js</h2><p>npm中有一个模块叫做“n”，专门用来管理node.js版本的。<br>更新到最新的稳定版只需要在命令行中打下如下代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure></p>
<p>如需最新版本则用<code>n latest</code></p>
<p>当然，n后面也可以跟具体的版本号：<code>n v6.2.0</code></p>
<p>node.js升级就是这么简单。</p>
<h2 id="升级npm"><a href="#升级npm" class="headerlink" title="升级npm"></a>升级npm</h2><p>npm升级就更简单了，只需要在终端中输入：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -g install npm@next</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[running Ubuntu GUI in Windows10]]></title>
      <url>/2018/01/22/2018-01-22-running-Ubuntu-GUI-in-Windows10/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>先安装显示图形界面的程序<a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener">vcxsrv</a><br>然后运行以下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo "export DISPLAY=:0.0" &gt;&gt; ~/.bashrc</span><br><span class="line">export DISPLAY=:0.0</span><br><span class="line">sudo apt-get install dbus --reinstall</span><br><span class="line">sudo sed -i 's/&lt;listen&gt;.*&lt;\/listen&gt;/&lt;listen&gt;tcp:host=localhost,port=0&lt;\/listen&gt;/' /etc/dbus-1/session.conf</span><br><span class="line">sudo apt-get install ubuntu-desktop</span><br><span class="line">sudo apt-get install unity</span><br><span class="line">sudo apt-get install compiz-core</span><br><span class="line">sudo apt-get install compizconfig-settings-manager</span><br></pre></td></tr></table></figure></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>先启动<code>XLaunch</code>,选择<code>只启动一个大窗口</code>,把<code>-1</code>改为<code>0</code><br>这时候的窗口是黑的,因为没有视频输入<br>然后运行命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compiz</span><br></pre></td></tr></table></figure></p>
<p>这时又视频输入了，切到<code>XLaunch</code>就可以浪了</p>
<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/0.png" width="700"><br><br><br><div class="image-caption">0.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/1.png" width="700"><br><br><br><div class="image-caption">1.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/2.png" width="700"><br><br><br><div class="image-caption">2.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/3.png" width="700"><br><br><br><div class="image-caption">3.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/4.png" width="700"><br><br><br><div class="image-caption">4.png</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2018-01-22/5.png" width="700"><br><br><br><div class="image-caption">5.png</div><br></div>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex（二）完全卸载]]></title>
      <url>/2017/12/28/2017-12-28-latex%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BD/</url>
      <content type="html"><![CDATA[<ol>
<li><code>sudo apt-get purge texlive*</code></li>
<li><code>rm -rf /usr/local/texlive/*</code> and <code>rm -rf ~/.texlive*</code></li>
<li><code>rm -rf /usr/local/share/texmf</code></li>
<li><code>rm -rf /var/lib/texmf</code></li>
<li><code>rm -rf /etc/texmf</code></li>
<li><code>sudo apt-get remove tex-common --purge</code></li>
<li><code>rm -rf ~/.texlive</code></li>
<li><code>find -L /usr/local/bin/ -lname /usr/local/texlive/*/bin/* | xargs rm</code></li>
</ol>
<p>This finds all the files in <code>/usr/local/bin</code> which point to a location within <code>/usr/local/texlive/*/bin/*</code> and removes them; because we’ve already deleted all of <code>/usr/local/texlive</code>, these are dead links. To see which files are being deleted, replace <code>xargs rm</code> with <code>xargs -t rm</code> (or tee off to a log file, or whatever).</p>
]]></content>
      
        <categories>
            
            <category> Latex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex（一）安装与配置]]></title>
      <url>/2017/12/12/2017-12-12-latex%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>2017年不到20天就到2018年了，才开始把latex用在写论文上。<br>原来只是学了用latex写公式，嫌latex的配置太麻烦，总想拿mardown结合latex搞事情，结果啥也没做到。<br>只好亲自入用latex编译论文的坑了。</p>
<p>latex就是为写论文带来便利。一定不能在安装和配置上花太多时间，不然就舍本逐末了。</p>
<h1 id="Linux-发行版下原版-TeX-Live-2017-的安装"><a href="#Linux-发行版下原版-TeX-Live-2017-的安装" class="headerlink" title="Linux 发行版下原版 TeX Live 2017 的安装"></a>Linux 发行版下原版 TeX Live 2017 的安装</h1><blockquote>
<p>在安装前，TeX Live 2017 的手册可以在 TUG 的 TeX Live 目录下找到：<a href="https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf" target="_blank" rel="noopener">https://www.tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf</a>。可以先阅读其中的安装部分。<br>在 Linux 上安装原版 TeX Live 2017，与在 Windows 等其他系统下安装并无区别。<br>可以从 CTAN 镜象下载 ISO 文件，然后挂载到一个目录下，运行里面的 install-tl 脚本进行安装；也可以在 CTAN 的网站上只下载 install-tl 脚本运行，在线安装。<br>install-tl 是一个 Perl 脚本，在绝大多数发行版下都可以直接运行。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="通过系统仓库"><a href="#通过系统仓库" class="headerlink" title="通过系统仓库"></a>通过系统仓库</h2><p>首先，对于 Arch 等滚动更新发行版的用户来说，推荐使用官方仓库来安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S texlive-most texlive-lang</span><br></pre></td></tr></table></figure>
<p>但是 <code>Debian/Ubuntu</code> 等的软件源往往会比较旧，为了体验最新的 <code>TeX Live</code> （虽然并没有什么卵差别），因此还是要用 <code>ISO</code> 映像安装。</p>
<h2 id="通过iso文件"><a href="#通过iso文件" class="headerlink" title="通过iso文件"></a>通过iso文件</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><a href="http://mirror.lzu.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">官方镜像: texlive2017.iso</a></li>
<li><a href="https://mirrors.xjtu.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">XJTU 镜像: texlive2017.iso</a>（校内用户请选择该源）</li>
<li><a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="noopener">USTC 镜像: texlive2017.iso</a>（校内用户请选择该源）</li>
</ul>
<p>镜像站目录里的 <code>texlive.iso</code> 就是最新的 <code>texlive2017.iso</code>。</p>
<p>下载完成后可以选择进行校验避免出错，具体来说镜像站目录里会有 <code>md5</code> 和 <code>sha512</code> 两个 <code>hash</code> 文件以及一个 <code>GPG</code> 签名文件。<code>TeX Live 2016</code> 以后调整了基础架构，安装时会校验包的完整性，如果有 <code>GPG</code> 还会校验⽹络更新的签名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GnuPG 校验签名，不懂请跳过，根据我的校验应当无误</span></span><br><span class="line">gpg --verify texlive2017.iso.sha512.asc</span><br><span class="line"><span class="comment"># MD5 校验</span></span><br><span class="line">md5sum texlive2017.iso</span><br><span class="line"><span class="comment"># SHA-512 校验</span></span><br><span class="line">sha512sum texlive2017.iso</span><br><span class="line"><span class="comment"># 与官方提供的 Hash 对比</span></span><br><span class="line">cat texlive2017.iso.md5 texlive2017.iso.sha512</span><br></pre></td></tr></table></figure>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>如果之前系统里已经装过 TeX Live，建议先删除。</p>
<p>对于 Linux 来说比较简单，只需要把安装目录（默认为 <code>/usr/local/texlive</code> 里的文件夹丢进 trash 即可），此外用户目录里修改过的一些配置也不要忘记。</p>
<p>如果想把有关依赖也卸载了，参考<a href="https://linxueyuanstdio.github.io/2017/12/latex-二-完全卸载/" target="_blank" rel="noopener">下一篇blog</a></p>
<p>如果是包管理安装的方式，例如 Ubuntu 用户，可以按照这样卸载：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge texlive*</span><br></pre></td></tr></table></figure>
<p>因为 TeX Live 里的安装脚本是 Perl 写的，如果稍后要用图形界面安装，需要更新下依赖。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">sudo apt-get install perl-tk</span><br><span class="line"><span class="comment"># CentOS/Fedora/RHEL</span></span><br><span class="line">sudo yum install perl-Tk</span><br><span class="line"><span class="comment"># Fedora 22+</span></span><br><span class="line">sudo dnf install perl-Tk</span><br><span class="line"><span class="comment"># OpenSUSE</span></span><br><span class="line">sudo zypper install perl-tk</span><br></pre></td></tr></table></figure>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>如果能借助软件或文管等方式解决映像挂载问题就直接跳过，否则就在下载好的镜像目录执行以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -o loop texlive2017.iso /mnt</span><br><span class="line"><span class="built_in">cd</span> /mnt</span><br><span class="line"><span class="comment"># 在 shell 里直接安装</span></span><br><span class="line">sudo ./install-tl</span><br><span class="line"><span class="comment"># 以 GUI 方式安装</span></span><br><span class="line">sudo ./install-tl -gui=perltk</span><br></pre></td></tr></table></figure>
<p>图形界面大概长这样：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/2.png" width="700"><br><br><br><div class="image-caption"><br>图形界面<br></div><br></div>

<p>默认是安装在 <code>/usr/local/texlive</code> 目录下，可以更改为 <code>/home</code> 等，否则无脑下一步即可。</p>
<p>根据硬件性能不同，安装过程一般不会短于 3 分钟。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/3.png" width="700"><br><br><br><div class="image-caption"><br>安装过程<br></div><br></div>

<p>安装结束后可以卸载映像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure>
<h3 id="通过命令行边下载边安装"><a href="#通过命令行边下载边安装" class="headerlink" title="通过命令行边下载边安装"></a>通过命令行边下载边安装</h3><p>去这里<a href="https://www.tug.org/texlive/" target="_blank" rel="noopener">https://www.tug.org/texlive/</a>找对应的安装包，我下载的是<code>install-tl-unx.tar.gz</code>。</p>
<p>下载完后，随便找个临时目录解压。</p>
<p>默认是安装在 <code>/usr/local/texlive/</code> 路径下，需要以超级用户权限安装，在解压下的目录运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl</span><br></pre></td></tr></table></figure></p>
<p>然后在文本界面下按提示进行交互式安装。当然，也可以安装在本地的用户路径下（如 ~/texlive/），这样就不再需要特殊权限。</p>
<p>如果是进行网络安装，默认会自动选择一个 CTAN 镜象。</p>
<p>这种方法在国内安装很慢，1h才下300多个文件。</p>
<p>国内往往需要用 <code>-repository</code> 选项手工指定镜象服务器地址，URL 地址需要指定到 <code>texlive/tlnet/</code> 路径下。</p>
<p>推荐用清华的镜象：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -repository http://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/</span><br></pre></td></tr></table></figure></p>
<p>这种方法安装快，1h轻松安装完毕。</p>
<p>更方便的方式则是在图形界面下进行安装，此时需要确保系统安装了 <code>perl-tk</code> 等相关 Perl 图形界面库。运行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -gui</span><br></pre></td></tr></table></figure>
<p>即可按界面中的提示安装。或者运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install-tl -gui=wizard</span><br></pre></td></tr></table></figure>
<p>使用图形界面的安装向导，向导方式比前面的方式配置项少一些，但更容易使用。</p>
<p>不过没啥用。还是建议用清华镜像那个命令快一点，不需要这么花俏。</p>
<h1 id="修改环境变量，使编辑器等能找到texlive"><a href="#修改环境变量，使编辑器等能找到texlive" class="headerlink" title="修改环境变量，使编辑器等能找到texlive"></a>修改环境变量，使编辑器等能找到texlive</h1><p>对于 <code>bash</code> 等 <code>Bourne</code> 兼容的 <code>shell</code>，在用户目录的 <code>~/.bashrc</code> 文件中添加一些环境变量，具体路径由安装的位置确定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TeX Live 2017</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux</span><br><span class="line"><span class="comment"># 如果是32位最后改为'i386-linux'</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$&#123;MANPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/man</span><br><span class="line"><span class="built_in">export</span> INFOPATH=<span class="variable">$&#123;INFOPATH&#125;</span>:/usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/info</span><br></pre></td></tr></table></figure>
<p>如果是 <code>csh</code> 或 <code>tcsh</code>，则在 <code>~/.cshrc</code> 中添加内容。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TeX Live 2017</span></span><br><span class="line">setenv PATH /usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux:<span class="variable">$PATH</span></span><br><span class="line">setenv MANPATH /usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/man:<span class="variable">$MANPATH</span></span><br><span class="line">setenv INFOPATH /usr/<span class="built_in">local</span>/texlive/2017/texmf-dist/doc/info:<span class="variable">$INFOPATH</span></span><br></pre></td></tr></table></figure>
<p>对于 <code>Debian/Ubuntu</code> 用户，可以安装下我根据 官方说明 制作的 <code>texlive-local_2017-1_all.deb</code> 来申明下包管理里的依赖关系，避免版本冲突。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i texlive-local_2017-1_all.deb</span><br><span class="line"><span class="comment"># 显示安装的 TeX Live 版本信息</span></span><br><span class="line">dpkg -l | grep texlive-local</span><br></pre></td></tr></table></figure>
<p>至于其他发行版的 <code>texlive-dummy</code> 可去 <code>CTAN</code> 搜索。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>安装完成后，如果一切都设置好，那么运行以下一些简单测试命令，在当前目录应该会得到正确的输出，如果有命令报错，请自行解决。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示 TeX 版本应为 3.14159265</span></span><br><span class="line">tex --version</span><br><span class="line"><span class="comment"># 处理一个基本文件，显示无法找到说明环境变量设置有误</span></span><br><span class="line">latex sample2e.tex</span><br><span class="line"><span class="comment"># 预览上一步得到的 dvi 文件</span></span><br><span class="line">xdvi sample2e.dvi</span><br><span class="line"><span class="comment"># pdfTeX 编译直接输出一份 PDF</span></span><br><span class="line">pdftex sample2e.tex</span><br><span class="line"><span class="comment"># 测试 XeTeX 能否访问系统字体</span></span><br><span class="line">xetex opentype-info.tex</span><br></pre></td></tr></table></figure>
<p>安装之后就可以使用 texdoc 命令阅读安装在本地手册了，对 TeX Live 不甚熟悉的用户最好运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">texdoc texlive-zh</span><br></pre></td></tr></table></figure>
<p>命令再次阅读 TeX Live 2017 的手册。</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>TeX Live 的更新工具 <code>tlmgr</code>（TeX Live Manager）图形性能比较差，特别是在 <code>Windows</code> 上，故推荐终端里直接更新。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tlmgr 只能在 root 权限下运行</span></span><br><span class="line">su</span><br><span class="line"><span class="comment"># 更新 tlmgr 宏包管理器</span></span><br><span class="line">tlmgr update -self</span><br><span class="line"><span class="comment"># 更新所有宏包</span></span><br><span class="line">tlmgr update -all</span><br><span class="line"><span class="comment"># 官方的 CTAN 镜像源速度可能比较慢，校内用户推荐换成 XJTU，支持 http 或 https</span></span><br><span class="line">tlmgr update -all -repository https://mirrors.xjtu.edu.cn/CTAN/systems/texlive/tlnet/</span><br></pre></td></tr></table></figure>
<p>如果钟爱图形界面，带上 <code>-gui</code> 参数即可。校内用户记得把默认软件包仓库改为 <code>XJTU</code> 的镜像源地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line"><span class="comment"># 指定图形界面语言为中文</span></span><br><span class="line">tlmgr -gui -gui-lang zh_CN</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><ul>
<li>关于 Linux 上的编辑器，理论上只要是文本编辑器均可。由于可选择的方案太多，取决于个人的使用习惯，这里只推荐两个适合入门的自由软件 <code>Texmaker</code> 和 <code>TeXstudio</code>（fork 自前者）。</li>
<li>关于 Linux 上的字体，因为版权问题，所以 <code>Times New Roman</code> 和<code>宋体</code>就成了很多 LaTeX 初学者的困扰。</li>
</ul>
<p>推荐的办法是 <code>ctex</code> 宏集处理中文，使用 <code>Fandol 开源字体</code>，默认效果好于 Windows 的<code>中易宋体</code>，另外也可使用<code>思源宋体</code>；而西文和数学字符则用 <code>mathptmx</code> 或 <code>newtx</code> 宏包处理，使用开源的 <code>Nimbus Roman No9 L</code> 字体代替 <code>Times New Roman</code>，差别不大。</p>
<p>对字体有严格要求，可以复制 Windows 下的字体到 <code>~/.fonts</code> 目录下，记得用 <code>fc-cache -fsv</code> 命令更新下字体缓存。</p>
<p>关于 LaTeX 教程或者说手册，推荐两本 <a href="http://www.dralpha.com/zh/index.htm" target="_blank" rel="noopener">包太雷的 lnotes2</a> 和 <a href="https://github.com/CTeX-org/lshort-cn/" target="_blank" rel="noopener">lshort 中文版</a>。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>按照 TeX Live 手册的说明，安装之后，还有一些工作需要做：</p>
<ul>
<li>如果在安装时没有选择在系统目录为可执行文件创建符号链接，就需要手工修改 ~/.profile 文件设置 PATH 环境变量。<ul>
<li>export MANPATH=”/usr/local/texlive/2017/texmf-dist/doc/man”</li>
<li>export INFOPATH=”/usr/local/texlive/2017/texmf-dist/doc/info”</li>
<li>export PATH=”/usr/local/texlive/2017/bin/x86_64-linux:$PATH”</li>
</ul>
</li>
<li>XeTeX 会使用 fontconfig 库来通过字体名搜索字体。TeX Live 的字体目录默认并不在 fongconfig 的搜索目录之列，因此需要按文档要求，将 TeX Live 安装目录下的 <code>texmf-var/fonts/conf/texlive-fontconfig.conf</code> 文件，复制到 <code>/etc/fonts/conf.d/09-texlive.conf</code>，然后运行 fc-cache，以确保 XeTeX 能搜索到字体。否则，TeX Live 自带的 OpenType 字体就只能以字体文件名的方式调用，非常不便。此外这样也能让系统的其他软件使用 TeX Live 安装的字体。<ul>
<li>建议先复制到临时文件夹，改名后，再<code>sudo mv</code></li>
</ul>
</li>
<li><p>如果需要以字体文件名调用 Linux 系统安装的字体，例如使用 CJK 宏包调用来自 Windows 的字体，那么还需要修改 TeX Live 安装目录的 texmf.cnf 文件，在其中设置 OSFONTDIR 变量，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OSFONTDIR = ~/.fonts//;/usr/share/fonts//;/usr/share/fonts-droid//</span><br></pre></td></tr></table></figure>
<p>可能需要用<code>sudo gedit texmf.cnf</code>才修改得了。当然，这一步骤对多数用户的用处并不大。</p>
</li>
<li>在<code>/usr/bin/</code>目录下创建符号链接才能用pdflatex进行编译<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/texlive/2017/bin/x86_64-linux/pdflatex pdflatex</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="安装LaTeX编辑器：TeXstudio"><a href="#安装LaTeX编辑器：TeXstudio" class="headerlink" title="安装LaTeX编辑器：TeXstudio"></a>安装LaTeX编辑器：TeXstudio</h1><p>去官网下deb包然后安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i XXX.deb</span><br></pre></td></tr></table></figure></p>
<p>打开TeXstudio，在倒数第二个选项(o)配置一下。首先配置语言为中文，然后编译器选pdflatex，其他的千万不要动。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/0.png" width="700"><br><br><br><div class="image-caption"><br>配置语言为中文<br></div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2017-12-12/1.png" width="700"><br><br><br><div class="image-caption"><br>编译器选pdflatex<br></div><br></div>

<h1 id="其他宏包"><a href="#其他宏包" class="headerlink" title="其他宏包"></a>其他宏包</h1><h2 id="XeLatex"><a href="#XeLatex" class="headerlink" title="XeLatex"></a>XeLatex</h2><p><code>XeLatex</code> 是 <code>texlive-xetex</code> 包的一部分，用来支持中文。<br>安装的话需要运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install texlive-xetex</span><br></pre></td></tr></table></figure></p>
<p>加上依赖有1G大小。</p>
]]></content>
      
        <categories>
            
            <category> Latex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web App 相关技术]]></title>
      <url>/2017/12/10/2017-12-10-web-app/</url>
      <content type="html"><![CDATA[<p>把技能点点在移动前端…</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>参考： <a href="http://junmer.github.io/mobile-dev-get-started/" target="_blank" rel="noopener">移动 Web 开发入门</a></li>
</ul>
<p>上面这个 slide 资料讲的非常好，算是一个入门的介绍吧。带我们建立基本的移动 web 开发知识体系和常见问题的实践。包含以下几个方面：</p>
<ul>
<li><p>基本概念</p>
<ul>
<li><p>Native</p>
<p>  本地应用 使用 Java \ Objective-C \ Swift 开发</p>
</li>
<li><p>WebApp</p>
<p>  网页应用 html5 开发</p>
</li>
<li><p>Hybrid</p>
<p>  混合应用 ooxx(native, web)</p>
</li>
<li><p>对比</p>
</li>
</ul>
</li>
<li><p>视觉</p>
<ul>
<li>设备的像素</li>
<li>文字单位使用 rem</li>
<li>viewport 属性</li>
<li>横屏竖屏</li>
<li>Flex 伸缩布局</li>
<li>响应式设计</li>
<li>软键盘</li>
<li>隐藏地址栏</li>
<li>苹果设备添加到主屏图标</li>
</ul>
</li>
<li>交互<ul>
<li>Touch</li>
<li>click 延迟</li>
<li>Scroll</li>
<li>Gestures(hammer –A javascript library for multi-touch gestures)</li>
<li>手指友好设计</li>
<li>HTML5 APIS（图像，摇动，声音等）</li>
</ul>
</li>
<li>实践<ul>
<li>屏蔽点击元素时的阴影</li>
<li>图像（像素、矢量图标、base64 减少请求、lazyload）</li>
<li>CSS3（合理使用渐变/圆角/阴影、代替 js 动画、translate3d、解决动画闪烁）</li>
<li>localStorage</li>
<li>避免（iframe、fixed + input）</li>
<li>SPA 或 Multi page</li>
<li>can I use</li>
<li>压缩合并</li>
<li>@G/3G 下建立连接时间</li>
</ul>
</li>
<li><p>调试</p>
<ul>
<li>浏览器自己的调试工具，模拟手机设备</li>
<li><p>weinre</p>
<p>  关于 weinre 我写了一篇博客介绍它。<a href="http://gaohaoyang.github.io/2015/06/18/weinre/" target="_blank" rel="noopener">Weinre –WebApp 调试工具</a></p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h2><p>参考：</p>
<ul>
<li><a href="http://www.css88.com/archives/5480" target="_blank" rel="noopener">移动前端不得不了解的html5 head 头标签</a></li>
</ul>
<p>上面的链接详细的讲解了：</p>
<ul>
<li>DOCTYPE</li>
<li>charset</li>
<li>lang属性</li>
<li>优先使用 IE 最新版本和 Chrome</li>
<li>360 使用Google Chrome Frame</li>
<li>SEO 优化部分：页面标题<code>&lt;title&gt;</code>标签(head 头部必须)，页面关键词 keywords，页面描述内容 description，定义网页作者 author，网页搜索引擎索引方式</li>
<li><p>为移动设备添加 viewport</p>
<p>  <code>viewport</code> 可以让布局在移动浏览器上显示的更好。 通常会写</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> =<span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>content 参数：</p>
<ul>
<li>width viewport 宽度(数值/device-width)</li>
<li>height viewport 高度(数值/device-height)</li>
<li>initial-scale 初始缩放比例</li>
<li>maximum-scale 最大缩放比例</li>
<li>minimum-scale 最小缩放比例</li>
<li>user-scalable 是否允许用户缩放(yes/no)</li>
</ul>
</li>
<li><p>ios 设备，iOS 图标，Android，Windows 8</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span> <span class="comment">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明文档使用的字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面关键词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"name, email@gmail.com"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no, email=no"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-57x57-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-114x114-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-144x144-precomposed.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"768x1004"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1536x2008"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1024x748"</span> <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"2048x1496"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x960"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x960.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x1136"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x1136.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"icon.png"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"/rss.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="页面切换动画"><a href="#页面切换动画" class="headerlink" title="页面切换动画"></a>页面切换动画</h2><ul>
<li><a href="http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html" target="_blank" rel="noopener">移动端重构系列13——页面切换</a></li>
<li><a href="http://www.w3cplus.com/css3/css3-3d-transform.html" target="_blank" rel="noopener">CSS3 3D Transform</a></li>
</ul>
<p>关于 HammerJS 的一个中文文档</p>
<ul>
<li><a href="http://www.cnblogs.com/iamlilinfeng/p/4239957.html" target="_blank" rel="noopener">Hammer.js</a></li>
</ul>
<hr>
<h2 id="CSS-Processing"><a href="#CSS-Processing" class="headerlink" title="CSS Processing"></a>CSS Processing</h2><blockquote>
<p>CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。</p>
<p>这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。</p>
</blockquote>
<p>这里我尝试使用了 Sass，果然很好用。下面记录几个 sass 教程。</p>
<ul>
<li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">Sass入门-w3cplus</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南-阮一峰</a></li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要有 ruby 环境。</p>
<p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 源，然后添加淘宝的源 <a href="https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入" target="_blank" rel="noopener">https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入</a> sass 安装命令 <code>gem install sass</code> 了。</p>
<pre><code>$ gem sources --remove https://rubygems.org/
$ gem sources -a https://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install sass
</code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre><code>sass --watch style.scss:style.css --style expanded
</code></pre><hr>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong><code>rem</code></strong></p>
<p>字体单位使用 rem，用户在手机上设置了字体大小时，不会打破布局，造成混乱。</p>
<ul>
<li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="noopener">CSS3的REM设置字体大小-w3cplus</a></li>
<li><a href="http://www.iyunlu.com/view/css-xhtml/76.html" target="_blank" rel="noopener">响应式十日谈第一日：使用 rem 设置文字大小-一丝</a></li>
</ul>
<hr>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><blockquote>
<p>安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>WEB基本攻击大致可以分为三大类：“资源枚举”、“参数操纵” 和 “其它攻击”</p>
<ul>
<li>资源枚举</li>
<li>参数操纵<ul>
<li>SQL注入</li>
<li>XPath注入</li>
<li>cgi命令执行</li>
<li>XXS（cross-site scripting跨域脚本攻击）其重点是“跨域”和“客户端执行”<ul>
<li>Reflected XSS ——基于反射的XSS攻击。主要依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击。</li>
<li>DOM-based or local XSS——基于DOM或本地的XSS攻击</li>
<li>Stored XSS——基于存储的XSS攻击</li>
</ul>
</li>
<li>会话劫持</li>
</ul>
</li>
<li>其它攻击<ul>
<li>CSRF（cross-site request forgery）跨站请求伪造</li>
<li>钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。</li>
<li>拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。</li>
</ul>
</li>
</ul>
<h3 id="关于-XSS"><a href="#关于-XSS" class="headerlink" title="关于 XSS"></a>关于 XSS</h3><blockquote>
<p><strong>跨网站脚本</strong>（Cross-site scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</p>
<p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>
<p>——维基百科</p>
</blockquote>
<h3 id="XSS-防护"><a href="#XSS-防护" class="headerlink" title="XSS 防护"></a>XSS 防护</h3><ol>
<li><p>浏览器解析顺序：</p>
<p> HTML Parser &gt;&gt; CSS Parser &gt;&gt; JavaScript Parser</p>
</li>
<li><p>浏览器解码顺序：</p>
<p> HTML Decoding &gt;&gt; URL Decoding &gt;&gt; JavaScript Decoding</p>
</li>
<li><p>具体的防护方式：</p>
<ul>
<li>验证输入并且基于语境和按照正确的顺序转义不可信数据<ul>
<li>HTML 中的字符串</li>
<li>HTML 属性中的字符串</li>
<li>事件句柄属性和 JavaScript 中的字符串</li>
<li>HTML 属性中的 URL 路径</li>
<li>HTML 风格属性和 CSS 中的字符串</li>
<li>JavaScript 中的 HTML</li>
</ul>
</li>
<li>始终遵循白名单优于黑名单的做法</li>
<li>使用 UTF-8 为默认的字符编码以及设置 content 为 text/html</li>
<li>不要将用户可以控制的文本放在<meta>标签前。通过使用不同的字符集注射可以导致 XSS。</li>
<li>使用 &lt;!DOCTYPE html&gt;</li>
<li>使用推荐的 HTTP 响应头进行 XSS 防护</li>
<li>防止 CRLF 注入/HTTP 响应拆分</li>
<li>禁止 TRACE 和其他非必要方法</li>
</ul>
</li>
</ol>
<p>对于 innerHTML 的方式输出的，我们可以采用如下的方式转码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转码 XSS 防护</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125; str 用户输入的字符串</span></span><br><span class="line"><span class="comment"> * @return &#123;String&#125;     转码后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#x27;"</span>)</span><br><span class="line">              .replace(<span class="regexp">/\//g</span>, <span class="string">"&amp;#x2f;"</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://www.cnblogs.com/vajoy/p/4176908.html" target="_blank" rel="noopener">浅谈WEB安全性（前端向）</a></li>
<li><a href="http://www.freebuf.com/articles/web/40520.html" target="_blank" rel="noopener">XSS的原理分析与解剖</a></li>
<li><a href="http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/" target="_blank" rel="noopener">原创翻译：给开发者的终极XSS防护备忘录</a></li>
</ul>
<hr>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote>
<p>在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。</p>
<p>但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。</p>
<p>整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。</p>
</blockquote>
<p>这里就是网页的打开速度，如果你的网页打开速度很慢，那么一定会有用户的流失。所以性能优化很重要。</p>
<ul>
<li>网页内容<ul>
<li>减少http请求次数</li>
<li>减少DNS查询次数</li>
<li>避免页面跳转</li>
<li>缓存Ajax</li>
<li>延迟加载</li>
<li>提前加载</li>
<li>减少DOM元素数量</li>
<li>根据域名划分内容</li>
<li>减少iframe数量</li>
<li>避免404</li>
</ul>
</li>
<li>服务器<ul>
<li>使用CDN</li>
<li>添加Expires 或Cache-Control报文头</li>
<li>Gzip压缩传输文件</li>
<li>配置ETags</li>
<li>尽早flush输出</li>
<li>使用GET Ajax请求</li>
<li>避免空的图片src</li>
</ul>
</li>
<li>Cookie<ul>
<li>减少Cookie大小</li>
<li>页面内容使用无cookie域名</li>
</ul>
</li>
<li>CSS<ul>
<li>将样式表置顶</li>
<li>避免CSS表达式</li>
<li>用\<link\>代替@import</link\></li>
<li>避免使用Filters</li>
</ul>
</li>
<li>Javascript<ul>
<li>将脚本置底</li>
<li>使用外部Javascirpt和CSS文件</li>
<li>精简Javascript和CSS</li>
<li>去除重复脚本</li>
<li>减少DOM访问</li>
<li>使用智能事件处理</li>
</ul>
</li>
<li>图片<ul>
<li>优化图像</li>
<li>优化CSS Sprite</li>
<li>不要在HTML中缩放图片</li>
<li>使用小且可缓存的favicon.ico</li>
</ul>
</li>
<li>移动客户端<ul>
<li>保持单个内容小于25KB</li>
<li>打包组建成符合文档</li>
</ul>
</li>
</ul>
<p>具体细节参考文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html" target="_blank" rel="noopener">毫秒必争，前端网页性能最佳实践</a></li>
</ul>
<p>我在 ToDo 这个任务中主要使用了 CDN 来加载静态资源。比如我使用了 <a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度静态资源公共库</a>。引用了里面的 fontawesome，速度果然比在 GitHub 仓库里快很多。下一步是压缩我自己写的静态资源。</p>
<p>其他参考资料：</p>
<ul>
<li><a href="http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers#section:maximising-parallelisation" target="_blank" rel="noopener">给网页设计师和前端开发者看的前端性能优化</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/?p=3152" target="_blank" rel="noopener">梳理：提高前端性能方面的处理以及不足</a></li>
<li><a href="http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html" target="_blank" rel="noopener">css sprite原理优缺点及使用</a></li>
<li><a href="http://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/" target="_blank" rel="noopener">CSS Sprites：鱼翅还是三鹿？</a></li>
<li><a href="http://www.cnblogs.com/leefreeman/p/3998757.html" target="_blank" rel="noopener">大型网站的灵魂——性能</a></li>
<li><a href="http://web.jobbole.com/35339/" target="_blank" rel="noopener">编写高效的 CSS 选择器</a></li>
</ul>
<hr>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote>
<p>对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。</p>
</blockquote>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。</p>
<p>根据AMD规范，我们可以使用 <code>define</code> 定义模块，使用 <code>require</code> 调用模块。</p>
<p>目前，通行的 js 模块规范主要有两种：<code>CommonJS</code> 和 <code>AMD</code>。</p>
<h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p>AMD 即 Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是 CommonJS</p>
<p>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。</p>
<p>详细 API 如下：</p>
<ul>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">AMD（中文版）</a>)</li>
</ul>
<hr>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。Node.JS 首先采用了 js 模块化的概念。</p>
<p>根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 global 对象的属性。</p>
<p>输出模块变量的最好方法是使用 module.exports 对象。</p>
<hr>
<h3 id="为什么要用-requireJS"><a href="#为什么要用-requireJS" class="headerlink" title="为什么要用 requireJS"></a>为什么要用 requireJS</h3><p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</p>
<p>RequireJS就是为了解决这两个问题而诞生的：</p>
<blockquote>
<p>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。</p>
</blockquote>
<h4 id="requireJS"><a href="#requireJS" class="headerlink" title="requireJS"></a>requireJS</h4><ul>
<li><a href="http://requirejs.org/" target="_blank" rel="noopener">requireJS 官网</a></li>
<li><a href="http://www.requirejs.cn/" target="_blank" rel="noopener">requireJS 中文网</a></li>
</ul>
<hr>
<h3 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h3><p>CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。</p>
<blockquote>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
</blockquote>
<ul>
<li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD 模块定义规范</a></li>
</ul>
<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</p>
<blockquote>
<p>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）</p>
</blockquote>
<hr>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程（一）：模块的写法–阮一峰</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="noopener">Javascript模块化编程（二）：AMD规范</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="noopener">Javascript模块化编程（三）：require.js的用法</a></li>
<li><a href="http://segmentfault.com/a/1190000000733959" target="_blank" rel="noopener">详解 JavaScript 模块开发</a></li>
<li><a href="http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html?utm_source=tuicool" target="_blank" rel="noopener">浅谈模块化的JavaScript</a></li>
<li><a href="http://div.io/topic/430" target="_blank" rel="noopener">再谈 SeaJS 与 RequireJS 的差异</a></li>
<li>玩转AMD系列 by erik@EFE<ul>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-preface/" target="_blank" rel="noopener">玩转AMD - 写在前面</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-what/" target="_blank" rel="noopener">玩转AMD - 设计思路</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-how/" target="_blank" rel="noopener">玩转AMD - 应用实践</a></li>
<li><a href="http://efe.baidu.com/blog/dissecting-amd-loader/" target="_blank" rel="noopener">玩转AMD - Loader</a>   </li>
</ul>
</li>
</ul>
<hr>
<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><blockquote>
<p>业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。</p>
<p>在EFE日常工作中，我们是基于EDP，完成项目开发过程中的项目构建、包管理、调试、单测、静态检测、打包、压缩、优化、项目部署等一系列所有工作。</p>
</blockquote>
<p>注：</p>
<p>如果网络不好，可以使用 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a>。</p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://div.io/topic/439" target="_blank" rel="noopener">前端工程与模块化框架</a></li>
<li><a href="http://mweb.baidu.com/p/baidusearch-front-end-road.html" target="_blank" rel="noopener">手机百度前端工程化之路</a></li>
<li><a href="http://www.infoq.com/cn/articles/yunlong-on-fis" target="_blank" rel="noopener">对话百度前端工程师张云龙：F.I.S与前端工业化</a></li>
<li><a href="https://github.com/ecomfe/edp" target="_blank" rel="noopener">EDP</a></li>
<li><a href="http://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html" target="_blank" rel="noopener">Grunt教程——初涉Grunt</a></li>
<li><a href="http://www.open-open.com/lib/view/open1417068223049.html" target="_blank" rel="noopener">gulp入门指南</a></li>
<li><a href="http://www.w3ctech.com/topic/134" target="_blank" rel="noopener">Gulp开发教程（翻译）</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp 中文网</a></li>
<li><a href="https://github.com/ericdum/mujiang.info/issues/6" target="_blank" rel="noopener">npm的package.json中文文档</a></li>
</ul>
<hr>
<h2 id="最终作品"><a href="#最终作品" class="headerlink" title="最终作品"></a>最终作品</h2><p>在任务三中，做了一个 PC 端的 ToDo 应用。任务四是将它优化，以适应移动端设备。</p>
<h3 id="ToDo-WebApp-Version"><a href="#ToDo-WebApp-Version" class="headerlink" title="ToDo WebApp Version"></a>ToDo WebApp Version</h3><ul>
<li><a href="https://github.com/baidu-ife/ife/tree/master/task/task0004" target="_blank" rel="noopener">任务四要求</a></li>
<li><a href="https://github.com/Gaohaoyang/ToDo-WebApp" target="_blank" rel="noopener">源代码</a></li>
<li><a href="http://gaohaoyang.github.io/ToDo-WebApp/" target="_blank" rel="noopener">在线 demo</a></li>
<li><p>手机查看 ↓ 二维码 ↓</p>
<p>  <img src="http://7q5cdt.com1.z0.glb.clouddn.com/task4-code-todoWebApp.png" alt="todoWebApp"></p>
</li>
<li><p><a href="http://gaohaoyang.github.io" target="_blank" rel="noopener">我的博客 HyG</a></p>
</li>
</ul>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><ul>
<li><p><strong>数据存储</strong></p>
<p>  以 JSON 模拟数据表的形式存储于 LocalStorage 中</p>
<pre><code>使用数据库的思想，构建3张表。
cateJson 分类
childCateJson 子分类
taskJson 任务

分类表 cate
----------------------
id* | name | child(FK)
----------------------

子分类表 childCate
--------------------------------
id* | pid(FK) | name | child(FK)
--------------------------------

任务表 task
----------------------------------------------
id* | pid(FK) | finish | name | date | content
----------------------------------------------
</code></pre></li>
<li><p><strong>使用 <code>Sass</code> 重构了 CSS 代码</strong></p>
<p>  使用分块、继承等方式，使得代码更加清晰明了。</p>
</li>
<li><p><strong>响应式布局</strong></p>
<p>  针对手机端细节做了很多调整，更符合手机上的视觉交互习惯。</p>
</li>
<li><p><strong>加入页面切换效果</strong></p>
<p>  使用 <code>translate3d()</code>，纯 CSS3 切换动画效果。</p>
</li>
<li><p><strong>处理了 XSS 防护</strong></p>
<p>  对可能造成破坏的字符进行转码。</p>
</li>
<li><p><strong>性能优化</strong></p>
<p>  使用 CDN 处理静态资源 fontAwesome，压缩静态资源等</p>
</li>
<li><p><strong>模块化</strong></p>
<p>  使用 requireJS 模块化 JavaScript 代码。重构 JavaScript 代码。优化之前写的耦合性高的绑定事件，重新绑定事件，降低耦合性。期间根据具体需求重写了事件代理的代码。</p>
</li>
<li><p><strong>前端工程化</strong></p>
<p>  使用 gulp，自动编译 Sass，压缩 CSS 和 JavaScript 代码。并且配置了自动流程。</p>
</li>
</ul>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="webkit-tap-highlight-color-属性"><a href="#webkit-tap-highlight-color-属性" class="headerlink" title="-webkit-tap-highlight-color 属性"></a><code>-webkit-tap-highlight-color</code> 属性</h3><p>感谢 <a href="https://github.com/fiona23" target="_blank" rel="noopener">fiona</a> 指出。</p>
<p>safari移动端点击的时候会闪一下加上 <code>-webkit-tap-highlight-color: transparent;</code> 就不会闪了。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.css88.com/webkit/-webkit-tap-highlight-color/" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code>  css88</a></li>
<li><a href="http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html" target="_blank" rel="noopener"><code>-webkit-tap-highlight-color</code> 属性</a></li>
</ul>
<hr>
<h3 id="textarea-标签-disabled-颜色"><a href="#textarea-标签-disabled-颜色" class="headerlink" title="textarea 标签 disabled 颜色"></a>textarea 标签 disabled 颜色</h3><ul>
<li><p>为什么用 disabled 属性？</p>
<p>  因为我发现仅仅使用 readonly 属性，在 IE 下是显示光标的。于是使用 disabled。</p>
</li>
<li><p>出现的问题</p>
<p>  各家浏览器对于 disabled 属性有自己的样式设定，比如 IE 下是灰色的。苹果设备下也是。改变这些样式的方法也不是统一的。如果要兼容 Safari 必须加上</p>
</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">-webkit-text-fill-<span class="attribute">color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">-webkit-<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>于是最终代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 1);</span><br><span class="line">    <span class="attribute">-webkit-opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参考：<a href="http://stackoverflow.com/a/4648315" target="_blank" rel="noopener">Disabled input text color 中的评论</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> Sass </tag>
            
            <tag> 移动端 </tag>
            
            <tag> XSS </tag>
            
            <tag> AMD </tag>
            
            <tag> requireJS </tag>
            
            <tag> CommonJS </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> WebApp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git Tips]]></title>
      <url>/2017/12/09/2017-12-9-git-tips/</url>
      <content type="html"><![CDATA[<h2 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h2><h3 id="克隆库"><a href="#克隆库" class="headerlink" title="克隆库"></a>克隆库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/php/php-src.git</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/php/php-src.git <span class="comment"># 只抓取最近的一次 commit</span></span><br></pre></td></tr></table></figure>
<h2 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h2><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline filename <span class="comment"># 一行显示</span></span><br><span class="line">git show xxxx <span class="comment"># 查看某次修改</span></span><br></pre></td></tr></table></figure>
<h3 id="标签功能"><a href="#标签功能" class="headerlink" title="标签功能"></a>标签功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="comment"># 显示所有标签</span></span><br><span class="line">git tag -l <span class="string">'v1.4.2.*'</span> <span class="comment"># 显示 1.4.2 开头标签</span></span><br><span class="line">git tag v1.3 <span class="comment"># 简单打标签   </span></span><br><span class="line">git tag -a v1.2 9fceb02 <span class="comment"># 后期加注标签</span></span><br><span class="line">git tag -a v1.4 -m <span class="string">'my version 1.4'</span> <span class="comment"># 增加标签并注释， -a 为 annotated 缩写</span></span><br><span class="line">git show v1.4 <span class="comment"># 看某一标签详情</span></span><br><span class="line">git push origin v1.5 <span class="comment"># 分享某个标签</span></span><br><span class="line">git push origin --tags <span class="comment"># 分享所有标签</span></span><br></pre></td></tr></table></figure>
<h3 id="回滚操作"><a href="#回滚操作" class="headerlink" title="回滚操作"></a>回滚操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset 9fceb02 <span class="comment"># 保留修改</span></span><br><span class="line">git reset 9fceb02 --hard <span class="comment"># 删除之后的修改</span></span><br></pre></td></tr></table></figure>
<h3 id="取消文件的修改"><a href="#取消文件的修改" class="headerlink" title="取消文件的修改"></a>取消文件的修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- a.php <span class="comment">#  取消单个文件</span></span><br><span class="line">git checkout -- <span class="comment"># 取消所有文件的修改</span></span><br></pre></td></tr></table></figure>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm a.php  <span class="comment"># 直接删除文件</span></span><br><span class="line">git rm --cached a.php <span class="comment"># 删除文件暂存状态</span></span><br></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv a.php ./<span class="built_in">test</span>/a.php</span><br></pre></td></tr></table></figure>
<h3 id="查看文件修改"><a href="#查看文件修改" class="headerlink" title="查看文件修改"></a>查看文件修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff          <span class="comment"># 查看未暂存的文件更新 </span></span><br><span class="line">git diff --cached <span class="comment"># 查看已暂存文件的更新</span></span><br></pre></td></tr></table></figure>
<h3 id="暂存和恢复当前staging"><a href="#暂存和恢复当前staging" class="headerlink" title="暂存和恢复当前staging"></a>暂存和恢复当前staging</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment"># 暂存当前分支的修改</span></span><br><span class="line">git stash apply <span class="comment"># 恢复最近一次暂存</span></span><br><span class="line">git stash list <span class="comment"># 查看暂存内容</span></span><br><span class="line">git stash apply stash@&#123;2&#125; <span class="comment"># 指定恢复某次暂存内容</span></span><br><span class="line">git stash drop stash@&#123;0&#125; <span class="comment"># 删除某次暂存内容</span></span><br></pre></td></tr></table></figure>
<h3 id="修改-commit-历史纪录"><a href="#修改-commit-历史纪录" class="headerlink" title="修改 commit 历史纪录"></a>修改 commit 历史纪录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 0580eab8</span><br></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop <span class="comment"># 只创建分支</span></span><br><span class="line">git checkout -b master develop <span class="comment"># 创建并切换到 develop 分支</span></span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master <span class="comment"># 切换到 master 分支</span></span><br><span class="line">git merge --no-ff develop <span class="comment"># 把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录</span></span><br><span class="line">git rebase develop <span class="comment"># rebase 当前分支到 develop</span></span><br><span class="line">git branch -d develop <span class="comment"># 删除 develop 分支</span></span><br></pre></td></tr></table></figure>
<h3 id="克隆远程分支"><a href="#克隆远程分支" class="headerlink" title="克隆远程分支"></a>克隆远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -r <span class="comment"># 显示所有分支，包含远程分支</span></span><br><span class="line">git checkout origin/android</span><br></pre></td></tr></table></figure>
<h3 id="修复develop上的合并错误"><a href="#修复develop上的合并错误" class="headerlink" title="修复develop上的合并错误"></a>修复develop上的合并错误</h3><ol>
<li>将merge前的commit创建一个分之，保留merge后代码</li>
<li>将develop <code>reset --force</code>到merge前，然后<code>push --force</code></li>
<li>在分支中rebase develop</li>
<li>将分支push到服务器上重新merge</li>
</ol>
<h3 id="强制更新到远程分支最新版本"><a href="#强制更新到远程分支最新版本" class="headerlink" title="强制更新到远程分支最新版本"></a>强制更新到远程分支最新版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br><span class="line">git submodule update --remote -f</span><br></pre></td></tr></table></figure>
<h2 id="Submodule使用"><a href="#Submodule使用" class="headerlink" title="Submodule使用"></a>Submodule使用</h2><h3 id="克隆带submodule的库"><a href="#克隆带submodule的库" class="headerlink" title="克隆带submodule的库"></a>克隆带submodule的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/chaconinc/MainProject</span><br></pre></td></tr></table></figure>
<h3 id="clone主库后再去clone-submodule"><a href="#clone主库后再去clone-submodule" class="headerlink" title="clone主库后再去clone submodule"></a>clone主库后再去clone submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chaconinc/MainProject</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<h2 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h2><p>Git的全局设置在<code>~/.gitconfig</code>中，单独设置在<code>project/.git/config</code>下。</p>
<p>忽略设置全局在<code>~/.gitignore_global</code>中，单独设置在<code>project/.gitignore</code>下。</p>
<h3 id="设置-commit-的用户和邮箱"><a href="#设置-commit-的用户和邮箱" class="headerlink" title="设置 commit 的用户和邮箱"></a>设置 commit 的用户和邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"xx"</span></span><br><span class="line">git config user.email <span class="string">"xx@xx.com"</span></span><br></pre></td></tr></table></figure>
<p>或者直接修改config文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = xxx</span><br><span class="line">    email = xxx@xxx.com</span><br></pre></td></tr></table></figure>
<h3 id="查看设置项"><a href="#查看设置项" class="headerlink" title="查看设置项"></a>查看设置项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h3 id="设置git终端颜色"><a href="#设置git终端颜色" class="headerlink" title="设置git终端颜色"></a>设置git终端颜色</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.branch auto</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（三）代数方法求PageRank]]></title>
      <url>/2017/12/08/2017-12-08-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E4%BB%A3%E6%95%B0%E6%96%B9%E6%B3%95%E6%B1%82PageRank/</url>
      <content type="html"><![CDATA[<p>本文结合实例介绍如何用代数方法求PageRank。</p>
<p>博文<a href="https://linxueyuanstdio.github.io/2017/12/%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E4%B8%80-PageRank/" target="_blank" rel="noopener">《网页排序算法（一）PageRank》</a>介绍了PageRank，计算PageRank可以用迭代的方法也可以用代数的方法，其背后的数学基本运算是一样的，即：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d \sum</em>{p_j\in B(p_i)} \frac{PR(p_j)}{L(p_j)}$$</p>
<p>下文结合图1介绍如何用代数方法求PageRank。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia)</div><br></div>

<p>为了便于讨论，将图1下方的节点分别标上G, H, I, J, K，如下图所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/1.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 2: Draw Fig. 1 in NetworkX.<br></div><br></div>

<h1 id="代数方法"><a href="#代数方法" class="headerlink" title="代数方法"></a>代数方法</h1><p>根据1中的等式，把所有节点都放在一块，可以得到：</p>
<p>$$\begin{bmatrix}<br>PR(p_1) \<br>PR(p_2) \<br>\vdots \<br>PR(p_3)<br>\end{bmatrix} =<br>\begin{bmatrix}<br>{(1-d)/ N} \<br>{(1-d) / N} \<br>\vdots \<br>{(1-d) / N}<br>\end{bmatrix}</p>
<ul>
<li>d<br>\begin{bmatrix}<br>\ell(p_1,p_1) &amp; \ell(p_1,p_2) &amp; \cdots &amp; \ell(p_1,p_N) \<br>\ell(p_2,p_1) &amp; \ddots &amp;  &amp; \vdots \<br>\vdots &amp; &amp; \ell(p_i,p_j) &amp; \<br>\ell(p_N,p_1) &amp; \cdots &amp; &amp; \ell(p_N,p_N)<br>\end{bmatrix}<br>\begin{bmatrix}<br>PR(p_1) \<br>PR(p_2) \<br>\vdots \<br>PR(p_3)<br>\end{bmatrix}$$</li>
</ul>
<p>上述等式可以缩写为：</p>
<p>$$\mathbf{R} = d \mathcal{M}\mathbf{R} + \frac{1-d}{N} \mathbf{1}.       (**)$$</p>
<p>其中，1为N维的列向量，所有元素皆为1。以图1为例，该列向量为，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">N = len(G.nodes())      <span class="comment"># N = 11</span></span><br><span class="line">column_vector = np.ones((N, <span class="number">1</span>), dtype=np.int)</span><br><span class="line"> </span><br><span class="line">[[<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p>
<h2 id="Adjacency-function"><a href="#Adjacency-function" class="headerlink" title="Adjacency function"></a>Adjacency function</h2><p>邻接函数（adjacency function）$$\ell(p_1,p_2)$$组成了矩阵M，</p>
<p>$$\mathcal{M}_{ij} =\ell(pi,pj) =  \begin{cases} 1 /L(p_j) , &amp; \mbox{if }j\mbox{ links to }i\ L(pj)是指从pj链出去的网页数目\ 0, &amp; \mbox{otherwise} \end{cases}$$</p>
<p>这样矩阵每一行乘以R，就得到了新的PR值，比如第二行（图1的节点B），</p>
<p>$$\begin{align}<br>M_{2j}    &amp;=\ell(p_2,p_1)⋅PR(p_2)+\ell(p_2,p_2)⋅PR(p_2)+⋯+\ell(p_2,p_N)⋅PR(p_2)\<br>&amp;=0 (‘A’)+0 (‘B’)+1 (‘C’)+12 (‘D’)+13 (‘E’)+12 (‘F’) +12 (‘G’)+12 (`H’)+12 (‘I’)+0 (‘J’)+0 (‘K’)<br> \end{align}$$</p>
<p>以节点<code>G</code>为例，<code>G</code>给<code>B</code>和<code>E</code>投票，所以<code>B</code>得到<code>1/2</code>。</p>
<p>矩阵<code>M</code>每一列加起来都是<code>1</code>（值得注意的是，对于没有出链的节点，列加起来等于0，比如图1的节点<code>A</code>），即<br>$$\sum_{i=1}^{N}\ell(p_i,p_j)=1$$。事实上，M是一个转移矩阵transition matrix（也叫概率矩阵probability matrix，马尔可夫矩阵Markov matrix）。因此，PageRank是eigenvector centrality的一个变体。</p>
<h2 id="矩阵M"><a href="#矩阵M" class="headerlink" title="矩阵M"></a>矩阵M</h2><p>事实上，M可以被看成normalized的图邻接矩阵，即：</p>
<p>$$M=(K^{−1}A)^T$$<br>其中，A为图的邻接矩阵，以图1为例，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get adjacency matrix</span></span><br><span class="line">nodelist = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>]  <span class="comment"># sorted(G.nodes())</span></span><br><span class="line">A = nx.to_numpy_matrix(G, nodelist)</span><br><span class="line"> </span><br><span class="line">  <span class="string">'A'</span> <span class="string">'B'</span> <span class="string">'C'</span> <span class="string">'D'</span> <span class="string">'E'</span> <span class="string">'F'</span> <span class="string">'G'</span> <span class="string">'H'</span> <span class="string">'I'</span> <span class="string">'J'</span> <span class="string">'K'</span></span><br><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure></p>
<p>A是对角矩阵，对角线上的元素是对应节点的出度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nodelist = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>]  <span class="comment"># sorted(G.nodes())</span></span><br><span class="line">list_outdegree = map(operator.itemgetter(<span class="number">1</span>), sorted(G.out_degree().items()))</span><br><span class="line">K = np.diag(list_outdegree)</span><br><span class="line"> </span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br></pre></td></tr></table></figure></p>
<p>K的逆矩阵$$K^{-1}$$为，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">K_inv = np.linalg.pinv(K)</span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>  ]]</span><br></pre></td></tr></table></figure></p>
<p>那么，根据公式$$M=(K^{−1}A)^T$$就可以求得M，如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">M = (K_inv * A).transpose()</span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.5</span>   <span class="number">0.33</span>  <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">1.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">0.5</span>   <span class="number">1.</span>    <span class="number">1.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.33</span>  <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]</span><br><span class="line"> [ <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>    <span class="number">0.</span>  ]]</span><br></pre></td></tr></table></figure></p>
<h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>R是2.1等式的特征向量（eigenvector），求解等式得：</p>
<p>$$\mathbf{R} =  (\mathbf{I}-d \mathcal{M})^{-1}  \frac{1-d}{N}  \mathbf{1},$$</p>
<p>其中$$\mathbf{I}$$是单位矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="number">0.85</span></span><br><span class="line">I = np.identity(N)</span><br><span class="line">R = np.linalg.pinv(I - d*M) * (<span class="number">1</span>-d)/N * column_vector </span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.028</span>]</span><br><span class="line"> [ <span class="number">0.324</span>]</span><br><span class="line"> [ <span class="number">0.289</span>]</span><br><span class="line"> [ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.068</span>]</span><br><span class="line"> [ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]</span><br><span class="line"> [ <span class="number">0.014</span>]]</span><br></pre></td></tr></table></figure></p>
<p>咦，结果怎么跟图1不一样。得到R需要normalized，如此，所有节点的PR加起来才能等于1。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">R = R/sum(R)    <span class="comment"># normalized R, so that page ranks sum to 1.</span></span><br><span class="line"> </span><br><span class="line">[[ <span class="number">0.033</span>]</span><br><span class="line"> [ <span class="number">0.384</span>]</span><br><span class="line"> [ <span class="number">0.343</span>]</span><br><span class="line"> [ <span class="number">0.039</span>]</span><br><span class="line"> [ <span class="number">0.081</span>]</span><br><span class="line"> [ <span class="number">0.039</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]</span><br><span class="line"> [ <span class="number">0.016</span>]]</span><br></pre></td></tr></table></figure></p>
<p>用NetworkX作出来的图，是这样的：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-8/2.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 3: PageRanks for a simple network<br></div><br></div>

<h1 id="Python源代码"><a href="#Python源代码" class="headerlink" title="Python源代码"></a>Python源代码</h1><p>NetworkX实现了PageRank的代数计算方法<code>nx.pagerank_numpy</code>，源代码在这里。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagerank_numpy</span><span class="params">(G, alpha=<span class="number">0.85</span>, personalization=None, weight=<span class="string">'weight'</span>, dangling=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return the PageRank of the nodes in the graph.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> len(G) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    M = google_matrix(G, alpha, personalization=personalization,</span><br><span class="line">                      weight=weight, dangling=dangling)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># use numpy LAPACK solver</span></span><br><span class="line">    eigenvalues, eigenvectors = np.linalg.eig(M.T)</span><br><span class="line">    ind = eigenvalues.argsort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># eigenvector of largest eigenvalue at ind[-1], normalized</span></span><br><span class="line">    largest = np.array(eigenvectors[:, ind[<span class="number">-1</span>]]).flatten().real</span><br><span class="line">    norm = float(largest.sum())</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> dict(zip(G, map(float, largest / norm)))</span><br></pre></td></tr></table></figure></p>
<p>References:</p>
<ul>
<li>[1] <a href="http://stackoverflow.com/questions/42224302/incorrect-pagerank-calculation-result" target="_blank" rel="noopener">StackOverflow: Incorrect PageRank calculation result</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（二）迭代方法求PageRank]]></title>
      <url>/2017/12/07/2017-12-07-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95%E6%B1%82PageRank/</url>
      <content type="html"><![CDATA[<p>本文介绍如何用迭代的方法计算PageRank。</p>
<h1 id="PageRank"><a href="#PageRank" class="headerlink" title="PageRank"></a>PageRank</h1><p>博文<a href="https://linxueyuanstdio.github.io/2017/12/%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E4%B8%80-PageRank/" target="_blank" rel="noopener">《网页排序算法（一）PageRank》</a>介绍了PageRank，计算PageRank可以用迭代的方法也可以用代数的方法，其背后的数学基本运算是一样的，即：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d\sum</em>{p_j\in B(p_i)}\frac{PR(pj)}{L(p_j)}$$</p>
<p>下文结合图1介绍如何用迭代方法求PageRank。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia).</div><br></div>


<p>为了便于讨论，将图1下方的节点分别标上G, H, I, J, K，如下图所示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/1.png" width="700"><br><br><br><div class="image-caption">Fig. 2: Label nodes in Fig. 1.</div><br></div>

<h1 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h1><h2 id="初始化节点PR值"><a href="#初始化节点PR值" class="headerlink" title="初始化节点PR值"></a>初始化节点PR值</h2><p>如果没有给节点指定PR初始值，那么每个节点的PR初始化为1/N (N为节点数目)，以图1为例，节点的PR初始值为<code>1/11</code>：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/2.png" width="700"><br><br><br><div class="image-caption">Fig. 3: The graph with starting value of PageRank iteration for each node.</div><br></div>

<p>相应源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Step 1: Initiate PageRank</span></span><br><span class="line">N = G.number_of_nodes()                     <span class="comment"># N = 11</span></span><br><span class="line">node_and_pr = dict.fromkeys(G, <span class="number">1.0</span> / N)</span><br></pre></td></tr></table></figure></p>
<h2 id="创建随机图（stochastic-graph）"><a href="#创建随机图（stochastic-graph）" class="headerlink" title="创建随机图（stochastic graph）"></a>创建随机图（stochastic graph）</h2><p>随机图（stochastic graph）是一个有向带权图，边的权重被normalized，使得每个节点的outedges的权重加起来为1。事实上，边的权重即为$$1/L(p_j)$$，图1的随机图如下：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/3.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 4: The stochastic graph<br></div><br></div>


<p>比如，节点<code>D</code>有两条出链，<code>D --&gt; A</code>和<code>D --&gt; B</code>，所以他们的边权重都是0.5。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stochastic_graph = nx.stochastic_graph(G, weight=weight)    <span class="comment"># M = 1/L(pj)</span></span><br><span class="line"> </span><br><span class="line">print(stochastic_graph[<span class="string">'D'</span>])</span><br><span class="line">&#123;<span class="string">'A'</span>: &#123;<span class="string">'Edge Id'</span>: <span class="string">u'5'</span>, <span class="string">'weight'</span>: <span class="number">0.5</span>&#125;, <span class="string">'B'</span>: &#123;<span class="string">'Edge Id'</span>: <span class="string">u'6'</span>, <span class="string">'weight'</span>: <span class="number">0.5</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代计算"><a href="#迭代计算" class="headerlink" title="迭代计算"></a>迭代计算</h2><p>遍历所有节点，将每个节点的PR值平均分给其出链的节点，即$$\sun_{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$，乘以阻尼系数d，再加上(1−d)/N。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dangling_value = (<span class="number">1</span>-d)/N</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(max_iter):       <span class="comment"># for each iteration</span></span><br><span class="line">    node_and_prev_pr = node_and_pr</span><br><span class="line">    node_and_pr = dict.fromkeys(node_and_prev_pr.keys(), <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_and_pr:    <span class="comment"># for each node</span></span><br><span class="line">        <span class="keyword">for</span> out_node <span class="keyword">in</span> stochastic_graph[node]:     <span class="comment"># node --&gt; out_node</span></span><br><span class="line">            node_and_pr[out_node] += d * node_and_prev_pr[node] * stochastic_graph[node][out_node][weight]  <span class="comment"># PR(p_i) = d * PR(p_j)&#125;/L(p_j)</span></span><br><span class="line"> </span><br><span class="line">        node_and_pr[node] += dangling_value</span><br></pre></td></tr></table></figure></p>
<p>第一次迭代结果如下图所示（有些箭头没显示出来，NetworkX可视化很弱）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-7/4.png" width="700"><br><br><br><div class="image-caption"><br>Fig. 5: PageRank after one ieration<br></div><br></div>


<p>那什么时候程序结束呢。将迭代后的PR值跟前一次比较，如果差别很少（如<code>PR′(A)−PR(A)&lt;1.0e−6PR′(A)−PR(A)&lt;1.0e−6）</code>，就可以停止迭代了。源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check convergence, l1 norm</span></span><br><span class="line">err = sum([abs(node_and_pr[node] - node_and_prev_pr[node]) <span class="keyword">for</span> node <span class="keyword">in</span> node_and_pr])</span><br><span class="line"><span class="keyword">if</span> err &lt; N*tol:</span><br><span class="line">    <span class="keyword">return</span> node_and_pr</span><br></pre></td></tr></table></figure></p>
<p>在本例中，需要66次迭代，最后得到的PageRank，如下图：</p>
<p>wikipedia_pagerank_example_pr<br>Fig. 6: Stable PageRank values (66 iterations)</p>
<p>我在想一个问题，上面的方法，每次迭代都是基于上一次的PR值，能不能这样，迭代的时候使用最新的值，这样会不能减少迭代次数，如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">PA(D) = <span class="number">0.09</span></span><br><span class="line">PA(B) = <span class="number">0.09</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第一次迭代</span></span><br><span class="line">PA(D)/2 --&gt; P(A), P(B)  # 此时， PB(B)=0.045</span><br><span class="line">PB(B) --&gt; P(C)          # 按上面的算法，PB(B)=0.09，那能不能使用刚更新的PR值0.045，这样会不会快一些？</span><br></pre></td></tr></table></figure></p>
<h1 id="NetworkX的pagerank"><a href="#NetworkX的pagerank" class="headerlink" title="NetworkX的pagerank"></a>NetworkX的pagerank</h1><p>nx.pagerank跟章节2差不多，区别在于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2中的算法</span></span><br><span class="line">node_and_pr[node] += (<span class="number">1.0</span> - d)/N</span><br><span class="line"> </span><br><span class="line"><span class="comment"># nx.pagerank</span></span><br><span class="line">danglesum = d * sum(node_and_prev_pr[node] <span class="keyword">for</span> node <span class="keyword">in</span> dangling_nodes)</span><br><span class="line">node_and_pr[node] += danglesum/N + (<span class="number">1.0</span> - d)/N  <span class="comment"># danglesum/N  + (1-d)/N</span></span><br></pre></td></tr></table></figure></p>
<p>nx.pagerank将图中所有悬挂节点（dangling nodes，没有出链的节点，图1只有节点A）的PR累加，并normalized，再加上(1.0–d)/N。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（二）部署并运行以太坊智能合约]]></title>
      <url>/2017/12/06/2017-12-06-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E9%83%A8%E7%BD%B2%E5%B9%B6%E8%BF%90%E8%A1%8C%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（零）概念入门]]></title>
      <url>/2017/12/06/2017-11-27-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E9%9B%B6%EF%BC%89%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>比特币地址（例如：1DSrfJdB2AnWaFNgSbv3MZC2m74996JafV）由一串字符和数字组成，以阿拉伯数字“1”开头。就像别人向你的email地址发送电子邮件一样，他可以通过你的比特币地址向你发送比特币。</p>
<p>可以用 <a href="https://github.com/samr7/vanitygen" target="_blank" rel="noopener">vanitygen</a> 来生成包含一定字母的地址。</p>
<h2 id="BIP"><a href="#BIP" class="headerlink" title="BIP"></a>BIP</h2><p>比特币改进提议 （Bitcoin Improvement Proposals 的缩写），指比特币社区成员所提交的一系列改进比特币的提议。例如，BIP0021是一项改进比特币统一资源标识符（URI）计划的提议。</p>
<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><p>“比特币”既可以指这种虚拟货币单位，也指比特币网络或者网络节点使用的比特币软件。</p>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>一个区块就是若干交易数据的集合，它会被标记上时间戳和之前一个区块的独特标记。区块头经过哈希运算后会生成一份工作量证明，从而验证区块中的交易。有效的区块经过全网络的共识后会被追加到主区块链中。</p>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>区块链是一串通过验证的区块，当中的每一个区块都与上一个相连，一直连到创世区块。</p>
<h2 id="确认"><a href="#确认" class="headerlink" title="确认"></a>确认</h2><p>当一项交易被区块收录时，我们可以说它有一次确认。矿工们在此区块之后每再产生一个区块，此项交易的确认数就再加一。当确认数达到六及以上时，通常认为这笔交易比较安全并难以逆转。</p>
<h2 id="难度"><a href="#难度" class="headerlink" title="难度"></a>难度</h2><p>整个网络会通过调整“难度”这个变量来控制生成工作量证明所需要的计算力。</p>
<h2 id="难度目标"><a href="#难度目标" class="headerlink" title="难度目标"></a>难度目标</h2><p>使整个网络的计算力大致每10分钟产生一个区块所需要的难度数值即为难度目标。</p>
<h2 id="难度调整"><a href="#难度调整" class="headerlink" title="难度调整"></a>难度调整</h2><p>整个网络每产生2,106个区块后会根据之前2,106个区块的算力进行难度调整。</p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>二进制数据的一种数字指纹。</p>
<h2 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h2><p>创世区块指区块链上的第一个区块，用来初始化相应的加密货币。</p>
<h2 id="矿工"><a href="#矿工" class="headerlink" title="矿工"></a>矿工</h2><p>矿工指通过不断重复哈希运算来产生工作量证明的各网络节点。</p>
<h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>描述挖矿的一个好方法是将之类比为一个巨大的多人数独谜题游戏。一旦有人发现正解之后，这个数独游戏会自动调整困难度以使游戏每次需要大约10分钟解决。想象一个有几千行几千列的巨大数独游戏。如果给你一个已经完成的数独，你可以很快地验证它。然而，如果这个数独只有几个方格里有数字其余方格都为空的话，就会花费非常长的时间来解决。这个数独游戏的困难度可以通过改变其大小（更多或更少行列）来调整，但即使它非常大时验证它也是相当容易的。而比特币中的 “谜题” 是基于哈希加密算法的，其展现了相似的特性：非对称地，它解起来困难而验证很容易，并且它的困难度可以调整。</p>
<p>当区块一个个堆上来时，这个交易变得指数级地越来越难被推翻，因此它在网络中得到更多信任。</p>
<h2 id="矿工费"><a href="#矿工费" class="headerlink" title="矿工费"></a>矿工费</h2><p>交易的发起者通常会向网络缴纳一笔矿工费，用以处理这笔交易。大多数的交易需要0.5毫比特币的矿工费。</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>比特币网络是一个由若干节点组成的用以广播交易信息和数据区块的P2P网络。</p>
<h2 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h2><p>工作量证明指通过有效计算得到的一小块数据。具体到比特币，矿工必须要在满足全网目标难度的情况下求解SHA256算法。</p>
<h2 id="奖励"><a href="#奖励" class="headerlink" title="奖励"></a>奖励</h2><p>每一个新区块中都有一定量新创造的比特币用来奖励算出工作量证明的矿工。现阶段每一区块有25比特币的奖励。</p>
<h2 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h2><p>用来解锁对应（钱包）地址的一串字符，例如5J76sF8L5jTtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3ibVPxh。</p>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>简单地说，交易指把比特币从一个地址转到另一个地址。更准确地说，一笔“交易”指一个经过签名运算的，表达价值转移的数据结构。每一笔“交易”都经过比特币网络传输，由矿工节点收集并封包至区块中，永久保存在区块链某处。</p>
<p>转出是交易，转入也是交易。</p>
<ul>
<li>一般交易。一个地址转到另一个地址，用不完会“找零”。</li>
<li>集合型交易。多个地址转向一个地址，钱包用来汇合零钱。</li>
<li>分散型交易。一个转向多个，如发工资。</li>
</ul>
<p>交易的输出会被创建成为一个包含这笔数额的脚本的形式，只能被引入这个脚本的一个解答后才能兑换。</p>
<h2 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h2><p>钱包指保存比特币地址和私钥的软件，可以用它来接受、发送、储存你的比特币。</p>
<p>比特币地址以数字1或3开头。类似于电子邮件地址，这些地址可以分享给其他的比特币的用户，这样他们就可以直接通过这些地址发送比特币到你的钱包里。不同于电邮地址的是，你可以任意地创建新的比特币地址，这些地址都能成功地将资金转到你的钱包。</p>
<p>钱包是多个地址和解锁资金密钥的简单集合。每笔交易你都可以使用不同的地址，这有利于提高隐私的安全性。用户可创建地址的数量几乎不受限制。</p>
<p>一个地址对应一个秘钥，像支付宝的付款码，其在支付宝后台也有一个对应的秘钥，验证交易。</p>
<p>直到这个地址接收到在比特币账簿（区块链）中公布过的一笔交易时，才会成为众多可能“有效”的比特币地址之一。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>平均每10分钟就有人能验证过去这10分钟发生的交易，他将会获得新币作为工作回报。本质上，挖矿把央行的货币发行和结算功能进行分布式，用全球化的算力竞争来取代对中央发行机构的需求。</p>
<p>比特币系统包含调节挖矿难度的协议。挖矿——在比特币网络中成功写入一个区块交易——的难度是动态调整的，保证不管有多少矿工（多少CPU）挖矿，平均每10分钟只有一个矿工成功。</p>
<p>任何接受数字货币的人都面临的两个基本问题是：</p>
<p>我能相信这钱是真实可信的，而不是伪造的吗？<br>我能确定没人说这笔钱是他们的，而不是我的吗？（又名“双重支付”问题）</p>
<p>比特币代表了数十年的密码学和分布式系统的巅峰之作，这是一个独特而强大的组合，汇集了四个关键的创新点。比特币由这些构成：</p>
<ul>
<li>一个去中心化的点对点网络（比特币协议）</li>
<li>一个公共的交易账簿（区块链）</li>
<li>一个去中心化的数学的和确定性的货币发行（分布式挖矿）</li>
<li>一个去中心化的交易验证系统（交易脚本）</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="http://blockchain.info/" target="_blank" rel="noopener">http://blockchain.info/</a> 可以查看所有交易信息</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://zhibimo.com/read/wang-miao/mastering-bitcoin" target="_blank" rel="noopener">http://zhibimo.com/read/wang-miao/mastering-bitcoin</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页排序算法（一）PageRank]]></title>
      <url>/2017/12/05/2017-12-05-%E7%BD%91%E9%A1%B5%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89PageRank/</url>
      <content type="html"><![CDATA[<p>参加数学建模的时候要研究一下PageRank，为了巩固3天从入门到精通的成果，把了解到的整理成文。</p>
<h1 id="直观理解"><a href="#直观理解" class="headerlink" title="直观理解"></a>直观理解</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>PageRank是以Google创始人Larry Page的姓命名的，于1999被提出来，用于测量网页的相对重要性（对网页进行排序），学术论文如下：</p>
<blockquote>
<p>Page, L., Brin, S., Motwani, R., &amp; Winograd, T. (1999). The PageRank citation ranking: Bringing order to the web. Stanford InfoLab. [PDF]</p>
</blockquote>
<p>PageRank的设计受到学术论文引用启发（两人的父亲都是大学教授）。衡量一篇学术论文质量高与否，最重要的一个指标是引用次数，高引用量的论文通常意味着高质量。同理，如果一张网页被引用（以超链接的形式）多了，那么这张网页就比较重要。总结起来，PageRank的核心思想有两点（结合图1说明）：</p>
<ul>
<li>越多的网页链接到一个网页（可以理解成投票，<code>D --&gt; B</code>，<code>D</code>给<code>B</code>投了一票），说明这个网页更加重要，如图1的<code>B</code>。(一篇论文被很多论文引用)</li>
<li>PageRank高的网页链接到一个网页，说明这张网页也很重要。如图1，尽管C只有一张网页B链接到它，但C的重要性高于E，尽管E有一堆小罗罗给它投票。（论文被大牛引用了，说明这篇论文很有价值）（也可以从话语权角度理解，重要的人说话份量重）</li>
</ul>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/0.png" width="700"><br><br><br><div class="image-caption">Fig. 1: PageRanks for a simple network (image from Wikipedia)</div><br></div>

<p>整个万维网（World Wide Web）可以抽象成一张有向图，节点表示网页，连线$$p_i\to p_j$$表示网页$$p_i$$包含了超链接$$p_j$$（$$p_i$$指向了$$p_j$$）。如果能对图中每个节点重要性量化，那么就能对网页进行排序了。PageRank提出之初就是为了对网页进行排序。</p>
<p>搜索引擎的工作原理可以简化为：输入关键词，返回与该关键词相关的网页（一个集合，相当于得到一张子图），在该子图上计算每个节点的PageRank值，PR值高的网页排在前面，低的就排在后面。</p>
<h2 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h2><p>接下来的问题是，如何计算每个节点的PageRank。想要知道一个网页$$p_i$$的PR值，需要知道：</p>
<ul>
<li>有多少网页链接到了$$p_i$$</li>
<li>这些网页的PR值是多少<br>其他网页的PR值又很可能是依赖于$$p_i$$，这就陷入了“先有鸡还是先有蛋”的循环，要想知道$$p_i$$的PR值，就得知道链向$$p_i$$所有网页的PR值，而要知道其他网页的PR值，又得先知道$$p_i$$的PR值。</li>
</ul>
<p>为了打破这个循环，佩奇和布林采用了一个很巧妙的思路， 即分析一个虚拟用户在互联网上的漫游过程。 他们假定：虚拟用户一旦访问了一个网页，下一步将以相同的概率访问被该网页所链接的任何一个其它网页[3]。比如，网页$$p_i$$包含N个超链接，那么虚拟用户访问这N个页面中的任何一个的概率是1/N。那么，网页的排序就可以看成一个虚拟用户在万维网漫游了很长时间，页面被访问的概率越大，其PR值就越高，网页排名也越靠前。</p>
<p>先从简化的PageRank说起，以PageRank论文的例子为例，看看PageRank是怎么计算的，如下：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/1.png" width="700"><br><br><br><div class="image-caption">Fig. 2: Simplified PageRank calculation (image from [1])</div><br></div>

<p>每个节点初始化或者指定一个PageRank值（如<code>PR(A)=0.4</code>），网页<code>A</code>包含两个超链接，分别指向<code>B</code>和<code>C</code>（或者说<code>A</code>投票给<code>B</code>和<code>C</code>），<code>0.4</code>拆分成两份，每份<code>0.2</code>，所以<code>PR(B)=0.2</code>。<code>A</code>和<code>B</code>同时给<code>C</code>投票，所以<code>PR(C)=0.2+0.2=0.4</code>。如此，不断地迭代，最后每个节点的值会趋于稳定（或者说收敛），这样就求得了所有节点的PR值。事实上，在这个例子中，PageRank已收俭。</p>
<p>每个页面将其当前的PageRank值平均分配到本页面所有出链上，一个页面将所有入链的PR值累加起来就构成了该页面新的PR值。如此迭代下去，最后得到一个稳定值。用数学公式表达，如下：</p>
<p>$$PR(A)=\frac{PR(B)}{L(B)}+\frac{PR(C)}{L(C)}+\frac{PR(D)}{L(D)}+⋯$$</p>
<p>更一般化地（$$B(p_i)$$表示所有链向网页$$p_i$$的集合），</p>
<p>$$PR(pi)=\sum_{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$</p>
<p>但这样算存在两个问题：</p>
<ul>
<li>对于没有forward links (outedges)的网页，即只有别人给她投票，她从不给别人投票，那么她的PageRank每次迭代都会增加。</li>
<li>对于没有blacklinks (inedges)的网页，即没人给她投票，其PageRank永远等于0。</li>
</ul>
<p>对于第一个问题，给等式乘以一个小于1的常数d（damping factor，翻译成阻尼因数？）；对于第二个问题，给等式加上一个常数。新的等式如下（N表示网页总数，或者节点数目）：</p>
<p>$$PR(p<em>i)=\frac{1−d}{N}+d\sum</em>{p_j\in B(p_i)}\frac{PR(p_j)}{L(p_j)}$$</p>
<p>其中，</p>
<ul>
<li>$$B(p_i)$$：链接到网页pipi的集合（a set of pages link to pipi）</li>
<li>$$L(p_j)$$：从$$p_j$$链出去的网页数目（the number of outbound links）<br>这样，就确保所有节点的PR值加起来等于1。</li>
</ul>
<h2 id="一个简单实例"><a href="#一个简单实例" class="headerlink" title="一个简单实例"></a>一个简单实例</h2><p>以一个很简单的例子（<code>A &lt; --&gt; B</code>）来看PageRank是怎么收俭的。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-5/2.png" width="700"><br><br><br><div class="image-caption">Fig. 2: An illustration of PageRank calculation.</div><br></div>

<p>假设他们的初始PR值为1，第一次迭代后，PR(A)和PR(B)的值为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PR(A) = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*<span class="number">1.0</span>                   = <span class="number">0.9249999999999999</span></span><br><span class="line">PR(B) = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*<span class="number">0.9249999999999999</span>    = <span class="number">0.8612499999999998</span></span><br></pre></td></tr></table></figure></p>
<p>写个简单的Python脚本，得到每次迭代后的值，部分如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>: A=<span class="number">0.925000</span>     B=<span class="number">0.861250</span> </span><br><span class="line"> <span class="number">2</span>: A=<span class="number">0.807062</span>     B=<span class="number">0.761003</span> </span><br><span class="line"> <span class="number">3</span>: A=<span class="number">0.721853</span>     B=<span class="number">0.688575</span> </span><br><span class="line"> <span class="number">4</span>: A=<span class="number">0.660289</span>     B=<span class="number">0.636245</span> </span><br><span class="line"> <span class="number">5</span>: A=<span class="number">0.615808</span>     B=<span class="number">0.598437</span> </span><br><span class="line"> <span class="number">6</span>: A=<span class="number">0.583672</span>     B=<span class="number">0.571121</span> </span><br><span class="line"> <span class="number">7</span>: A=<span class="number">0.560453</span>     B=<span class="number">0.551385</span> </span><br><span class="line"> <span class="number">8</span>: A=<span class="number">0.543677</span>     B=<span class="number">0.537126</span> </span><br><span class="line"> <span class="number">9</span>: A=<span class="number">0.531557</span>     B=<span class="number">0.526823</span> </span><br><span class="line"><span class="number">10</span>: A=<span class="number">0.522800</span>     B=<span class="number">0.519380</span> </span><br><span class="line"><span class="number">11</span>: A=<span class="number">0.516473</span>     B=<span class="number">0.514002</span> </span><br><span class="line"><span class="number">12</span>: A=<span class="number">0.511902</span>     B=<span class="number">0.510116</span> </span><br><span class="line"><span class="number">13</span>: A=<span class="number">0.508599</span>     B=<span class="number">0.507309</span></span><br><span class="line"><span class="number">14</span>: A=<span class="number">0.506213</span>     B=<span class="number">0.505281</span> </span><br><span class="line"><span class="number">15</span>: A=<span class="number">0.504489</span>     B=<span class="number">0.503815</span> </span><br><span class="line"><span class="number">16</span>: A=<span class="number">0.503243</span>     B=<span class="number">0.502757</span> </span><br><span class="line"><span class="number">17</span>: A=<span class="number">0.502343</span>     B=<span class="number">0.501992</span> </span><br><span class="line"><span class="number">18</span>: A=<span class="number">0.501693</span>     B=<span class="number">0.501439</span> </span><br><span class="line"><span class="number">19</span>: A=<span class="number">0.501223</span>     B=<span class="number">0.501040</span> </span><br><span class="line"><span class="number">20</span>: A=<span class="number">0.500884</span>     B=<span class="number">0.500751</span></span><br><span class="line">...</span><br><span class="line"><span class="number">42</span>: A=<span class="number">0.500001</span>     B=<span class="number">0.500001</span> </span><br><span class="line"><span class="number">43</span>: A=<span class="number">0.500001</span>     B=<span class="number">0.500000</span> </span><br><span class="line"><span class="number">44</span>: A=<span class="number">0.500000</span>     B=<span class="number">0.500000</span> </span><br><span class="line"><span class="number">45</span>: A=<span class="number">0.500000</span>     B=<span class="number">0.500000</span></span><br></pre></td></tr></table></figure></p>
<p>可见，随着迭代次数的增加，PageRank越来越接近收俭值0.5。Python源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pagerank_ab</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Calculate PageRank for A &lt;--&gt; B</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pr = &#123;<span class="string">'A'</span>:<span class="number">1.0</span>, <span class="string">'B'</span>:<span class="number">1.0</span>&#125;</span><br><span class="line">    max_iter = <span class="number">50</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">1</span>, max_iter+<span class="number">1</span>):</span><br><span class="line">        pr[<span class="string">'A'</span>] = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*pr[<span class="string">'B'</span>]</span><br><span class="line">        pr[<span class="string">'B'</span>] = <span class="number">0.15</span>/<span class="number">2</span> + <span class="number">0.85</span>*pr[<span class="string">'A'</span>]</span><br><span class="line"> </span><br><span class="line">        s = <span class="string">'&#123;:3d&#125;: A=&#123;:&lt;10f&#125;\tB=&#123;:&lt;10f&#125;'</span>.format(idx, pr[<span class="string">'A'</span>], pr[<span class="string">'B'</span>])</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代次数"><a href="#迭代次数" class="headerlink" title="迭代次数"></a>迭代次数</h2><p>迭代次数越多，结果越准确，但花费时间也越长。出于效率考虑，在实际应用中，当PR值落在误差允许范围内（PR值跟前一次比较，如<code>PR′(A)−PR(A)&lt;1.0e−6PR′(A)−PR(A)&lt;1.0e−6</code>，想想浮点数在计算机的存储），就可以返回结果了。<br>Python实现的nx.pagerank相关源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># check convergence, l1 norm</span></span><br><span class="line">err = sum([abs(x[n] - xlast[n]) <span class="keyword">for</span> n <span class="keyword">in</span> x])</span><br><span class="line"><span class="keyword">if</span> err &lt; N*tol: <span class="comment"># tol=1.0e-6</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></p>
<p>当然，对于超大型网络来说，有更复杂的计算方法，比如分布式。</p>
<h2 id="PR初始值"><a href="#PR初始值" class="headerlink" title="PR初始值"></a>PR初始值</h2><p>不管节点PR初始值怎么设置，最后节点的PR值都一样，但收俭速度不一样。可以修改上面Python代码的PR初始值，运行代码，自行感受下。NetworkX的pagerank实现是将PR值初始化为1/N。</p>
<h2 id="Damping-factor"><a href="#Damping-factor" class="headerlink" title="Damping factor"></a>Damping factor</h2><p>跟PR初始值类似，d的取值也会影响算法效率。根据Page的论文，d通常设为0.85。</p>
<h1 id="PageRank计算方法"><a href="#PageRank计算方法" class="headerlink" title="PageRank计算方法"></a>PageRank计算方法</h1><p>(1) 迭代方法</p>
<p>详情见另一篇博文<a href="https://linxueyuanstdio.github.io/2017/12/网页排序算法-二-迭代方法求PageRank/" target="_blank" rel="noopener">《网页排序算法（二）迭代方法求PageRank》</a>。</p>
<p>（2）代数方法</p>
<p>详情见另一篇博文<a href="https://linxueyuanstdio.github.io/2017/12/网页排序算法-三-代数方法求PageRank" target="_blank" rel="noopener">《网页排序算法（三）代数方法求PageRank》</a>。</p>
<p>（3）Power Method</p>
<p>待续。</p>
<h1 id="用NetworkX求PageRank"><a href="#用NetworkX求PageRank" class="headerlink" title="用NetworkX求PageRank"></a>用NetworkX求PageRank</h1><p>NetworkX提供3个求PageRank的API，如下：</p>
<ul>
<li>pagerank(…)</li>
<li>pagerank_numpy(…)</li>
<li>pagerank_scipy(…)</li>
</ul>
<p>详细API如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pagerank(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, max_iter=<span class="number">100</span>, tol=<span class="number">1e-06</span>, nstart=<span class="keyword">None</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br><span class="line"> </span><br><span class="line">pagerank_numpy(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br><span class="line"> </span><br><span class="line">pagerank_scipy(G, alpha=<span class="number">0.85</span>, personalization=<span class="keyword">None</span>, max_iter=<span class="number">100</span>, tol=<span class="number">1e-06</span>, weight=<span class="string">'weight'</span>, dangling=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<p>References:</p>
<ul>
<li>[1] <a href="http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf" target="_blank" rel="noopener">Page, L., Brin, S., Motwani, R., &amp; Winograd, T. (1999). The PageRank citation ranking: Bringing order to the web. Stanford InfoLab. [PDF]</a></li>
<li>[2] <a href="http://www.sci.unich.it/~francesc/teaching/network/pagerank" target="_blank" rel="noopener">PageRank Centrality by Massimo Franceschet</a></li>
<li>[3] <a href="http://www.changhai.org/articles/technology/misc/google_math.php" target="_blank" rel="noopener">谷歌背后的数学 by 卢昌海</a></li>
<li>[4] <a href="https://en.wikipedia.org/wiki/PageRank" target="_blank" rel="noopener">Wikipedia: PageRank</a></li>
<li>[5] <a href="http://www.cs.princeton.edu/~chazelle/courses/BIB/pagerank.htm" target="_blank" rel="noopener">The Google Pagerank Algorithm and How It Works</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PageRank </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迪菲-赫尔曼密钥交换]]></title>
      <url>/2017/12/01/2017-12-01-%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E5%B0%94%E6%9B%BC%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="迪菲-赫尔曼密钥交换（英语：Diffie–Hellman-key-exchange，缩写为D-H）"><a href="#迪菲-赫尔曼密钥交换（英语：Diffie–Hellman-key-exchange，缩写为D-H）" class="headerlink" title="迪菲-赫尔曼密钥交换（英语：Diffie–Hellman key exchange，缩写为D-H）"></a>迪菲-赫尔曼密钥交换（英语：Diffie–Hellman key exchange，缩写为D-H）</h1><p>最简单，最早提出的这个协议使用一个质数$p$的整数模$n$乘法群以及其原根$g$。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-12-1/0.svg" width="700"><br><br><div class="image-caption">迪菲-赫尔曼密钥交换</div><br></div>

<p>算法如下（绿色表示非秘密信息, 红色粗体表示秘密信息）：</p>
<ul>
<li>爱丽丝与鲍伯协定使用 $$p=23$$以及base $$g=5$$.</li>
<li>爱丽丝选择一个秘密整数$$a=6$$, 计算$$A = g^a mod p$$并发送给鲍伯。</li>
</ul>
<p>$$A = 56 mod 23 = 8$$.</p>
<ul>
<li>鲍伯选择一个秘密整数$$b=15$$, 计算$$B = g^b mod p$$并发送给爱丽丝。</li>
</ul>
<p>$$B = 515 mod 23 = 19$$.</p>
<ul>
<li>爱丽丝计算$$s = B^a mod p$$</li>
</ul>
<p>$$196 mod 23 = 2$$.</p>
<ul>
<li>鲍伯计算$$s = A^b mod p$$</li>
</ul>
<p>$$815 mod 23 = 2$$.</p>
<p>以下是一个更为一般的描述:</p>
<ul>
<li>爱丽丝和鲍伯写上一个有限循环群 $$G$$ 和它的一个生成元 $$g$$。 （这通常在协议开始很久以前就已经规定好； $$g$$是公开的，并可以被所有的攻击者看到。）</li>
<li>爱丽丝选择一个随机自然数 $$a$$ 并且将$${\displaystyle g^{a}{\bmod {p}}} g^{a} \bmod{p}$$发送给鲍伯。</li>
<li>鲍伯选择一个随机自然数 $$b$$ 并且将$${\displaystyle g^{b}{\bmod {p}}} g^{b} \bmod{p}$$发送给爱丽丝。</li>
<li>爱丽丝 计算 $${\displaystyle \left(g^{b}\right)^{a}{\bmod {p}}} \left ( g^{b} \right )^{a} \bmod{p} $$。</li>
<li>鲍伯 计算 $${\displaystyle \left(g^{a}\right)^{b}{\bmod {p}}} \left ( g^{a} \right )^{b} \bmod{p} $$。</li>
</ul>
<p>爱丽丝和鲍伯就同时协商出群元素$$ {\displaystyle g^{ab}} g^{ab} $$，它可以被用作共享秘密。<br>$${\displaystyle \left(g^{b}\right)^{a}} \left ( g^{b} \right )^{a} = {\displaystyle \left(g^{a}\right)^{b}} \left ( g^{a} \right )^{b}$$因为群是乘法交换的。</p>
]]></content>
      
        <categories>
            
            <category> 密码学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[区块链开发（一）搭建环境-基于以太坊私有链]]></title>
      <url>/2017/11/30/2017-11-30-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83-%E5%9F%BA%E4%BA%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E6%9C%89%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="安装Geth和Mist"><a href="#安装Geth和Mist" class="headerlink" title="安装Geth和Mist"></a>安装Geth和Mist</h1><h2 id="Ubuntu下安装Geth客户端"><a href="#Ubuntu下安装Geth客户端" class="headerlink" title="Ubuntu下安装Geth客户端"></a>Ubuntu下安装Geth客户端</h2><p>之所以采用Ubuntu，是因为以太坊的官方对Ubuntu支持的很好，是在各个linux系统中安装最简单。</p>
<blockquote>
<p>Geth官方安装指南：<br><a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum</a></p>
</blockquote>
<p>进入ubuntu命令行，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get installsoftware-properties-common</span><br><span class="line">$ sudo add-apt-repository -yppa:ethereum/ethereum</span><br><span class="line">$ sudo add-apt-repository -yppa:ethereum/ethereum-dev</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ethereum</span><br></pre></td></tr></table></figure></p>
<p>系统联网执行后，即完成了安装以太坊客户端，其中包括<code>geth</code>,<code>bootnode</code>,<code>evm</code>,<code>disasm</code>,<code>rlpdump</code>,<code>ethtest</code><br>此时如果输入 <code>geth</code> 命令，会出现启动以太坊启动的画面</p>
<p>也可以源码编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ethereum/go-ethereum</span><br><span class="line">$ sudo apt-get install -y build-essential golang</span><br><span class="line">$ <span class="built_in">cd</span> go-ethereum</span><br><span class="line">$ make geth</span><br></pre></td></tr></table></figure></p>
<h2 id="Windows下安装Geth客户端"><a href="#Windows下安装Geth客户端" class="headerlink" title="Windows下安装Geth客户端"></a>Windows下安装Geth客户端</h2><p>下载并安装 Geth for Windows.<br>Windows必须64位系统，从官方网站下载编译好的win64客户端，解压缩即可运行，下载地址如下（第二个地址备选）：</p>
<blockquote>
<p><a href="https://github.com/ethereum/go-ethereum/releases/" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/releases/</a><br><a href="https://geth.ethereum.org/downloads/" target="_blank" rel="noopener">https://geth.ethereum.org/downloads/</a></p>
</blockquote>
<p>下载后，只有一个<code>Geth.exe</code>的文件。</p>
<h2 id="MAC-OSX下安装Geth客户端"><a href="#MAC-OSX下安装Geth客户端" class="headerlink" title="MAC OSX下安装Geth客户端"></a>MAC OSX下安装Geth客户端</h2><p>首先确保已安装<code>homebrew</code>，没有安装过的可以在命令行下执行<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>进行安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew tap ethereum/ethereum</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install ethereum</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装图像化客户端Mist"><a href="#安装图像化客户端Mist" class="headerlink" title="安装图像化客户端Mist"></a>安装图像化客户端Mist</h2><p>依然是从官方地址下载编译好的客户端即可，下载地址：</p>
<blockquote>
<p><a href="https://github.com/ethereum/mist/releases/" target="_blank" rel="noopener">https://github.com/ethereum/mist/releases/</a></p>
</blockquote>
<p>下载解压缩后，Ethereum-Wallet 即为以太坊图形化界面。</p>
<h1 id="准备创世块文件"><a href="#准备创世块文件" class="headerlink" title="准备创世块文件"></a>准备创世块文件</h1><p>配置自己的创世块是为了区分公有链，同一个网络中，创世块必须是一样的，否则无法联通，此方法在windows和Ubuntu下通用。<br>新建文件<code>piccgenesis.json</code>,输入如下内容并保存<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"chainId"</span>: <span class="number">123456</span>,</span><br><span class="line">    <span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip158Block"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"nonce"</span>: <span class="string">"0x0000000000000042"</span>,</span><br><span class="line">  <span class="attr">"difficulty"</span>: <span class="string">"0x020000"</span>,</span><br><span class="line">  <span class="attr">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"0x00"</span>,</span><br><span class="line">  <span class="attr">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"extraData"</span>: <span class="string">"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"</span>,</span><br><span class="line">  <span class="attr">"gasLimit"</span>: <span class="string">"0x4c4b40"</span>,</span><br><span class="line">  <span class="attr">"alloc"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解释一下各个参数的作用：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>mixhash</td>
<td>与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。.</td>
</tr>
<tr>
<td>nonce</td>
<td>nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。</td>
</tr>
<tr>
<td>difficulty</td>
<td>设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度</td>
</tr>
<tr>
<td>alloc</td>
<td>用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。</td>
</tr>
<tr>
<td>coinbase</td>
<td>矿工的账号，随便填</td>
</tr>
<tr>
<td>timestamp</td>
<td>设置创世块的时间戳</td>
</tr>
<tr>
<td>parentHash</td>
<td>上一个区块的hash值，因为是创世块，所以这个值是0</td>
</tr>
<tr>
<td>extraData</td>
<td>附加信息，随便填，可以填你的个性信息</td>
</tr>
<tr>
<td>gasLimit</td>
<td>该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。</td>
</tr>
</tbody>
</table>
<h1 id="启动私有链节点"><a href="#启动私有链节点" class="headerlink" title="启动私有链节点"></a>启动私有链节点</h1><p>启动Geth即可以启动以太坊的区块链，为了构建私有链 ，需要在Geth启动时加入一些参数，Geth参数含义如下： </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>identity</td>
<td>区块链的标示，随便填写，用于标示目前网络的名字</td>
</tr>
<tr>
<td>init</td>
<td>指定创世块文件的位置，并创建初始块</td>
</tr>
<tr>
<td>datadir</td>
<td>设置当前区块链网络数据存放的位置</td>
</tr>
<tr>
<td>port</td>
<td>网络监听端口</td>
</tr>
<tr>
<td>rpc</td>
<td>启动rpc通信，可以进行智能合约的部署和调试</td>
</tr>
<tr>
<td>rpcapi</td>
<td>设置允许连接的rpc的客户端，一般为db,eth,net,web3</td>
</tr>
<tr>
<td>networkid</td>
<td>设置当前区块链的网络ID，用于区分不同的网络，是一个数字</td>
</tr>
<tr>
<td>console</td>
<td>启动命令行模式，可以在Geth中执行命令</td>
</tr>
</tbody>
</table>
<h2 id="在Ubuntu启动区块链节点"><a href="#在Ubuntu启动区块链节点" class="headerlink" title="在Ubuntu启动区块链节点"></a>在Ubuntu启动区块链节点</h2><p>在Ubuntu下，首先切换到打算运行的目录，目录下应该有配置好的<code>piccgenesis.json</code>文件，获取当前的目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ basepath=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure></p>
<p>创建数据存放地址并初始化创世块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth  --datadir <span class="string">"<span class="variable">$basepath</span>/chain"</span> init piccgenesis.json</span><br></pre></td></tr></table></figure></p>
<p>启动节点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth --identity <span class="string">"PICCetherum"</span>  --rpc  --rpccorsdomain <span class="string">"*"</span> --datadir <span class="string">"<span class="variable">$basepath</span>/chain"</span> --port <span class="string">"30303"</span>  --rpcapi <span class="string">"db,eth,net,web3"</span> --networkid 95518 console</span><br></pre></td></tr></table></figure></p>
<p>启动后界面如下，光标停留在最后的命令行上，可以执行以太坊命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">I0707 00:45:43.680087 ethdb/database.go:82]Alloted 128MB cache and 1024 file handles to /home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.726008ethdb/database.go:169] closed db:/home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.728913 ethdb/database.go:82]Alloted 128MB cache and 1024 file handles to /home/lihe/桌面/chain/chaindata</span><br><span class="line">I0707 00:45:43.908795 ethdb/database.go:82]Alloted 16MB cache and 16 file handles to /home/lihe/桌面/chain/dapp</span><br><span class="line">I0707 00:45:43.969506 core/genesis.go:92]Genesis block already <span class="keyword">in</span> chain. Writing canonical number</span><br><span class="line">I0707 00:45:43.980337 eth/backend.go:274]Successfully wrote custom genesis block:6e92f8b23bcdfdf34dc813cfaf1d84b71beac80530506b5d63a2df10fe23a660</span><br><span class="line">I0707 00:45:43.980618 eth/backend.go:184]Protocol Versions: [63 62], Network Id: 95518</span><br><span class="line">I0707 00:45:43.981567core/blockchain.go:204] Last header: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.981645core/blockchain.go:205] Last block: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.981677core/blockchain.go:206] Fast block: <span class="comment">#81 [6193c4b0…] TD=10836704</span></span><br><span class="line">I0707 00:45:43.985253 p2p/server.go:313]Starting Server</span><br><span class="line">I0707 00:45:45.834488p2p/discover/udp.go:217] Listening,enode://134881790e54c803955715e3661c27f91caaf499be813e29c9f986e2eac62d47e02b13a8e51776c1caea554655614ed26ce0185d84e626da7ac48a83a60113ff@[::]:30303</span><br><span class="line">I0707 00:45:45.835853 node/node.go:366]HTTP endpoint opened: http://localhost:8545</span><br><span class="line">I0707 00:45:45.848008 p2p/server.go:556]Listening on [::]:30303</span><br><span class="line">I0707 00:45:45.849731 node/node.go:296] IPCendpoint opened: /home/lihe/桌面/chain/geth.ipc</span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"> </span><br><span class="line">instance:Geth/v1.5.0-unstable/linux/go1.5.1/PICCetherum</span><br><span class="line">coinbase:0x93509a2f4b2b974b07ef0b52e07c3992601f5de1</span><br><span class="line">at block: 81 (Tue, 05 Jul 2016 21:02:25CST)</span><br><span class="line"> datadir: /home/lihe/桌面/chain</span><br><span class="line"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>Listening on [::]:30303</code>和<code>Welcome to the Geth JavaScript console!</code>的提示，说明已经启动成功</p>
<blockquote>
<p><strong>注意</strong>：如果想将Ubuntu作为永久区块链节点使用，当使用nohup命令时，Geth启动参数console必须去掉，否则Geth会自动停止。</p>
</blockquote>
<h2 id="在windows启动区块链节点"><a href="#在windows启动区块链节点" class="headerlink" title="在windows启动区块链节点"></a>在windows启动区块链节点</h2><p>进入Windows下<code>Geth</code>的目录 ，放置配置好的<code>piccgenesis.json</code>文件，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth  --datadir <span class="string">"%cd%\chain"</span> init piccgenesis.json</span><br></pre></td></tr></table></figure></p>
<p>创建数据存放地址并初始化创世块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ geth--identity <span class="string">"PICCetherum"</span> --rpc--rpccorsdomain <span class="string">"*"</span> --datadir <span class="string">"%cd%\chain"</span> --port<span class="string">"30303"</span>  --rpcapi<span class="string">"db,eth,net,web3"</span> --networkid 95518 console</span><br></pre></td></tr></table></figure></p>
<p>当看到<code>Listening on [::]:30303</code>和<code>Welcome to the Geth JavaScript console!</code>的提示，说明已经启动成功</p>
<h1 id="使用节点创建账号"><a href="#使用节点创建账号" class="headerlink" title="使用节点创建账号"></a>使用节点创建账号</h1><p>启动节点成功后，会进入Geth的命令行模式，输入如下命令<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.<span class="keyword">new</span><span class="type">Account</span>()</span><br></pre></td></tr></table></figure></p>
<p>系统会提示你输入账号密码，并确认，最后会显示一个新生成的账号。</p>
<h2 id="Geth-JavaScript控制台环境使用说明"><a href="#Geth-JavaScript控制台环境使用说明" class="headerlink" title="Geth JavaScript控制台环境使用说明"></a>Geth JavaScript控制台环境使用说明</h2><ul>
<li>创建新账号<br><code>personal.newAccount()</code><br>或者 <code>personal.newAccount(&quot;123456&quot;)</code></li>
<li>查看节点信息<br><code>admin.nodeInfo</code></li>
<li>挖矿<ul>
<li>开始挖矿<code>miner.start(1)</code></li>
<li>停止挖矿<code>miner.stop()</code></li>
</ul>
</li>
<li>查看当前矿工账号<br><code>eth.coinbase</code> 默认为第一个账户</li>
<li>修改矿工账号<br><code>miner.setEtherbase(eth.accounts[1])</code></li>
<li>查看账户信息<br><code>eth.accounts[0]</code></li>
<li>查看账户余额<br><code>eth.getBalance(eth.accounts[0])</code><br>或者 <code>web3.fromWei(eth.getBalance(eth.accounts[0]), &quot;ether&quot;)</code></li>
<li>解锁账号<br><code>personal.unlockAccount(eth.accounts[0])</code><br>使用账户资金前都需要先解锁账号</li>
<li>转账<code>eth.sendTransaction({from:eth.accounts[0],to:&quot;0x587e57a516730381958f86703b1f8e970ff445d9&quot;,value:web3.toWei(3,&quot;ether&quot;)})</code><br>使用 <code>txpool.status</code>可以看到交易状态</li>
<li>查看区块数据<ul>
<li><code>eth.blockNumber</code></li>
<li><code>eth.getTransaction(&quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot;)</code></li>
<li><code>eth.getBlock(1)</code> 通过区块号查看区块</li>
</ul>
</li>
</ul>
<h1 id="私有链图形节点"><a href="#私有链图形节点" class="headerlink" title="私有链图形节点"></a>私有链图形节点</h1><h2 id="启动Ubuntu下私有链图形节点"><a href="#启动Ubuntu下私有链图形节点" class="headerlink" title="启动Ubuntu下私有链图形节点"></a>启动Ubuntu下私有链图形节点</h2><p>首先按上面的步骤启动Geth并创建了账号，在geth运行的时候，再运行下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethereumwallet --gethpath /usr/bin/geth</span><br></pre></td></tr></table></figure></p>
<p><code>--gethpath</code>改成你实际安装的geth的路径</p>
<h2 id="启动Windows下私有链图形节点"><a href="#启动Windows下私有链图形节点" class="headerlink" title="启动Windows下私有链图形节点"></a>启动Windows下私有链图形节点</h2><p>首先按上面的步骤启动Geth并创建了账号，然后解压缩Ethereum-Wallet，运行<code>Ethereum-Wallet.exe</code>,即启动成功，如果区块链正常的话，会在右上角显示<code>“PRIVATE-NET”</code>，点击<code>“LAUNCH APPLICATION”</code>进入图形界面即可。</p>
<h1 id="连接其他节点"><a href="#连接其他节点" class="headerlink" title="连接其他节点"></a>连接其他节点</h1><p>首先要知道自己的节点信息，在Geth命令行界面下输入命令,注意大小写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span><span class="selector-class">.nodeInfo</span></span><br></pre></td></tr></table></figure></p>
<p>系统会显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enode:<span class="string">"enode://1e3c1727cd3bee9f25edeb5dbb3b880e03e41f8eec99566557f3ee0422734a8fcad17c161aa93d61bdbfb28ed152c143c7eb501db58bc63502a104a84b62d742@0.0.0.0:30303“</span></span><br></pre></td></tr></table></figure></p>
<p>其中<code>enode://1e3c1727cd3bee9f25edeb5dbb3b880e03e41f8eec99566557f3ee0422734a8fcad17c161aa93d61bdbfb28ed152c143c7eb501db58bc63502a104a84b62d742@0.0.0.0:30303</code><br>就是自己节点的信息，注意要把<code>0.0.0.0</code>换成你自己的IP。将这个信息发送给其他节点，在其他节点的命令行中输入：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer(‘enode://<span class="number">1e3</span><span class="keyword">c</span><span class="number">1727</span>cd<span class="number">3</span>bee<span class="number">9</span>f<span class="number">25</span>edeb<span class="number">5</span>dbb<span class="number">3</span>b<span class="number">880e03</span>e<span class="number">41</span>f<span class="number">8</span>eec<span class="number">99566557</span>f<span class="number">3</span>ee<span class="number">0422734</span>a<span class="number">8</span>fcad<span class="number">17</span><span class="keyword">c</span><span class="number">161</span>aa<span class="number">93</span>d<span class="number">61</span>bdbfb<span class="number">28</span>ed<span class="number">152</span><span class="keyword">c</span><span class="number">143</span><span class="keyword">c</span><span class="number">7</span>eb<span class="number">501</span>db<span class="number">58</span>bc<span class="number">63502</span>a<span class="number">104</span>a<span class="number">84</span>b<span class="number">62</span>d<span class="number">742</span><span class="title">@192</span>.<span class="number">168.1</span>.<span class="number">101</span>:<span class="number">30303</span>’)</span><br></pre></td></tr></table></figure></p>
<p>如果添加成功，输入<code>admin.peers</code>会显示出新添加的节点。</p>
<h1 id="使用节点进行挖矿"><a href="#使用节点进行挖矿" class="headerlink" title="使用节点进行挖矿"></a>使用节点进行挖矿</h1><p>在Geth命令行界面下，输入<code>miner.start()</code>即启动挖矿，挖矿后，会不停刷屏，输入<code>miner.stop()</code>即停止，不用管刷屏导致的命令不全，命令会正常执行。<br>到这一步，已经组建一个私有链的网络，可以像其他区块链一样不停的扩充这个网络，下一篇文章，我会介绍如何在私有链上编写、调试和部署智能合约。</p>
<p>参考文章：</p>
<ol>
<li><a href="http://blog.csdn.net/sportshark/article/details/51855007" target="_blank" rel="noopener">http://blog.csdn.net/sportshark/article/details/51855007</a></li>
<li><a href="http://tech.lab.carl.pro/kb/ethereum/testnet_setup" target="_blank" rel="noopener">http://tech.lab.carl.pro/kb/ethereum/testnet_setup</a></li>
<li><a href="http://www.ethdocs.org/en/latest/network/test-networks.html#setting-up-a-local-private-testnet" target="_blank" rel="noopener">http://www.ethdocs.org/en/latest/network/test-networks.html#setting-up-a-local-private-testnet</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Connecting-to-the-network</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Mining" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Mining</a></li>
<li><a href="https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts" target="_blank" rel="noopener">https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts</a></li>
<li><a href="https://github.com/janx/ethereum-bootstrap" target="_blank" rel="noopener">https://github.com/janx/ethereum-bootstrap</a></li>
<li><a href="https://forum.qtum.org/topic/127/以太坊私链与智能合约部署入门教程/2" target="_blank" rel="noopener">https://forum.qtum.org/topic/127/以太坊私链与智能合约部署入门教程/2</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 区块链 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu--apt-get update（由于没有公钥，无法验证下列签名）]]></title>
      <url>/2017/11/29/2017-11-29-apt-get-update-GPG%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>当 <code>apt-get update</code> 更新后，出现下面错误时的解决方法：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...bash</span><br><span class="line">正在读取软件包列表… 完成 </span><br><span class="line"><span class="string">W:</span> GPG 错误：<span class="string">http:</span><span class="comment">//ppa.launchpad.net trusty InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 2EA8F35793D8809A</span></span><br></pre></td></tr></table></figure></p>
<p>解决办法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9</span><br></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Executing: gpg –ignore-time-conflict –no-options –no-default-keyring –secret-keyring /tmp/tmp.uxUmi4wF1r –trustdb-name /etc/apt/trustdb.gpg –keyring /etc/apt/trusted.gpg –primary-keyring /etc/apt/trusted.gpg –keyserver keyserver.ubuntu.com –recv-keys 2EA8F35793D8809A </span><br><span class="line">gpg: 下载密钥‘93D8809A’，从 hkp 服务器 keyserver.ubuntu.com </span><br><span class="line">gpg: 密钥 93D8809A：公钥“Launchpad PPA <span class="keyword">for</span> Martin Wimpress”已导入 </span><br><span class="line">gpg: 合计被处理的数量：1 </span><br><span class="line">gpg: 已导入：1 (RSA: 1)</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go 爬虫总结]]></title>
      <url>/2017/11/27/2017-11-27-go%E7%88%AC%E8%99%AB%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>爬虫目的：爬导航和爬商品</p>
<p>爬虫架构：</p>
<ul>
<li>electron虚拟浏览器</li>
<li>proxy代理ip</li>
<li>dashboard网页端调控</li>
<li>爬虫APP</li>
</ul>
<p>实现的功能：</p>
<ul>
<li>url拼接，过滤出商品</li>
<li>url翻页，点击翻页，无限流，loadmore按钮</li>
<li>过滤文本中包含某text的url，过滤url中包含某url的url，定点过滤特定的url，只爬文本中包含某text的url，只爬url中包含某url的url</li>
<li>失败移至末尾重试（次数，本次返回的状态码，延时）</li>
<li>控制爬取频率，控制递归爬取深度</li>
<li>用electron防止cookie或ajax动态加载页面，有WaitSelector，直到WaitSelector出现才返回渲染后的页面给spider，否则返回错误码</li>
<li>分布式，高并发</li>
<li>多个proxy负载均衡</li>
<li>proxy权限控制</li>
<li>dashboard网页端爬虫调度，导航log和简单报表分析，商品log和简单报表分析，服务器上当前所有配置一览</li>
</ul>
<p>我负责的模块：</p>
<ul>
<li>配置文件template</li>
<li>测试被反爬虫的条件，计算最大爬取频率</li>
<li>实现同时爬取多个网站，单线程和并发可选</li>
<li>默认 http client 不会缓存 DNS 记录，而爬虫会有大量的请求，所以自己专门对 DNS 做缓存</li>
<li>调查并分析站点请求不成功的url占比超过 20% 的原因并修复</li>
<li>发现并解决 ssl 证书问题</li>
<li>网站改版，及时更新配置文件</li>
<li>给timeout设一个下界</li>
</ul>
<p>返回408原因：<br>（1）商品Selector作为WaitSelector，有的页面是介绍页，没有商品，返回408<br>（2）翻页超过最大页数，没有商品，返回408。这个原因导致的408一般 <code>成堆</code> 出现<br>（3）无限流需要较长时间来翻页，timeout较小会408<br>（4）目标网站有的商品下架，没有商品，返回408<br>（5）目标网站反爬策略，封ip后也不返回500，只有提示性的html，等不到商品，返回408<br>（6）目标网站必须用https</p>
<p>解决方案：（这几个印象深刻，其他的想不起来了）</p>
<ul>
<li><p>商品Selector作为WaitSelector，有的页面是介绍页，没有商品，返回408</p>
<ul>
<li>有2个waitSelector，一个Selector做监督，一个选商品Selector，如果监督Selector出现了而商品Selector没出来，就判定没商品<ul>
<li>效果好</li>
<li>时间成本高</li>
</ul>
</li>
<li>只要1个errorSelector，出现提示性的error，判定为没有商品<ul>
<li>实现简单，时间成本低，逻辑清晰</li>
<li>不全面，有些站点如果没有商品，也不出现提示性文字</li>
</ul>
</li>
<li>electron不处理，无论是否408都把页面返回，交给spider处理<ul>
<li>electron端实现简单，效果好，易于扩展</li>
<li>spider端实现困难，给spider端挖坑，有隐患</li>
</ul>
</li>
</ul>
</li>
<li><p>ssl 证书问题</p>
<ul>
<li>请求时不检测证书</li>
</ul>
</li>
<li><p>http 请求</p>
<ul>
<li>换成https请求</li>
</ul>
</li>
<li><p>getsockopt: no route to host</p>
<ul>
<li>和firewall有关，我们对昂贵的proxy做权限控制，而我在本地没有这个proxy的权限，必须到服务器上搞</li>
</ul>
</li>
<li><p>getsockopt: connection time out</p>
<ul>
<li>需要特殊的header，不然在命令行是不能成功请求的</li>
</ul>
</li>
<li><p>DNS解析</p>
<ul>
<li>原来的每次都要new一个，修复后只要一个持久化</li>
</ul>
</li>
</ul>
<p>团队共享用到的软件（我们都是远程办公）</p>
<ul>
<li>slack:交流讨论</li>
<li>quip：共享文件</li>
<li>trello：任务管理</li>
<li>zoom：远程会议</li>
<li>google图表：共享文件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spider </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
            <tag> Spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu中使用dpkg安装deb文件提示依赖关系问题，仍未被配置]]></title>
      <url>/2017/10/15/2017-10-11-dpkg-error/</url>
      <content type="html"><![CDATA[<p>使用dpkg时，提示：dpkg：处理软件包XXX时出错：<br>依赖关系问题，仍未被配置</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/0.png" width="700"><br><div class="image-caption">问题</div><br></div>

<p>出现上图时，使用如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/1.png" width="700"><br><div class="image-caption">解决</div><br></div>

<p>等分析完之后，重新使用dpkg –i XXX.deb，就可以了</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-15/2.png" width="700"><br><div class="image-caption">解决</div><br></div>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Tweepy 翻墙抓取Twitter信息]]></title>
      <url>/2017/10/13/2017-10-11-python-proxy/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/LinXueyuanStdio/PythonDataMining" target="_blank" rel="noopener">repo在此</a>，如果觉得做得好，给个star鼓励下吧！</p>
<p>在看《Python数据挖掘入门与实践》的时候，随书附带的代码已经过时几年了，现在边看书边修，很是辛苦</p>
<p>在学习第六章”使用朴素贝叶斯进行社交媒体挖掘”时，数据集需要通过twitter的API来获取</p>
<p>（玛蛋，为毛不随书附带数据集）</p>
<p>twitter在国内被墙了，只能翻墙</p>
<p>浏览器翻墙容易，弄个lantern或者shadowsockets就可以了</p>
<p>但是，由于ubuntu的代理不是全局代理，在命令行中翻墙要设proxy，在代码中翻墙也要设proxy</p>
<p>所以难处在于代码要就twitter的python接口翻墙</p>
<p>如果只是一个简单的加proxy网络请求，几行就可以搞定：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">proxy_support = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span> : <span class="string">'http://127.0.0.1:80'</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>可是twitter的python接口是自动发起请求的呀</p>
<p>懒得去改源码</p>
<p>只好看看怎么在代码中设置好翻墙</p>
<h1 id="账号准备"><a href="#账号准备" class="headerlink" title="账号准备"></a>账号准备</h1><p>首先需要在twitter官方注册twitter账号，并新建一个应用，链接：<a href="https://apps.twitter.com/app/new" target="_blank" rel="noopener">新建应用</a><br>如果新建应用不成功，国内大多数情况都是无法验证手机号，可以参考这个教程，亲测有效，链接：<a href="http://jingyan.baidu.com/article/cd4c2979e84b0a756e6e60b8.html" target="_blank" rel="noopener">验证手机号</a><br>注册成功后，可以查看自己的keys and access token，如下图： </p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/0.png" width="700"><br><div class="image-caption">Consumer Key and Consumer Secret</div><br></div>

<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/1.png" width="700"><br><div class="image-caption">Access Token and Access Token Secret</div><br></div>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>python3.5+</p>
<p>安装tweepy： 在命令行中输入：<code>pip install tweepy</code></p>
<h1 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tweepy</span><br><span class="line"><span class="keyword">from</span> tweepy <span class="keyword">import</span> OAuthHandler</span><br><span class="line"></span><br><span class="line">consumer_key = <span class="string">'replace your own account consumer_key'</span></span><br><span class="line">consumer_secret = <span class="string">'replace your own account consumer_secret'</span></span><br><span class="line">access_token = <span class="string">'replace your own account access_token'</span></span><br><span class="line">access_secret = <span class="string">'replace your own account access_secret'</span></span><br><span class="line"></span><br><span class="line">auth = OAuthHandler(consumer_key,consumer_secret)</span><br><span class="line">auth.set_access_token(access_token,access_secret)</span><br><span class="line"></span><br><span class="line">api = tweepy.API(auth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> status <span class="keyword">in</span> tweepy.Cursor(api.home_timeline).items(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">print</span> (status.text)</span><br></pre></td></tr></table></figure>
<h1 id="报错一-挂代理翻墙"><a href="#报错一-挂代理翻墙" class="headerlink" title="报错一:挂代理翻墙"></a>报错一:挂代理翻墙</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: HTTPSConnectionPool(host='api.twitter.com', port=443): Max retries exceeded with url: /1.1/statuses/home_timeline.json (Caused by ProxyError('Cannot connect to proxy.', NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x0000000002FC6E80&gt;: Failed to establish a new connection: [Errno 10061] ',)))</span><br></pre></td></tr></table></figure>
<p>主要原因就是twitter被墙了，twitter的api当然也被墙了。 </p>
<p>这时候就需要挂代理翻墙了，我使用的是自己搭建的shadowsockets。其它翻墙软件或者服务器网上有很多，请自行查找。 </p>
<p>代理打开了之后，在原代码中，将<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth)</span><br></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth,proxy=<span class="string">"127.0.0.1:1080"</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="报错二-请求的配置没有写对"><a href="#报错二-请求的配置没有写对" class="headerlink" title="报错二:请求的配置没有写对"></a>报错二:请求的配置没有写对</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Twitter error response: status code = 401</span><br></pre></td></tr></table></figure>
<p>原因：</p>
<ul>
<li>这几个发起请求的配置没有写对，仔细修改<ul>
<li>consumer_key</li>
<li>consumer_secret</li>
<li>access_token</li>
<li>access_secret</li>
</ul>
</li>
<li>改过了还是不对，刷新Regenerate Consumer Key and Secret和Regenerate My Access Token and Token Secret，重新填写请求</li>
</ul>
<h1 id="报错三"><a href="#报错三" class="headerlink" title="报错三"></a>报错三</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: HTTPSConnectionPool(host='api.twitter.com', port=443): Max retries exceeded with url: /1.1/statuses/home_timeline.json (Caused by ProxyError('Cannot connect to proxy.', timeout('timed out',)))</span><br></pre></td></tr></table></figure>
<p>原因是Shadowsocks使用的是socks5代理，并非是http代理。</p>
<p>emmm，简单，大手一挥，稍微修改一下即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth, proxy=<span class="string">"socks5://127.0.0.1:1080"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="报错四"><a href="#报错四" class="headerlink" title="报错四"></a>报错四</h1><p>报错信息如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweepy.error.TweepError: Failed to send request: SOCKSHTTPSConnectionPool(host='api.twitter.com', port=443): Read timed out. (read timeout=60)</span><br></pre></td></tr></table></figure>
<p>原因是tweepy使用的是http代理，不能用socks5代理（我日）。</p>
<p>所以需要将socks5代理转换为http代理来支持tweepy访问twitter REST API,这里参考以下地址：<br><a href="http://blog.csdn.net/shaobo8910/article/details/53908639" target="_blank" rel="noopener">为终端设置Shadowsocks代理</a></p>
<p>最后不要忘记在代码里加上代理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api = tweepy.API(auth, proxy=<span class="string">"127.0.0.1:8123"</span>)</span><br></pre></td></tr></table></figure>
<p>还没完</p>
<p>tweepy 这个库的资料比较少,我自己摸索着试了试,把代码发上来</p>
<p>一.按照关键字搜索Twitter的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接上面的代码(q = 关键字 ,count = 返回的数据量 . 推特一次最多返回100条??)</span></span><br><span class="line">search_results = api.search(q=<span class="string">'python'</span>,count=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#对对象进行迭代</span></span><br><span class="line"><span class="keyword">for</span> tweet <span class="keyword">in</span> search_results:</span><br><span class="line">    <span class="comment">#tweet还是一个对象,推特的相关信息在tweer._json里</span></span><br><span class="line">    <span class="comment">#这里是检测消息是否含有'text'键,并不是所有TWitter返回的所有对象都是消息(有些可能是用来删除消息或者其他内容的动作--这个没有确认),区别就是消息对象中是否含有'text'键</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'text'</span> <span class="keyword">in</span> tweet._json:</span><br><span class="line">        print(tweet._json[<span class="string">'text'</span>])</span><br><span class="line">        <span class="comment">#这里是把内容给打印出来了,如果需要保存到文件需要用json库的dumps函数转换为字符串形式后写入到文件中</span></span><br><span class="line">        <span class="comment">#例如 :output_file.write(json.dumps(tweet._json))</span></span><br></pre></td></tr></table></figure>
<p>二.根据Twitter消息的ID批量获取消息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中id_list 是消息ID组成的list 长度也不要超过100</span></span><br><span class="line">search_result = api.statuses_lookup(id_list)</span><br></pre></td></tr></table></figure></p>
<p>这时，就可以成功访问了</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-10-13/2.png" width="700"><br><div class="image-caption">成功访问</div><br></div>


]]></content>
      
        <categories>
            
            <category> Proxy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[algorithms-Bit-Options]]></title>
      <url>/2017/10/11/2017-10-11-%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>常用的一个等式：<code>-n = ~(n - 1) = ~n + 1</code></p>
<h2 id="获得int型最大值"><a href="#获得int型最大值" class="headerlink" title="获得int型最大值"></a>获得int型最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;<span class="comment">//2147483647,由于优先级关系,括号不可省略</span></span><br><span class="line">    <span class="keyword">return</span> ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);   <span class="comment">//2147483647</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; -<span class="number">1</span>) - <span class="number">1</span>;<span class="comment">//2147483647</span></span><br><span class="line">    <span class="keyword">return</span> ((unsigned <span class="keyword">int</span>) - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">//2147483647</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获得int型最小值"><a href="#获得int型最小值" class="headerlink" title="获得int型最小值"></a>获得int型最小值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinInt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;<span class="comment">//-2147483648</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; -<span class="number">1</span>;<span class="comment">//-2147483648</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获得long类型的最大值"><a href="#获得long类型的最大值" class="headerlink" title="获得long类型的最大值"></a>获得long类型的最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getMaxLong</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((unsigned <span class="keyword">long</span>) - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">//2147483647　c语言版</span></span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">long</span>)<span class="number">1</span> &lt;&lt; <span class="number">127</span>) - <span class="number">1</span>;<span class="comment">//9223372036854775807  java版</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获得long最小值，和其他类型的最大值，最小值同理.</p>
<h2 id="2运算"><a href="#2运算" class="headerlink" title="2运算"></a>2运算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span>　<span class="comment">// 乘以2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span> <span class="comment">// 除以2</span></span><br><span class="line">n &lt;&lt; m <span class="comment">// 乘以2的m次方</span></span><br><span class="line">n &gt;&gt; m <span class="comment">// 除以2的m次方</span></span><br></pre></td></tr></table></figure>
<h2 id="判断一个数的奇偶性"><a href="#判断一个数的奇偶性" class="headerlink" title="判断一个数的奇偶性"></a>判断一个数的奇偶性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isOddNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不用临时变量交换两个数（面试常考）"><a href="#不用临时变量交换两个数（面试常考）" class="headerlink" title="不用临时变量交换两个数（面试常考）"></a>不用临时变量交换两个数（面试常考）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    (*a) ^= (*b) ^= (*a) ^= (*b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通用版（一些语言中得分开写）<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span><span class="regexp"> ^=</span> b;</span><br><span class="line"><span class="attribute">b</span><span class="regexp"> ^=</span> a;</span><br><span class="line"><span class="attribute">a</span><span class="regexp"> ^=</span> b;</span><br></pre></td></tr></table></figure></p>
<h2 id="取绝对值"><a href="#取绝对值" class="headerlink" title="取绝对值"></a>取绝对值</h2><p>（某些机器上，效率比n&gt;0  ?  n:-n 高）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n ^ (n &gt;&gt; <span class="number">31</span>)) - (n &gt;&gt; <span class="number">31</span>);</span><br><span class="line"><span class="comment">/* n&gt;&gt;31 取得n的符号，若n为正数，n&gt;&gt;31等于0，若n为负数，n&gt;&gt;31等于-1 </span></span><br><span class="line"><span class="comment">若n为正数 n^0=0,数不变，若n为负数有n^-1 需要计算n和-1的补码，然后进行异或运算， </span></span><br><span class="line"><span class="comment">结果n变号并且为n的绝对值减1，再减去-1就是绝对值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取两个数的最大值"><a href="#取两个数的最大值" class="headerlink" title="取两个数的最大值"></a>取两个数的最大值</h2><p>（某些机器上，效率比a&gt;b ? a:b高）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | a &amp; (~(a-b) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="comment">/*如果a&gt;=b,(a-b)&gt;&gt;31为0，否则为-1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C语言版<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ ((x ^ y) &amp; -(x &lt; y));</span><br><span class="line">    <span class="comment">/*如果x&lt;y x&lt;y返回1，否则返回0，</span></span><br><span class="line"><span class="comment">    与0做与运算结果为0，与-1做与运算结果不变*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="取两个数的最小值"><a href="#取两个数的最小值" class="headerlink" title="取两个数的最小值"></a>取两个数的最小值</h2><p>（某些机器上，效率比a&gt;b ? b:a高）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | b &amp; (~(a-b) &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    <span class="comment">/*如果a&gt;=b,(a-b)&gt;&gt;31为0，否则为-1*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>C语言版<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ^ ((x ^ y) &amp; -(x &lt; y));</span><br><span class="line">    <span class="comment">/*如果x&lt;y x&lt;y返回1，否则返回0， </span></span><br><span class="line"><span class="comment">      与0做与运算结果为0，与-1做与运算结果不变*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="判断符号是否相同"><a href="#判断符号是否相同" class="headerlink" title="判断符号是否相同"></a>判断符号是否相同</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSameSign</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123; <span class="comment">//有0的情况例外</span></span><br><span class="line">    <span class="keyword">return</span> (x ^ y) &gt;= <span class="number">0</span>; <span class="comment">// true 表示 x和y有相同的符号， false表示x，y有相反的符号。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计算2的n次方"><a href="#计算2的n次方" class="headerlink" title="计算2的n次方"></a>计算2的n次方</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFactorialofTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n &gt; 0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> &lt;&lt; (n-<span class="number">1</span>);<span class="comment">//2的n次方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断一个数是不是2的幂"><a href="#判断一个数是不是2的幂" class="headerlink" title="判断一个数是不是2的幂"></a>判断一个数是不是2的幂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFactorialofTwo</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span> : <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/*如果是2的幂，n一定是100... n-1就是1111.... </span></span><br><span class="line"><span class="comment">       所以做与运算结果为0*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对2的n次方取余"><a href="#对2的n次方取余" class="headerlink" title="对2的n次方取余"></a>对2的n次方取余</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quyu</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为2的次方</span></span><br><span class="line">    <span class="keyword">return</span> m &amp; (n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*如果是2的幂，n一定是100... n-1就是1111.... </span></span><br><span class="line"><span class="comment">     所以做与运算结果保留m在n范围的非0的位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求两个整数的平均值"><a href="#求两个整数的平均值" class="headerlink" title="求两个整数的平均值"></a>求两个整数的平均值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x + y) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x ^ y) &gt;&gt; <span class="number">1</span>) + (x &amp; y);</span><br><span class="line">    <span class="comment">/*(x^y) &gt;&gt; 1得到x，y其中一个为1的位并除以2， </span></span><br><span class="line"><span class="comment">       x&amp;y得到x，y都为1的部分，加一起就是平均数了*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是三个最基本对二进制位的操作</p>
<h2 id="从低位到高位-取n的第m位"><a href="#从低位到高位-取n的第m位" class="headerlink" title="从低位到高位,取n的第m位"></a>从低位到高位,取n的第m位</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBit</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; (m-<span class="number">1</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从低位到高位-将n的第m位置设为1"><a href="#从低位到高位-将n的第m位置设为1" class="headerlink" title="从低位到高位.将n的第m位置设为1"></a>从低位到高位.将n的第m位置设为1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBitToOne</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; (m-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">/*将1左移m-1位找到第m位，得到000...1...000 </span></span><br><span class="line"><span class="comment">      n在和这个数做或运算*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="从低位到高位-将n的第m位置设为0"><a href="#从低位到高位-将n的第m位置设为0" class="headerlink" title="从低位到高位,将n的第m位置设为0"></a>从低位到高位,将n的第m位置设为0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBitToZero</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; ~(<span class="number">1</span> &lt;&lt; (m-<span class="number">1</span>));</span><br><span class="line">    <span class="comment">/* 将1左移m-1位找到第m位，取反后变成111...0...1111 </span></span><br><span class="line"><span class="comment">       n再和这个数做与运算*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）"><a href="#另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）" class="headerlink" title="另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）"></a>另附一些对程序效率上没有实质提高的位运算技巧，一些也是位运算的常识（面试也许会遇到）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n+<span class="number">1</span> = -~n</span><br><span class="line">n-<span class="number">1</span> = ~-n</span><br><span class="line">-n  = ~n+<span class="number">1</span></span><br><span class="line">-n  = (n^-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">x = a ^ b ^ x &lt;=&gt; <span class="keyword">if</span>(x == a) x = b; <span class="keyword">if</span>(x == b) x = a;</span><br><span class="line">sign(x) = !!n - (((unsigned)n &gt;&gt; <span class="number">31</span>) &lt;&lt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取整数二进制表示中最右侧的1"><a href="#获取整数二进制表示中最右侧的1" class="headerlink" title="获取整数二进制表示中最右侧的1"></a>获取整数二进制表示中最右侧的1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &amp; (-n)  &lt;=&gt; n &amp; ~(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h2><p>用到了n &amp; (n - 1)<br>由x &amp; (x - 1)消去x最后一位的1可知。不断使用 x &amp; (x - 1) 消去x最后一位的1，计算总共消去了多少次即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOnes</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">        num = num &amp; (num-<span class="number">1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="function">unsigned <span class="keyword">int</span> <span class="title">Bit_Reverse</span><span class="params">(unsigned <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>) | ((v &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xaaaaaaaa</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) | ((v &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xcccccccc</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>) | ((v &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0xf0f0f0f0</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00ff00ff</span>) | ((v &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xff00ff00</span>);</span><br><span class="line">    v = ((v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0000ffff</span>) | ((v &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffff0000</span>);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输入两个数A和B，输出将A转换为B所需改变的二进制的位数。"><a href="#输入两个数A和B，输出将A转换为B所需改变的二进制的位数。" class="headerlink" title="输入两个数A和B，输出将A转换为B所需改变的二进制的位数。"></a>输入两个数A和B，输出将A转换为B所需改变的二进制的位数。</h2><p>首先，A异或B得到的是A和B中不相同位数组成的数，然后再求这个数二进制表示中1的个数，即为所求。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countOnes(A^B);</span><br></pre></td></tr></table></figure></p>
<h2 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h2><p>用到了n &amp; (n - 1) 和 a ^ b ^ b = a</p>
<h3 id="数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数"><a href="#数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数" class="headerlink" title="数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数"></a>数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数</h3><p>因为只有一个数恰好出现一个，剩下的都出现过两次，所以只要将所有的数异或起来，就可以得到唯一的那个数。<br>参考文章：<a href="http://zhedahht.blog.163.com/blog/static/2541117420071128950682/" target="_blank" rel="noopener">http://zhedahht.blog.163.com/blog/static/2541117420071128950682/</a></p>
<h3 id="数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数"><a href="#数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数" class="headerlink" title="数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数"></a>数组中，只有一个数出现一次，剩下都出现三次，找出出现一次的数</h3><p>因为数是出现三次的，也就是说，对于每一个二进制位，如果只出现一次的数在该二进制位为1，那么这个二进制位在全部数字中出现次数无法被3整除。</p>
<p>膜3运算只有三种状态：00,01,10，因此我们可以使用两个位来表示当前位%3，对于每一位，我们让Two，One表示当前位的状态，B表示输入数字的对应位，Two+和One+表示输出状态。</p>
<p>参考文章：<a href="http://zhedahht.blog.163.com/blog/static/25411174201283084246412/" target="_blank" rel="noopener">http://zhedahht.blog.163.com/blog/static/25411174201283084246412/</a></p>
<h2 id="数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数"><a href="#数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数" class="headerlink" title="数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数"></a>数组中，只有两个数出现一次，剩下都出现两次，找出出现一次的数</h2><p>有了第一题的基本的思路，我们可以将数组分成两个部分，每个部分里只有一个元素出现一次，其余元素都出现两次。那么使用这种方法就可以找出这两个元素了。<br>不妨假设出现一个的两个元素是x，y，那么最终所有的元素异或的结果就是res = x^y。并且res！=0，那么我们可以找出res二进制表示中的某一位是1。对于原来的数组，我们可以根据这个位置是不是1就可以将数组分成两个部分。x，y在不同的两个子数组中。而且对于其他成对出现的元素，要么在x所在的那个数组，要么在y所在的那个数组。</p>
<h2 id="位操作实现加减乘除运算"><a href="#位操作实现加减乘除运算" class="headerlink" title="位操作实现加减乘除运算"></a>位操作实现加减乘除运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryAdd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> carry, add;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        add = a ^ b; <span class="comment">//该操作得到本位的加法结果  </span></span><br><span class="line">        carry = (a &amp; b) &lt;&lt; <span class="number">1</span>; <span class="comment">//该操作得到该位对高位的进位值  </span></span><br><span class="line">        a = add;  </span><br><span class="line">        b = carry;  </span><br><span class="line">    &#125; <span class="keyword">while</span> (carry != <span class="number">0</span>); <span class="comment">//循环直到某次运算没有进位，运算结束</span></span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BinaryAdd(a, BinaryAdd(~b, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*乘法 </span></span><br><span class="line"><span class="comment">该过程中的bit_map是为了快速得到乘法过程中某位相乘的中间结果S[i] </span></span><br><span class="line"><span class="comment">需要位移的位数。bit_map的键值是2^0, 2^1,2^2, ……之类的数，对应的 </span></span><br><span class="line"><span class="comment">值是0，1,2,……(即需要位移的位数)。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryMultiply</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> neg = (b &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">0</span>)</span><br><span class="line">        b = -b;  </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; bit_map;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        bit_map.insert(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; i, i));  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        b &amp; ~(b - 1)可以得到乘数b的二进制表示中最右侧1的位置 </span></span><br><span class="line"><span class="comment">        last_bit记录被乘数a需要位移的位数 </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">        <span class="keyword">int</span> last_bit = bit_map[b &amp; ~(b - <span class="number">1</span>)];  </span><br><span class="line">        <span class="comment">//将得到的乘法结果全部相加即为最后结果  </span></span><br><span class="line">        sum += (a &lt;&lt; last_bit);  </span><br><span class="line">        b &amp;= b - <span class="number">1</span>; <span class="comment">//每次将b的二进制表示的最右侧1去掉用于下一次乘法  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(neg)</span><br><span class="line">        sum = -sum;  </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinaryDivide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> neg = (a &gt; <span class="number">0</span>) ^ (b &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>)</span><br><span class="line">        a = -a;  </span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">0</span>)</span><br><span class="line">        b = -b;  </span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> msb = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//msd记录除数需要左移的位数</span></span><br><span class="line">    <span class="keyword">for</span>(msb = <span class="number">0</span>; msb &lt; <span class="number">32</span>; msb++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((b &lt;&lt; msb) &gt;= a)  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">0</span>; <span class="comment">//记录每次除法的商</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = msb; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>((b &lt;&lt; i) &gt; a)  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        q |= (<span class="number">1</span> &lt;&lt; i);  </span><br><span class="line">        a -= (b &lt;&lt; i);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(neg)</span><br><span class="line">        <span class="keyword">return</span> -q;  </span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h1><ul>
<li><a href="http://blog.csdn.net/zmazon/article/details/8262185" target="_blank" rel="noopener">优秀程序员不得不知道的20个位运算技巧</a><a href="http://blog.csdn.net/zmazon/article/details/8262185" target="_blank" rel="noopener">http://blog.csdn.net/zmazon/article/details/8262185</a></li>
<li><a href="http://blog.csdn.net/u013074465/article/details/42680239" target="_blank" rel="noopener">位操作实现加减乘除四则运算</a><a href="http://blog.csdn.net/u013074465/article/details/42680239" target="_blank" rel="noopener">http://blog.csdn.net/u013074465/article/details/42680239</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向过程，面向对象，函数式]]></title>
      <url>/2017/09/18/2017-9-18-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="如何把大象关进冰箱里？"><a href="#如何把大象关进冰箱里？" class="headerlink" title="如何把大象关进冰箱里？"></a>如何把大象关进冰箱里？</h3><h4 id="面向过程："><a href="#面向过程：" class="headerlink" title="面向过程："></a>面向过程：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把冰箱门打开 =&gt; 大象放冰箱里 =&gt; 冰箱门关上</span><br></pre></td></tr></table></figure>
<h4 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">冰箱.开门（）</span><br><span class="line">冰箱.放入（大象）</span><br><span class="line">冰箱.关门（）</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冰箱.开门().放入(大象).关门()</span><br></pre></td></tr></table></figure>
<h4 id="函数式："><a href="#函数式：" class="headerlink" title="函数式："></a>函数式：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关进（冰箱，大象）:</span><br><span class="line">    关门（放入（开门（冰箱），大象））</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂思 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[terminal tips]]></title>
      <url>/2017/08/28/2017-08-28-Terminal-tips/</url>
      <content type="html"><![CDATA[<h1 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h1><ul>
<li>快捷键：<code>Ctrl+Alt-T</code></li>
<li>空白处右键：有选项<code>在终端打开</code></li>
<li>处于命令行窗口：<code>Ctrl+T</code>选项卡形式，<code>Ctrl+N</code>窗口形式</li>
</ul>
<h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><h2 id="颜色代码"><a href="#颜色代码" class="headerlink" title="颜色代码"></a>颜色代码</h2><hr>
<table>
<thead>
<tr>
<th>前景</th>
<th>背景</th>
<th>颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>30</td>
<td>40</td>
<td>黑色</td>
</tr>
<tr>
<td>31</td>
<td>41</td>
<td>紅色</td>
</tr>
<tr>
<td>32</td>
<td>42</td>
<td>綠色</td>
</tr>
<tr>
<td>33</td>
<td>43</td>
<td>黃色</td>
</tr>
<tr>
<td>34</td>
<td>44</td>
<td>藍色</td>
</tr>
<tr>
<td>35</td>
<td>45</td>
<td>紫紅色</td>
</tr>
<tr>
<td>36</td>
<td>46</td>
<td>青藍色</td>
</tr>
<tr>
<td>37</td>
<td>47</td>
<td>白色</td>
</tr>
<tr>
<td>——-</td>
<td>———–</td>
<td>———</td>
</tr>
<tr>
<td>1</td>
<td>透明色</td>
</tr>
</tbody>
</table>
<h2 id="——"><a href="#——" class="headerlink" title="——- "></a>——- </h2><table>
<thead>
<tr>
<th>代码</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>OFF</td>
</tr>
<tr>
<td>1</td>
<td>高亮显示</td>
</tr>
<tr>
<td>4</td>
<td>underline</td>
</tr>
<tr>
<td>5</td>
<td>闪烁</td>
</tr>
<tr>
<td>7</td>
<td>反白显示</td>
</tr>
<tr>
<td>8</td>
<td>不可见</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="序列说明"><a href="#序列说明" class="headerlink" title="序列说明"></a>序列说明</h2><p> | \a |  ASCII响铃字符（也可以键入 \007） |<br> | \d |  “Wed Sep 06”格式的日期 |<br> | \e |  ASCII转义字符（也可以键入 \033） |<br> | \h |  主机名的第一部分（如 “mybox”） |<br> | \H |  主机的全称（如 “mybox.mydomain.com”） |<br> | \j |  在此 shell中通过按 ^Z挂起的进程数 |<br> | \l | 此 shell的终端设备名（如 “ttyp4”） |<br> | \n |  换行符 |<br> | \r |  回车符 |<br> | \s |  shell的名称（如 “bash”） |<br> | \t |  24小时制时间（如 “23:01:01”） |<br> | \T |  12小时制时间（如 “11:01:01”） |<br> | \@ | 带有 am/pm的 12小时制时间 |<br> | \u | 用户名 |<br> | \v | bash的版本（如 2.04） |<br> | \V |  Bash版本（包括补丁级别） ?/td&gt;; |<br> | \w |  当前工作目录（如 “/home/drobbins”） |<br> | \W |  当前工作目录的“基名 (basename)”（如 “drobbins”） |<br> | ! |  当前命令在历史缓冲区中的位置 |<br> | # | 命令编号（只要您键入内容，它就会在每次提示时累加） |<br> | \$ |  如果您不是超级用户 (root)，则插入一个 “$”；如果您是超级用户，则显示一个 “#” |<br> | \xxx |  插入一个用三位数 xxx（用零代替未使用的数字，如 “/007”）表示的 ASCII 字符 |<br> | \  | 反斜杠 |<br> | [ | 这个序列应该出现在不移动光标的字符序列（如颜色转义序列）之前。它使 bash能够正确计算自动换行。 |<br> | ]  | 这个序列应该出现在非打印字符序列之后。 | </p>
<h2 id="颜色的设置公式"><a href="#颜色的设置公式" class="headerlink" title="颜色的设置公式"></a>颜色的设置公式</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色=\<span class="number">033</span>[代码<span class="comment">;前景;背景m</span></span><br></pre></td></tr></table></figure>
<p>如：<code>\033[1;32;40m</code>表示高亮显示字体为绿色，背景色为黑色（颜色定义见本文前面的表格）</p>
<blockquote>
<p>注意：<br>  要将全部非打印字符用专用的 bash 转义序列 “[“和 “]“括起来。这两个序列通知 bash，被括起来的字符不占用行上的任何空间，这样就使自动换行能够继续正常工作。<br>  这点很关键要不然等你设好了颜色，你的终端换行会乱七八糟</p>
</blockquote>
<hr>
<h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><p>默认的就很好看，打开<code>~/.bashrc</code>，其中有几行声明</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ "$color_prompt" = yes ]; then</span><br><span class="line">    PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '</span><br><span class="line">else</span><br><span class="line">    PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ '</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>下面这个就是默认的配色方案<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>要修改配色方案，在文件末尾加上<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=`balabala`</span><br></pre></td></tr></table></figure></p>
<h2 id="ROOT身份下的终端颜色"><a href="#ROOT身份下的终端颜色" class="headerlink" title="ROOT身份下的终端颜色"></a>ROOT身份下的终端颜色</h2><p>打开<code>/root/.bash.rc</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/<span class="selector-class">.bash</span><span class="selector-class">.rc</span></span><br></pre></td></tr></table></figure></p>
<p>按<code>i</code>进入插入字符模式，在文件末尾加上一行(把默认的贴过去)<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>按下<code>Esc</code>然后输入<code>:wq</code>保存修改</p>
<p>再输入<code>source ~/.bashrc</code>刷新</p>
<h2 id="SSH会话下的终端颜色"><a href="#SSH会话下的终端颜色" class="headerlink" title="SSH会话下的终端颜色"></a>SSH会话下的终端颜色</h2><p>通过在.bashrc文件中更改与ssh连接的每个主机名上的PS1值</p>
<p>在托管的机器上(lxy @ ubuntu)同样打开文件<code>~/.bashrc</code><br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure></p>
<p>在文件末尾加上一行(把默认的贴过去)<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1='<span class="formula">$&#123;debian_chroot:+($</span>debian_chroot)&#125;<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;32m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">u</span></span>@<span class="tag">\<span class="name">h</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span>:<span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[01;34m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">w</span></span><span class="tag">\<span class="name">[</span></span><span class="tag">\</span>033[00m<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">$</span></span> '</span><br></pre></td></tr></table></figure></p>
<p>按下<code>Esc</code>然后输入<code>:wq</code>保存修改</p>
<p>再输入<code>source ~/.bashrc</code>刷新</p>
<h1 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h1><p>安装zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure></p>
<p>安装oh-my-zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/tmplates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></p>
<p>Powerline 主题<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme ~/.ohmyzsh-powerline</span><br><span class="line">cd ~/.ohmyzsh-powerline</span><br><span class="line">cp powerline.zsh-theme ~/.oh-my-zsh/themes/powerline.zsh-theme</span><br><span class="line">rm -rf ~/.ohmyzsh-powerline</span><br></pre></td></tr></table></figure></p>
<p>把zsh设为默认<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></p>
<p>卸载zsh<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove zsh</span><br></pre></td></tr></table></figure></p>
<p>今天手残装了zsh和oh-my-zsh后又卸载掉，导致<code>su</code>进不去<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无法执行 <span class="regexp">/usr/</span>bin/<span class="string">zsh:</span> 没有那个文件或目录</span><br></pre></td></tr></table></figure></p>
<p>只要把 <code>/usr/bin/zsh</code> 改成 <code>/bin/bash</code> 就可以了<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure></p>
<p>第一句改成<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure></p>
<p>或者直接运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh -s /bin/bashrc</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tips </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang程序配置方案小结]]></title>
      <url>/2017/08/28/2017-08-28-Golang-setting/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>无论使用任何编程语言开发应用，都离不开配置数据。配置数据提供的形式有多样，不外乎命令行选项(options)、参数（parameters)，环境 变量（env vars)以及配置文件等。Golang也不例外。Golang内置flag标准库，可以用来支持部分命令行选项和参数的解析；Golang通过os包提 供的方法可以获取当前环境变量；但Golang没有规定标准配置文件格式(虽说内置支持xml、json)，多通过第三方 包来解决配置文件读取的问题。Golang配置相关的第三方包邮很多，作者在本文中给出的配置方案中就包含了主流的第三方配置数据操作包。</p>
<p>一个良好的应用配置层次应该是这样的：</p>
<ol>
<li>程序内内置配置项的初始默认值</li>
<li>配置文件中的配置项值可以覆盖(override)程序内配置项的默认值。</li>
<li>命令行选项和参数值具有最高优先级，可以override前两层的配置项值。</li>
</ol>
<p>下面循序渐进探讨golang程序配置方案。</p>
<h1 id="解析命令行选项和参数"><a href="#解析命令行选项和参数" class="headerlink" title="解析命令行选项和参数"></a>解析命令行选项和参数</h1><p>这一节关注golang程序如何访问命令行选项和参数。</p>
<p>golang对访问到命令行参数提供了内建的支持：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cmdlineargs.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">//      "fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"I am "</span>, os.Args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    baseName := filepath.Base(os.Args[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"The base name is "</span>, baseName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The length of array a can be discovered using the built-in function len</span></span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Argument # is "</span>, <span class="built_in">len</span>(os.Args))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the first command line arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"The first command line argument: "</span>, os.Args[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">go</span> build cmdlineargs.<span class="keyword">go</span></span><br><span class="line">$cmdlineargs test one</span><br><span class="line">I <span class="keyword">am</span>  cmdlineargs</span><br><span class="line">The base name <span class="keyword">is</span>  cmdlineargs</span><br><span class="line">Argument # <span class="keyword">is</span>  <span class="number">3</span></span><br><span class="line">The <span class="keyword">first</span> <span class="keyword">command</span> <span class="built_in">line</span> argumen<span class="variable">t:</span>  test</span><br></pre></td></tr></table></figure></p>
<p>对于命令行结构复杂一些的程序，我们最起码要用到golang标准库内置的flag包：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cmdlineflag.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    <span class="comment">// main operation modes</span></span><br><span class="line">    write = flag.Bool(<span class="string">"w"</span>, <span class="literal">false</span>, <span class="string">"write result back instead of stdout\n\t\tDefault: No write back"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// layout control</span></span><br><span class="line">    tabWidth = flag.Int(<span class="string">"tabwidth"</span>, <span class="number">8</span>, <span class="string">"tab width\n\t\tDefault: Standard"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// debugging</span></span><br><span class="line">    cpuprofile = flag.String(<span class="string">"cpuprofile"</span>, <span class="string">""</span>, <span class="string">"write cpu profile to this file\n\t\tDefault: no default"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">usage</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Fprintf allows us to print to a specifed file handle or stream</span></span><br><span class="line">    fmt.Fprintf(os.Stderr, <span class="string">"\nUsage: %s [flags] file [path ...]\n\n"</span>,</span><br><span class="line">        <span class="string">"CommandLineFlag"</span>) <span class="comment">// os.Args[0]</span></span><br><span class="line">    flag.PrintDefaults()</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Before parsing the flags\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"T: %d\nW: %s\nC: '%s'\n"</span>,</span><br><span class="line">        *tabWidth, strconv.FormatBool(*write), *cpuprofile)</span><br><span class="line"></span><br><span class="line">    flag.Usage = usage</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There is also a mandatory non-flag arguments</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag.Args()) &lt; <span class="number">1</span> &#123;</span><br><span class="line">        usage()</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    fmt.Printf(<span class="string">"Testing the flag package\n"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"T: %d\nW: %s\nC: '%s'\n"</span>,</span><br><span class="line">        *tabWidth, strconv.FormatBool(*write), *cpuprofile)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, element := <span class="keyword">range</span> flag.Args() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"I: %d C: '%s'\n"</span>, index, element)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子中：</p>
<ul>
<li>说明了三种类型标志的用法：Int、String和Bool。</li>
<li>说明了每个标志的定义都由类型、命令行选项文本、默认值以及含义解释组成。</li>
<li>最后说明了如何处理标志选项(flag option)以及非option参数。</li>
</ul>
<p>不带参数运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line"></span><br><span class="line">Usage: CommandLineFlag [flags] file [path ...]</span><br><span class="line"></span><br><span class="line">  -cpuprofile="": write cpu profile to this file</span><br><span class="line">        Default: no default</span><br><span class="line">  -tabwidth=8: tab width</span><br><span class="line">        Default: Standard</span><br><span class="line">  -w=false: write result back instead of stdout</span><br><span class="line">        Default: No write back</span><br></pre></td></tr></table></figure></p>
<p>带命令行标志以及参数运行(一个没有flag，一个有两个flag)：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag aa bb</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">Testing the flag package</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">I: 0 C: 'aa'</span><br><span class="line">I: 1 C: 'bb'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">cmdlineflag -tabwidth=2 -w aa</span></span><br><span class="line">Before parsing the flags</span><br><span class="line">T: 8</span><br><span class="line">W: false</span><br><span class="line">C: ''</span><br><span class="line">Testing the flag package</span><br><span class="line">T: 2</span><br><span class="line">W: true</span><br><span class="line">C: ''</span><br><span class="line">I: 0 C: 'aa'</span><br></pre></td></tr></table></figure></p>
<p>从例子可以看出，简单情形下，你无需编写自己的命令行parser或使用第三方包，使用go内建的flag包即可以很好的完成工作。但是golang的 flag包与命令行Parser的事实标准：Posix getopt（C/C++/Perl/Shell脚本都可用）相比，还有较大差距，主要体现在：</p>
<ol>
<li>无法支持区分long option和short option，比如：-h和–help。</li>
<li>不支持short options合并，比如：ls -l -h &lt;=&gt; ls -hl</li>
<li>命令行标志的位置不能任意放置，比如无法放在non-flag parameter的后面。</li>
</ol>
<p>不过毕竟flag是golang内置标准库包，你无须付出任何cost，就能使用它的功能。另外支持bool型的flag也是其一大亮点。</p>
<h1 id="TOML，Go配置文件的事实标准（这个可能不能得到认同）"><a href="#TOML，Go配置文件的事实标准（这个可能不能得到认同）" class="headerlink" title="TOML，Go配置文件的事实标准（这个可能不能得到认同）"></a>TOML，Go配置文件的事实标准（这个可能不能得到认同）</h1><p>命令行虽然是一种可选的配置方案，但更多的时候，我们使用配置文件来存储静态的配置数据。就像Java配xml，ruby配yaml，windows配 ini，Go也有自己的搭配组合，那就是TOML（Tom’s Obvious, Minimal Language）。</p>
<p>初看toml语法有些类似windows ini，但细致研究你会发现它远比ini强大的多，下面是一个toml配置文件例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a TOML document. Boom.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title</span> = <span class="string">"TOML Example"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[owner]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"Lance Uppercut"</span></span><br><span class="line"><span class="attr">dob</span> = <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span> # First class dates? Why not?</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">server</span> = <span class="string">"192.168.1.1"</span></span><br><span class="line"><span class="attr">ports</span> = [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</span><br><span class="line"><span class="attr">connection_max</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[servers]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># You can indent as you please. Tabs or spaces. TOML don't care.</span></span><br><span class="line"><span class="section">  [servers.alpha]</span></span><br><span class="line">  ip = "10.0.0.1"</span><br><span class="line">  dc = "eqdc10"</span><br><span class="line"></span><br><span class="line"><span class="section">  [servers.beta]</span></span><br><span class="line">  ip = "10.0.0.2"</span><br><span class="line">  dc = "eqdc10"</span><br><span class="line"></span><br><span class="line"><span class="section">[clients]</span></span><br><span class="line"><span class="attr">data</span> = [ [<span class="string">"gamma"</span>, <span class="string">"delta"</span>], [<span class="number">1</span>, <span class="number">2</span>] ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line breaks are OK when inside arrays</span></span><br><span class="line"><span class="attr">hosts</span> = [</span><br><span class="line">  "alpha",</span><br><span class="line">  "omega"</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>看起来很强大，也很复杂，但解析起来却很简单。以下面这个toml 文件为例：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Age</span> = <span class="number">25</span></span><br><span class="line"><span class="attr">Cats</span> = [ <span class="string">"Cauchy"</span>, <span class="string">"Plato"</span> ]</span><br><span class="line"><span class="attr">Pi</span> = <span class="number">3.14</span></span><br><span class="line"><span class="attr">Perfection</span> = [ <span class="number">6</span>, <span class="number">28</span>, <span class="number">496</span>, <span class="number">8128</span> ]</span><br><span class="line"><span class="attr">DOB</span> = <span class="number">1987</span>-<span class="number">07</span>-<span class="number">05</span>T05:<span class="number">45</span>:<span class="number">00</span>Z</span><br></pre></td></tr></table></figure></p>
<p>和所有其他配置文件parser类似，这个配置文件中的数据可以被直接解析成一个golang struct：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">  Age <span class="keyword">int</span></span><br><span class="line">  Cats []<span class="keyword">string</span></span><br><span class="line">  Pi <span class="keyword">float64</span></span><br><span class="line">  Perfection []<span class="keyword">int</span></span><br><span class="line">  DOB time.Time <span class="comment">// requires `import time`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其解析的步骤也很简单：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conf Config</span><br><span class="line"><span class="keyword">if</span> _, err := toml.Decode(tomlData, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>是不是简单的不能简单了！</p>
<p>不过toml也有其不足之处。想想如果你需要使用命令行选项的参数值来覆盖这些配置文件中的选项，你应该怎么做？事实上，我们常常会碰到类似下面这种三层配置结构的情况：</p>
<ol>
<li>程序内内置配置项的初始默认值</li>
<li>配置文件中的配置项值可以覆盖(override)程序内配置项的默认值。</li>
<li>命令行选项和参数值具有最高优先级，可以override前两层的配置项值。</li>
</ol>
<p>在go中，toml映射的结果体字段没有初始值。而且go内建flag包也没有将命令行参数值解析为一个go结构体，而是零散的变量。这些可以通过第三方工具来解决，但如果你不想用第三方工具，你也可以像下面这样自己解决，虽然难看一些。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">func ConfigGet() *Config &#123;</span><br><span class="line">    <span class="built_in">var</span> err <span class="built_in">error</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">cf</span> *Config = NewConfig()</span><br><span class="line"></span><br><span class="line">    // set default <span class="built_in">values</span> defined <span class="keyword">in</span> the <span class="built_in">program</span></span><br><span class="line">    <span class="built_in">cf</span>.ConfigFromFlag()</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    // Load config file, from flag <span class="keyword">or</span> env (<span class="keyword">if</span> specified)</span><br><span class="line">    <span class="symbol">_</span>, err = <span class="built_in">cf</span>.ConfigFromFile(*configFile, os.Getenv(<span class="string">"APPCONFIG"</span>))</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">        <span class="built_in">log</span>.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    // Override <span class="built_in">values</span> from command line flags</span><br><span class="line">    <span class="built_in">cf</span>.ConfigToFlag()</span><br><span class="line">    flag.Usage = usage</span><br><span class="line">    flag.Parse()</span><br><span class="line">    <span class="built_in">cf</span>.ConfigFromFlag()</span><br><span class="line">    //<span class="built_in">log</span>.Printf(<span class="string">"P: %d, B: '%s', F: '%s'\n"</span>, <span class="built_in">cf</span>.MaxProcs, <span class="built_in">cf</span>.Webapp.Path)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cf</span>.ConfigApply()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">cf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就像上面代码中那样，你需要：</p>
<ol>
<li>用命令行标志默认值设置配置(cf)默认值。</li>
<li>接下来加载配置文件</li>
<li>用配置值(cf)覆盖命令行标志变量值</li>
<li>解析命令行参数</li>
<li>用命令行标志变量值覆盖配置(cf)值。</li>
</ol>
<p>少一步你都无法实现三层配置能力。</p>
<h1 id="超越TOML"><a href="#超越TOML" class="headerlink" title="超越TOML"></a>超越TOML</h1><p>本节将关注如何克服TOML的各种局限。</p>
<p>为了达成这个目标，很多人会说：使用viper，不过在介绍viper这一重量级选手 之前，我要为大家介绍另外一位不那么知名的选手：multiconfig。</p>
<p>有些人总是认为大的就是好的，但我相信适合的还是更好的。因为：</p>
<ol>
<li>viper太重量级，使用viper时你需要pull另外20个viper依赖的第三方包</li>
<li>事实上，viper单独使用还不足以满足需求，要想得到viper全部功能，你还需要另外一个包配合，而后者又依赖13个外部包</li>
<li>与viper相比，multiconfig使用起来更简单。</li>
</ol>
<p>好了，我们再来回顾一下我们现在面临的问题：</p>
<ol>
<li>在程序里定义默认配置，这样我们就无需再在toml中定义它们了。</li>
<li>用toml配置文件中的数据override默认配置</li>
<li>用命令行或环境变量的值override从toml中读取的配置。</li>
</ol>
<p>下面是一个说明如何使用multiconfig的例子：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := multiconfig.NewWithPath(<span class="string">"config.toml"</span>) <span class="comment">// supports TOML and JSON</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get an empty struct for your configuration</span></span><br><span class="line">    serverConf := <span class="built_in">new</span>(Server)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Populated the serverConf struct</span></span><br><span class="line">    m.MustLoad(serverConf) <span class="comment">// Check for error</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"After Loading: "</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"%+v\n"</span>, serverConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> serverConf.Enabled &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to true"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to false"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子中的toml文件如下：<br><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Name</span>              = <span class="string">"koding"</span></span><br><span class="line"><span class="attr">Enabled</span>           = <span class="literal">false</span></span><br><span class="line"><span class="attr">Port</span>              = <span class="number">6066</span></span><br><span class="line"><span class="attr">Users</span>             = [<span class="string">"ankara"</span>, <span class="string">"istanbul"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[Postgres]</span></span><br><span class="line"><span class="attr">Enabled</span>           = <span class="literal">true</span></span><br><span class="line"><span class="attr">Port</span>              = <span class="number">5432</span></span><br><span class="line"><span class="attr">Hosts</span>             = [<span class="string">"192.168.2.1"</span>, <span class="string">"192.168.2.2"</span>, <span class="string">"192.168.2.3"</span>]</span><br><span class="line"><span class="attr">AvailabilityRatio</span> = <span class="number">8.23</span></span><br></pre></td></tr></table></figure></p>
<p>toml映射后的go结构如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    <span class="comment">// Server holds supported types by the multiconfig package</span></span><br><span class="line">    Server <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name     <span class="keyword">string</span></span><br><span class="line">        Port     <span class="keyword">int</span> <span class="string">`default:"6060"`</span></span><br><span class="line">        Enabled  <span class="keyword">bool</span></span><br><span class="line">        Users    []<span class="keyword">string</span></span><br><span class="line">        Postgres Postgres</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Postgres is here for embedded struct feature</span></span><br><span class="line">    Postgres <span class="keyword">struct</span> &#123;</span><br><span class="line">        Enabled           <span class="keyword">bool</span></span><br><span class="line">        Port              <span class="keyword">int</span></span><br><span class="line">        Hosts             []<span class="keyword">string</span></span><br><span class="line">        DBName            <span class="keyword">string</span></span><br><span class="line">        AvailabilityRatio <span class="keyword">float64</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>multiconfig的使用是不是很简单，后续与viper对比后，你会同意我的观点的。</p>
<p>multiconfig支持默认值，也支持显式的字段赋值需求。<br>支持toml、json、结构体标签（struct tags)以及环境变量。<br>你可以自定义配置源（例如一个远程服务器），如果你想这么做的话。<br>可高度扩展（通过loader接口），你可以创建你自己的loader。</p>
<p>下面是例子的运行结果，首先是usage help：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$cmdlinemulticonfig -help</span><br><span class="line">Usage of cmdlinemulticonfig:</span><br><span class="line">  -enabled=<span class="literal">false</span>: Change value of Enabled.</span><br><span class="line">  -name=koding: Change value of Name.</span><br><span class="line">  -port=<span class="number">6066</span>: Change value of Port.</span><br><span class="line">  -postgres-availabilityratio=<span class="number">8.23</span>: Change value of Postgres-AvailabilityRatio.</span><br><span class="line">  -postgres-dbname=: Change value of Postgres-DBName.</span><br><span class="line">  -postgres-enabled=<span class="literal">true</span>: Change value of Postgres-Enabled.</span><br><span class="line">  -postgres-hosts=[<span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>]: Change value of Postgres-Hosts.</span><br><span class="line">  -postgres-port=<span class="number">5432</span>: Change value of Postgres-Port.</span><br><span class="line">  -users=[ankara istanbul]: Change value of Users.</span><br><span class="line"></span><br><span class="line">Generated environment variables:</span><br><span class="line">   SERVER_NAME</span><br><span class="line">   SERVER_PORT</span><br><span class="line">   SERVER_ENABLED</span><br><span class="line">   SERVER_USERS</span><br><span class="line">   SERVER_POSTGRES_ENABLED</span><br><span class="line">   SERVER_POSTGRES_PORT</span><br><span class="line">   SERVER_POSTGRES_HOSTS</span><br><span class="line">   SERVER_POSTGRES_DBNAME</span><br><span class="line">   SERVER_POSTGRES_AVAILABILITYRATIO</span><br><span class="line"></span><br><span class="line">$cmdlinemulticonfig</span><br><span class="line">After Loading:</span><br><span class="line">&amp;&#123;Name:koding Port:<span class="number">6066</span> Enabled:<span class="literal">false</span> Users:[ankara istanbul] Postgres:&#123;Enabled:<span class="literal">true</span> Port:<span class="number">5432</span> Hosts:[<span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>] DBName: AvailabilityRatio:<span class="number">8.23</span>&#125;&#125;</span><br><span class="line">Enabled field is set to <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>检查一下输出结果吧，是不是每项都符合我们之前的预期呢！</p>
<h1 id="Viper"><a href="#Viper" class="headerlink" title="Viper"></a>Viper</h1><p>我们的重量级选手<a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a>该出场了！</p>
<p>毫无疑问，viper非常强大。但如果你想用命令行参数覆盖预定义的配置项值，viper自己还不足以。要想让viper爆发，你需要另外一个包配合，它就是<a href="https://github.com/spf13/cobra" target="_blank" rel="noopener">cobra</a>。</p>
<p>不同于注重简化配置处理的multiconfig，viper让你拥有全面控制力。不幸的是，在得到这种控制力之前，你需要做一些体力活。</p>
<p>我们再来回顾一下使用multiconfig处理配置的代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := multiconfig.NewWithPath(<span class="string">"config.toml"</span>) <span class="comment">// supports TOML and JSON</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get an empty struct for your configuration</span></span><br><span class="line">    serverConf := <span class="built_in">new</span>(Server)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Populated the serverConf struct</span></span><br><span class="line">    m.MustLoad(serverConf) <span class="comment">// Check for error</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"After Loading: "</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"%+v\n"</span>, serverConf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> serverConf.Enabled &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to true"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Enabled field is set to false"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是使用multiconfig时你要做的所有事情。现在我们来看看使用viper和cobra如何来完成同样的事情：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mainCmd.AddCommand(versionCmd)</span><br><span class="line"></span><br><span class="line">    viper.SetEnvPrefix(<span class="string">"DISPATCH"</span>)</span><br><span class="line">    viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      When AutomaticEnv called, Viper will check for an environment variable any</span></span><br><span class="line"><span class="comment">      time a viper.Get request is made. It will apply the following rules. It</span></span><br><span class="line"><span class="comment">      will check for a environment variable with a name matching the key</span></span><br><span class="line"><span class="comment">      uppercased and prefixed with the EnvPrefix if set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    flags := mainCmd.Flags()</span><br><span class="line"></span><br><span class="line">    flags.Bool(<span class="string">"debug"</span>, <span class="literal">false</span>, <span class="string">"Turn on debugging."</span>)</span><br><span class="line">    flags.String(<span class="string">"addr"</span>, <span class="string">"localhost:5002"</span>, <span class="string">"Address of the service"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-addr"</span>, <span class="string">"localhost:25"</span>, <span class="string">"Address of the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-user"</span>, <span class="string">""</span>, <span class="string">"User to authenticate with the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"smtp-password"</span>, <span class="string">""</span>, <span class="string">"Password to authenticate with the SMTP server"</span>)</span><br><span class="line">    flags.String(<span class="string">"email-from"</span>, <span class="string">"noreply@example.com"</span>, <span class="string">"The from email address."</span>)</span><br><span class="line"></span><br><span class="line">    viper.BindPFlag(<span class="string">"debug"</span>, flags.Lookup(<span class="string">"debug"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"addr"</span>, flags.Lookup(<span class="string">"addr"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_addr"</span>, flags.Lookup(<span class="string">"smtp-addr"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_user"</span>, flags.Lookup(<span class="string">"smtp-user"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"smtp_password"</span>, flags.Lookup(<span class="string">"smtp-password"</span>))</span><br><span class="line">    viper.BindPFlag(<span class="string">"email_from"</span>, flags.Lookup(<span class="string">"email-from"</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Viper supports reading from yaml, toml and/or json files. Viper can</span></span><br><span class="line">  <span class="comment">// search multiple paths. Paths will be searched in the order they are</span></span><br><span class="line">  <span class="comment">// provided. Searches stopped once Config File found.</span></span><br><span class="line"></span><br><span class="line">    viper.SetConfigName(<span class="string">"CommandLineCV"</span>) <span class="comment">// name of config file (without extension)</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">"/tmp"</span>)          <span class="comment">// path to look for the config file in</span></span><br><span class="line">    viper.AddConfigPath(<span class="string">"."</span>)             <span class="comment">// more path to look for the config files</span></span><br><span class="line"></span><br><span class="line">    err := viper.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"No config file found. Using built-in defaults."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，你需要使用BindPFlag来让viper和cobra结合一起工作。但这还不算太糟。</p>
<p>cobra的真正威力在于提供了subcommand能力。同时cobra还提供了与posix 全面兼容的命令行标志解析能力，包括长短标志、内嵌命令、为command定义你自己的help或usage等。</p>
<p>下面是定义子命令的例子代码：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The main command describes the service and defaults to printing the</span></span><br><span class="line"><span class="comment">// help message.</span></span><br><span class="line"><span class="keyword">var</span> mainCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"dispatch"</span>,</span><br><span class="line">    Short: <span class="string">"Event dispatch service."</span>,</span><br><span class="line">    Long:  <span class="string">`HTTP service that consumes events and dispatches them to subscribers.`</span>,</span><br><span class="line">    Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        serve()</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The version command prints this service.</span></span><br><span class="line"><span class="keyword">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class="line">    Use:   <span class="string">"version"</span>,</span><br><span class="line">    Short: <span class="string">"Print the version."</span>,</span><br><span class="line">    Long:  <span class="string">"The version of the dispatch service."</span>,</span><br><span class="line">    Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(version)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有了上面subcommand的定义，我们就可以得到如下的help信息了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  dispatch [flags]</span><br><span class="line">  dispatch [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  version     Print the version.</span><br><span class="line">  help        Help about any command</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      –addr="localhost:5002": Address of the service</span><br><span class="line">      –debug=false: Turn on debugging.</span><br><span class="line">      –email-from="noreply@example.com": The from email address.</span><br><span class="line">  -h, –help=false: help for dispatch</span><br><span class="line">      –smtp-addr="localhost:25": Address of the SMTP server</span><br><span class="line">      –smtp-password="": Password to authenticate with the SMTP server</span><br><span class="line">      –smtp-user="": User to authenticate with the SMTP server</span><br><span class="line"></span><br><span class="line">Use "dispatch help [command]" for more information about a command.</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Golang并发]]></title>
      <url>/2017/08/28/2017-08-28-Golang-concurency/</url>
      <content type="html"><![CDATA[<h1 id="运行期线程"><a href="#运行期线程" class="headerlink" title="运行期线程"></a>运行期线程</h1><p>Go允许使用go语句开启一个新的运行期线程，即 goroutine，以一个不同的、新创建的goroutine来执行一个函数。同一个程序中的所有goroutine共享同一个地址空间。</p>
<p>Goroutine非常轻量，除了为之分配的栈空间，其所占用的内存空间微乎其微。并且其栈空间在开始时非常小，之后随着堆存储空间的按需分配或释放而变化。内部实现上，goroutine会在多个操作系统线程上多路复用。如果一个goroutine阻塞了一个操作系统线程，例如：等待输入，这个线程上的其他goroutine就会迁移到其他线程，这样能继续运行。开发者并不需要关心/担心这些细节。</p>
<p>下面所示程序会输出<code>“Hello from main goroutine”</code>。也可能会输出<code>“Hello from another goroutine”</code>，具体依赖于两个goroutine哪个先结束。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Println(<span class="string">"Hello from another goroutine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Hello from main goroutine"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 至此，程序运行结束，</span></span><br><span class="line">    <span class="comment">// 所有活跃的goroutine被杀死</span></span><br><span class="line">&#125;</span><br><span class="line">goroutine1.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></p>
<p>接下来的这个程序，多数情况下，会输出<code>“Hello from main goroutine”</code>和<code>“Hello from another goroutine”</code>，输出的顺序不确定。但还有另一个可能性是：第二个goroutine运行得极其慢，在程序结束之前都没来得及输出相应的消息。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Println(<span class="string">"Hello from another goroutine"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Hello from main goroutine"</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second)        <span class="comment">// 等待1秒，等另一个goroutine结束</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//goroutine2.go</span></span><br></pre></td></tr></table></figure>
<p>下面则是一个相对更加实际的示例，其中定义了一个函数使用并发来推迟触发一个事件。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数Publish在给定时间过期后打印text字符串到标准输出</span></span><br><span class="line">   <span class="comment">// 该函数并不会阻塞而是立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">    &#125;()    <span class="comment">// 注意这里的括号。必须调用匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish1.go</span></span><br></pre></td></tr></table></figure></p>
<p>你可能会这样使用Publish函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Publish(<span class="string">"A goroutine starts a new thread of execution."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Let’s hope the news will published before I leave."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待发布新闻</span></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Ten seconds later: I’m leaving now."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish1.go</span></span><br></pre></td></tr></table></figure></p>
<p>这个程序，绝大多数情况下，会输出以下三行，顺序固定，每行输出之间相隔5秒。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go run publish1.go</span><br><span class="line">Let’s hope the news will published before I leave.</span><br><span class="line">BREAKING NEWS: A goroutine starts a new thread of execution.</span><br><span class="line">Ten seconds later: I’m leaving now.</span><br></pre></td></tr></table></figure></p>
<p>一般来说，通过睡眠的方式来编排线程之间相互等待是不太可能的。下一章节会介绍Go语言中的一种同步机制 - 管道，并演示如何使用管道让一个goroutine等待另一个goroutine。</p>
<h1 id="管道（channel）"><a href="#管道（channel）" class="headerlink" title="管道（channel）"></a>管道（channel）</h1><p>管道是Go语言的一个构件，提供一种机制用于两个goroutine之间通过传递一个指定类型的值来同步运行和通讯。操作符&lt;-用于指定管道的方向，发送或接收。如果未指定方向，则为双向管道。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> Sushi        <span class="comment">// 可用来发送和接收Sushi类型的值</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span>    <span class="comment">// 仅可用来发送float64类型的值</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>        <span class="comment">// 仅可用来接收int类型的值</span></span><br></pre></td></tr></table></figure></p>
<p>管道是引用类型，基于make函数来分配。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)    <span class="comment">// 不带缓冲的int类型管道</span></span><br><span class="line">wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work, <span class="number">10</span>)    <span class="comment">// 带缓冲的Work类型指针管道</span></span><br></pre></td></tr></table></figure></p>
<p>如果通过管道发送一个值，则将&lt;-作为二元操作符使用。通过管道接收一个值，则将其作为一元操作符使用：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic &lt;- <span class="number">3</span>        <span class="comment">// 往管道发送3</span></span><br><span class="line">work := &lt;-wc    <span class="comment">// 从管道接收一个指向Work类型值的指针</span></span><br></pre></td></tr></table></figure></p>
<p>如果管道不带缓冲，发送方会阻塞直到接收方从管道中接收了值。如果管道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。</p>
<p>关闭管道（Close）</p>
<p>close 函数标志着不会再往某个管道发送值。在调用close之后，并且在之前发送的值都被接收后，接收操作会返回一个零值，不会阻塞。一个多返回值的接收操作会额外返回一个布尔值用来指示返回的值是否发送操作传递的。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="string">"Hello!"</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 输出字符串"Hello!"</span></span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 输出零值 - 空字符串""，不会阻塞</span></span><br><span class="line">fmt.Println(&lt;-ch)    <span class="comment">// 再次打印输出空字符串""</span></span><br><span class="line">v, ok := &lt;-ch        <span class="comment">// 变量v的值为空字符串""，变量ok的值为false</span></span><br></pre></td></tr></table></figure></p>
<p>一个带有range子句的for语句会依次读取发往管道的值，直到该管道关闭：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 译注：要想运行该示例，需要先定义类型Sushi，如type Sushi string</span></span><br><span class="line">    <span class="keyword">var</span> ch &lt;-<span class="keyword">chan</span> Sushi = Producer()</span><br><span class="line">    <span class="keyword">for</span> s := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Consumed"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">Sushi</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> Sushi)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ch &lt;- Sushi(<span class="string">"海老握り"</span>)    <span class="comment">// Ebi nigiri</span></span><br><span class="line">        ch &lt;- Sushi(<span class="string">"鮪とろ握り"</span>) <span class="comment">// Toro nigiri</span></span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sushi.go</span></span><br></pre></td></tr></table></figure></p>
<h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p>下一个示例中，我们让Publish函数返回一个管道 - 用于在发布text变量值时广播一条消息：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在给定时间过期时，Publish函数会打印text变量值到标准输出</span></span><br><span class="line"><span class="comment">// 在text变量值发布后，该函数会关闭管道wait</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">        <span class="built_in">close</span>(ch)    <span class="comment">// 广播 - 一个关闭的管道都会发送一个零值</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish2.go</span></span><br></pre></td></tr></table></figure></p>
<p>注意：我们使用了一个空结构体的管道：struct{}。这明确地指明该管道仅用于发信号，而不是传递数据。</p>
<p>我们可能会这样使用这个函数：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := Publish(<span class="string">"Channels let goroutines communicate."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Waiting for the news..."</span>)</span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(<span class="string">"The news is out, time to leave."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//publish2.go</span></span><br></pre></td></tr></table></figure></p>
<p>这个程序会按指定的顺序输出以下三行内容。最后一行在新闻（news）一出就会立即输出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run publish2.go</span></span><br><span class="line">Waiting for the news...</span><br><span class="line">BREAKING NEWS: Channels let goroutines communicate.</span><br><span class="line">The news is out, time to leave.</span><br></pre></td></tr></table></figure></p>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>现在我们在Publish函数中引入一个bug：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(<span class="string">"BREAKING NEWS:"</span>, text)</span><br><span class="line">        <span class="comment">// 译注：注意这里将close函数调用注释掉了</span></span><br><span class="line">        <span class="comment">//close(ch)</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>主程序还是像之前一样开始运行：输出第一行，然后等待5秒，这时Publish函数开启的goroutine会输出突发新闻（breaking news），然后退出，留下主goroutine独自等待。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := Publish(<span class="string">"Channels let goroutines communicate."</span>, <span class="number">5</span>*time.Second)</span><br><span class="line">    fmt.Println(<span class="string">"Waiting for the news..."</span>)</span><br><span class="line">    <span class="comment">// 译注：注意下面这一句</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(<span class="string">"The news is out, time to leave."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此刻之后，程序无法再继续往下执行。众所周知，这种情形即为死锁。</p>
<blockquote>
<p>死锁是线程之间相互等待，其中任何一个都无法向前运行的情形。</p>
</blockquote>
<p>Go语言对于运行时的死锁检测具备良好的支持。当没有任何goroutine能够往前执行的情形发生时，Go程序通常会提供详细的错误信息。以下就是我们的问题程序的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Waiting for the news...</span><br><span class="line">BREAKING NEWS: Channels let goroutines communicate.</span><br><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive]:</span><br><span class="line">main.main()</span><br><span class="line">    .../goroutineStop.go:11 +0xf6</span><br><span class="line"></span><br><span class="line">goroutine 2 [syscall]:</span><br><span class="line">created by runtime.main</span><br><span class="line">    .../go/src/pkg/runtime/proc.c:225</span><br><span class="line"></span><br><span class="line">goroutine 4 [timer goroutine (idle)]:</span><br><span class="line">created by addtimer</span><br><span class="line">    .../go/src/pkg/runtime/ztime_linux_amd64.c:73</span><br></pre></td></tr></table></figure></p>
<p>大多数情况下找出Go程序中造成死锁的原因都比较容易，那么剩下的就是如何解决这个bug了。</p>
<h1 id="数据竞争（data-race）"><a href="#数据竞争（data-race）" class="headerlink" title="数据竞争（data race）"></a>数据竞争（data race）</h1><p>死锁也许听起来令人挺忧伤的，但伴随并发编程真正灾难性的错误其实是数据竞争，相当常见，也可能非常难于调试。</p>
<blockquote>
<p>当两个线程并发地访问同一个变量，并且其中至少一个访问是写操作时，数据竞争就发生了。</p>
</blockquote>
<p>下面的这个函数就有数据竞争问题，其行为是未定义的。例如，可能输出数值1。代码之后是一个可能性解释，试图搞清楚这一切是如何发生得。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 译注：注意下面这一行</span></span><br><span class="line">        n++ <span class="comment">// 一次访问: 读, 递增, 写</span></span><br><span class="line">        <span class="built_in">close</span>(wait)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 译注：注意下面这一行</span></span><br><span class="line">    n++ <span class="comment">// 另一次冲突的访问</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(n) <span class="comment">// 输出：未指定</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<p>代码中的两个goroutine（假设命名为g1和g2）参与了一次竞争，我们无法获知操作会以何种顺序发生。以下是诸多可能中的一种：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g1 从 n 中获取值<span class="number">0</span></span><br><span class="line">g2 从 n 中获取值<span class="number">0</span></span><br><span class="line">g1 将值从<span class="number">0</span>增大到<span class="number">1</span></span><br><span class="line">g1 将<span class="number">1</span>写到 n</span><br><span class="line">g2 将值从<span class="number">0</span>增大到<span class="number">1</span></span><br><span class="line">g2 将<span class="number">1</span>写到 n</span><br><span class="line">程序输出 n 的值，当前为<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>“数据竞争（data race）”这名字有点误导的嫌疑。不仅操作的顺序是未定义的，其实根本没有任何保证（no guarantees whatsoever）。编译器和硬件为了得到更好的性能，经常都会对代码进行上下内外的顺序变换。如果你看到一个线程处于中间行为状态时，那么当时的场景可能就像下图所示的一样：</p>
<p>避免数据竞争的唯一方式是线程间同步访问所有的共享可变数据。有几种方式能够实现这一目标。Go语言中，通常是使用管道或者锁。（sync和sync/atomic包中还有更低层次的机制可供使用，但本文中不做讨论）。</p>
<p>Go语言中，处理并发数据访问的推荐方式是使用管道从一个goroutine中往下一个goroutine传递实际的数据。有格言说得好：“不要通过共享内存来通讯，而是通过通讯来共享内存”。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sharingIsCaring</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        n := <span class="number">0</span> <span class="comment">// 仅为一个goroutine可见的局部变量.</span></span><br><span class="line">        n++</span><br><span class="line">        ch &lt;- n <span class="comment">// 数据从一个goroutine离开...</span></span><br><span class="line">    &#125;()</span><br><span class="line">    n := &lt;-ch   <span class="comment">// ...然后安全到达另一个goroutine.</span></span><br><span class="line">    n++</span><br><span class="line">    fmt.Println(n) <span class="comment">// 输出: 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<p>以上代码中的管道肩负双重责任 - 从一个goroutine将数据传递到另一个goroutine，并且起到同步的作用：发送方goroutine会等待另一个goroutine接收数据，接收方goroutine也会等待另一个goroutine发送数据。</p>
<blockquote>
<p>Go语言内存模型 - 要保证一个goroutine中对一个变量的读操作得到的值正好是另一个goroutine中对同一个变量写操作产生的值，条件相当复杂，但goroutine之间只要通过管道来共享所有可变数据，那么就能远离数据竞争了。</p>
</blockquote>
<h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><p>有时，通过显式加锁，而不是使用管道，来同步数据访问，可能更加便捷。Go语言标准库为这一目的提供了一个互斥锁 - sync.Mutex。</p>
<p>要想这类加锁起效的话，关键之处在于：所有对共享数据的访问，不管读写，仅当goroutine持有锁才能操作。一个goroutine出错就足以破坏掉一个程序，引入数据竞争。</p>
<p>因此，应该设计一个自定义数据结构，具备明确的API，确保所有的同步都在数据结构内部完成。下例中，我们构建了一个安全、易于使用的并发数据结构，AtomicInt，用于存储一个整型值。任意数量的goroutine都能通过Add和Value方法安全地访问这个数值。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AtomicInt是一个并发数据结构，持有一个整数值</span></span><br><span class="line"><span class="comment">// 该数据结构的零值为0</span></span><br><span class="line"><span class="keyword">type</span> AtomicInt <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu sync.Mutex <span class="comment">// 锁，一次仅能被一个goroutine持有。</span></span><br><span class="line">    n  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add方法作为一个原子操作将n加到AtomicInt</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicInt)</span> <span class="title">Add</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    a.mu.Lock() <span class="comment">// 等待锁释放，然后持有它</span></span><br><span class="line">    a.n += n</span><br><span class="line">    a.mu.Unlock() <span class="comment">// 释放锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value方法返回a的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AtomicInt)</span> <span class="title">Value</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    a.mu.Lock()</span><br><span class="line">    n := a.n</span><br><span class="line">    a.mu.Unlock()</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lockItUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wait := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">var</span> n AtomicInt</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        n.Add(<span class="number">1</span>) <span class="comment">// 一个访问</span></span><br><span class="line">        <span class="built_in">close</span>(wait)</span><br><span class="line">    &#125;()</span><br><span class="line">    n.Add(<span class="number">1</span>) <span class="comment">// 另一个并发访问</span></span><br><span class="line">    &lt;-wait</span><br><span class="line">    fmt.Println(n.Value()) <span class="comment">// 输出: 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//datarace.go</span></span><br></pre></td></tr></table></figure></p>
<h1 id="检测数据竞争"><a href="#检测数据竞争" class="headerlink" title="检测数据竞争"></a>检测数据竞争</h1><p>竞争有时非常难于检测。下例中的这个函数有一个数据竞争问题，执行这个程序时会输出55555。尝试一下，也许你会得到一个不同的结果。（sync.WaitGroup是Go语言标准库的一部分；用于等待一组goroutine结束运行。）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">race</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">// 译注：注意下面这行代码中的i++</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">// 注意下一行代码会输出什么？为什么？</span></span><br><span class="line">            fmt.Print(i) <span class="comment">// 6个goroutine共享变量i</span></span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有（5个）goroutine运行结束</span></span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<p>对于输出55555，一个貌似合理的解释是：执行i++的goroutine在其他goroutine执行打印语句之前就完成了5次i++操作。实际上变量i更新后的值为其他goroutine所见纯属巧合。</p>
<p>一个简单的解决方案是：使用一个局部变量，然后当开启新的goroutine时，将数值作为参数传递：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">correct</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123; <span class="comment">// 使用局部变量</span></span><br><span class="line">            fmt.Print(n)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<p>这次代码就对了，程序会输出期望的结果，如：24031。注意：goroutine之间的运行顺序是不确定的。</p>
<p>仍旧使用闭包，但能够避免数据竞争也是可能的，必须小心翼翼地让每个goroutine使用一个独有的变量。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">alsoCorrect</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        n := i <span class="comment">// 为每个闭包创建一个独有的变量</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Print(n)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//raceClosure.go</span></span><br></pre></td></tr></table></figure></p>
<h2 id="数据竞争自动检测"><a href="#数据竞争自动检测" class="headerlink" title="数据竞争自动检测"></a>数据竞争自动检测</h2><p>一般来说，不太可能能够自动检测发现所有可能的数据竞争情况，但Go（从版本1.1开始）有一个强大的数据竞争检测器。</p>
<p>这个工具用起来也很简单：只要在使用go命令时加上-race标记即可。开启检测器运行上面的程序会给出清晰且信息量大的输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run -race raceClosure.go</span></span><br><span class="line">Race:</span><br><span class="line">==================</span><br><span class="line">WARNING: DATA RACE</span><br><span class="line">Read by goroutine 2:</span><br><span class="line">    main.func·001()</span><br><span class="line">      ../raceClosure.go:22 +0x65</span><br><span class="line"></span><br><span class="line">Previous write by goroutine 0:</span><br><span class="line">    main.race()</span><br><span class="line">        ../raceClosure.go:20 +0x19b</span><br><span class="line">    main.main()</span><br><span class="line">        ../raceClosure.go:10 +0x29</span><br><span class="line">    runtime.main()</span><br><span class="line">        ../go/src/pkg/runtime/proc.c:248 +0x91</span><br><span class="line"></span><br><span class="line">Goroutine 2 (running) created at:</span><br><span class="line">    main.race()</span><br><span class="line">      ../raceClosure.go:24 +0x18b</span><br><span class="line">    main.main()</span><br><span class="line">      ../raceClosure.go:10 +0x29</span><br><span class="line">     runtime.main()</span><br><span class="line">      ../go/src/pkg/runtime/proc.c:248 +0x91</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line">55555</span><br><span class="line">Correct:</span><br><span class="line">01234</span><br><span class="line">Also correct:</span><br><span class="line">01324</span><br><span class="line">Found 1 data race(s)</span><br><span class="line">exit status 66</span><br></pre></td></tr></table></figure></p>
<p>该工具发现一处数据竞争，包含：一个goroutine在第20行对一个变量进行写操作，跟着另一个goroutine在第22行对同一个变量进行了未同步的读操作。</p>
<p>注意：竞争检测器只能发现在运行期确实发生的数据竞争（译注：我也不太理解这话，请指导）</p>
<h1 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h1><p>select语句是Go语言并发工具集中的终极工具。select用于从一组可能的通讯中选择一个进一步处理。如果任意一个通讯都可以进一步处理，则从中随机选择一个，执行对应的语句。否则，如果又没有默认分支（default case），select语句则会阻塞，直到其中一个通讯完成。</p>
<p>以下是一个玩具示例，演示select语句如何用于实现一个随机数生成器：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RandomBits函数 返回一个管道，用于产生一个比特随机序列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomBits</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> ch &lt;- <span class="number">0</span>: <span class="comment">// 注意：分支没有对应的处理语句</span></span><br><span class="line">            <span class="keyword">case</span> ch &lt;- <span class="number">1</span>:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//randBits.go</span></span><br></pre></td></tr></table></figure></p>
<p>下面是相对更加实际一点的例子：如何使用select语句为一个操作设置一个时间限制。代码会输出变量news的值或者超时消息，具体依赖于两个接收语句哪个先执行：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> news := &lt;-NewsAgency:</span><br><span class="line">    fmt.Println(news)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Minute):</span><br><span class="line">    fmt.Println(<span class="string">"Time out: no news in one minute."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数 time.After 是Go语言标准库的一部分；它会在等待指定时间后将当前的时间发送到返回的管道中。</p>
<h1 id="综合所有示例"><a href="#综合所有示例" class="headerlink" title="综合所有示例"></a>综合所有示例</h1><p>花点时间认真研究一下这个示例。如果你完全理解，也就对Go语言中并发的应用方式有了全面的掌握。</p>
<p>这个程序演示了如何将管道用于被任意数量的goroutine发送和接收数据，也演示了如何将select语句用于从多个通讯中选择一个。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    people := []<span class="keyword">string</span>&#123;<span class="string">"Anna"</span>, <span class="string">"Bob"</span>, <span class="string">"Cody"</span>, <span class="string">"Dave"</span>, <span class="string">"Eva"</span>&#125;</span><br><span class="line">    match := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>) <span class="comment">// 为一个未匹配的发送操作提供空间</span></span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    wg.Add(<span class="built_in">len</span>(people))</span><br><span class="line">    <span class="keyword">for</span> _, name := <span class="keyword">range</span> people &#123;</span><br><span class="line">        <span class="keyword">go</span> Seek(name, match, wg)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> name := &lt;-match:</span><br><span class="line">        fmt.Printf(<span class="string">"No one received %s’s message.\n"</span>, name)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 没有待处理的发送操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数Seek 发送一个name到match管道或从match管道接收一个peer，结束时通知wait group</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Seek</span><span class="params">(name <span class="keyword">string</span>, match <span class="keyword">chan</span> <span class="keyword">string</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> peer := &lt;-match:</span><br><span class="line">        fmt.Printf(<span class="string">"%s sent a message to %s.\n"</span>, peer, name)</span><br><span class="line">    <span class="keyword">case</span> match &lt;- name:</span><br><span class="line">        <span class="comment">// 等待某个goroutine接收我的消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//matching.go</span></span><br></pre></td></tr></table></figure></p>
<p>示例输出：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go run matching.go</span></span><br><span class="line">Cody sent a message to Bob.</span><br><span class="line">Anna sent a message to Eva.</span><br><span class="line">No one received Dave’s message.</span><br></pre></td></tr></table></figure></p>
<h1 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h1><p>并发的一个应用是将一个大的计算切分成一些工作单元，调度到不同的CPU上同时地计算。</p>
<p>将计算分布到多个CPU上更多是一门艺术，而不是一门科学。以下是一些经验法则：</p>
<ul>
<li>每个工作单元应该花费大约100微秒到1毫秒的时间用于计算。如果单元粒度太小，切分问题以及调度子问题的管理开销可能就会太大。如果单元粒度太大，整个计算也许不得不等待一个慢的工作项结束。这种缓慢可能因为多种原因而产生，比如：调度、其他进程的中断或者糟糕的内存布局。（注意：工作单元的数目是不依赖于CPU的数目的）</li>
<li>尽可能减小共享的数据量。并发写操作的代价非常大，特别是如果goroutine运行在不同的CPU上。读操作之间的数据共享则通常不会是个问题。</li>
<li>数据访问尽量利用良好的局部性。如果数据能保持在缓存中，数据加载和存储将会快得多得多，这对于写操作也格外地重要。</li>
<li>下面的这个示例展示如何切分一个开销很大的计算并将其分布在所有可用的CPU上进行计算。先看一下有待优化的代码：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vector []<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数Convolve 计算 w = u * v，其中 w[k] = Σ u[i]*v[j], i + j = k</span></span><br><span class="line"><span class="comment">// 先决条件：len(u) &gt; 0, len(v) &gt; 0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convolve</span><span class="params">(u, v Vector)</span> <span class="params">(w Vector)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(u) + <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    w = <span class="built_in">make</span>(Vector, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="number">0</span>; k &lt; n; k++ &#123;</span><br><span class="line">        w[k] = mul(u, v, k)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数mul 返回 Σ u[i]*v[j], i + j = k.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mul</span><span class="params">(u, v Vector, k <span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    n := min(k+<span class="number">1</span>, <span class="built_in">len</span>(u))</span><br><span class="line">    j := min(k, <span class="built_in">len</span>(v)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := k - j; i &lt; n; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        res += u[i] * v[j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>思路很简单：确定合适大小的工作单元，然后在不同的goroutine中执行每个工作单元。以下是并发版本的 Convolve：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convolve</span><span class="params">(u, v Vector)</span> <span class="params">(w Vector)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(u) + <span class="built_in">len</span>(v) - <span class="number">1</span></span><br><span class="line">    w = <span class="built_in">make</span>(Vector, n)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 w 切分成花费 ~100μs-1ms 用于计算的工作单元</span></span><br><span class="line">    size := max(<span class="number">1</span>, <span class="number">1</span>&lt;&lt;<span class="number">20</span>/n)</span><br><span class="line"></span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    wg.Add(<span class="number">1</span> + (n<span class="number">-1</span>)/size)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n &amp;&amp; i &gt;= <span class="number">0</span>; i += size &#123; <span class="comment">// 整型溢出后 i &lt; 0</span></span><br><span class="line">        j := i + size</span><br><span class="line">        <span class="keyword">if</span> j &gt; n || j &lt; <span class="number">0</span> &#123; <span class="comment">// 整型溢出后 j &lt; 0</span></span><br><span class="line">            j = n</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些goroutine共享内存，但是只读</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">                w[k] = mul(u, v, k)</span><br><span class="line">            &#125;</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i, j)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//convolution.go</span></span><br></pre></td></tr></table></figure></p>
<p>工作单元定义之后，通常情况下最好将调度工作交给运行时和操作系统。然而，对于Go 1.* 你也许需要告诉运行时希望多少个goroutine来同时地运行代码。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numcpu := runtime.NumCPU()</span><br><span class="line">    runtime.GOMAXPROCS(numcpu) <span class="comment">// 尝试使用所有可用的CPU</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理]]></title>
      <url>/2017/08/21/2017-08-21-%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-lantern"><a href="#1-lantern" class="headerlink" title="1.lantern"></a>1.lantern</h2><h4 id="浏览器代理"><a href="#浏览器代理" class="headerlink" title="浏览器代理"></a>浏览器代理</h4><p><a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">https://github.com/getlantern/lantern</a></p>
<h4 id="命令行代理"><a href="#命令行代理" class="headerlink" title="命令行代理"></a>命令行代理</h4><p>打开蓝灯后，终端下输入：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://127.0.0.1:8787</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://127.0.0.1:8787</span><br></pre></td></tr></table></figure>
<p>:8787是端口号，具体查看<code>系统设置</code>–<code>网络</code>–<code>网络代理</code></p>
]]></content>
      
        <categories>
            
            <category> Proxy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Lantern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GO的安装和配置]]></title>
      <url>/2017/08/21/2017-08-21-Go%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="0-Install-Go"><a href="#0-Install-Go" class="headerlink" title="0.Install Go"></a>0.Install Go</h2><blockquote>
<p>不要用<code>apt-get install golang</code>！这个目前只有1.6版，最新版已经到1.8+</p>
</blockquote>
<p>在linux 系统下，如ubuntu debian ，安装golang 最方便的方式是用apt-get install。</p>
<p>但不推荐这种方式安装，建议使用源码安装，如果你不小心用apt-get 等方式安装了，就先把它卸载：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> purge golang-<span class="built_in">go</span></span><br></pre></td></tr></table></figure></p>
<p>然后用源码安装，如果想升级也可以直接覆盖安装位置的原文件，golang 还算很干净。</p>
<p>套路:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -O https:<span class="comment">//storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -zxvf go1.<span class="number">7.3</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">mkdir -<span class="selector-tag">p</span> ~/go/src</span><br><span class="line">echo <span class="string">"export GOROOT=/usr/local/go"</span></span><br><span class="line">echo <span class="string">"export GOPATH=$HOME/go"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">echo <span class="string">"export PATH=$PATH:$GOPATH/bin:$GOROOT/bin"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br><span class="line">go version</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>GOROOT:根目录，设置了这个才指定解释器，也是标准库所在</p>
</li>
<li><p>GOPATH:工作目录，放你自己的代码．该目录下要有一定的结构，因为外来库要用<code>go get</code>安装在该目录下</p>
</li>
<li><p>PATH:系统环境变量，不破坏原来的环境变量的方法为<code>PATH=$PATH:/usr/local/go</code>表示在原来环境变量的基础上添加/usr/local/go</p>
</li>
</ul>
<p><code>Tips</code>:命令行下输入<code>export</code>可查看当前所有变量，包括PATH,GOROOT等等，方便确认是否设置成功</p>
<h2 id="1-GOROOT"><a href="#1-GOROOT" class="headerlink" title="1.GOROOT"></a>1.GOROOT</h2><p>GOROOT就是go的安装路径</p>
<p>在<code>~/.bash_profile</code>中添加下面语句:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br></pre></td></tr></table></figure>
<p>当然, 要执行go命令和go工具, 就要配置go的可执行文件的路径,操作如下:</p>
<p>在<code>~/.bash_profile</code>中配置如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></p>
<p>如果是windows需要使用;符号分割两个路径, mac和类unix都是用:符号分割</p>
<h2 id="2-GOPATH"><a href="#2-GOPATH" class="headerlink" title="2.GOPATH"></a>2.GOPATH</h2><p><code>go install</code>/<code>go get</code>和 go的工具等会用到GOPATH环境变量.</p>
<p>GOPATH是作为编译后二进制的存放目的地和import包时的搜索路径 (其实也是你的工作目录, 你可以在src下创建你自己的go源文件, 然后开始工作)。</p>
<p>GOPATH之下主要包含三个目录: bin、pkg、src</p>
<p>bin目录主要存放可执行文件; pkg目录存放编译好的库文件, 主要是*.a文件; src目录下主要存放go的源文件</p>
<p>不要把GOPATH设置成go的安装路径,</p>
<p>可以自己在用户目录下面创建一个目录, 如gopath</p>
<p>操作如下:<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> gopath</span><br></pre></td></tr></table></figure></p>
<p>在<code>~/.bash_profile</code>中添加如下语句:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GOPATH</span>=/Users/username/gopath</span><br></pre></td></tr></table></figure></p>
<p>GOPATH可以是一个目录列表, go get下载的第三方库, 一般都会下载到列表的第一个目录里面<br>需要把GOPATH中的可执行目录也配置到环境变量中, 否则你自行下载的第三方go工具就无法使用了, 操作如下:<br>在<code>~/bash_profile</code>中配置,<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure></p>
<p>创建一个go项目, 并且编译运行:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> goproject</span><br><span class="line"><span class="keyword">cd</span> goproject</span><br><span class="line">touch hello.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>hello.go</code>中输入:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"Hello, GO !"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在项目根目录下执行<code>go build</code>命令来构建你的项目, 构建后会生成hello文件<br>运行生成的文件<code>./hello, terminal</code>中输出:<code>Hello, GO !</code><br>当然你也可以直接运行命令<code>go run hello.go</code>来执行程序.</p>
<h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><p>源：<code>https://dl.gocn.io/</code><br>查看其他GO相关的环境变量：<code>go env</code></p>
]]></content>
      
        <categories>
            
            <category> GO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GO </tag>
            
            <tag> Install </tag>
            
            <tag> Settings </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jupyter-notebook-sen-usage]]></title>
      <url>/2017/08/20/2017-08-20-jupyter-notebook-sen-usage/</url>
      <content type="html"><![CDATA[<h2 id="安装jupyter-notebook"><a href="#安装jupyter-notebook" class="headerlink" title="安装jupyter-notebook"></a>安装jupyter-notebook</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="配置jupyter-notebook"><a href="#配置jupyter-notebook" class="headerlink" title="配置jupyter-notebook"></a>配置jupyter-notebook</h2><h3 id="配置可以同时使用python2和python3内核"><a href="#配置可以同时使用python2和python3内核" class="headerlink" title="配置可以同时使用python2和python3内核"></a>配置可以同时使用python2和python3内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ipython kernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -m ipykernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip2 install -U ipykernel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python2 -m ipykernel install --user</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter-notebook  //运行，会自动web界面，可以同时运行python2，python3，ctrl+c结束</span></span><br></pre></td></tr></table></figure>
<h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd </span><br><span class="line">$ jupyter notebook --generate-config</span><br><span class="line">Writing<span class="built_in"> default config </span><span class="keyword">to</span>: /root/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>
<h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><p>运行jupyter<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: from notebook.auth import passwd</span><br><span class="line">        passwd()</span><br><span class="line"></span><br><span class="line">    Enter password: ········</span><br><span class="line">    Verify password: ········</span><br><span class="line">        </span><br><span class="line">Out[<span class="number">1</span>]: 'sha1:c3a<span class="number">5226</span>4ad87:f6a2c<span class="number">3503</span>ee<span class="number">3370</span>c67da1f723ae1e8e<span class="number">7947</span>7f5f7'</span><br></pre></td></tr></table></figure></p>
<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>将前面生成的一串密码替换到配置文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /root/.jupyter/jupyter_notebook_config.py </span><br><span class="line">c.NotebookApp.password=<span class="string">u'sha1:c3a52264ad87:f6a2c3503ee3370c67da1f723ae1e8e79477f5f7'</span>   //前面u表示转换成unicode字符，python2的时候需要带</span><br></pre></td></tr></table></figure></p>
<p>其它设置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.ip</span> = <span class="string">'*'</span>  <span class="comment">//访问ip限制</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.notebook_dir</span> = <span class="string">'/home/knmax/Desktop/Python/jupyter-project'</span>  <span class="comment">//工作目录,路径不能出现中文</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.open_browser</span> = False <span class="comment">//不自动打开浏览器</span></span><br><span class="line">c<span class="selector-class">.NotebookApp</span><span class="selector-class">.port</span> = <span class="number">88</span> <span class="comment">//运行监听的端口</span></span><br></pre></td></tr></table></figure></p>
<h3 id="以服务方式运行"><a href="#以服务方式运行" class="headerlink" title="以服务方式运行"></a>以服务方式运行</h3><p>每次运行打开都是终端交互的界面，关闭会话终端也结束了jupyter，很不方便，这里做成以systemctl方式启动，适用于Debain、CentOS 7、Ubuntu</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/jupyter.service  //这个目录不同发行版可能也不同</span><br><span class="line">[Unit]</span><br><span class="line">Description=jupyter </span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Tpye=forking</span><br><span class="line">EnvironmentFile=/usr/local/bin/jupyter-notebook</span><br><span class="line">ExecStart=/usr/local/bin/jupyter-notebook</span><br><span class="line">ExecStop=/usr/bin/pkill jupyter-notebook</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=30s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>创建好之后再操作下就行了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start jupyter</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> jupyter</span></span><br></pre></td></tr></table></figure></p>
<h3 id="局域网访问jupyter-notebook"><a href="#局域网访问jupyter-notebook" class="headerlink" title="局域网访问jupyter notebook"></a>局域网访问jupyter notebook</h3><p>用电脑开wifi，手机连上电脑的wifi，手机可以直接从电脑的局域网ip访问到电脑上的jupyter notebook</p>
<h3 id="安装额外插件或kernel"><a href="#安装额外插件或kernel" class="headerlink" title="安装额外插件或kernel"></a>安装额外插件或kernel</h3><p>显示稿插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install RISE </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install RISE </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter-nbextension install rise --py --sys-prefix </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextension <span class="built_in">enable</span> rise --py --sys-prefix</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装Jupyter Notebook extensions–&gt;Jupyter拓展插件!!!</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge jupyter_contrib_nbextensions</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_contrib_nbextensions</span></span><br><span class="line"></span><br><span class="line">还不行就把下面的都试一遍...</span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_nbextensions_configurator</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install jupyter_nbextensions_configurator</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter contrib nbextension install --user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextensions_configurator <span class="built_in">enable</span> --user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart jupyter</span></span><br><span class="line"></span><br><span class="line">还有......再试一试又不会怀孕...</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyter_nbextensions_configurator </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter contrib nbextension install –user </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter nbextensions_configurator <span class="built_in">enable</span> –user</span></span><br></pre></td></tr></table></figure>
<p>开启toc2插件<br>命令行输入jupyter notebook运行,在浏览器打开notebook的Home页面，多了一个Nbextensions,点进去就懂了<br>这个用起来很爽，可以增加许多功能，尤其是里面可以增加侧边栏，这个用起来对代码管理就看起来层次分明多了，找代码也更方便了~~</p>
<p>顺便note一下,代码折叠,生成目录，自动格式化很有用~~~</p>
<h3 id="安装主题、字体"><a href="#安装主题、字体" class="headerlink" title="安装主题、字体"></a>安装主题、字体</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install --upgrade jupyterthemes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install --upgrade jupyterthemes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jt -l  查看可用主题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jt -t grade3 -f ptmono -fs 115</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">参考地址</a></p>
<h3 id="jupyter支持的内核"><a href="#jupyter支持的内核" class="headerlink" title="jupyter支持的内核"></a>jupyter支持的内核</h3><p><a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">参考地址</a></p>
<h3 id="多指针"><a href="#多指针" class="headerlink" title="多指针"></a>多指针</h3><p>Jupyter支持多个指针同步编辑，类似Sublime Text编辑器。按下Alt键并拖拽鼠标即可实现。====这个我用着很不顺手，按住ctrl后用移动鼠标可实现一样的多次选中，我还是喜欢用这个。。</p>
<h3 id="隐藏代码只显示代码输出"><a href="#隐藏代码只显示代码输出" class="headerlink" title="隐藏代码只显示代码输出"></a>隐藏代码只显示代码输出</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from IPython.display import HTML</span><br><span class="line"></span><br><span class="line">HTML('''<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">code_show=<span class="literal">true</span>; </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">if</span> (code_show)&#123;</span></span><br><span class="line"><span class="javascript"> $(<span class="string">'div.input'</span>).hide();</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"> $(<span class="string">'div.input'</span>).show();</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"> code_show = !code_show</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(code_toggle);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:code_toggle()"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Click here to toggle on/off the raw code."</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>''')</span><br></pre></td></tr></table></figure>
<p>也可以这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">code_show=<span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (code_show)&#123;</span><br><span class="line"> $(<span class="string">'div.input'</span>).hide();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> $(<span class="string">'div.input'</span>).show();</span><br><span class="line"> &#125;</span><br><span class="line"> code_show = !code_show</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$([IPython.events]).on(<span class="string">"app_initialized.NotebookApp"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#view_menu"</span>).append(<span class="string">"&lt;li id=\"toggle_toolbar\" title=\"Show/Hide code cells\"&gt;&lt;a href=\"javascript:code_toggle()\"&gt;Toggle Code Cells&lt;/a&gt;&lt;/li&gt;"</span>)</span><br></pre></td></tr></table></figure></p>
<p>或者这样:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> HTML</span><br><span class="line"><span class="keyword">import</span> IPython.core.display <span class="keyword">as</span> di <span class="comment"># Example: di.display_html('&lt;h3&gt;%s:&lt;/h3&gt;' % str, raw=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This line will hide code by default when the notebook is exported as HTML</span></span><br><span class="line">di.display_html(<span class="string">'&lt;script&gt;jQuery(function() &#123;if (jQuery("body.notebook_app").length == 0) &#123; jQuery(".input_area").toggle(); jQuery(".prompt").toggle();&#125;&#125;);&lt;/script&gt;'</span>, raw=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This line will add a button to toggle visibility of code blocks, for use with the HTML export version</span></span><br><span class="line">di.display_html(<span class="string">'''&lt;button onclick="jQuery('.input_area').toggle(); jQuery('.prompt').toggle();"&gt;Toggle code&lt;/button&gt;'''</span>, raw=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<p>这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$([IPython.events]).on(<span class="string">'notebook_loaded.Notebook'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    IPython.toolbar.add_buttons_group([</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="string">'label'</span>   : <span class="string">'toggle input cells'</span>,</span><br><span class="line">             <span class="string">'icon'</span>    : <span class="string">'icon-refresh'</span>, </span><br><span class="line">             <span class="string">'callback'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;$(<span class="string">'.input'</span>).slideToggle()&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>甚至可以这样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># This is a cell to hide code snippets from displaying</span><br><span class="line"># This must be at first cell!</span><br><span class="line"></span><br><span class="line">from IPython.display import HTML</span><br><span class="line"></span><br><span class="line">hide_me = ''</span><br><span class="line">HTML('''<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">code_show=<span class="literal">true</span>; </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">code_toggle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (code_show) &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      el = $(<span class="keyword">this</span>).find(<span class="string">'.cm-variable:first'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (id == <span class="number">0</span> || el.text() == <span class="string">'hide_me'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).hide();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.output_prompt'</span>).css(<span class="string">'opacity'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="keyword">this</span>).show();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'div.output_prompt'</span>).css(<span class="string">'opacity'</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  code_show = !code_show</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="javascript">$( <span class="built_in">document</span> ).ready(code_toggle);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:code_toggle()"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"opacity:0"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Click here to toggle on/off the raw code."</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>''')</span><br></pre></td></tr></table></figure></p>
<p>惊不惊喜？刺不刺激？<br>[参考]：(<a href="http://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer" target="_blank" rel="noopener">http://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer</a>)</p>
<h3 id="全部显示"><a href="#全部显示" class="headerlink" title="全部显示"></a>全部显示</h3><p>有一点已经众所周知。把变量名称或没有定义输出结果的语句放在cell的最后一行，无需print语句，Jupyter也会显示变量值。当使用Pandas DataFrames时这一点尤其有用，因为输出结果为整齐的表格。</p>
<p>鲜为人知的是，你可以通过修改内核选项ast_node_interactivity，使得Jupyter对独占一行的所有变量或者语句都自动显示，这样你就可以马上看到多个语句的运行结果了。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: from IPython<span class="selector-class">.core</span><span class="selector-class">.interactiveshell</span> import InteractiveShell</span><br><span class="line"></span><br><span class="line">        InteractiveShell<span class="selector-class">.ast_node_interactivity</span> = <span class="string">"all"</span></span><br></pre></td></tr></table></figure>
<p>如果你想在各种情形下（Notebook和Console）Jupyter都同样处理，用下面的几行简单的命令创建文件~/.ipython/profile_default/ipython_config.py即可实现：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = get_config()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run all nodes interactively</span></span><br><span class="line"></span><br><span class="line">c.InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></table></figure></p>
<p>这个刚了解时用起来很开心，不过当用到matplotlib时会输出很多信息，看起来比较丑，我就弃用了…</p>
<h3 id="末句函数不输出"><a href="#末句函数不输出" class="headerlink" title="末句函数不输出"></a>末句函数不输出</h3><p>有时候不让末句的函数输出结果比较方便，比如在作图的时候，此时，只需在该函数末尾加上一个分号即可===这个用起来作的图看起来就清爽多了；</p>
<p>嘿嘿嘿…</p>
<h3 id="在notebook中作图"><a href="#在notebook中作图" class="headerlink" title="在notebook中作图"></a>在notebook中作图</h3><p>如果不想每次用matplotlib 作图后都要输入plt.show()来弹出显示图，可以如下：</p>
<ul>
<li>matplotlib （事实标准）（<a href="http://matplotlib.org/" target="_blank" rel="noopener">http://matplotlib.org/</a>），可通过%matplotlib inline 激活，（<a href="https://www.dataquest.io/blog/matplotlib-tutorial/" target="_blank" rel="noopener">https://www.dataquest.io/blog/matplotlib-tutorial/</a>） ===常用</li>
<li>%matplotlib notebook 提供交互性操作，但可能会有点慢，因为响应是在服务器端完成的。 ===需要调整图形时这个用着不错</li>
<li>mpld3（<a href="https://github.com/mpld3/mpld3" target="_blank" rel="noopener">https://github.com/mpld3/mpld3</a>） 提供matplotlib代码的替代性呈现（通过d3），虽然不完整，但很好。 ===没用过</li>
<li>bokeh（<a href="http://bokeh.pydata.org/en/latest/" target="_blank" rel="noopener">http://bokeh.pydata.org/en/latest/</a>） 生成可交互图像的更好选择。 ====没用过</li>
<li>plot.ly（<a href="https://plot.ly/" target="_blank" rel="noopener">https://plot.ly/</a>） 可以生成非常好的图，可惜是付费服务。===没用过</li>
</ul>
<h3 id="Jupyter-notebook的magic操作"><a href="#Jupyter-notebook的magic操作" class="headerlink" title="Jupyter notebook的magic操作"></a>Jupyter notebook的magic操作</h3><p>上面介绍的%matplotlib inline就是其中的一个魔术操作，作图时用起来流畅极了； </p>
<ul>
<li>%run ====用来运行代码脚本 </li>
<li>%store ====命令可以在两个notebook文件之间传递变量，没用过。。 </li>
<li>%who ====不加任何参数，命令可以列出所有的全局变量。加上参数 str 将只列出字符串型的全局变量</li>
</ul>
<p>有两种用于计时的jupyter magic命令：<br>当你有一些很耗时的代码，想要查清楚问题出在哪时，这两个命令非常给力。 </p>
<ul>
<li>%%time  会告诉你cell内代码的单次运行时间信息。 </li>
<li>%%timeit 使用了Python的 timeit 模块，该模块运行某语句100，000次（默认值），然后提供最快的3次的平均值作为结果。 </li>
<li>%prun+函数声明  会给你一个按顺序排列的表格，显示每个内部函数的耗时情况，每次调用函数的耗时情况，以及累计耗时。</li>
</ul>
<h3 id="Jupyter-有自己的调试界面The-Python-Debugger-pdb"><a href="#Jupyter-有自己的调试界面The-Python-Debugger-pdb" class="headerlink" title="Jupyter 有自己的调试界面The Python Debugger (pdb)"></a>Jupyter 有自己的调试界面The Python Debugger (pdb)</h3><p>===这个貌似很强大的样子，暂时还没用过，有机会我要试试~<br>（<a href="https://docs.python.org/3.5/library/pdb.html" target="_blank" rel="noopener">https://docs.python.org/3.5/library/pdb.html</a>），使得进入函数内部检查错误成为可能。<br>Pdb中可使用的命令见链接（<a href="https://docs.python.org/3.5/library/pdb.html#debugger-commands" target="_blank" rel="noopener">https://docs.python.org/3.5/library/pdb.html#debugger-commands</a>）</p>
<h3 id="运行Shell命令"><a href="#运行Shell命令" class="headerlink" title="运行Shell命令"></a>运行Shell命令</h3><p>在notebook中可以用<code>cd</code> 来切换目录；<br><code>ls</code>用来显示当前目录内容；<br><code>$ pip install</code>或者<code>$ conda install</code>用来使用cmd下的命令操作；</p>
<h3 id="Jupyter-Notebook-的快捷键"><a href="#Jupyter-Notebook-的快捷键" class="headerlink" title="Jupyter-Notebook 的快捷键"></a>Jupyter-Notebook 的快捷键</h3><p>Jupyter Notebook 有两种键盘输入模式。编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。</p>
<h4 id="命令模式-按键-Esc-开启"><a href="#命令模式-按键-Esc-开启" class="headerlink" title="命令模式 (按键 Esc 开启)"></a>命令模式 (按键 Esc 开启)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Enter : 转入编辑模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下个单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在其下插入新单元</span><br><span class="line">Y : 单元转入代码状态</span><br><span class="line">M :单元转入markdown状态</span><br><span class="line">R : 单元转入<span class="type">raw</span>状态</span><br><span class="line"><span class="number">1</span> : 设定 1 级标题</span><br><span class="line"><span class="number">2</span> : 设定 2 级标题</span><br><span class="line"><span class="number">3</span> : 设定 3 级标题</span><br><span class="line"><span class="number">4</span> : 设定 4 级标题</span><br><span class="line"><span class="number">5</span> : 设定 5 级标题</span><br><span class="line"><span class="number">6</span> : 设定 6 级标题</span><br><span class="line">Up : 选中上方单元</span><br><span class="line">K : 选中上方单元</span><br><span class="line">Down : 选中下方单元</span><br><span class="line">J : 选中下方单元</span><br><span class="line">Shift-K : 扩大选中上方单元</span><br><span class="line">Shift-J : 扩大选中下方单元</span><br><span class="line">A : 在上方插入新单元</span><br><span class="line">B : 在下方插入新单元</span><br><span class="line">X : 剪切选中的单元</span><br><span class="line">C : 复制选中的单元</span><br><span class="line">Shift-V : 粘贴到上方单元</span><br><span class="line">V : 粘贴到下方单元</span><br><span class="line">Z : 恢复删除的最后一个单元</span><br><span class="line">D,D : 删除选中的单元</span><br><span class="line">Shift-M : 合并选中的单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">S : 文件存盘</span><br><span class="line">L : 转换行号</span><br><span class="line">O : 转换输出</span><br><span class="line">Shift-O : 转换输出滚动</span><br><span class="line">Esc : 关闭页面</span><br><span class="line">Q : 关闭页面</span><br><span class="line">H : 显示快捷键帮助</span><br><span class="line">I,I : 中断<span class="type">Notebook</span>内核</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span> : 重启<span class="type">Notebook</span>内核</span><br><span class="line">Shift : 忽略</span><br><span class="line">Shift-Space : 向上滚动</span><br><span class="line">Space : 向下滚动</span><br></pre></td></tr></table></figure>
<h4 id="编辑模式-Enter-键启动"><a href="#编辑模式-Enter-键启动" class="headerlink" title="编辑模式 ( Enter 键启动)"></a>编辑模式 ( Enter 键启动)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Tab : 代码补全或缩进</span><br><span class="line">Shift-Tab : 提示</span><br><span class="line">Ctrl-] : 缩进</span><br><span class="line">Ctrl-[ : 解除缩进</span><br><span class="line">Ctrl-A : 全选</span><br><span class="line">Ctrl-Z : 复原</span><br><span class="line">Ctrl-Shift-Z : 再做</span><br><span class="line">Ctrl-Y : 再做</span><br><span class="line">Ctrl-Home : 跳到单元开头</span><br><span class="line">Ctrl-Up : 跳到单元开头</span><br><span class="line">Ctrl-<span class="keyword">End</span> : 跳到单元末尾</span><br><span class="line">Ctrl-Down : 跳到单元末尾</span><br><span class="line">Ctrl-Left : 跳到左边一个字首</span><br><span class="line">Ctrl-Right : 跳到右边一个字首</span><br><span class="line">Ctrl-Backspace : 删除前面一个字</span><br><span class="line">Ctrl-Delete : 删除后面一个字</span><br><span class="line">Esc : 进入命令模式</span><br><span class="line">Ctrl-M : 进入命令模式</span><br><span class="line">Shift-Enter : 运行本单元，选中下一单元</span><br><span class="line">Ctrl-Enter : 运行本单元</span><br><span class="line">Alt-Enter : 运行本单元，在下面插入一单元</span><br><span class="line">Ctrl-Shift<span class="comment">-- : 分割单元</span></span><br><span class="line">Ctrl-Shift-Subtract : 分割单元</span><br><span class="line">Ctrl-S : 文件存盘</span><br><span class="line">Shift : 忽略</span><br><span class="line">Up : 光标上移或转入上一单元</span><br><span class="line">Down :光标下移或转入下一单元</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RNN]]></title>
      <url>/2017/08/09/2017-08-10-RNN/</url>
      <content type="html"><![CDATA[<blockquote>
<p>0.总结</p>
</blockquote>
<p>本文主要讲了N vs N，N vs 1、1 vs N、N vs M四种经典的RNN模型，以及如何使用Attention结构。</p>
<hr>
<blockquote>
<p>1.从单层网络谈起</p>
</blockquote>
<p>在学习RNN之前，首先要了解一下最基本的单层网络，它的结构如图：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0.jpeg" width="700"><br><div class="image-caption">单层网络</div><br></div>

<p>输入是x，经过变换Wx+b和激活函数f得到输出y</p>
<hr>
<blockquote>
<p>2.经典的RNN结构(N vs N)</p>
</blockquote>
<p>在实际应用中，我们还会遇到很多序列形的数据：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(1).jpeg" width="700"><br><div class="image-caption">序列形的数据</div><br></div>

<p>如：</p>
<ul>
<li>自然语言处理问题．x1可以看做是第一个单词，x2可以看做是第二个单词，依次类推。</li>
<li>语音处理．此时，x1、x2、x3……是每帧的声音信号。</li>
<li>时间序列问题．例如每天的股票价格等等</li>
</ul>
<p>序列形的数据就不太好用原始的神经网络处理了。</p>
<p>为了建模序列问题，RNN引入了隐状态h（hidden state）的概念，h可以对序列形的数据提取特征，接着再转换为输出。</p>
<p>先从h1的计算开始看：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(2).jpeg" width="700"><br><div class="image-caption">h1的计算</div><br></div>

<p>图示中记号的含义是：</p>
<ul>
<li>圆圈或方块表示的是向量</li>
<li>一个箭头就表示对该向量做一次变换。如上图中h0和x1分别有一个箭头连接，就表示对h0和x1各做了一次变换。</li>
</ul>
<p>在很多论文中也会出现类似的记号，初学的时候很容易搞乱，但只要把握住以上两点，就可以比较轻松地理解图示背后的含义。</p>
<p>h2的计算和h1类似。要注意的是，在计算时，每一步使用的参数U、W、b都是一样的，也就是说每个步骤的参数都是共享的，这是RNN的重要特点，一定要牢记。</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(3).jpeg" width="700"><br><div class="image-caption">h2的计算</div><br></div>

<p>依次计算剩下来的（使用相同的参数U、W、b）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(4).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>我们这里为了方便起见，只画出序列长度为4的情况，实际上，这个计算过程可以无限地持续下去。</p>
<p>我们目前的RNN还没有输出，得到输出值的方法就是直接通过h进行计算：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(5).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>正如之前所说，一个箭头就表示对对应的向量做一次类似于f(Wx+b)的变换，这里的这个箭头就表示对h1进行一次变换，得到输出y1。</p>
<p>剩下的输出类似进行（使用和y1同样的参数V和c）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(6).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>OK！大功告成！这就是最经典的RNN结构，我们像搭积木一样把它搭好了。它的输入是x1, x2, …..xn，输出为y1, y2, …yn，也就是说，输入和输出序列必须要是等长的。</p>
<p>由于这个限制的存在，经典RNN的适用范围比较小，但也有一些问题适合用经典的RNN结构建模，如：</p>
<ul>
<li>计算视频中每一帧的分类标签:因为要对每一帧进行计算，因此输入和输出序列等长。</li>
<li>输入为字符，输出为下一个字符的概率。</li>
<li>这就是著名的Char RNN（详细介绍请参考：The Unreasonable Effectiveness of Recurrent Neural Networks，Char RNN可以用来生成文章，诗歌，甚至是代码，非常有意思）。</li>
</ul>
<hr>
<blockquote>
<p>3.N vs 1</p>
</blockquote>
<p>有的时候，我们要处理的问题输入是一个序列，输出是一个单独的值而不是序列，应该怎样建模呢？</p>
<p>实际上，我们只在最后一个h上进行输出变换就可以了：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(7).jpeg" width="700"><br><div class="image-caption">输出变换</div><br></div>

<p>这种结构通常用来处理序列分类问题。</p>
<ul>
<li>输入一段文字判别它所属的类别</li>
<li>输入一个句子判断其情感倾向</li>
<li>输入一段视频并判断它的类别等等。</li>
</ul>
<hr>
<blockquote>
<p>4.1 VS N</p>
</blockquote>
<p>输入不是序列而输出为序列的情况怎么处理？我们可以只在序列开始进行输入计算：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(8).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>还有一种结构是把输入信息X作为每个阶段的输入：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(9).jpeg" width="700"><br><div class="image-caption">计算</div><br></div>

<p>下图省略了一些X的圆圈，是一个等价表示：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(10).jpeg" width="700"><br><div class="image-caption">等价表示</div><br></div>

<p>这种1 VS N的结构可以处理的问题有：</p>
<ul>
<li>从图像生成文字（image caption），此时输入的X就是图像的特征，而输出的y序列就是一段句子</li>
<li>从类别生成语音或音乐等</li>
</ul>
<hr>
<blockquote>
<p>5.N VS M</p>
</blockquote>
<p>下面我们来介绍RNN最重要的一个变种：N vs M。</p>
<p>这种结构又叫Encoder-Decoder模型，也可以称之为Seq2Seq模型。</p>
<p>原始的N vs N RNN要求序列等长，然而我们遇到的大部分问题序列都是不等长的，如机器翻译中，源语言和目标语言的句子往往并没有相同的长度。</p>
<p>为此，Encoder-Decoder结构先将输入数据编码成一个上下文向量c：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(11).jpeg" width="700"><br><div class="image-caption">Encoder</div><br></div>

<p>得到c有多种方式，最简单的方法就是把Encoder的最后一个隐状态赋值给c，还可以对最后的隐状态做一个变换得到c，也可以对所有的隐状态做变换。</p>
<p>拿到c之后，就用另一个RNN网络对其进行解码，这部分RNN网络被称为Decoder。具体做法就是将c当做之前的初始状态h0输入到Decoder中：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(12).jpeg" width="700"><br><div class="image-caption">Decoder</div><br></div>

<p>还有一种做法是将c当做每一步的输入：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(13).jpeg" width="700"><br><div class="image-caption">输入</div><br></div>

<p>由于这种Encoder-Decoder结构不限制输入和输出的序列长度，因此应用的范围非常广泛，比如：</p>
<ul>
<li><code>机器翻译</code>:Encoder-Decoder的最经典应用，事实上这一结构就是在机器翻译领域最先提出的</li>
<li><code>文本摘要</code>:输入是一段文本序列，输出是这段文本序列的摘要序列。</li>
<li><code>阅读理解</code>:将输入的文章和问题分别编码，再对其进行解码得到问题的答案。</li>
<li><code>语音识别</code>:输入是语音信号序列，输出是文字序列。</li>
<li>…………</li>
</ul>
<hr>
<blockquote>
<p>6.Attention机制</p>
</blockquote>
<p>在Encoder-Decoder结构中，Encoder把所有的输入序列都编码成一个统一的语义特征c再解码。</p>
<p><code>因此， c中必须包含原始序列中的所有信息，它的长度就成了限制模型性能的瓶颈。</code></p>
<p>如机器翻译问题，当要翻译的句子较长时，一个c可能存不下那么多信息，就会造成翻译精度的下降。</p>
<p>Attention机制通过在每个时间输入不同的c来解决这个问题，下图是带有Attention机制的Decoder：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(14).jpeg" width="700"><br><div class="image-caption">Attention机制的Decoder</div><br></div>

<p>每一个c会自动去选取与当前所要输出的y最合适的上下文信息。</p>
<p>具体来说，我们用$$a_{ij}$$衡量Encoder中第j阶段的hj和解码时第i阶段的相关性，最终Decoder中第i阶段的输入的上下文信息$$c<em>i$$就来自于所有$$a</em>{ij}$$对的加权和。</p>
<p>以机器翻译为例（将中文翻译成英文）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(15).jpeg" width="700"><br><div class="image-caption">机器翻译</div><br></div>

<p>输入的序列是“我爱中国”，因此，Encoder中的h1、h2、h3、h4就可以分别看做是 “我” 、 “爱” 、 “中” 、 “国” 所代表的信息。</p>
<p>在翻译成英语时，第一个上下文c1应该和“我”这个字最相关，因此对应的就$$a<em>{11}$$比较大，而相应的$$ a</em>{12},a<em>{13},a</em>{14} $$就比较小。</p>
<p>c2应该和“爱”最相关，因此对应的$$ a<em>{22} $$就比较大。最后的c3和h3、h4最相关，因此 $$  a</em>{33},a_{34}  $$的值就比较大。</p>
<p>至此，关于Attention模型，我们就只剩最后一个问题了，那就是：</p>
<blockquote>
<p>这些权重$$ a_{ij} $$是怎么来的？</p>
</blockquote>
<p>事实上，$$ a_{ij} $$同样是从模型中学出的，它实际和Decoder的第i-1阶段的隐状态、Encoder第j个阶段的隐状态有关。</p>
<p>同样还是拿上面的机器翻译举例，$$ a_{1j} $$的计算（此时箭头就表示对h’和$$ h_j $$同时做变换）：</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(16).jpeg" width="700"><br><div class="image-caption">$ a_{1j} $计算</div><br></div>


<p>$$ a_{2j} $$的计算:</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(17).jpeg" width="700"><br><div class="image-caption">$ a_{2j} $计算</div><br></div>



<p>$$ a_{3j} $$的计算:</p>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-10/0(18).jpeg" width="700"><br><div class="image-caption">$ a_{3j} $的计算</div><br></div>



]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rnn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu的grub修复]]></title>
      <url>/2017/08/07/2017-08-07-Ubuntu%E7%9A%84grub%E4%BF%AE%E5%A4%8D/</url>
      <content type="html"><![CDATA[<h3 id="问题一：grub-rescue"><a href="#问题一：grub-rescue" class="headerlink" title="问题一：grub rescue"></a>问题一：grub rescue</h3><p>调整磁盘，利用工具分割出新分区后重启</p>
<p>开机后有引导，可以正常进入win7系统，但选择Linux系统进入时跳到grub rescue模式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GRUB loading</span><br><span class="line"></span><br><span class="line">error:unknow filesystem</span><br><span class="line"></span><br><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure>
<p>这是因为新分区导致grub混淆</p>
<p>在 grub rescue&gt;下输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt;ls</span><br><span class="line">(hd0,1),...,(hd0,msdos9),(hd0,msdos10),(hd0,msdos11)</span><br><span class="line">grub rescue&gt;set root=(hd0,msdos11)</span><br><span class="line">grub rescue&gt;set prefix=(hd0,msdos11)/grub</span><br><span class="line">grub rescue&gt;insmod normal</span><br><span class="line">grub rescue&gt;normal</span><br></pre></td></tr></table></figure>
<p>即可正常进入Ubuntu系统</p>
<p>但是问题依旧存在，下次要进入Ubuntu时还是先进入grub rescue，很烦</p>
<p>我们需要进入Linux中，对grub进行修复。</p>
<p>启动起来，进入ubuntu之后，在终端执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo grub-install /dev/sda</span><br></pre></td></tr></table></figure>
<p>（sda是你的硬盘号码，千万不要指定分区号码，例如sda1，sda5等都不对）</p>
<p>嗯，现在重启可以直接进入Ubuntu系统，不用进入grub rescue了</p>
<p>但是，有个问题…现在进不了win7了…win7的启动项弄没了，现在只能进ubuntu</p>
<h3 id="问题二：win7的启动项消失"><a href="#问题二：win7的启动项消失" class="headerlink" title="问题二：win7的启动项消失"></a>问题二：win7的启动项消失</h3><p>注意到“Windows 7 (loader) (on /dev/sda1)”条目</p>
<p>开机时点进去…假的，直接紫色花屏，mmp</p>
<p>我觉得还可以再抢救一下</p>
<p>直接改一下grub.cfg文件</p>
<p>先Ctrl+alt+T打开终端，输入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>再打开的grub.cfg文件尾部添加一段：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menuentry 'Win7' &#123;</span><br><span class="line">  set root=(hd0,1);</span><br><span class="line">  ntldr /bootmgr</span><br><span class="line">  boot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存，退出。重启。也可以看到Win7启动条目了。</p>
<p>但这种做法不会像方法一那样更新了grub.cfg文件，删除掉了那条旧的“Windows 7 (loader) (on /dev/sda1)条目”。可以直接在grub.cfg文件中删除那一段则可。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> grub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LSTM]]></title>
      <url>/2017/08/04/2017-08-04-LSTM/</url>
      <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">Understanding LSTM Networks</a></p>
<p><a href="http://www.jianshu.com/p/9dc9f41f0b29" target="_blank" rel="noopener">(译)理解 LSTM 网络</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/nicodjimenez/lstm" target="_blank" rel="noopener">纯python实现</a></p>
<h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><p><img src="!--￼10--&gt;/assets/blog/img/2017-8-4/LSTM.png" alt="LSTM structure"></p>
<p>如图为LSTM的类图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_derivative</span><span class="params">(values)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> values*(<span class="number">1</span>-values)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh_derivative</span><span class="params">(values)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> - values ** <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>sigmoid(x) :=            $$ \sigma(x)=\frac{1}{1+e^x} $$</p>
<p>sigmoid_derivative(x) :=　$$ \sigma ‘(x)=x(1-x) $$</p>
<p>tanh_derivative(x) :=   　$$ \tanh ‘(x)=1-x^2 $$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># createst uniform random array w/ values in [a,b) and shape args</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rand_arr</span><span class="params">(a, b, *args)</span>:</span> </span><br><span class="line">    np.random.seed(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> np.random.rand(*args) * (b - a) + a</span><br></pre></td></tr></table></figure>
<p>np.random.seed(0)设置随机数种子以便复现结果,rand_arr(a,b,*args)函数用于初始化</p>
<p>rand_arr(a,b):= $$ x, x \in [a,b) $$</p>
<p>rand_arr(a,b,$$\begin{bmatrix} 1 &amp; 2 \ 3 &amp; 4 \end{bmatrix}$$):=$$\begin{bmatrix} x_1 &amp; x_2 \ x_3 &amp; x_4 \end{bmatrix} ,x_1, x_2, x_3, x_4\in [a,b) $$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmParam</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mem_cell_ct, x_dim)</span>:</span></span><br><span class="line">        self.mem_cell_ct = mem_cell_ct</span><br><span class="line">        self.x_dim = x_dim</span><br><span class="line">        concat_len = x_dim + mem_cell_ct</span><br><span class="line">        <span class="comment"># weight matrices</span></span><br><span class="line">        self.wg = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        self.wi = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len) </span><br><span class="line">        self.wf = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        self.wo = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct, concat_len)</span><br><span class="line">        <span class="comment"># bias terms</span></span><br><span class="line">        self.bg = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bi = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bf = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        self.bo = rand_arr(<span class="number">-0.1</span>, <span class="number">0.1</span>, mem_cell_ct) </span><br><span class="line">        <span class="comment"># diffs (derivative of loss function w.r.t. all parameters)</span></span><br><span class="line">        self.wg_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wi_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wf_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.wo_diff = np.zeros((mem_cell_ct, concat_len)) </span><br><span class="line">        self.bg_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bi_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bf_diff = np.zeros(mem_cell_ct) </span><br><span class="line">        self.bo_diff = np.zeros(mem_cell_ct) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_diff</span><span class="params">(self, lr = <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        lr:learningrate学习率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.wg -= lr * self.wg_diff</span><br><span class="line">        self.wi -= lr * self.wi_diff</span><br><span class="line">        self.wf -= lr * self.wf_diff</span><br><span class="line">        self.wo -= lr * self.wo_diff</span><br><span class="line">        self.bg -= lr * self.bg_diff</span><br><span class="line">        self.bi -= lr * self.bi_diff</span><br><span class="line">        self.bf -= lr * self.bf_diff</span><br><span class="line">        self.bo -= lr * self.bo_diff</span><br><span class="line">        <span class="comment"># reset diffs to zero</span></span><br><span class="line">        self.wg_diff = np.zeros_like(self.wg)</span><br><span class="line">        self.wi_diff = np.zeros_like(self.wi) </span><br><span class="line">        self.wf_diff = np.zeros_like(self.wf) </span><br><span class="line">        self.wo_diff = np.zeros_like(self.wo) </span><br><span class="line">        self.bg_diff = np.zeros_like(self.bg)</span><br><span class="line">        self.bi_diff = np.zeros_like(self.bi) </span><br><span class="line">        self.bf_diff = np.zeros_like(self.bf) </span><br><span class="line">        self.bo_diff = np.zeros_like(self.bo)</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-5.png" width="700"><br><div class="image-caption">LSTM基本结构</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-7.png" width="700"><br><div class="image-caption">决定丢弃信息</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-8.png" width="700"><br><div class="image-caption">确定更新的信息</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-9.png" width="700"><br><div class="image-caption">更新细胞状态</div><br></div><br><div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-10.png" width="700"><br><div class="image-caption">输出信息</div><br></div>

<p>以上公式的符号与变量名对应表</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>mem_cell_ct</td>
<td>todo</td>
</tr>
<tr>
<td>x_dim</td>
<td>$$x_t$$的维数</td>
</tr>
<tr>
<td>wf</td>
<td>$$W_f$$</td>
</tr>
<tr>
<td>wi</td>
<td>$$W_i$$</td>
</tr>
<tr>
<td>wg</td>
<td>$$W_C$$</td>
</tr>
<tr>
<td>wo</td>
<td>$$W_o$$</td>
</tr>
<tr>
<td>bf</td>
<td>$$b_f$$</td>
</tr>
<tr>
<td>bi</td>
<td>$$b_i$$</td>
</tr>
<tr>
<td>bg</td>
<td>$$b_C$$</td>
</tr>
<tr>
<td>bo</td>
<td>$$b_o$$</td>
</tr>
<tr>
<td>wf_diff</td>
<td>$$W_f$$的误差</td>
</tr>
<tr>
<td>wi_diff</td>
<td>$$W_i$$的误差</td>
</tr>
<tr>
<td>wg_diff</td>
<td>$$W_C$$的误差</td>
</tr>
<tr>
<td>wo_diff</td>
<td>$$W_o$$的误差</td>
</tr>
<tr>
<td>bf_diff</td>
<td>$$b_f$$的误差</td>
</tr>
<tr>
<td>bi_diff</td>
<td>$$b_i$$的误差</td>
</tr>
<tr>
<td>bg_diff</td>
<td>$$b_C$$的误差</td>
</tr>
<tr>
<td>bo_diff</td>
<td>$$b_o$$的误差</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmState</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mem_cell_ct, x_dim)</span>:</span></span><br><span class="line">        self.g = np.zeros(mem_cell_ct)</span><br><span class="line">        self.i = np.zeros(mem_cell_ct)</span><br><span class="line">        self.f = np.zeros(mem_cell_ct)</span><br><span class="line">        self.o = np.zeros(mem_cell_ct)</span><br><span class="line">        self.s = np.zeros(mem_cell_ct)</span><br><span class="line">        self.h = np.zeros(mem_cell_ct)</span><br><span class="line">        self.bottom_diff_h = np.zeros_like(self.h)</span><br><span class="line">        self.bottom_diff_s = np.zeros_like(self.s)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>$$f_t$$</td>
</tr>
<tr>
<td>i</td>
<td>$$i_t$$</td>
</tr>
<tr>
<td>g</td>
<td>$$\widetilde{C}_t$$</td>
</tr>
<tr>
<td>o</td>
<td>$$o_t$$</td>
</tr>
<tr>
<td>s</td>
<td>$$C_t$$ (state的缩写)</td>
</tr>
<tr>
<td>h</td>
<td>$$h_t$$</td>
</tr>
<tr>
<td>bottom_diff_h</td>
<td>$$todo$$</td>
</tr>
<tr>
<td>bottom_diff_h</td>
<td>$$todo$$</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lstm_param, lstm_state)</span>:</span></span><br><span class="line">        <span class="comment"># store reference to parameters and to activations</span></span><br><span class="line">        self.state = lstm_state</span><br><span class="line">        self.param = lstm_param</span><br><span class="line">        <span class="comment"># non-recurrent input concatenated with recurrent input</span></span><br><span class="line">        self.xc = <span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>LSTM只有一个节点，该节点包含训练参数lstm_param和状态参数lstm_state</p>
<p>训练参数是模型的灵魂所在，网络学习的过程就是训练参数不断调整的过程，最好不要人为干预</p>
<p>状态参数可以根据不同的输入通过与训练参数计算而来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bottom_data_is</span><span class="params">(self, x, s_prev = None, h_prev = None)</span>:</span></span><br><span class="line">    <span class="comment"># if this is the first lstm node in the network</span></span><br><span class="line">    <span class="keyword">if</span> s_prev == <span class="keyword">None</span>: s_prev = np.zeros_like(self.state.s)</span><br><span class="line">    <span class="keyword">if</span> h_prev == <span class="keyword">None</span>: h_prev = np.zeros_like(self.state.h)</span><br><span class="line">    <span class="comment"># save data for use in backprop</span></span><br><span class="line">    self.s_prev = s_prev</span><br><span class="line">    self.h_prev = h_prev</span><br><span class="line"></span><br><span class="line">    <span class="comment"># concatenate x(t) and h(t-1)</span></span><br><span class="line">    xc = np.hstack((x,  h_prev))</span><br><span class="line">    self.state.g = np.tanh(np.dot(self.param.wg, xc) + self.param.bg)</span><br><span class="line">    self.state.i = sigmoid(np.dot(self.param.wi, xc) + self.param.bi)</span><br><span class="line">    self.state.f = sigmoid(np.dot(self.param.wf, xc) + self.param.bf)</span><br><span class="line">    self.state.o = sigmoid(np.dot(self.param.wo, xc) + self.param.bo)</span><br><span class="line">    self.state.s = self.state.g * self.state.i + s_prev * self.state.f</span><br><span class="line">    self.state.h = self.state.s * self.state.o</span><br><span class="line"></span><br><span class="line">    self.xc = xc</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>s_pre</td>
<td>$$C_{t-1}$$</td>
</tr>
<tr>
<td>h_pre</td>
<td>$$h_{t-1}$$</td>
</tr>
</tbody>
</table>
<p>bottom_data_is(x,s_prev,h_prev) 相当于前向传播</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_diff_is</span><span class="params">(self, top_diff_h, top_diff_s)</span>:</span></span><br><span class="line">    <span class="comment"># notice that top_diff_s is carried along the constant error carousel</span></span><br><span class="line">    ds = self.state.o * top_diff_h + top_diff_s</span><br><span class="line">    do = self.state.s * top_diff_h</span><br><span class="line">    di = self.state.g * ds</span><br><span class="line">    dg = self.state.i * ds</span><br><span class="line">    df = self.s_prev * ds</span><br><span class="line"></span><br><span class="line">    <span class="comment"># diffs w.r.t. vector inside sigma / tanh function</span></span><br><span class="line">    di_input = sigmoid_derivative(self.state.i) * di </span><br><span class="line">    df_input = sigmoid_derivative(self.state.f) * df </span><br><span class="line">    do_input = sigmoid_derivative(self.state.o) * do </span><br><span class="line">    dg_input = tanh_derivative(self.state.g) * dg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># diffs w.r.t. inputs</span></span><br><span class="line">    self.param.wi_diff += np.outer(di_input, self.xc)</span><br><span class="line">    self.param.wf_diff += np.outer(df_input, self.xc)</span><br><span class="line">    self.param.wo_diff += np.outer(do_input, self.xc)</span><br><span class="line">    self.param.wg_diff += np.outer(dg_input, self.xc)</span><br><span class="line">    self.param.bi_diff += di_input</span><br><span class="line">    self.param.bf_diff += df_input       </span><br><span class="line">    self.param.bo_diff += do_input</span><br><span class="line">    self.param.bg_diff += dg_input       </span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute bottom diff</span></span><br><span class="line">    dxc = np.zeros_like(self.xc)</span><br><span class="line">    dxc += np.dot(self.param.wi.T, di_input)</span><br><span class="line">    dxc += np.dot(self.param.wf.T, df_input)</span><br><span class="line">    dxc += np.dot(self.param.wo.T, do_input)</span><br><span class="line">    dxc += np.dot(self.param.wg.T, dg_input)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save bottom diffs</span></span><br><span class="line">    self.state.bottom_diff_s = ds * self.state.f</span><br><span class="line">    self.state.bottom_diff_h = dxc[self.param.x_dim:]</span><br></pre></td></tr></table></figure>
<p>计算误差,相当于后向传播</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LstmNetwork</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lstm_param)</span>:</span></span><br><span class="line">        self.lstm_param = lstm_param</span><br><span class="line">        self.lstm_node_list = []</span><br><span class="line">        <span class="comment"># input sequence</span></span><br><span class="line">        self.x_list = []</span><br></pre></td></tr></table></figure>
<div class="image-package"><br><img src="/assets/blog/img/2017-8-4/LSTM-14.png" width="700"><br><div class="image-caption">一般的RNN网络结构</div><br></div>

<p>定义初始化网络</p>
<p>本实现中,Hidden Layer　和 Input Layer 和 Output Layer的长度都相同</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>意义或公式符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>lstm_node_list</td>
<td>Hidden Layer</td>
</tr>
<tr>
<td>x_list</td>
<td>Input Layer</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y_list_is</span><span class="params">(self, y_list, loss_layer)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Updates diffs by setting target sequence </span></span><br><span class="line"><span class="string">    with corresponding loss layer. </span></span><br><span class="line"><span class="string">    Will *NOT* update parameters.  To update parameters,</span></span><br><span class="line"><span class="string">    call self.lstm_param.apply_diff()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_list) == len(self.x_list)</span><br><span class="line">    idx = len(self.x_list) - <span class="number">1</span></span><br><span class="line">    <span class="comment"># first node only gets diffs from label ...</span></span><br><span class="line">    loss = loss_layer.loss(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">    diff_h = loss_layer.bottom_diff(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">    <span class="comment"># here s is not affecting loss due to h(t+1), hence we set equal to zero</span></span><br><span class="line">    diff_s = np.zeros(self.lstm_param.mem_cell_ct)</span><br><span class="line">    self.lstm_node_list[idx].top_diff_is(diff_h, diff_s)</span><br><span class="line">    idx -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### ... following nodes also get diffs from next nodes, hence we add diffs to diff_h</span></span><br><span class="line">    <span class="comment">### we also propagate error along constant error carousel using diff_s</span></span><br><span class="line">    <span class="keyword">while</span> idx &gt;= <span class="number">0</span>:</span><br><span class="line">        loss += loss_layer.loss(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">        diff_h = loss_layer.bottom_diff(self.lstm_node_list[idx].state.h, y_list[idx])</span><br><span class="line">        diff_h += self.lstm_node_list[idx + <span class="number">1</span>].state.bottom_diff_h</span><br><span class="line">        diff_s = self.lstm_node_list[idx + <span class="number">1</span>].state.bottom_diff_s</span><br><span class="line">        self.lstm_node_list[idx].top_diff_is(diff_h, diff_s)</span><br><span class="line">        idx -= <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure>
<p>根据y_list计算误差</p>
<p>y_list存的是target sequence </p>
<p>用index从最新的一个状态t=index到之前所有的状态进行遍历，累计误差</p>
<p>误差暂时储存在self.lstm_node_list[idx + 1].state.bottom_diff_h和self.lstm_node_list[idx + 1].state.bottom_diff_s</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_list_clear</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.x_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_list_add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    self.x_list.append(x)</span><br><span class="line">    <span class="keyword">if</span> len(self.x_list) &gt; len(self.lstm_node_list):</span><br><span class="line">        <span class="comment"># need to add new lstm node, create new state mem</span></span><br><span class="line">        lstm_state = LstmState(self.lstm_param.mem_cell_ct, self.lstm_param.x_dim)</span><br><span class="line">        self.lstm_node_list.append(LstmNode(self.lstm_param, lstm_state))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get index of most recent x input</span></span><br><span class="line">    idx = len(self.x_list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># no recurrent inputs yet</span></span><br><span class="line">        self.lstm_node_list[idx].bottom_data_is(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s_prev = self.lstm_node_list[idx - <span class="number">1</span>].state.s</span><br><span class="line">        h_prev = self.lstm_node_list[idx - <span class="number">1</span>].state.h</span><br><span class="line">        self.lstm_node_list[idx].bottom_data_is(x, s_prev, h_prev)</span><br></pre></td></tr></table></figure>
<p>(一个时间步一个时间步地)将(代表一个句子的一个单词的)向量加入x_list中,</p>
<p>最终x_list是一个矩阵</p>
<p>例如(假设每个单词向量是n维,这里n=4):</p>
<p>I——–&gt;[[1,2,3,4],</p>
<p>want—&gt; [5,7,8,9],</p>
<p>to——&gt; [1,5,8,7],</p>
<p>watch–&gt; [5,2,3,1],</p>
<p>movies– [4,8,2,6]]</p>
]]></content>
      
        <categories>
            
            <category> Deep Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RNN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim tips]]></title>
      <url>/2017/07/01/2017-07-01-vim-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-vim基本设置"><a href="#1-vim基本设置" class="headerlink" title="1. vim基本设置"></a>1. vim基本设置</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">list</span></span><br><span class="line"><span class="keyword">set</span> listchars=<span class="keyword">ta</span><span class="variable">b:</span>»\ ,<span class="built_in">extend</span><span class="variable">s:</span>›,precede<span class="variable">s:</span>‹,nbsp:·,trai<span class="variable">l:</span>·</span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="keyword">on</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">colorscheme</span> molokai</span><br></pre></td></tr></table></figure>
<p><strong>在windows下的gvim中，可能会出现使用backspace不能往左删除的问题</strong></p>
<blockquote>
<p>这个是因为在windows下的gvim是默认启用了vi兼容模式的，这种模式下backspace配置是空的，所以我们需要禁用vi兼容模式：</p>
</blockquote>
<p><code>set nocp</code></p>
<p>backspace键的默认模式有三种：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span>same as “:set backspace=” (Vi compatible)</span><br><span class="line"><span class="symbol">1 </span>same as “:set backspace=indent,eol”</span><br><span class="line"><span class="symbol">2 </span>same as “:set backspace=indent,eol,start”</span><br></pre></td></tr></table></figure>
<p>indent,eol,start解释如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inden<span class="variable">t:</span> 如果用了:<span class="keyword">set</span> <span class="built_in">indent</span>,:<span class="keyword">set</span> ai 等自动缩进，想用退格键将字段缩进的删掉，必须设置这个选项。否则不响应。</span><br><span class="line">eo<span class="variable">l:</span>如果插入模式下在行开头，想通过退格键合并两行，需要设置eol。</span><br><span class="line">start：要想删除此次插入前的输入，需设置这个</span><br></pre></td></tr></table></figure>
<p>所以禁用vi兼容模式之后，我们可以设置backspace键为<code>set backspace=2</code>，然后不能使用backspace往左删除的问题消失。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用vim编写fortran代码的一些相关设置]]></title>
      <url>/2017/06/30/2017-07-01-%E4%BD%BF%E7%94%A8vim%E7%BC%96%E5%86%99fortran%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近开始干活了，实验室主流语言是fortran，一种很褒贬不一的语言。由于是Arch linux用户，所以需要对linux编写编译fortran代码做一些准备工作。</p>
</blockquote>
<p>1.首先，在linux下fortran编译器还是很多的，有很方便就能安装的gfortran，还有诸如intel或者PGI这些公司提供的编译器。intel家的编译器对学生免费，所以自然就成了首选。详情请去<a href="https://software.intel.com/en-us/intel-parallel-studio-xe" target="_blank" rel="noopener">这个链接</a>查看。</p>
<p>2.安装intel parallel studio的过程是图形化的，一般不会出现什么问题。安装之后设置一下路径就能使用ifort命令编译fortran文件了。</p>
<p>3.在linux编写fortran代码我还是按照习惯选择了vim，然后我们需要在<code>.vimrc</code>中加入如下设置项：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"语法高亮</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">"fortran语言制表符设置</span><br><span class="line">let fortran_have_tabs=1</span><br><span class="line">"设置制表符宽度</span><br><span class="line">set tabstop=4</span><br><span class="line">"解决中文注释乱码</span><br><span class="line">set fileencodings=urf-8,gb18030,utf-16,big5</span><br><span class="line">"设置代码折叠</span><br><span class="line">let fortran_fold=1</span><br><span class="line">set foldmethod=syntax</span><br><span class="line">"设置默认文件打开后所有折叠自动展开</span><br><span class="line">set foldlevelstart=99</span><br></pre></td></tr></table></figure>
<p>vim有关代码折叠的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zc：折叠代码</span><br><span class="line">zo：展开代码</span><br><span class="line">zC：折叠所有代码</span><br><span class="line">zO：展开所有代码</span><br></pre></td></tr></table></figure>
<p>最后效果图：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/vim_fortran.png" alt="效果图"></p>
<p>这里vim的配色主题为molokai。</p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 16.04安装jekyll]]></title>
      <url>/2017/06/26/2017-06-26-Ubuntu%E5%AE%89%E8%A3%85jekyll/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一直以来在github写博客习惯于直接git提交后在github pages看效果，这样来回修改就会繁琐的commit、push,所以还是搭建jekyll本地环境预览吧。</p>
</blockquote>
<p>1.安装ruby</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby-full ruby-bundler</span><br></pre></td></tr></table></figure>
<p><strong>这里如果下意识的使用<code>sudo apt install ruby</code>安装ruby会导致下一步安装jekyll的时候出现如下错误：</strong></p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/gem_install_jekyll_errors.png" alt="gem\_install\_error"></p>
<p>2.安装jekyll</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install jekyll</span><br></pre></td></tr></table></figure>
<p>3.检测jekyll是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jekyll -v</span><br><span class="line">jekyll new new-site</span><br><span class="line">cd new-site</span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure>
<p>在浏览器里打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>可以看到预览效果。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> jekyll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[latex tips]]></title>
      <url>/2017/06/26/2017-06-26-Latex-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-min的两种表示方法"><a href="#1-min的两种表示方法" class="headerlink" title="1.\min的两种表示方法"></a><strong>1.\min的两种表示方法</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\min\limits_&#123;a&#125;</span><br><span class="line">\min\nolimits&#123;a&#125;</span><br></pre></td></tr></table></figure>
<p>对应的显示效果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/4.png" alt="\min\limits\_{a}"><br><img src="http://oq782gkz3.bkt.clouddn.com/5.png" alt="\min\nolimits\_{a}"></p>
<hr>
<h3 id="2-latex插入python代码"><a href="#2-latex插入python代码" class="headerlink" title="2. latex插入python代码"></a><strong>2. latex插入python代码</strong></h3><blockquote>
<p>在latex里插入python代码需要使用包<code>pythonhighlight</code>,如果你使用tex live 2017的话，这个包已经安装了，可以直接使用；</p>
<p>如果你安装的latex版本默认没有这个包，你可以去<a href="https://github.com/olivierverdier/python-latex-highlighting" target="_blank" rel="noopener">这个地址</a>下载pythonhighlight.sty文件，然后放到自己的.tex文件目录下，就可以使用了。</p>
</blockquote>
<p>使用过程如下：</p>
<p>先在latex导言区输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;pythonhighlight&#125;</span><br></pre></td></tr></table></figure>
<p><strong>插入python代码有两种方式：</strong></p>
<p>然后在需要插入代码的地方：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\inputpython&#123;python_filename.py&#125;&#123;begin line number&#125;&#123;end line number&#125;</span><br><span class="line">%或者使用这种方式</span><br><span class="line">\begin&#123;python&#125;</span><br><span class="line">contents</span><br><span class="line">\end&#123;python&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> Latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu tips]]></title>
      <url>/2017/06/25/2017-06-25-ubuntu-tips/</url>
      <content type="html"><![CDATA[<h3 id="1-更换pip源为阿里云的镜像源"><a href="#1-更换pip源为阿里云的镜像源" class="headerlink" title="1. 更换pip源为阿里云的镜像源"></a><strong>1. 更换pip源为阿里云的镜像源</strong></h3><p><a href="http://mirrors.aliyun.com/help/pypi" target="_blank" rel="noopener">官方帮助教程</a></p>
<p>编辑pip配置文件:</p>
<p><code>vim ~/.pip/pip.conf</code></p>
<p>然后写入如下内容：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p><strong>如果发现没有对应文件夹以及配置文件，请直接自行创建。</strong></p>
<hr>
<h3 id="2-Ubuntu将默认的python版本换为python3-X"><a href="#2-Ubuntu将默认的python版本换为python3-X" class="headerlink" title="2. Ubuntu将默认的python版本换为python3.X"></a><strong>2. Ubuntu将默认的python版本换为python3.X</strong></h3><p>Ubuntu 16.04自带了python2.7和python3.5，且默认版本为python2.7，最近一直使用python3.×版本所以需讲python默认版本修改为3.5。</p>
<p>可以使用<code>ls /usr/bin | grep python</code>来查看目前存在的python版本</p>
<p>然后设置软链接，讲python3.5设为默认：</p>
<p><code>sudo ln -s /usr/bin/python3.5 /usr/local/bin/python</code></p>
<p>此时python3.5已经成为默认。</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_008.png" alt="效果"></p>
<p><strong>然后此时需要注意的就是，如果以后主要在3.×的环境下工作，请安装对应3.×的包。</strong></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python3-pip</span><br><span class="line">pip3 <span class="keyword">install</span> package_name</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-Ubuntu设置ssh密钥登录并关闭ssh密码登录"><a href="#3-Ubuntu设置ssh密钥登录并关闭ssh密码登录" class="headerlink" title="3. Ubuntu设置ssh密钥登录并关闭ssh密码登录"></a><strong>3. Ubuntu设置ssh密钥登录并关闭ssh密码登录</strong></h3><p><strong>连网的机器安全第一，所以ssh的安全性就是重中之重了。使用ssh密钥登录，并关闭密码认证是有效的防止机器被入侵的方式。</strong></p>
<p>Ubuntu设置ssh密钥登录的步骤如下：</p>
<p>1.首先安装ssh</p>
<p><code>sudo apt install ssh</code></p>
<p>2.制作密钥对</p>
<p><code>ssh-keygen</code></p>
<p>你应该会看到如下的内容：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key <span class="built_in">pair</span>.</span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the key(/home/user/.ssh/id_rsa):</span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="params">...</span></span><br></pre></td></tr></table></figure>
<p>3.将公钥写入到对应文件里</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa<span class="selector-class">.pug</span> &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<p>然后确保对应文件的权限是正确的:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<p>4.设置ssh配置文件，打开密钥登录并关闭密码登录</p>
<p>编辑<code>/etc/ssh/sshd_config</code>文件，确定如下设置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">RSAAuthentication</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">PubkeyAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
<p>当你确定可以使用密钥方式登录成功之后，再禁用密码登录：</p>
<p><code>PasswordAuthentication no</code></p>
<p><strong>记得如果这些修改项是被注释掉的，记得把注释取消。</strong></p>
<p>5.重启ssh服务</p>
<p><code>service sshd restart</code></p>
<p>6.关于<a href="https://the.earth.li/~sgtatham/putty/latest/w64/putty-64bit-0.69-installer.msi" target="_blank" rel="noopener">putty</a>使用id_rsa的一点儿说明</p>
<blockquote>
<p>putty是不能直接使用id_rsa私钥的，需要使用<a href="https://the.earth.li/~sgtatham/putty/latest/w64/puttygen.exe" target="_blank" rel="noopener">puttygen</a>转换。</p>
</blockquote>
<p>首先从服务器下载id_rsa到本地，然后使用puttygen载入，然后选择Save private key讲私钥保存为putty能用的.ppk文件。然后就跟一般的putty使用key登录一样了。</p>
<h3 id="Linux下递归改变目录及其子目录属性"><a href="#Linux下递归改变目录及其子目录属性" class="headerlink" title="Linux下递归改变目录及其子目录属性"></a>Linux下递归改变目录及其子目录属性</h3><p>加上－R(大写, regression)参数即可。</p>
<p>比如，</p>
<p>改变文件或目录所属的组, - R 递归式地改变指定目录及其下的所有子目录和文件的属组</p>
<p>将当前目录及其子目录和文件的属组改为 gps<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R gps *</span><br></pre></td></tr></table></figure></p>
<p>改变文件或目录的访问权限, -R 递归式地改变指定目录及其下的所有子目录和文件的访问权限</p>
<p>将当前目录及其子目录和文件的访问权限改为属组下所有人可读，可写，可执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 *</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tips </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu以及Arch Linux更换清华源]]></title>
      <url>/2017/06/23/2017-06-23-ubuntu%E6%8D%A2%E6%BA%90%E4%BB%A5%E5%8F%8AArch-linux%E6%9B%B4%E6%8D%A2%E6%B8%85%E5%8D%8E%E6%BA%90/</url>
      <content type="html"><![CDATA[<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a><strong>Ubuntu</strong></h3><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">Ubuntu清华源更换网址</a></p>
<p>这个地址里同样有其他Linux发行版的源使用帮助信息。</p>
<p><strong>更换步骤</strong></p>
<p>1.在上述网址选择ubuntu版本，生成对应的源地址；</p>
<p>2.备份原始文件</p>
<p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</code></p>
<p>3.编辑源文件</p>
<p><code>sudo vim /etc/apt/sources.list</code></p>
<p>将<code>sources.list</code>中内容注释或者删除掉，然后将第一步中生成的源地址粘贴进去；</p>
<p>4.然后更新软件包缓存<code>sudo apt update</code></p>
<hr>
<h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a><strong>Arch Linux</strong></h3><p>编辑­<code>/etc/pacman.d/mirrorlist</code>,在文件最顶端添加：</p>
<p><code>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</code></p>
<p>然后更新软件包缓存<code>sudo pacman -Syy</code></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu常用软件]]></title>
      <url>/2017/06/23/2017-06-24-ubuntu%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>习惯了Arch的yaourt之后再使用ubuntu ppa就有一种就怕货比货的感觉。</p>
<p>收集一下常用的ubuntu软件安装，便于下次无脑重装。</p>
<hr>
<p><strong>1.Albert</strong></p>
<p>这款软件是必装的了，一个很好用的Launcher。官方介绍如下：</p>
<blockquote>
<p>Access everything with virtually zero effort. Run applications, open files or their paths,open bookmarks in your browser, search the web, calculate things and a lot more …</p>
</blockquote>
<p><strong>Ubuntu-PPA(hotice/webupd8)</strong></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install albert</span><br></pre></td></tr></table></figure>
<p><strong>2.chrome</strong></p>
<p>1.将下载源添加到系统源：</p>
<p><code>sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</code></p>
<p>2.导入google软件公钥：</p>
<p><code>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</code></p>
<p>3.更新源然后安装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span></span><br><span class="line">sudo apt <span class="keyword">install</span> google-chrome-stable</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tips about git and jupyter]]></title>
      <url>/2017/05/24/2017-05-25-Tips/</url>
      <content type="html"><![CDATA[<h3 id="git-push-免密码"><a href="#git-push-免密码" class="headerlink" title="git push 免密码"></a>git push 免密码</h3><p>1.使用文件创建用户名和密码</p>
<p>文件创建在用户主目录下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch .git-credentials</span><br><span class="line">vim .git-credentials</span><br><span class="line">https://&#123;username&#125;:&#123;password&#125;@github.com</span><br></pre></td></tr></table></figure>
<p><strong>记得在真正输入的时候是没有大括号的。</strong></p>
<p>2.添加git config内容</p>
<p><code>git config --global credential.helper store</code></p>
<p>执行此命令后，用户主目录下的.gitconfig文件会多了一项：</p>
<p><code>[credential]</code></p>
<p><code>helper = store</code></p>
<p>重新git push就不需要用户名密码了。</p>
<hr>
<h3 id="git-add-使用tab键自动补全的中文文件名乱码"><a href="#git-add-使用tab键自动补全的中文文件名乱码" class="headerlink" title="git add 使用tab键自动补全的中文文件名乱码"></a>git add 使用tab键自动补全的中文文件名乱码</h3><p>文件名乱码如下所示：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_003.png" alt="乱码"></p>
<p><strong>解决方法为：</strong></p>
<p><code>git config --global core.quotepath false</code></p>
<p>效果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/Selection_004.png" alt="效果"></p>
<p>可以看出中文已经正确显示了。</p>
<hr>
<h3 id="jupyter-notebook-创建密码"><a href="#jupyter-notebook-创建密码" class="headerlink" title="jupyter notebook 创建密码"></a>jupyter notebook 创建密码</h3><p><strong>产生jupyter notebook的配置文件：</strong></p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></span><br></pre></td></tr></table></figure>
<p><strong>生成的配置文件位置为：~/.jupyter/jupyter_notebook_config.py</strong></p>
<p><strong>打开jupyter，新建一个notebook，创建密码以及生成密码的sha1密钥，所需代码如下：</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from notebook<span class="selector-class">.auth</span> import passwd</span><br><span class="line"><span class="function"><span class="title">passwd</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>输入一遍你想设置的密码，然后再输入一遍确认，记录下生成的sha1密钥值。形式如：‘sha1:xxxxxxx’</p>
<p>然后将这段值按如下格式粘贴到配置文件中对应的<code>c.NotebookApp.password = u&#39;sha1:xxxx&#39;</code>位置上，如果你不想寻找文件中的这个位置，你也可以在文件末尾新建一个。</p>
<p><strong>重启jupyter，密码生效。</strong></p>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Arch linux安装过程整理]]></title>
      <url>/2017/05/24/2017-05-24-Arch-Linux%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>整理一下这个教程便于以后可以无脑重装Arch Linux，美滋滋啊。</strong></p>
<h3 id="准备以及分区"><a href="#准备以及分区" class="headerlink" title="准备以及分区"></a>准备以及分区</h3><p><strong>1.准备</strong></p>
<ul>
<li><p>准备内容</p>
<ol>
<li><p>USB stick</p>
</li>
<li><p>Arch Linux ISO image</p>
<p><a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">Arch Linux Download Addr</a></p>
</li>
</ol>
</li>
<li><p>创建启动盘</p>
<ol>
<li><p>On windows: Rufus</p>
</li>
<li><p>On linux: <figure class="highlight plain"><figcaption><span>dd if</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; sdx代表你的U盘，可以用lsblk命令查看得到。</span><br><span class="line"></span><br><span class="line">接下来就是设置bios启动方式，教程基于UEFI+GPT的引导启动方式。请自行设置。</span><br><span class="line"></span><br><span class="line">**设置USB为下一次的引导路径，然后重启之后我们就能进入Arch安装环境了**</span><br><span class="line"></span><br><span class="line">查看EFI mode是否开启</span><br><span class="line"></span><br><span class="line">`efivar -l`</span><br><span class="line"></span><br><span class="line">如果有输出，就说明已经开启。</span><br><span class="line"></span><br><span class="line">**2.分区**</span><br><span class="line"></span><br><span class="line">`lsblk`</span><br></pre></td></tr></table></figure></p>
</li>
</ol>
</li>
</ul>
<p>gdisk /dev/sdx (x representing your drive)<br>x          # into expert mode<br>z          # clear the disk<br>y          # confirm<br>y          # confirm<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">创建分区</span><br><span class="line"></span><br><span class="line">**分区设定如下：**</span><br><span class="line"></span><br><span class="line">sda</span><br><span class="line"></span><br><span class="line">-<span class="ruby"> sda1(boot partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda2(our swap partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda3(our root partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">- sda4(our home partition)</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">**使用cgdisk分区：**</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"><span class="string">`cgdisk /dev/sdx`</span></span></span><br></pre></td></tr></table></figure></p>
<p>[New] Press Enter<br>First Sector: Leave this blank -&gt;press Enter<br>Size in sectors: 1024MiB -&gt;press Enter<br>Hex Code: EF00 press Enter<br>Enter new partition name: boot -&gt;press Enter<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*boot分区*</span><span class="strong">*的Hex Code为*</span><span class="strong">*EF00*</span><span class="strong">*，千万不要弄错，有些资料会说是EF02，实测EF00才有效。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">arch wiki上说boot分区分配200-300mb就行了，但是为了以后的双系统等未知需求，分配1Gb。</span></span><br></pre></td></tr></table></figure></p>
<p>[New] Press Enter<br>First Sector: Leave this blank -&gt;press Enter<br>Size in sectors: 8GiB -&gt;press Enter<br>Hex Code: 8200 -&gt;press Enter<br>Enter new partition name: swap -&gt;press Enter<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**swap分区**</span>的Hex Code是<span class="strong">**8200**</span>。</span><br><span class="line"></span><br><span class="line">swap分区的开启与否以及大小设置一直是争论焦点。这里贴出参考：</span><br><span class="line"></span><br><span class="line">[<span class="string">askubuntu\_swap</span>](<span class="link">https://askubuntu.com/questions/49109/i-have-16gb-ram-do-i-need-32gb-swap/49130#49130</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">serverfault\_swap</span>](<span class="link">https://serverfault.com/questions/5841/how-much-swap-space-on-a-2-4gb-system</span>)</span><br><span class="line"></span><br><span class="line">下面建立root分区和home分区。两者Hex code都是默认的<span class="strong">**8300**</span>。</span><br><span class="line">如果不独立设置home分区，就可以直接把剩余空间都设置为root分区。</span><br><span class="line">如果设置独立的home分区，可以分配30G左右给root分区，剩余空间分配给home分区。</span><br><span class="line">分区全部建立完毕之后，我们就要设置分区格式了。</span><br><span class="line"></span><br><span class="line"><span class="code">```shell</span></span><br><span class="line"><span class="code">mkfs.fat -F32 /dev/sda1</span></span><br><span class="line"><span class="code">mkswap /dev/sda2</span></span><br><span class="line"><span class="code">swapon /dev/sda2</span></span><br><span class="line"><span class="code">mkfs.ext4 /dev/sda3</span></span><br><span class="line"><span class="code">mkfs.ext4 /dev/sda4</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-安装Arch-以及配置启动"><a href="#3-安装Arch-以及配置启动" class="headerlink" title="3.安装Arch 以及配置启动"></a>3.安装Arch 以及配置启动</h3><p>挂载分区</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mkdir /mnt/home</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br><span class="line">mount /dev/sda4 /mnt/home</span><br></pre></td></tr></table></figure>
<p>设置mirrorlist</p>
<blockquote>
<p>学校有ipv6的学生可以用清华的源，ipv6直连，美滋滋。</p>
</blockquote>
<p><code>nano /etc/pacman.d/mirrorlist</code></p>
<p>然后在最前面加上</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tsinghua</span></span><br><span class="line">Server = http:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/archlinux/</span><span class="variable">$repo</span><span class="regexp">/os/</span><span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后安装系统</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap -i /mnt <span class="keyword">base</span> <span class="keyword">base</span>-devel</span><br></pre></td></tr></table></figure>
<p>然后创建fstab文件到新安装系统：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U -p <span class="regexp">/mnt &gt;&gt; /m</span>nt<span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>
<p>可以通过<code>nano /mnt/etc/fstab</code>查看是否创建成功</p>
<p><strong>接下来就可以切换到我们新安装的系统了</strong></p>
<p><code>arch-chroot /mnt</code></p>
<p>接下来设置语言，linux下界面语言还是用英文吧。</p>
<p><code>nano /etc/locale.gen</code></p>
<p>然后取消掉<code>en_US.UTF-8</code>和<code>zh_CN.UTF-8</code>前面的注释。</p>
<p>使其生效：</p>
<p><code>locale-gen</code></p>
<p>接下来设置语言：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<p>设置时区：</p>
<p><code>ln -s /usr/share/zoneinfo/Asia/Shanghai &gt; /etc/localtime</code></p>
<p>请自觉使用tab补全以免出错。</p>
<p>设置硬件时钟：</p>
<p><code>hwclock --systohc --utc</code></p>
<p>设置主机名：</p>
<p><code>echo hostname &gt; /etc/hostname</code></p>
<p>然后编辑<code>pacman.conf</code>取消multilib前面的注释：</p>
<p>这个是为了在64位机器上运行32位程序</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[multilib]</span></span><br><span class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>然后强烈推荐添加的yaourt</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxfr]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Never</span><br><span class="line"><span class="attr">Server</span> = http://repo.archlinux.fr/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>一定要注意大小写。</p>
<p>必须添加的archlinuxcn源，里面有很多中国特色软件，比如网易云、有道词典之类的，同样推荐清华源。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[archlinuxcn]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Optional TrustedOnly</span><br><span class="line"><span class="attr">Server</span> = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>然后安装<code>archlinuxcn-keyring</code>包以导入GPG key。</p>
<p>这个时候就可以保存<code>pacman.conf</code>文件了。</p>
<p>设置root账户的密码：</p>
<p><code>passwd</code></p>
<p>添加日常用户：</p>
<p><code>useradd -m -g users -G wheel,storage,power -s /bin/bash yourusername</code></p>
<p>设置密码：</p>
<p><code>passwd yourusername</code></p>
<p>然后是设置sudoers：</p>
<p><code>EDITOR=nano visudo</code></p>
<p>然后取消注释：</p>
<p><code>%wheel ALL=(ALL) ALL</code></p>
<p>然后让使用sudo命令的用户必须输入root密码：</p>
<p><code>Defaults rootpw</code></p>
<p>然后就可以保存文件了。</p>
<p>安装补全命令：</p>
<p><code>pacman -S bash-completion</code></p>
<ul>
<li>安装引导</li>
</ul>
<p>确保EFI变量被挂载</p>
<p><code>mount -t efivarfs efivarfs /sys/firmware/efi/efivars</code></p>
<p>使用Gummiboot作为我们的启动管理，这个已经整合到了bootctl/system-boot里，所以安装方式为：</p>
<p><code>bootctl install</code></p>
<p>下面，我需要把/root分区的PARTUUID加入到启动设置里：</p>
<p><code>blkid -s PARTUUID -o value /dev/sdxY</code></p>
<p>x代表设备代号，本次为a，Y是/root partition的排号，本次为3.</p>
<p>然后添加gummiboot manager配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nano /boot/loader/entries/arch.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是内容：</span></span><br><span class="line">title Arch Linux</span><br><span class="line">linux /vmlinuz-linux</span><br><span class="line">initrd /initramfs-linux.img</span><br><span class="line">options root=PARTUUID=上个命令得到的 rw</span><br></pre></td></tr></table></figure>
<p>保存并退出</p>
<p>添加intel支持：</p>
<p><code>pacman -S intel-ucode</code></p>
<p>然后写入到启动管理设置里：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano /boot/loader/entries/arch.conf</span><br><span class="line">initrd /intel-ucode.img</span><br><span class="line">initrd /initramfs-linux.img</span><br></pre></td></tr></table></figure>
<p>这个时候基本的操作已经完成了，我们可以重启试试了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h3 id="5-安装xfce4桌面环境"><a href="#5-安装xfce4桌面环境" class="headerlink" title="5.安装xfce4桌面环境"></a>5.安装xfce4桌面环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mesa</span><br><span class="line">sudo pacman -S xorg-server xorg-server-common xorg-xinit</span><br><span class="line">sudo pacman -S xfce4</span><br><span class="line">sudo pacman -S xfce4-goodies</span><br><span class="line">sudo pacman -S sddm</span><br><span class="line">sudo systemctl enable sddm.service</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>安装完成，可以使用了。美滋滋。</p>
<h3 id="6-安装Tex-Live"><a href="#6-安装Tex-Live" class="headerlink" title="6.安装Tex Live"></a>6.安装Tex Live</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S texlive-most</span><br><span class="line">yaourt -S texlive-langchinese</span><br><span class="line">yaourt -S texstudio</span><br></pre></td></tr></table></figure>
<p>安装完成之后使用<code>tex --version</code>测试：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-&lt;%&gt;- tex <span class="comment">--version</span></span><br><span class="line">TeX <span class="number">3.14159265</span> (TeX Live <span class="number">2016</span>/Arch Linux)</span><br><span class="line">kpathsea <span class="built_in">version</span> <span class="number">6.2</span><span class="number">.2</span></span><br><span class="line">Copyright <span class="number">2016</span> D.E. Knuth.</span><br><span class="line">There is NO warranty.  Redistribution <span class="keyword">of</span> this software is</span><br><span class="line">covered <span class="keyword">by</span> <span class="keyword">the</span> terms <span class="keyword">of</span> both <span class="keyword">the</span> TeX copyright <span class="keyword">and</span></span><br><span class="line"><span class="keyword">the</span> Lesser GNU General Public License.</span><br><span class="line">For more information about these matters, see <span class="keyword">the</span> <span class="built_in">file</span></span><br><span class="line">named COPYING <span class="keyword">and</span> <span class="keyword">the</span> TeX source.</span><br><span class="line">Primary author <span class="keyword">of</span> TeX: D.E. Knuth.</span><br></pre></td></tr></table></figure>
<p>使用texstudio编写测试文件：</p>
<p>新建test.tex,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;figure&#125;</span><br><span class="line">  \includegraphics[width=\linewidth]&#123;favicon.jpg&#125;</span><br><span class="line">  \caption&#123;A boat.&#125;</span><br><span class="line">  \label&#123;fig:boat1&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">Figure \ref&#123;fig:boat1&#125; shows a boat.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>Build &amp; View查看运行结果，正常结果如下：</p>
<p><img src="http://oq782gkz3.bkt.clouddn.com/favicon.png" alt="results"></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python Tips]]></title>
      <url>/2017/05/20/2017-9-18-python-require-install/</url>
      <content type="html"><![CDATA[<h1 id="自动生成和安装requirements-txt依赖"><a href="#自动生成和安装requirements-txt依赖" class="headerlink" title="自动生成和安装requirements.txt依赖"></a>自动生成和安装requirements.txt依赖</h1><p>requirements.txt可以通过pip命令自动生成和安装</p>
<ul>
<li><p>生成requirements.txt文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装requirements.txt依赖</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tips </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门笔记]]></title>
      <url>/2017/05/20/2017-05-20-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<hr>
<h4 id="这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。"><a href="#这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。" class="headerlink" title="这是主要参考文献：正则表达式入门，本文只是做了修改以便于自己记忆。"></a>这是主要参考文献：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式入门</a>，本文只是做了修改以便于自己记忆。</h4><hr>
<h4 id="1-元字符-metacharater"><a href="#1-元字符-metacharater" class="headerlink" title="1. 元字符 metacharater"></a><strong>1. 元字符 metacharater</strong></h4><blockquote>
<p><strong>\b</strong> 代表着单词的开头或者结尾，也就是单词的分界处；</p>
<p><strong>.</strong> 匹配除了换行符以外的任意字符；</p>
<p><strong>\d</strong> 匹配一位数字；</p>
<p><strong>\s</strong> 匹配任意的空白符，包括空格，制表符，换行符，中文全角空格等；</p>
<p><strong>\w</strong> 匹配字母或数字或下划线或者汉字等；</p>
<p><strong>^</strong>  匹配字符串的开始；</p>
<p><strong>$</strong>  匹配字符串的结束；</p>
</blockquote>
<hr>
<p><strong>字符转义仍然是使用\</strong></p>
<hr>
<h4 id="2-限定"><a href="#2-限定" class="headerlink" title="2. 限定"></a><strong>2. 限定</strong></h4><blockquote>
<p><strong>+</strong> 指定前面的内容可以连续重复1次或者更多次；</p>
<p><strong>*</strong> 指定前面的内容可以连续重复任意次（包括0次)；</p>
<p><strong>?</strong> 重复零次或者一次；</p>
<p><strong>{n}</strong> 重复n次；</p>
<p><strong>{n,1}</strong> 重复n次或者更多次；</p>
<p><strong>{n,m}</strong> 重复n次到m次；</p>
</blockquote>
<hr>
<h4 id="3-字符类"><a href="#3-字符类" class="headerlink" title="3. 字符类"></a><strong>3. 字符类</strong></h4><p><em>可以利用方括号来匹配所需字符，[acb]代表可以匹配abc其中的一个，所以<strong>[]只用来匹配没有元字符对应的字符集中的单个字符</strong></em> </p>
<blockquote>
<p>比如[0-9],就跟\d是完全一致的，也就是匹配单个数字</p>
</blockquote>
<hr>
<h4 id="4-分支条件"><a href="#4-分支条件" class="headerlink" title="4.分支条件"></a><strong>4.分支条件</strong></h4><blockquote>
<p>正则表达式分支条件示例：\d{5}-\d{4}|\d{5}</p>
<p>这个例子含有一个小的tricky的地方，就是它说明了一个问题：<br><strong>用分支条件时，要注意各个条件的顺序</strong>。如果把这个表达式改为<strong>\d{5}|\d{5}-\d{4}</strong>，<br>那么就只会匹配五位的邮编以及9位邮编的前5位。</p>
<p><strong>原因是匹配分支条件时，将会从左到右地测试每个条件，如果满足了某个分支的话，就不会再管其它条件。</strong> </p>
</blockquote>
<hr>
<h4 id="5-分组"><a href="#5-分组" class="headerlink" title="5. 分组"></a><strong>5. 分组</strong></h4><p><em>上面所说的都是重复单个字符的方法，如果想要重复多个字符可以用小括号来指定子表达式（也叫作分组），这也是当我们需要（字符本身时需要对其进行转义的原因。</em></p>
<blockquote>
<p>(\d{1,3}.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p>
</blockquote>
<hr>
<h4 id="6-反义"><a href="#6-反义" class="headerlink" title="6.反义"></a><strong>6.反义</strong></h4><table>
<thead>
<tr>
<th>代码语法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\W</td>
<td style="text-align:center">匹配任意不是字母、数字、下划线、汉字的字符</td>
</tr>
<tr>
<td>\S</td>
<td style="text-align:center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>\D</td>
<td style="text-align:center">匹配任意非数字的字符</td>
</tr>
<tr>
<td>\B</td>
<td style="text-align:center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td>[^x]</td>
<td style="text-align:center">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td>[^aeiou]</td>
<td style="text-align:center">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="7-后向引用"><a href="#7-后向引用" class="headerlink" title="7.后向引用"></a><strong>7.后向引用</strong></h4><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容）可以在表达式或者其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左到右，以分组的左括号为标志，第一个出现的分组组号为1，第二个为2，以此类推。</p>
<blockquote>
<p>分组0对应整个正则表达式；</p>
<p>实际上组号分配过程是要从左到右扫描两遍：第一遍只给未命名组分配，第二遍只给命名组分配–因此所有的命名组的组号都大于未命名组的组号；</p>
<p>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权。</p>
<p>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p>
<p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<word>,所以上一个例子也可以写成这样：\b(?<word>\w+)\b\s+\k<word>\b。</word></word></word></word></p>
</blockquote>
<p><strong>常用分组语法：</strong></p>
<p><a href="">待补充</a></p>
<hr>
<h4 id="8-零宽断言"><a href="#8-零宽断言" class="headerlink" title="8. 零宽断言"></a><strong>8. 零宽断言</strong></h4>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Arch Linux时出现的问题]]></title>
      <url>/2017/05/19/2017-05-17-Problems-I-encountered-when-I-use-Arch-Linux/</url>
      <content type="html"><![CDATA[<p>使用了Arch快半年了，这个文章实在是写晚了。。</p>
<hr>
<h3 id="1-oh-my-zsh-安装使用"><a href="#1-oh-my-zsh-安装使用" class="headerlink" title="1. oh my zsh 安装使用"></a><strong>1. oh my zsh 安装使用</strong></h3><p><strong>首先安装Zsh</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br></pre></td></tr></table></figure>
<p><strong>安装oh my zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>
<p><strong>切换shell从bash到zsh</strong></p>
<p>首先查看可用shell列表：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  cat /etc/shells</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> End of file</span></span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure>
<p>切换到zsh</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-error-failed-to-commit-transaction-conflicting-files"><a href="#2-error-failed-to-commit-transaction-conflicting-files" class="headerlink" title="2. error: failed to commit transaction (conflicting files)"></a><strong>2. error: failed to commit transaction (conflicting files)</strong></h3><p><strong>问题描述：</strong>这个问题已经碰到了几次，原因暂未知。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: failed to commit transaction (conflicting files)</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/PKG-INFO exists in filesystem</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/SOURCES.txt exists in filesystem</span><br><span class="line">python-markupsafe: /usr/lib/python3.6/site-packages/MarkupSafe-1.0-py3.6.egg-info/dependency_links.txt exists in filesystem</span><br></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>首先，检测一下冲突文件有没有包在使用<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Qo /path/<span class="keyword">to</span>/<span class="built_in">file</span></span><br></pre></td></tr></table></figure></p>
<p>结果一般就是没有包在使用。。所以下面就rm掉所有引起冲突的文件就行了，问题解决。最近碰见了这个问题好几次，但是出现原因暂未知。。太烦了。</p>
<hr>
<h3 id="3-窗口撕裂"><a href="#3-窗口撕裂" class="headerlink" title="3. 窗口撕裂"></a><strong>3. 窗口撕裂</strong></h3><p><strong>问题描述：</strong>我不知道这个问题应不应该叫做窗口撕裂：在上下滚动内容的时候，滚动方向最下面的内容会出现重影，显得好像屏幕刷新有延迟。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/X11/xorg.conf.d/20-intel.conf</span><br></pre></td></tr></table></figure>
<p>然后添加如下内容：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Section</span> <span class="string">"Device"</span></span><br><span class="line">   Identifier  <span class="string">"Intel Graphics"</span></span><br><span class="line">   Driver      <span class="string">"intel"</span></span><br><span class="line">   <span class="meta">Option</span>      <span class="string">"TearFree"</span> <span class="string">"true"</span></span><br><span class="line">   <span class="meta">Option</span>      <span class="string">"AccelMethod"</span>  <span class="string">"uxa"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认的<code>AccelMethod</code>的值为<code>sna</code>，在我这里使用<code>sna</code>会出现滚动延迟的情况，但是使用<code>uxa</code>就没有这种现象。但是更改了这个值之后发现了一个新问题就是笔记本不合盖子屏幕自动关闭之后不能唤醒，只有切到tty之后再切回来才行。待解决。</p>
</blockquote>
<hr>
<h3 id="4-signature-from-xxx-is-marginal-trust"><a href="#4-signature-from-xxx-is-marginal-trust" class="headerlink" title="4. signature from xxx is marginal trust"></a><strong>4. signature from xxx is marginal trust</strong></h3><p><strong>问题描述：</strong></p>
<blockquote>
<p>error: archlinuxcn-keyring: signature from “Jiachen Yang \<farseerfc@gmail.com>“ is marginal trust<br>:: File /var/cache/pacman/pkg/archlinuxcn-keyring-20170522-1-any.pkg.tar.xz is corrupted (invalid or corrupted package (PGP signature)).</farseerfc@gmail.com></p>
</blockquote>
<p><strong>解决办法：</strong></p>
<p><code>sudo pacman-key --refresh-keys</code></p>
<p>代码运行结果就是新导入了很多PGP signature, 然后问题解决。</p>
<p><strong>解决方法二</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -R /etc/pacman.d/gnupg/</span><br><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinux</span><br><span class="line">pacman-key --populate archlinuxcn</span><br></pre></td></tr></table></figure>
<p>可以看出这也是走的更新key的路数。</p>
<p>但是出现这种问题执行<code>pacman -S archlinux-keyring</code>重装<code>archlinux-keyring</code>是没有用的。</p>
<p><strong><em>还有一种说法是系统时间不正确</em></strong></p>
<p>不知道这个系统时间是指哪个时间。</p>
<hr>
<h3 id="5-opt-sysmlink-file-conflicts"><a href="#5-opt-sysmlink-file-conflicts" class="headerlink" title="5. /opt sysmlink file conflicts"></a><strong>5. /opt sysmlink file conflicts</strong></h3><p><strong>问题描述：</strong>由于在安装Arch系统时，/home分区是独立于/root分区的，而yaourt安装的大型软件都是会安装到/opt下面，导致系统分区会被很快用光。所以我的解决方法是在/home分区下新建opt分区，然后建立软链接：</p>
<p><code>ln -s /home/opt /opt</code></p>
<p>但是这样做之后会导致在yaourt安装软件是出现<code>/opt already exists</code>的<code>file conflicts</code>错误。</p>
<p>官方解释如下：</p>
<blockquote>
<p>Directory Symlink Handling: Example time! Arch Linux has a /lib -&gt; /usr/lib symlink. Previously, if pacman was installing a package and it found files in /lib, it would follow the symlink and install it in /usr/lib. However the filelist for that package still recorded the file in /lib. This caused heaps of difficulty in conflict resolving – primarily the need to resolve every path of all package files to look for conflicts. That was a stupid idea! So now if pacman sees a /lib directory in a package, it will detect a conflict with the symlink on the filesystem. If you were using this feature to install files elsewhere, you probably need to look into what a bind mount is! Note that this change requires us to correct the local package file list for any package installed using this mis-feature, so we bumped the database version. Upgrade using pacman-db-upgrade. Thanks to Andrew! </p>
</blockquote>
<p><strong>解决方法：</strong></p>
<p>在<strong>/etc/fstab</strong>里加入如下内容：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> solve the /opt sysbolink file conficts errors</span></span><br><span class="line">/home/opt	/opt	none	bind</span><br></pre></td></tr></table></figure>
<p><strong>problems solved, splendid!</strong></p>
<hr>
<p><strong>### 6. wine下TIM中文界面部分乱码</strong></p>
<p><strong>问题描述：</strong> 已经通过<code>winetricks corefonts cjkfonts</code>安装了字体，但是qq登录界面以及消息预览界面的中文都是方块。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim .wine/system.reg</span><br><span class="line">搜索： LogPixels</span><br><span class="line">找到的行应该是：[System\\CurrentControlSet\\Hardware Profiles\\Current\\Software\\Fonts]</span><br><span class="line">将其中的：</span><br><span class="line">“LogPixels”=dword:<span class="number">00000060</span></span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line">“LogPixels”=dword:<span class="number">00000070</span></span><br><span class="line"></span><br><span class="line">搜索： FontSubstitutes</span><br><span class="line">找到的行应该是：[Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes]</span><br><span class="line">将其中的：</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg”=”Tahoma”</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg <span class="number">2</span>″=”Tahoma”</span><br><span class="line"></span><br><span class="line">改为：</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg”=”SimSun”</span><br><span class="line">“<span class="keyword">MS</span> <span class="title">Shell</span> Dlg <span class="number">2</span>″=”SimSun”</span><br></pre></td></tr></table></figure>
<p>SimSun代表windows下的simsun.ttc字体，这里提供下载：<a href="https://www.dropbox.com/s/78jt6smdorzqzpv/simsun.ttc?dl=0" target="_blank" rel="noopener">下载simsun.ttc</a></p>
<hr>
<h3 id="7-xfce4下开机时某些非自启应用会自动运行"><a href="#7-xfce4下开机时某些非自启应用会自动运行" class="headerlink" title="7. xfce4下开机时某些非自启应用会自动运行"></a><strong>7. xfce4下开机时某些非自启应用会自动运行</strong></h3><p><strong>问题描述：</strong>已经关闭了<code>auto save sessions</code>，但是在登录之后某些应用仍然会自动启动，具体表现为某次关机前系统的工作状态。</p>
<p><strong>解决方法：</strong></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r .cache<span class="regexp">/sessions/</span>*</span><br></pre></td></tr></table></figure>
<p><strong>All clear!!!</strong></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
