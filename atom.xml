<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiChen</title>
  
  <subtitle>XiChen&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xichen.pub/"/>
  <updated>2018-05-20T04:37:29.882Z</updated>
  <id>http://xichen.pub/</id>
  
  <author>
    <name>Lin Xueyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Android TimeCat】 反编译</title>
    <link href="http://xichen.pub/2018/04/11/2018-04-11-Android-TimeCat-%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>http://xichen.pub/2018/04/11/2018-04-11-Android-TimeCat-反编译/</id>
    <published>2018-04-11T06:11:00.000Z</published>
    <updated>2018-05-20T04:37:29.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>需要参考一些好的项目，但是并没有开源，自己写是不会写的，这辈子都不会写的，抄又不能直接抄，只有靠反编译才能维持得了生活这样子。。。</p><h1 id="神操作"><a href="#神操作" class="headerlink" title="神操作"></a>神操作</h1><p>在线反编译：<a href="http://www.javadecompilers.com/apk" target="_blank" rel="noopener">http://www.javadecompilers.com/apk</a></p><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><h2 id="APK-Analyzer"><a href="#APK-Analyzer" class="headerlink" title="APK Analyzer"></a>APK Analyzer</h2><p>Android Studio 自带的 APK Analyzer 可直接查看APK内的 图片，xml内容，dex结构，文件尺寸等，还可以比较两个apk的差异。</p><p>虽然不能导出资源有点可惜，但已经很强大方便了。</p><p>用法：将 apk 拖入 AndroidStudio 就好了</p><p>参考：developer.android.com/studio/buil…</p><h2 id="常用三件套"><a href="#常用三件套" class="headerlink" title="常用三件套"></a>常用三件套</h2><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p><a href="http://www.cnblogs.com/liuhongfeng/p/4177568.html" target="_blank" rel="noopener">Windows环境下JDK安装与环境变量配置详细的图文教程</a></p><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><ul><li><p>apktool：资源文件获取，可以提取出图片文件和布局文件进行使用查看<br>下载地址：<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">https://ibotpeaches.github.io/Apktool/</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Developer-Tools/Apktool.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Developer-Tools/Apktool.shtml</a></p></li><li><p>dex2jar：将apk反编译成java源码（classes.dex转化成jar文件）<br>下载地址：<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Developer-Tools/dex2jar.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Developer-Tools/dex2jar.shtml</a></p></li><li>jd-gui：查看APK中classes.dex转化成出的jar文件，即源码文件<br>下载地址：<a href="https://code.google.com/archive/p/innlab/downloads" target="_blank" rel="noopener">https://code.google.com/archive/p/innlab/downloads</a><br>Mac下载地址：<a href="http://mac.softpedia.com/get/Development/Java/JD-GUI.shtml" target="_blank" rel="noopener">http://mac.softpedia.com/get/Development/Java/JD-GUI.shtml</a></li></ul><blockquote><p>注：有个合集，更加傻瓜化的工具onekey-decompile-apk：<a href="https://github.com/ufologist/onekey-decompile-apk" target="_blank" rel="noopener">https://github.com/ufologist/onekey-decompile-apk</a><br>把apk拖到文件目录下就能直接反编译了</p></blockquote><p>其实一些常见工具都可以通过 homebrew 或 homebrew-cask 安装<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>apktool</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>smali</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>dex2jar</span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span><span class="keyword">jadx</span></span><br><span class="line"><span class="keyword">brew </span>cask <span class="keyword">install </span><span class="keyword">jd-gui</span></span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h4><p>apk 虽然实际上是个 zip 可以直接 unzip，但里边的 xml 都是 Binaray XML 形式，需要再次转化成 xml 才能查看。</p><p>apktool 可以将 apk 内的资源全部提取出来，同时 xml 也转化好可直接查看内容。</p><p>apktool 也可以用于在修改资源后重新打包 apk</p><p>用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取资源</span></span><br><span class="line">apktool d test.apk</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取资源并指定输出目录</span></span><br><span class="line">apktool d test<span class="selector-class">.apk</span> -o test</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新打包apk</span></span><br><span class="line">apktool <span class="selector-tag">b</span> test</span><br></pre></td></tr></table></figure></p><p>参考：<a href="ibotpeaches.github.io/Apktool/">ibotpeaches.github.io/Apktool/</a></p><h4 id="smali-baksmali"><a href="#smali-baksmali" class="headerlink" title="smali/baksmali"></a>smali/baksmali</h4><p>baksmali 可将 dex/odex 转成 .smali 文件集<br>smali 可将 .smali 文件集 转成 dex/odex</p><p>注：odex 转 smali 需要相应系统的 framework，adb pull /system/framework</p><p>用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 test.dex 分解到 test 目录</span></span><br><span class="line">baksmali test<span class="selector-class">.dex</span> -o test </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 test 目录里的 smali 文件组装到 haha.dex</span></span><br><span class="line">smali test -o haha.dex</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统 framework</span></span><br><span class="line">adb pull /system/framework</span><br><span class="line"><span class="comment">// 将 test.odex 分解到 test 目录</span></span><br><span class="line">baksmali test<span class="selector-class">.odex</span> <span class="selector-tag">b</span> framework -o test</span><br></pre></td></tr></table></figure></p><p>参考: <a href="https://github.com/JesusFreke/smali/wiki" target="_blank" rel="noopener">https://github.com/JesusFreke/smali/wiki</a><br>下载：<a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="noopener">https://bitbucket.org/JesusFreke/smali/downloads/</a></p><h4 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h4><p>dex2jar 可将 .dex 转换成 .jar</p><p>用法：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 将 <span class="keyword">test</span>.dex 转成 <span class="keyword">test</span>.jar 文件</span><br><span class="line">d2j-dex2jar <span class="keyword">test</span>.dex -o <span class="keyword">test</span>.jar</span><br></pre></td></tr></table></figure></p><p>参考: <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="noopener">https://github.com/pxb1988/dex2jar</a><br>下载：<a href="https://bitbucket.org/pxb1988/dex2jar/downloads/" target="_blank" rel="noopener">https://bitbucket.org/pxb1988/dex2jar/downloads/</a></p><h4 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h4><p>jadx 可以将 .dex/.jar/.class 文件反编译成 .java 源码<br>jadx 也可以直接反编译 .apk 并处理好资源(binary xml -&gt; xml)</p><p>jadx-gui 可视化查看工具</p><p>用法：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反编译 test.dex 并输出到 test 目录</span></span><br><span class="line">jadx <span class="keyword">test</span>.dex -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.apk</span></span><br><span class="line">jadx <span class="keyword">test</span>.apk -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.jar</span></span><br><span class="line">jadx <span class="keyword">test</span>.jar -<span class="keyword">d</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反编译 test.class</span></span><br><span class="line">jadx <span class="keyword">test</span>.<span class="keyword">class</span> -<span class="keyword">d</span> <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p><p>参考：<a href="github.com/skylot/jadx">github.com/skylot/jadx</a></p><h4 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h4><p>jd-gui 可视化反编译查看 .jar 文件</p><p>参考：<a href="jd.benow.ca/">jd.benow.ca/</a></p><h1 id="附-Android-APK中的Java代码可以被反编译到什么程度"><a href="#附-Android-APK中的Java代码可以被反编译到什么程度" class="headerlink" title="附:Android APK中的Java代码可以被反编译到什么程度"></a>附:Android APK中的Java代码可以被反编译到什么程度</h1><p>Android APK中的Java代码可以被反编译到什么程度主要看APK的加密程度。</p><p>第一种情况：无混淆无加密无加壳。直接利用Dex2jar和JD-GUI可把源码从APK里抠出来，代码逻辑清晰，基本上做到可复用，只是资源文件的引用需要计算一下。</p><p>第二种情况：混淆。通常是利用Proguard做的防护。因为是对jar做的不可逆混淆（除非有mapping），因此不能还原成原来的代码。但是代码结构，代码逻辑一致，只要花长时间对代码进行梳理一样可找准核心代码，解密方法跟第一种一致。</p><p>第三种情况：加密。这里以DexGuard为例。对于这种代码加密的方法，在程序运行中必定会进行解密，只要抽出它解密的逻辑便可。PS：我自己做过DexGuard的解密，如果用Dex2jar反编译看的话逻辑是不对的，一定要从Smali代码看。后来发现网上已经有人做了。解密的脚本：<a href="https://www.pnfsoftware.com/blog/2013/04/02/a-look-inside-dexguard/" target="_blank" rel="noopener">A look inside Dexguard</a></p><p>第四种情况：加壳。这种情况跟第三种类似。无论你怎么加壳，运行的时候必定是Dalvik可识别的Odex代码，建议直接在内存里dump出来。这里推荐Xpose的ZjDroid。脱壳教程：<a href="http://www.cnblogs.com/goodhacker/p/3961045.html" target="_blank" rel="noopener">ZjDroid工具介绍及脱壳详细示例</a><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作者：Vince</span><br><span class="line">链接：https:<span class="regexp">//</span>www.zhihu.com<span class="regexp">/question/</span><span class="number">30723538</span><span class="regexp">/answer/</span><span class="number">49382019</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li><li><a href="https://blog.csdn.net/xyxjn/article/details/46906909" target="_blank" rel="noopener">Android Studio 设置内存大小及原理</a></li><li><a href="www.javadecompilers.com/apk">APK 在线反编译</a></li><li><a href="https://segmentfault.com/a/1190000007359713" target="_blank" rel="noopener">反编译apk的步骤</a></li><li><a href="https://segmentfault.com/a/1190000005133219" target="_blank" rel="noopener">手把手教你逆向分析 Android 程序</a></li><li><a href="https://blog.csdn.net/jiangwei0910410003/article/details/51671019" target="_blank" rel="noopener">Android逆向之旅—反编译利器Apktool和Jadx源码分析以及错误纠正</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;需要参考一些好的项目，但是并没有开源，自己写是不会写的，这辈子都不会写的，抄又不能直接抄，只有靠反编译才能维持得了生活这样子。。。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://xichen.pub/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 让Android-Studio快十倍</title>
    <link href="http://xichen.pub/2018/04/09/2018-04-09-Android-TimeCat-%E8%AE%A9Android-Studio%E5%BF%AB%E5%8D%81%E5%80%8D/"/>
    <id>http://xichen.pub/2018/04/09/2018-04-09-Android-TimeCat-让Android-Studio快十倍/</id>
    <published>2018-04-09T06:11:00.000Z</published>
    <updated>2018-05-20T04:13:37.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Android Studio 越用越卡，明明电脑配置不低了。。。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Android Studio 是Java写的软件，运行在Java虚拟机上，如果使用时间长，会频繁触发垃圾回收机制，导致卡顿。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>配置Android Studio，给它分多点内存。给2048m应该够用了，如果不够，再来4096m.</p><p><img src="/assets/blog/img/2018-04-9/0.png" width="700"></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>配置Android Studio，给它分多点内存。</p><p>Android Studio 通过 Help 菜单提供对两个配置文件的访问：</p><ul><li><code>studio.vmoptions</code>：自定义 Studio Java 虚拟机 (JVM) 的选项，如堆内存和缓存大小。请注意，对于 Linux 机器，此文件可能命名为 studio64.vmoptions，具体取决于您的 Android Studio 版本。</li><li><code>idea.properties</code>：自定义 Android Studio 的属性，如插件文件夹路径或最大支持文件大小。</li></ul><h2 id="自定义-VM-选项"><a href="#自定义-VM-选项" class="headerlink" title="自定义 VM 选项"></a>自定义 VM 选项</h2><p>通过 studio.vmoptions 文件，您可以自定义适用于 Android Studio 的 JVM 的选项。为了提高 Studio 的性能，最常用的调节选项是最大堆内存，但您也可以使用 studio.vmoptions 文件替换其他默认设置，如初始堆内存、缓存大小和 Java 垃圾回收开关。</p><p>要新建 studio.vmoptions 文件或打开现有文件，请执行以下步骤：</p><p>点击 Help &gt; Edit Custom VM Options。如果您之前从未编辑过适用于 Android Studio 的 VM 选项，IDE 将提示您新建一个 studio.vmoptions 文件。点击 Yes 创建文件。</p><p>此时 studio.vmoptions 文件将在 Android Studio 的编辑器窗口中打开。编辑文件以添加您自己的自定义 VM 选项。如需可自定义 JVM 选项的完整列表，请参阅 Oracle 的 Java HotSpot VM 选项页。<br>您创建的 studio.vmoptions 文件将添加至默认 studio.vmoptions 文件，后者位于 Android Studio 安装文件夹内的 bin/ 目录中。</p><p>请注意，切勿直接编辑 Android Studio 程序文件夹内的 studio.vmoptions 文件。尽管您可以访问该文件来查看 Studio 的默认 VM 选项，但仅编辑自己的 studio.vmoptions 文件可确保您不会替换 Android Studio 的重要默认设置。因此，在您的 studio.vmoptions 文件中，请仅替换您关注的属性，使 Android Studio 可以继续使用未更改的任何属性的默认值。</p><h2 id="最大堆内存"><a href="#最大堆内存" class="headerlink" title="最大堆内存"></a>最大堆内存</h2><p>默认情况下，Android Studio 的最大堆内存为 1280MB。如果您要处理大项目，或者您的系统有大量 RAM 可用，您可以通过在 Android Studio 的 VM 选项中增加最大堆内存来提高性能。如果系统的内存有限，您可能希望降低最大堆内存。</p><p>要更改最大堆内存，请执行以下步骤：</p><p>点击 Help &gt; Edit Custom VM Options 以打开您的 studio.vmoptions 文件。<br>向 studio.vmoptions 文件添加一个行，使用语法 -XmxheapSize 设置最大堆内存。您选择的大小应该基于项目大小以及机器上的可用 RAM。作为基准，如果您有 4GB 以上的 RAM 和中等大小的项目，则应该将最大堆内存设置为 2GB 或更高。以下行可将最大堆内存设置为 2GB：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-Xmx2g</span></span><br></pre></td></tr></table></figure></p><p>保存对 studio.vmoptions 文件所做的更改，然后重新启动 Android Studio 以使更改生效。</p><p>#</p><p>从AndroidStudio的启动参数了解到的下JVM的一些东西（内存使用，JIT等）</p><p>如果你使用AndroidStudio经常觉得很卡，那有可能是因为系统给AS分配的内存不够的原因。打开/Applications/Android Studio.app/Contents/bin/studio.vmoptions (Mac)，可以看到有以下配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m -Xmx750m -XX:<span class="attribute">MaxPermSize</span>=350m -XX:<span class="attribute">ReservedCodeCacheSize</span>=96m -XX:+UseCompressedOops</span><br></pre></td></tr></table></figure></p><p>这些参数分别是什么意思呢？</p><h3 id="Xms128m"><a href="#Xms128m" class="headerlink" title="-Xms128m"></a>-Xms128m</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The -Xms option sets <span class="keyword">the</span> initial <span class="keyword">and</span> minimum Java heap size. The Java heap (<span class="keyword">the</span> “heap”) is <span class="keyword">the</span> part <span class="keyword">of</span> <span class="keyword">the</span> memory where blocks <span class="keyword">of</span> memory are allocated <span class="built_in">to</span> objects <span class="keyword">and</span> freed during garbage collection.</span><br></pre></td></tr></table></figure><p>就是JVM启动的起始堆内存，堆内存是分配给对象的内存。这里我把它改成了512m</p><h3 id="Xmx750m"><a href="#Xmx750m" class="headerlink" title="-Xmx750m"></a>-Xmx750m</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">option</span> <span class="keyword">sets</span> the <span class="comment">maximum Java heap size.</span></span><br></pre></td></tr></table></figure><p>也就是AndroidStudio能使用的最大heap内存，这里我改成了2048m</p><p>这两个参数都是-X开头的，表示非标准的参数。什么叫非标准的呢？我们知道JVM有很多个实现，Oracle的，OpenJDK等等，这里的-X参数，是Oracle的JVM实现使用的，OpenJDK不一定能使用，也就是没有将这些参数标准化，让所有的JVM实现都能使用。</p><h3 id="XX-MaxPermSize-350m"><a href="#XX-MaxPermSize-350m" class="headerlink" title="-XX:MaxPermSize=350m"></a>-XX:MaxPermSize=350m</h3><p>这个参数指定最大的Permanent generation大小。<br>根据oracle的文档：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permanent Generation (non-heap): The pool containing all the reflective data <span class="keyword">of</span> the <span class="keyword">virtual</span> machine itself, such <span class="keyword">as</span> <span class="keyword">class</span> <span class="keyword">and</span> <span class="function"><span class="keyword">method</span> <span class="title">objects</span>. <span class="title">With</span> <span class="title">Java</span> <span class="title">VMs</span> <span class="title">that</span> <span class="title">use</span> <span class="title">class</span> <span class="title">data</span> <span class="title">sharing</span>, <span class="title">this</span> <span class="title">generation</span> <span class="title">is</span> <span class="title">divided</span> <span class="title">into</span> <span class="title">read</span>-<span class="title">only</span> <span class="title">and</span> <span class="title">read</span>-<span class="title">write</span> <span class="title">areas</span>.</span></span><br></pre></td></tr></table></figure></p><p>可知，Permanent Generation也是一块内存区域，跟heap不同，它里面存放的事类本身（不是对象），以及方法，一些固定的字符串等等。更多关于Permanent Generation</p><h3 id="XX-ReservedCodeCacheSize-90m"><a href="#XX-ReservedCodeCacheSize-90m" class="headerlink" title="-XX:ReservedCodeCacheSize=90m"></a>-XX:ReservedCodeCacheSize=90m</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReservedCodeCacheSize (<span class="keyword">and</span> InitialCodeCacheSize) is <span class="keyword">an</span> option <span class="keyword">for</span> <span class="keyword">the</span> (just-<span class="keyword">in</span>-<span class="built_in">time</span>) compiler <span class="keyword">of</span> <span class="keyword">the</span> Java Hotspot VM. Basically <span class="keyword">it</span> sets <span class="keyword">the</span> maximum size <span class="keyword">for</span> <span class="keyword">the</span> compiler<span class="string">'s code cache.</span></span><br></pre></td></tr></table></figure><p>设置JIT java compiler在compile的时候的最大代码缓存。简单地说就是JIT（Just In Time）编译器在编译代码的时候，需要缓存一些东西，这个参数指定最多能使用多大内存来缓存这些东西。<br>什么叫JIT呢？看wikipedia的解释：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In computing, just-<span class="keyword">in</span>-<span class="built_in">time</span> compilation (JIT), also known <span class="keyword">as</span> dynamic translation, is compilation done during execution <span class="keyword">of</span> <span class="keyword">a</span> program – <span class="keyword">at</span> run <span class="built_in">time</span> – rather than prior <span class="built_in">to</span> execution.Most often this consists <span class="keyword">of</span> translation <span class="built_in">to</span> machine code, which is <span class="keyword">then</span> executed directly, but can also refer <span class="built_in">to</span> translation <span class="built_in">to</span> another <span class="built_in">format</span>. JIT compilation is <span class="keyword">a</span> combination <span class="keyword">of</span> <span class="keyword">the</span> <span class="literal">two</span> traditional approaches <span class="built_in">to</span> translation <span class="built_in">to</span> machine code – ahead-<span class="keyword">of</span>-<span class="built_in">time</span> compilation (AOT), <span class="keyword">and</span> interpretation – <span class="keyword">and</span> combines some advantages <span class="keyword">and</span> drawbacks <span class="keyword">of</span> both.[<span class="number">1</span>] Roughly, JIT compilation combines <span class="keyword">the</span> speed <span class="keyword">of</span> compiled code <span class="keyword">with</span> <span class="keyword">the</span> flexibility <span class="keyword">of</span> interpretation, <span class="keyword">with</span> <span class="keyword">the</span> overhead <span class="keyword">of</span> <span class="keyword">an</span> interpreter <span class="keyword">and</span> <span class="keyword">the</span> additional overhead <span class="keyword">of</span> compiling (<span class="keyword">not</span> just interpreting). JIT compilation is <span class="keyword">a</span> form <span class="keyword">of</span> dynamic compilation, <span class="keyword">and</span> allows adaptive optimization such <span class="keyword">as</span> dynamic recompilation – thus <span class="keyword">in</span> principle JIT compilation can yield faster execution than static compilation. Interpretation <span class="keyword">and</span> JIT compilation are particularly suited <span class="keyword">for</span> dynamic programming languages, <span class="keyword">as</span> <span class="keyword">the</span> runtime <span class="keyword">system</span> can handle late-bound data types <span class="keyword">and</span> enforce security guarantees.</span><br></pre></td></tr></table></figure></p><p>我们知道编程语言分两种： - 编译型，先将人写的代码整个编译成汇编语言或机器语言，一条一条代码然后执行。 - 解释型，不需要编译，将人写的代码一条一条拿过来一次执行，先取一条，执行，完了再取下一条，然后在执行。</p><p>而对于Java来说，这个情况就比较特殊了，因为在Java这里，JVM先是将Java代码整个编译成bytecode，然后在JVM内部再一条一条执行bytecode代码。你说它是编译型的吧，bytecode又不用编译成机器代码，二是一条条bytecode一次执行。你说它是解释型的吧，它又有一个编译的过程。对于Java到底是编译型还是解释型到现在也没有一个定论。不过，我们还是可以探讨一下Java的JIT编译技术。<br>刚刚说了，在bytecode层面，代码是解释执行的。解释型的语言会比较慢，因为它没有办法根据上下文对代码进行优化。而编译型的语言则可以进行优化。Java的JIT技术，就是在bytecode解释执行的时候，它不一定是一条条解释执行的，二是取一段代码，编译成机器代码，然后执行，这样的话就有了上下文，可以对代码进行优化了，所以执行速度也会更快。<br>可见，JIT技术结合了编译型（速度更快）和解释型语言（代码更灵活）二者的优势。对于动态语言的执行来说，是一个非常大的优势。</p><h3 id="XX-UseCompressedOops"><a href="#XX-UseCompressedOops" class="headerlink" title="-XX:+UseCompressedOops"></a>-XX:+UseCompressedOops</h3><p>这个参数允许系统将代码里面的引用(reference)类型用32位存储，同时却能够让引用能够使用64位的内存大小。<br>我们知道现代的机器基本都是64位的，在这种情况下，Java代码里面的reference类型也变成了用64位来存储，这就导致了两个问题：</p><ol><li><p>64位比32为更大，占的内存更多，这是显然的，当然这个问题在整个程序看来根本不显然，因为哪怕系统同时有1000个引用存在，那多出来的内存也就4M，这个不重要，因为现在手机都动不动好几个G，大型服务器就更加不用说了。更重要的是第二点。 </p></li><li><p>相对于内存，CPU的cache就小的可怜了，当reference从32bit变成64bit时，cache里面能存放的reference数量就顿时少了很多。所以64bit的reference对cache是个大问题，于是就有了这个选项，可以允许系统用32bit来存储reference，让cache里面能存放更多的reference，同时又不影响reference的取址范围。至于他们是怎么做到的，我就不得而知了。。。</p></li></ol><p>以上三个参数是以-XX开头的，根据Oracle的说明，<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Options <span class="keyword">that</span> are specified <span class="keyword">with</span> -XX are <span class="keyword">not</span> stable <span class="keyword">and</span> are subject <span class="keyword">to</span> change <span class="keyword">without</span> notice.</span><br></pre></td></tr></table></figure></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li><li><a href="https://blog.csdn.net/xyxjn/article/details/46906909" target="_blank" rel="noopener">Android Studio 设置内存大小及原理</a></li><li><a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544869-Configuring-JVM-options-and-platform-properties" target="_blank" rel="noopener">Configuring JVM options and platform properties</a></li><li><a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="noopener">JVM系列三:JVM参数设置、分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Android Studio 越用越卡，明明电脑配置不低了。。。&lt;/p&gt;
&lt;h1 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://xichen.pub/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 解决cannot resolve symbol R</title>
    <link href="http://xichen.pub/2018/04/08/2018-04-08-Android-TimeCat-%E8%A7%A3%E5%86%B3cant-resolve-symbol-R/"/>
    <id>http://xichen.pub/2018/04/08/2018-04-08-Android-TimeCat-解决cant-resolve-symbol-R/</id>
    <published>2018-04-08T06:11:00.000Z</published>
    <updated>2018-05-20T03:51:36.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>莫名其妙出现了，鬼知道怎么来的。</p><h1 id="解决方法总结"><a href="#解决方法总结" class="headerlink" title="解决方法总结"></a>解决方法总结</h1><h2 id="1-推荐"><a href="#1-推荐" class="headerlink" title="1. 推荐"></a>1. 推荐</h2><p>解决90%的情况：</p><p><code>Build-&gt;Clean Project</code><br><code>Build-&gt;Rebuild Project</code></p><p><img src="/assets/blog/img/2018-04-8/0.png" width="700"></p><h2 id="2-不常见"><a href="#2-不常见" class="headerlink" title="2. 不常见"></a>2. 不常见</h2><p>Android Studio 有个奇葩的设置。。</p><p><img src="/assets/blog/img/2018-04-8/1.png" width="700"><br><img src="/assets/blog/img/2018-04-8/2.png" width="700"></p><p>欸，来搞一下分配的空间就行了。</p><p>打开ide配置</p><p><img src="/assets/blog/img/2018-04-8/3.png" width="700"></p><p>填入<code>idea.max.intellisense.filesize=99999999</code></p><p><img src="/assets/blog/img/2018-04-8/4.png" width="700"></p><p>清缓存然后重启Android Studio</p><p><img src="/assets/blog/img/2018-04-8/5.png" width="700"><br><img src="/assets/blog/img/2018-04-8/6.png" width="700"></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul><li><a href="https://stackoverflow.com/questions/17054000/cannot-resolve-symbol-r-in-android-studio" target="_blank" rel="noopener">“cannot resolve symbol R” in Android Studio</a></li><li><a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn" target="_blank" rel="noopener">官方-配置 Android Studio</a></li><li><a href="https://stackoverflow.com/questions/23057988/file-size-exceeds-configured-limit-2560000-code-insight-features-not-availabl?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">File size exceeds configured limit (2560000), code insight features not available</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;莫名其妙出现了，鬼知道怎么来的。&lt;/p&gt;
&lt;h1 id=&quot;解决方法总结&quot;&gt;&lt;a href=&quot;#解决方法总结&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://xichen.pub/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>【计算机组成原理】 八大思想之抽象</title>
    <link href="http://xichen.pub/2018/03/13/2018-03-13-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%85%AB%E5%A4%A7%E6%80%9D%E6%83%B3%E4%B9%8B%E6%8A%BD%E8%B1%A1/"/>
    <id>http://xichen.pub/2018/03/13/2018-03-13-计算机组成原理-八大思想之抽象/</id>
    <published>2018-03-12T20:11:00.000Z</published>
    <updated>2018-03-13T15:16:06.817Z</updated>
    
    <content type="html"><![CDATA[<p>计算机领域对我影响最大的思想是抽象。</p><p>何为抽象？抽象就是隐藏具体，暴露功能。用通俗一点的话说，抽象就是你好好做自己的事，以及知道别人能帮你干什么事，至于别人是如何帮你完成的，你没必要知道。</p><p>比如理发就是一个抽象，我想理发，我只需要知道理发师会理发就可以了，至于理发师是怎样理发的，我不用关心。当然，这个例子中我们通常喜欢选最好的理发师，这些理发师虽然都有理发的功能，但理发的速度等是有区别的，这里的区别也就是其实现的不同。甚至一个能理发的机器也是可以的，因为其也有理发的功能，虽然机器理发的具体实现有点奇怪。</p><p>目前数据结构课程中的抽象数据类型其实是抽象的具体实现。比如栈，作为使用者你只需要知道它有push、pop、isEmpty等方法，但它的底层实现到底是array还是linked list，你是不需要知道的。</p><p>抽象思想大大提高了开发者的工作效率。因为开发者只需要关注功能和组装功能，完成需求就行了。用行话就是不用重复造轮子。。。不过要提升自己，最好还是做个创造者，走进轮子内部，学习具体的实现，而不是只会搬砖。。</p><p>事实上，抽象可以放到人类社会的方方面面，上面理发是一个例子。各行各业都是抽象的，比如软件开发，也是提供接口给人类使用；比如平面设计，也是提供一个看的接口；比如学校、人民教师、官员等等，一步一步抽象下去，最后都是提供了为人民服务的接口。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机领域对我影响最大的思想是抽象。&lt;/p&gt;
&lt;p&gt;何为抽象？抽象就是隐藏具体，暴露功能。用通俗一点的话说，抽象就是你好好做自己的事，以及知道别人能帮你干什么事，至于别人是如何帮你完成的，你没必要知道。&lt;/p&gt;
&lt;p&gt;比如理发就是一个抽象，我想理发，我只需要知道理发师会理发
      
    
    </summary>
    
      <category term="计算机组成原理" scheme="http://xichen.pub/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="计算机组成原理" scheme="http://xichen.pub/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
      <category term="八大思想" scheme="http://xichen.pub/tags/%E5%85%AB%E5%A4%A7%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 解决Gradle :Resolve dependencies :classpath的办法</title>
    <link href="http://xichen.pub/2018/03/06/2018-03-06-Android-TimeCat-%E8%A7%A3%E5%86%B3Gradle-Resolvedependencies-classpath%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>http://xichen.pub/2018/03/06/2018-03-06-Android-TimeCat-解决Gradle-Resolvedependencies-classpath的办法/</id>
    <published>2018-03-06T06:11:00.000Z</published>
    <updated>2018-03-13T13:50:42.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>想学习一下别人的成型项目FastHub，结果build失败，gradle信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Executing tasks: [assemble]</span><br><span class="line"></span><br><span class="line">Configuration on demand is an incubating feature.</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project <span class="string">'FastHub'</span>.</span><br><span class="line">&gt; Could not resolve all files <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project :</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line">   &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">     Required by:</span><br><span class="line">         project : &gt; com.apollographql.apollo:gradle-plugin:<span class="number">0.4</span>.1</span><br><span class="line">      &gt; Could not resolve com.android.tools.build:gradle:<span class="number">3.2</span>.0-alpha04.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom'</span>.</span><br><span class="line">               &gt; Connect to dl.google.com:<span class="number">443</span> [dl.google.com/<span class="number">2404</span>:<span class="number">6800</span>:<span class="number">4008</span>:c01:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">88</span>] failed: Connection timed out: connect</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Get more help at https:<span class="comment">//help.gradle.org</span></span><br><span class="line"></span><br><span class="line">BUILD FAILED in <span class="number">3</span>m <span class="number">18</span>s</span><br></pre></td></tr></table></figure><p>首先在<code>设置</code>&gt;<code>proxy</code>里使用系统默认代理，<code>check connection</code> 使用<code>&#39;https://dl.google.com/dl/android/maven2/com/android/tools/build/gradle/3.2.0-alpha04/gradle-3.2.0-alpha04.pom&#39;</code>完美通过，心想应该不是proxy的问题。可就是build失败，提示要么<code>Connection timed out</code>，要么<code>unknown host: dl.google.com</code>，简直逼疯。最后参考了一下，死马当活马医，在参考的文章里找到了解决方案。（我参考的不只下面的3个参考页面，开了一大堆csdn、StackOverflow、github issue的相关网页，都没解决，这3个是我解决时的参考，所以放这里了）</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在项目目录下新建文件<code>gradle.properties</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Project-wide Gradle settings.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more details on how to configure your build environment visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/build_environment.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specifies the JVM arguments used for the daemon process.</span></span><br><span class="line"><span class="comment"># The setting is particularly useful for tweaking memory settings.</span></span><br><span class="line"><span class="comment"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span></span><br><span class="line"><span class="comment"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When configured, Gradle will run in incubating parallel mode.</span></span><br><span class="line"><span class="comment"># This option should only be used with decoupled projects. More details, visit</span></span><br><span class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span></span><br><span class="line"><span class="comment"># org.gradle.parallel=true</span></span><br><span class="line"><span class="comment">#Fri Mar 09 22:26:51 CST 2018</span></span><br><span class="line">systemProp.https.proxyPort=<span class="number">1080</span></span><br><span class="line">systemProp.http.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.https.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.http.proxyPort=<span class="number">1080</span></span><br></pre></td></tr></table></figure><p>内容意思是使用本地127.0.0.1:8000端口进行代理。</p><p>注意：</p><ul><li><code>gradle.properties</code>与<code>app</code>文件夹同级，而不是在<code>app</code>文件夹内。</li><li>记得把<code>shadowsocks</code>挂到<code>1080</code>端口，之前的<code>check connection</code>没卵用。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.csdn.net/fanfangemini/article/details/78310163" target="_blank" rel="noopener">android studio 解决Gradle :Resolve dependencies :classpath的办法</a></li><li><a href="http://blog.csdn.net/zx422359126/article/details/77046462" target="_blank" rel="noopener">Android Studio 解决resolve dependencies ‘classpath’卡住</a></li><li><a href="https://docs.gradle.org/current/userguide/userguide_single.html#sec:accessing_the_web_via_a_proxy" target="_blank" rel="noopener">Accessing the web through a HTTP proxy</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;想学习一下别人的成型项目FastHub，结果build失败，gradle信息如下：&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Gradle" scheme="http://xichen.pub/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 切换软键盘和标签键盘时界面跳动</title>
    <link href="http://xichen.pub/2018/03/06/2018-03-06-Android-TimeCat-%E5%88%87%E6%8D%A2%E8%BD%AF%E9%94%AE%E7%9B%98%E5%92%8C%E6%A0%87%E7%AD%BE%E9%94%AE%E7%9B%98%E6%97%B6%E7%95%8C%E9%9D%A2%E8%B7%B3%E5%8A%A8/"/>
    <id>http://xichen.pub/2018/03/06/2018-03-06-Android-TimeCat-切换软键盘和标签键盘时界面跳动/</id>
    <published>2018-03-06T04:11:00.000Z</published>
    <updated>2018-03-09T06:46:21.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在信息操作页面，点击标签打开对应的选择面板时，输入界面会上下跳动一下。分析一下原因，点击标签按钮后，先收起了软键盘，当前Activity的高度变高，输入框回到了界面底部；再打开选择面板时，输入框又被顶上来，所有看起来点击标签按钮后输入框会上下跳动一下。无论是先隐藏软键盘还是先打开选择面板都会有这个问题</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果这时候去纠结隐藏软键盘和打开面板如何同步的话就会走进一个牛角尖，去处理不同机型之间的兼容性问题了。其实解决思路非常简单，输入框不是会上下跳么，那固定它的位置不就好了？</p><p>举个例子，如果整个界面的根布局是<code>LinearLayout</code>，那么一个控件的位置其实是由它上面所有控件的高度决定的，如果它上面所有控件的高度都不变化，那即使整个<code>Activity</code>的高度变化（开/关软键盘）也不会影响这个控件的位置，也就不会发生跳动了。</p><p>但是我们发现，即使锁定了我们的信息操作页面根布局的高度，切换时还是有小幅度跳动。经过细致的分析冷静思考，我们终于找到了答案。由于我们的信息操作页面是用<code>Activity</code>通过设置弹框样式<code>android:theme=&quot;@style/EditDialogStyle&quot;</code>来实现的，而弹框样式是悬浮着的，会自动调整页面位置，软键盘显示时即使根布局的高度锁定，整个视图仍然会小幅度上移。所以我们的完美解决方案是同时锁定根布局高度和页面位置。</p><p>具体实现我们已经封装在<code>SmartKeyboardManager</code>类中，自动处理锁定高度和锁定页面位置的问题，顺便封装了<code>addKeyboard</code>方法来绑定按钮和相应的面板，并且使用了建造者设计模式。使用时如下调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置软键盘和选择面板的平滑交互</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setKeyboardManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSmartKeyboardManager = <span class="keyword">new</span> SmartKeyboardManager.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setContentView(ll_content_view)</span><br><span class="line">            .setEditText(et_content)</span><br><span class="line">            .addKeyboard(btn_label,   select_label)</span><br><span class="line">            .addKeyboard(btn_date,   select_date)</span><br><span class="line">            .addKeyboard(btn_time,   select_time)</span><br><span class="line">            .addKeyboard(btn_remind, select_remind)</span><br><span class="line">            .addKeyboard(btn_tag,    select_tag)</span><br><span class="line">            .create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/triline3/timecat/blob/eb89b51218b8ca865d3bf0df442cd9c1380cce73/app/src/main/java/com/time/cat/mvp/view/keyboardManager/SmartKeyboardManager.java" target="_blank" rel="noopener">SmartKeyboardManager</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在信息操作页面，点击标签打开对应的选择面板时，输入界面会上下跳动一下。分析一下原因，点击标签按钮后，先收起了软键盘，当前Activity的高
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Keyboard" scheme="http://xichen.pub/tags/Keyboard/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 原地归并排序</title>
    <link href="http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-%E5%8E%9F%E5%9C%B0%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-原地归并排序/</id>
    <published>2018-03-01T04:43:00.000Z</published>
    <updated>2018-03-02T14:52:04.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中有个需求，需要把用户的task排序。</p><p>排序规则为，先按label排，每个label下按创建日期排，task处于完成状态的话覆盖原来label。label有四个，重要紧急，重要不紧急，紧急不重要，不重要不紧急。label加上完成状态共5组。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是先用桶排序分组，再对每个组内用原地归并排序。</p><p>考虑到分组有且只有5组，用桶排序逻辑清晰，易于阅读，效率也高。</p><p>之所以用原地归并排序，是因为我想学(zhuang)习(bi)。用其他排序方法也是可以的，因为单个用户的task不会太多，而且排序放在网络请求之后，各种排序方法的差别不大。</p><h2 id="纯java版原地归并排序"><a href="#纯java版原地归并排序" class="headerlink" title="纯java版原地归并排序"></a>纯java版原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InPlaceMergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i++] = arr[j];</span><br><span class="line">        arr[j--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">        reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r)  &#123;<span class="comment">//原地归并结束的条件。</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = j;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; arr[j] &lt;= arr[i]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">            i += (j-index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, l, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">            inplaceMerge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试用例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯java版非原地归并排序"><a href="#纯java版非原地归并排序" class="headerlink" title="纯java版非原地归并排序"></a>纯java版非原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> p = l;</span><br><span class="line">    <span class="keyword">int</span> q = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[p] &lt;= src[q]) &#123;</span><br><span class="line">            dest[i++] = src[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest[i++] = src[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid) &#123;</span><br><span class="line">        dest[i++] = src[p++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q &lt;= r) &#123;</span><br><span class="line">        dest[i++] = src[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// （原[l, r]范围的内容被复制回原数组）  </span></span><br><span class="line">    i = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= r) &#123;  </span><br><span class="line">        src[i] = dest[i++];  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(dest, src, l, mid);</span><br><span class="line">        mergeSort(dest, src, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(dest, src, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目运用版-：桶排序-原地归并排序"><a href="#项目运用版-：桶排序-原地归并排序" class="headerlink" title="项目运用版 ：桶排序 + 原地归并排序"></a>项目运用版 ：桶排序 + 原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;DBTask&gt; <span class="title">sort</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;DBTask&gt; sortedDBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_0_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_1_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_2_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_3_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; finished_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (DBTask dbTask : taskArrayList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbTask.getIsFinish()) &#123;</span><br><span class="line">            finished_DBTaskList.add(dbTask);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (dbTask.getLabel()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_URGENT:</span><br><span class="line">                label_0_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_1_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_URGENT:</span><br><span class="line">                label_2_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_3_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort2List(label_0_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_1_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_2_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_3_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(finished_DBTaskList, sortedDBTaskList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        DBTask temp = arr.get(i);</span><br><span class="line">        arr.set(i++, arr.get(j));</span><br><span class="line">        arr.set(j--, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">    reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r) &#123; <span class="comment">//原地归并结束的条件。</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; isValid(arr, i, j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = j;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r &amp;&amp; isValid(arr, j, i)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">        i += (j-index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Date date_i = TimeUtil.formatGMTDateStr(arr.get(i).getCreated_datetime());</span><br><span class="line">    Date date_j = TimeUtil.formatGMTDateStr(arr.get(j).getCreated_datetime());</span><br><span class="line">    <span class="keyword">return</span> (date_i != <span class="keyword">null</span> ? date_i.getTime() : <span class="number">0</span>) &lt;= (date_j != <span class="keyword">null</span> ? date_j.getTime() : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, l, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        inplaceMerge(arr, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort2List</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList, ArrayList&lt;DBTask&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(taskArrayList, <span class="number">0</span>, taskArrayList.size()-<span class="number">1</span>);</span><br><span class="line">    result.addAll(taskArrayList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中有个需求，需要把用户的task排序。&lt;/p&gt;
&lt;p&gt;排序规则为，先按label排，每个label下按创建日期排，task处
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Algorithm" scheme="http://xichen.pub/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 给刷新按钮添加旋转动画</title>
    <link href="http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-%E7%BB%99%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB/"/>
    <id>http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-给刷新按钮添加旋转动画/</id>
    <published>2018-03-01T04:11:00.000Z</published>
    <updated>2018-03-02T14:52:03.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本着用户的动作反馈原则，给刷新按钮添加旋转动画。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是给原来的按钮上面覆盖一层view来承担动画效果，点击按钮时，覆盖的view显示并旋转，此时按钮被覆盖处于不可点击状态；当动画完成时隐藏覆盖的view，按钮又可以被点击了。需要计算动画时间来及时把动画停掉，我采用postdelay解决。</p><h2 id="res-menu-main-xml"><a href="#res-menu-main-xml" class="headerlink" title="res/menu/main.xml"></a>res/menu/main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_action_refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:showAsAction</span>=<span class="string">"always"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="res-layout-action-view-xml"><a href="#res-layout-action-view-xml" class="headerlink" title="res/layout/action_view.xml"></a>res/layout/action_view.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minHeight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minWidth</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingEnd</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingStart</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:scaleType</span>=<span class="string">"centerInside"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="res-anim-refresh-xml"><a href="#res-anim-refresh-xml" class="headerlink" title="res/anim/refresh.xml"></a>res/anim/refresh.xml</h2><p>设置一秒绕中心旋转720度的动画，这样动画重复次数取1，不用重复</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/linear_interpolator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MenuItem refreshItem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.refresh:</span><br><span class="line">            showRefreshAnimation(item);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRefreshAnimation</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        hideRefreshAnimation(); <span class="comment">//清空之前的效果</span></span><br><span class="line"></span><br><span class="line">        refreshItem = item;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里使用一个ImageView设置成MenuItem的ActionView，这样我们就可以使用这个ImageView显示旋转动画了</span></span><br><span class="line">        ImageView refreshActionView = (ImageView) getLayoutInflater().inflate(R.layout.action_view, <span class="keyword">null</span>);</span><br><span class="line">        refreshActionView.setImageResource(R.drawable.ic_autorenew_white_24dp);</span><br><span class="line">        refreshItem.setActionView(refreshActionView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示刷新动画</span></span><br><span class="line">        Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.refresh);</span><br><span class="line">        animation.setRepeatMode(Animation.RESTART);</span><br><span class="line">        animation.setRepeatCount(<span class="number">1</span>); <span class="comment">// 这里设置动画重复次数</span></span><br><span class="line">        refreshActionView.startAnimation(animation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                hideRefreshAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>); </span><br><span class="line">        <span class="comment">// 在动画xml文件里定义了动画时长为1秒，而动画重复次数为1次，所以在1秒后停止动画即可防止过度点击。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideRefreshAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refreshItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            View view = refreshItem.getActionView();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.clearAnimation();</span><br><span class="line">                refreshItem.setActionView(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h1><ul><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/anim/refresh.xml" target="_blank" rel="noopener">refresh.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/layout/action_view.xml" target="_blank" rel="noopener">action_view.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/menu/main_menu.xml" target="_blank" rel="noopener">main_menu.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/java/com/time/cat/ui/activity/main/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本着用户的动作反馈原则，给刷新按钮添加旋转动画。&lt;/p&gt;
&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Animation" scheme="http://xichen.pub/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 MVP架构演进</title>
    <link href="http://xichen.pub/2018/02/28/2018-02-28-Android-TimeCat-MVP%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/"/>
    <id>http://xichen.pub/2018/02/28/2018-02-28-Android-TimeCat-MVP架构演进/</id>
    <published>2018-02-27T23:42:00.000Z</published>
    <updated>2018-03-02T14:52:04.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我就想看看MVP怎么搞…</p><h1 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h1><p><a href="https://github.com/triline3/timecat/blob/e0a39a6087bbf7f4ad0e4e8f4e418526e96a4fb7/app/src/main/java/com/time/cat/ui/fragment/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/NotesFragment.java</a></p><p><strong>代码行数</strong>：~290</p><p><strong>文件目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>业务分层，把fragment的初始化分成<code>initView()</code>, <code>initData()</code>, <code>initListener()</code></li><li>功能分区，按<code>View</code>, <code>Data</code>, <code>Listener</code>,在fragment文件内部分区，用注释隔开，简单易懂</li></ul><p><strong>缺点</strong>：</p><ul><li>fragment持有内部类</li><li>数据的刷新需要context, 应该做到数据与状态无关，易于复用</li><li>fragment管的东西太多</li></ul><h1 id="基础MVP架构"><a href="#基础MVP架构" class="headerlink" title="基础MVP架构"></a>基础MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/c5a1a0a932be19b4756bd3c539cfdcaf9f2e22ee/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p><p><strong>代码行数</strong>：~160</p><p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">notes</span><br><span class="line">├── model</span><br><span class="line">│   ├── NotesDataManagerAction.java</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   ├── NotesPresenterAction.java</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>数据（model）和UI（view）解耦，双方都只暴露接口给presenter，由presenter决定数据和UI的互动</li><li>NotesFragment只作为view层，下放业务处理能力给presenter，使代码量大量减少（实际是转移给presenter，没有减少）</li><li>NotesFragment不再持有内部类，加载速度增加</li><li>在数据层去掉context，使data与view相互独立</li></ul><p><strong>缺点</strong>：</p><ul><li>没有绑定view，presenter可能在fragment销毁后仍有其引用，导致内存泄漏</li><li>NotesFragment里除了需要显示的view的初始化就都是接口的具体实现，对新手不友好</li></ul><h1 id="高级MVP架构"><a href="#高级MVP架构" class="headerlink" title="高级MVP架构"></a>高级MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/5fe59fa970011abb1bd06bd82b3911f91fe68575/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p><p><strong>代码行数</strong>：~160</p><p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">notes/</span><br><span class="line">├── model</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>高度抽象，减少代码冗余（比如绑定view）</li><li>使用代理模式将绑定和解绑view的操作抽离出来</li><li>使用工厂模式和注解在上层统一创建Presenter</li><li>将Presenter的创建过程放入到获取Presenter的方法中，如果存在返回，不存在创建，保证Presenter不会为空，保证在使用的时候再创建，节省内存资源</li><li>删除不必要的接口文件，用分区的方法突出类内可调用的业务处理函数</li><li>总的来说就是耐操</li></ul><p><strong>缺点</strong>：</p><ul><li>新手不友好，依赖注入设计模式等操作有一定的复杂度</li><li>MVP固有缺点：每条逻辑都要有完全不同的presenter来管理</li><li>添加多个presenter麻烦</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;我就想看看MVP怎么搞…&lt;/p&gt;
&lt;h1 id=&quot;分层架构&quot;&gt;&lt;a href=&quot;#分层架构&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="MVP" scheme="http://xichen.pub/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RecyclerView的卡顿问题</title>
    <link href="http://xichen.pub/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView%E7%9A%84%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/"/>
    <id>http://xichen.pub/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView的卡顿问题/</id>
    <published>2018-02-27T00:12:00.000Z</published>
    <updated>2018-03-02T14:52:04.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中大量使用了<code>RecycleView</code>和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。</p><h1 id="RecyclerView为什么会卡"><a href="#RecyclerView为什么会卡" class="headerlink" title="RecyclerView为什么会卡"></a>RecyclerView为什么会卡</h1><p><code>RecyclerView</code>作为v7包的新控件，自从推出就广受Android Developer们欢迎，实际上它已经取代了ListView和GridView两位老前辈的地位。然而不少亲们想必也已经发现了：没有优化过的Recycler性能很poor。上一篇博主使用的item也仅仅是一个图两串字而已，结果一滑动就卡的要命，不能忍！<br>那么why？回想在用<code>ListView</code>和<code>GridView</code>的<code>adapter</code>时，我们是用一种叫<code>ViewHolder</code>的自定义类（容器）来实现优化的，而<code>RecyclerView</code>的特性之一就是强制你使用它的<code>RecyclerView.ViewHolder</code>。可是，<code>RecyclerView.ViewHolder</code>要比我们写的那个单纯的容器复杂多了（源码里算上注释有大约500行），与<code>RecyclerView.Adapter</code>的联系也是千丝万缕。</p><p>按stackoverflow上面比较通俗的解释：<code>RecyclerView.Adapter</code>里面的<code>onCreateViewHolder()</code>方法和<code>onBindViewHolder()</code>方法对时间都非常敏感。类似I/O读写，Bitmap解码一类的耗时操作，最好不要在它们里面进行。</p><h1 id="如何解决卡顿问题"><a href="#如何解决卡顿问题" class="headerlink" title="如何解决卡顿问题"></a>如何解决卡顿问题</h1><p>首先当然得优化你的item，合理运用<code>&lt;include&gt;</code>，<code>&lt;merge&gt;</code>，<code>&lt;ViewStub&gt;</code>等标签，使布局层次尽量少——其实<code>ListView</code>和<code>GridView</code>里你也应该这么做，应该当成是一种写UI的习惯。</p><p>其次就是灵活使用各种第三方库，去完成各种耗时操作，比如通过<code>Glide</code>或者是<code>Picasso</code>加载图片。优秀的开源库在性能上往往都考虑得很仔细。</p><p>最后的问题来了，如果只想写一个小demo，不愿大张旗鼓怎么办？如果即便一般的第三方库也不好解决问题，比如上一篇那个该死的loadIcon()方法返回的是一个Drawable对象，Glide和Picasso都没法直接处理，转码又等于添了个耗时任务，那怎么办？<br>真正的app管理应用，应该引入UIL或者Picasso一类的加载库进行图标加载<br>（在此原谅博主没仔细敲代码，就信口开河了）<br>答案就是，<strong>想法在你setAdapter之前就把任务给完成</strong>。</p><h1 id="TimeCat-实例"><a href="#TimeCat-实例" class="headerlink" title="TimeCat 实例"></a>TimeCat 实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    context = getContext();</span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_notes, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    mStackView = view.findViewById(R.id.notes_csv);   <span class="comment">// 初始化RecycleView</span></span><br><span class="line">    cardStackViewAdapter = <span class="keyword">new</span> CardStackViewAdapter(context); <span class="comment">// 初始化Adapter</span></span><br><span class="line">    refreshData();  <span class="comment">// 刷新一次数据</span></span><br><span class="line">    mStackView.setAdapter(cardStackViewAdapter);  <span class="comment">// 在数据准备好后再setAdapter()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中大量使用了&lt;code&gt;RecycleView&lt;/code&gt;和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。&lt;/p
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RecycleView" scheme="http://xichen.pub/tags/RecycleView/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 当RxJava遇到Retrofit（二）api注解@Path, @Url等</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%BA%8C%EF%BC%89api%E6%B3%A8%E8%A7%A3@Path,%20@Url%E7%AD%89/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-当RxJava遇到Retrofit（二）api注解@Path, @Url等/</id>
    <published>2018-02-26T08:12:00.000Z</published>
    <updated>2018-03-02T14:52:04.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>下面分为<code>GET</code>、<code>POST</code>、<code>DELETE</code>还有<code>PUT</code>的请求，说明<code>@Path</code>、<code>@Query</code>、<code>@QueryMap</code>、<code>@Body</code>、<code>@Field</code>的用法。</p><h1 id="初始化Retrofit"><a href="#初始化Retrofit" class="headerlink" title="初始化Retrofit"></a>初始化Retrofit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String BASE_URL = <span class="string">"http://192.168.88.105:8000/api/"</span>;</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder() </span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><h2 id="样式1（一个简单的get请求）"><a href="#样式1（一个简单的get请求）" class="headerlink" title="样式1（一个简单的get请求）"></a>样式1（一个简单的get请求）</h2><p><a href="http://192.168.88.105:8000/api/News" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="样式2（URL中有参数）"><a href="#样式2（URL中有参数）" class="headerlink" title="样式2（URL中有参数）"></a>样式2（URL中有参数）</h2><p><a href="http://192.168.88.105:8000/api/News/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure></p><p>或<br><a href="http://192.168.88.105:8000/api/News/1/类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1/类型1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}/{类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}/{类型}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Path</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（参数在URL问号之后）"><a href="#样式3（参数在URL问号之后）" class="headerlink" title="样式3（参数在URL问号之后）"></a>样式3（参数在URL问号之后）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure><p>或<br><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Query</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式4（多个参数在URL问号之后，且个数不确定）"><a href="#样式4（多个参数在URL问号之后，且个数不确定）" class="headerlink" title="样式4（多个参数在URL问号之后，且个数不确定）"></a>样式4（多个参数在URL问号之后，且个数不确定）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a>…<br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a>…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@QueryMap Map&lt;String, String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          @Query(<span class="string">"newsId"</span>)</span> String newsId，</span></span><br><span class="line"><span class="function">          @QueryMap Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><h2 id="样式1（需要补全URL，post的数据只有一条reason）"><a href="#样式1（需要补全URL，post的数据只有一条reason）" class="headerlink" title="样式1（需要补全URL，post的数据只有一条reason）"></a>样式1（需要补全URL，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）"><a href="#样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）"></a>样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（需要补全URL，问号后加入access-token，post一个body（对象））"><a href="#样式3（需要补全URL，问号后加入access-token，post一个body（对象））" class="headerlink" title="样式3（需要补全URL，问号后加入access_token，post一个body（对象））"></a>样式3（需要补全URL，问号后加入access_token，post一个body（对象））</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body CommentBean bean)</span>;</span><br></pre></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="样式1（需要补全URL）"><a href="#样式1（需要补全URL）" class="headerlink" title="样式1（需要补全URL）"></a>样式1（需要补全URL）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式2（需要补全URL，问号后加入access-token）"><a href="#样式2（需要补全URL，问号后加入access-token）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token）"></a>样式2（需要补全URL，问号后加入access_token）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId，</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（带有body）"><a href="#样式3（带有body）" class="headerlink" title="样式3（带有body）"></a>样式3（带有body）</h2><p><a href="http://192.168.88.105:8000/api/Comments" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HTTP</span>(method = <span class="string">"DELETE"</span>,path = <span class="string">"Comments"</span>,hasBody = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteCommont</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Body CommentBody body</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line">CommentBody：需要提交的内容，与Post中的Body相同</span><br></pre></td></tr></table></figure><h1 id="PUT（这个请求很少用到，例子就写一个）"><a href="#PUT（这个请求很少用到，例子就写一个）" class="headerlink" title="PUT（这个请求很少用到，例子就写一个）"></a>PUT（这个请求很少用到，例子就写一个）</h1><p><a href="http://192.168.88.105:8000/api/Accounts/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/1</a><br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PUT</span>(<span class="string">"Accounts/&#123;accountId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ExtrasBean&gt; <span class="title">updateExtras</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"accountId"</span>)</span> String accountId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body ExtrasBean bean)</span>;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>@Path：所有在网址中的参数（URL的问号前面），如：<br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></li><li>@Query：URL问号后面的参数，如：<br><a href="http://192.168.88.105:8000/api/Comments?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments?access_token={access_token}</a></li><li>@QueryMap：相当于多个@Query</li><li>@Field：用于POST请求，提交单个数据</li><li>@Body：相当于多个@Field，以对象的形式提交</li></ul><blockquote><p>Tips</p><ul><li>Tips1 使用@Field时记得添加@FormUrlEncoded</li><li>Tips2 若需要重新定义接口地址，可以使用@Url，将地址以参数的形式传入即可。如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; getActivityList(</span><br><span class="line">        <span class="meta">@Url</span> String url,</span><br><span class="line">        <span class="meta">@QueryMap</span> Map&lt;String, String&gt; map);</span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; call = service.getActivityList(</span><br><span class="line">            <span class="string">"http://115.159.198.162:3001/api/ActivitySubjects"</span>, map);</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/7687365aa946" target="_blank" rel="noopener">https://www.jianshu.com/p/7687365aa946</a><br><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;下面分为&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;还有&lt;code&gt;PUT&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://xichen.pub/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 当RxJava遇到Retrofit（一）Retrofit入门</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%B8%80%EF%BC%89Retrofit%E5%85%A5%E9%97%A8/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-当RxJava遇到Retrofit（一）Retrofit入门/</id>
    <published>2018-02-26T07:37:00.000Z</published>
    <updated>2018-03-02T14:52:03.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比<code>HttpClient</code>以及<code>HttpUrlConnection</code>等，略懂android开发的估计无人不知<code>android-async-http</code>或者<code>volley</code>啥的，再往上走，有<code>okhttp</code>等。但是最后我们选择了一个新的http请求框架，<code>Retrofit</code>。</p><h1 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h1><p><code>retrofit</code>是<code>Square</code>公司出品的，为android和java提供一个类型安全的Http网络请求库，这里是官网地址。</p><p><code>Retrofit</code>的优点</p><ol><li>使用注解来描述http请求</li><li>URL参数的替换和query参数的支持</li><li>对象转化为请求体（如：JSON，protocol buffers等）</li><li>多重请求体和文件上传<br>以上都是官网描述</li></ol><h1 id="TimeCat中的实例"><a href="#TimeCat中的实例" class="headerlink" title="TimeCat中的实例"></a>TimeCat中的实例</h1><p>定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoteService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Headers</span>(&#123;<span class="string">"Content-Type: application/json"</span>, <span class="string">"Accept: application/json"</span>&#125;)</span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Note&gt; <span class="title">createNote</span><span class="params">(@Body Note note)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>辅助使用Retrofit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetrofitHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://192.168.88.105:8000/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient mOkHttpClient;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initOkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OKHttpClient</span></span><br><span class="line"><span class="comment">     * 设置缓存</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     * 设置打印日志</span></span><br><span class="line"><span class="comment">     * 设置UA拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor(<span class="keyword">new</span> Log());</span><br><span class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RetrofitHelper.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置Http缓存</span></span><br><span class="line">                    Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(TimeCatApp.getInstance().getCacheDir(), <span class="string">"HttpCache"</span>), <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>);</span><br><span class="line">                    mOkHttpClient = <span class="keyword">new</span> OkHttpClient.Builder().cache(cache).addInterceptor(interceptor).retryOnConnectionFailure(<span class="keyword">true</span>).connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS).writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS).readTimeout(<span class="number">20</span>, TimeUnit.SECONDS).build();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoteService <span class="title">getNoteService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .client(mOkHttpClient)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(NoteService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合RxJava发起网络请求只需要<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RetrofitHelper.getNoteService().createNote(note) <span class="comment">//获取Observable对象</span></span><br><span class="line">        .compose(<span class="keyword">this</span>.bindToLifecycle())         <span class="comment">// 绑定到生命周期</span></span><br><span class="line">        .subscribeOn(Schedulers.newThread())     <span class="comment">//请求在新的线程中执行</span></span><br><span class="line">        .observeOn(Schedulers.io())              <span class="comment">//请求完成后在io线程中执行</span></span><br><span class="line">        .doOnNext(<span class="keyword">new</span> Action1&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                DB.notes().saveAndFireEvent(ModelUtil.toDBNote(note)); <span class="comment">// 进行数据读写，甚至可以进行文件读写</span></span><br><span class="line">                Log.e(TAG, <span class="string">"保存任务信息到本地"</span> + note.toString()); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//最后在主线程中执行</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                ToastUtil.show(<span class="string">"添加[ 任务 ]失败"</span>);</span><br><span class="line">                Log.e(TAG, e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                ToastUtil.show(<span class="string">"成功添加[ 任务 ]:"</span> + dialog_add_task_et_content.getText().toString());</span><br><span class="line">                finish();</span><br><span class="line">                Log.e(TAG, <span class="string">"请求成功"</span> + note.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="使用的套路"><a href="#使用的套路" class="headerlink" title="使用的套路"></a>使用的套路</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个没什么好说的，没有网络权限什么都做不了</p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure><p>这里几个库的含义是：我们使用<code>retrofit2.0</code>去进行网络请求操作，同时我们使用<code>gson</code>去进行数据解析，并且结合<code>rxjava</code>去进行相应的代码编写</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .client(mOkHttpClient)</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>这段就是使用<code>RxJava</code>，利用<code>gson</code>做解析（这边解析器可以设置注入<code>Jackson</code>之类的，甚至可以自定义），http引擎框架是<code>okhttp</code></p><h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p><code>Retrofit</code>需要通过注解请求方法以及请求参数来表明应该如何去进行一个Http请求，目前内置了5种注解方式<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>以及<code>HEAD</code>。同时资源的相对URL要在注解中明确的指出。比如请求方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br></pre></td></tr></table></figure></p><p><code>@POST(&quot;/notes/&quot;)</code>的意思是，用<code>POST</code>方法，向<code>BASE_URL + &#39;notes/&#39;</code> 即<code>http://192.168.88.105:8000/notes/</code>发起请求。注意两个斜杆，左边的<code>/</code>代表在<code>BASE_URL</code>的基础上，右边的<code>/</code>表示<code>notes</code>的实际接口，去掉其中一个都会导致不同的结果。</p><p>更多api的写法请看<a href="">下一篇</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比&lt;code&gt;HttpClient&lt;/co
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://xichen.pub/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（四）线程控制 —— Scheduler</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%20%E2%80%94%E2%80%94%20Scheduler/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（四）线程控制 —— Scheduler/</id>
    <published>2018-02-26T06:59:00.000Z</published>
    <updated>2018-03-02T14:52:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，事件的发起和消费都是在同一个线程中执行，也就是说之前我们使用的RxJava是同步的～～～</p><p>观察者模式本身的目的不就是后台处理，将处理结果回调给前台？这同步的是要哪样？所以，这篇为大家介绍RxJava的重要的概念——<code>Scheduler</code></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RxJava在不指定线程的情况下，发起时间和消费时间默认使用当前线程。所以之前的做法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>因为是在主线程中发起的，所以不管中间 <code>map</code>的处理还是<code>Action1</code>的执行都是在主线程中进行的。若是<code>map</code>中有耗时的操作(比如网络请求)，这样会导致主线程拥塞，这并不是我们想看到的。</p><h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><p><code>Scheduler</code>：线程控制器，可以指定每一段代码在什么样的线程中执行。<br>模拟一个需求：新的线程发起事件，在主线程中消费<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rxJavaTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.just(<span class="string">"Hello"</span>, <span class="string">"Word"</span>)</span><br><span class="line">            .subscribeOn(Schedulers.newThread())<span class="comment">//指定 subscribe() 发生在新的线程</span></span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    Log.i(TAG, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p><p>上面用到了<code>subscribeOn()</code>，和<code>observeOn()</code>方法来指定发生的线程和消费的线程。</p><ul><li><code>subscribeOn()</code>：指定subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</li><li><code>observeOn()</code>：指定Subscriber 所运行在的线程。或者叫做事件消费的线程。</li></ul><p>以及参数Scheduler，RxJava已经为我们提供了一下几个Scheduler</p><ul><li><code>Schedulers.immediate()</code>：直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</li><li><code>Schedulers.newThread()</code>：总是启用新线程，并在新线程执行操作。</li><li><code>Schedulers.io()</code>： I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 <code>newThread()</code> 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li><li><code>Schedulers.computation()</code>：计算所使用的 <code>Scheduler</code>。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 <code>computation()</code> 中，否则 I/O 操作的等待时间会浪费 CPU。</li><li><code>AndroidSchedulers.mainThread()</code>：它指定的操作将在 Android 主线程运行。</li></ul><h1 id="多次切换线程"><a href="#多次切换线程" class="headerlink" title="多次切换线程"></a>多次切换线程</h1><p>看完上面的介绍想必对RxJava线程的切换有了一些理解，上面只是对事件的发起和消费制定了线程。如果中间有<code>map</code>之类的操作呢？是否可以实现发起的线程在新线程中，<code>map</code>的处理在IO线程，最后的消费在主线程中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.newThread())<span class="comment">//指定：在新的线程中发起</span></span><br><span class="line">        .observeOn(Schedulers.io())         <span class="comment">//指定：在io线程中处理</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> handleString(s);       <span class="comment">//处理数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定：在主线程中处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                show(s);                       <span class="comment">//消费事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到<code>observeOn()</code>被调用了两次，分别指定了<code>map</code>的处理的现场和消费事件<code>show(s)</code>的线程。</p><p>若将<code>observeOn(AndroidSchedulers.mainThread())</code>去掉会怎么样？不为消费事件<code>show(s)</code>指定线程后，<code>show(s)</code>会在那里执行？<br>其实，<code>observeOn()</code>指定的是它之后的操作所在的线程。也就是说，<code>map</code>的处理和最后的消费事件<code>show(s)</code>都会在io线程中执行。<br><code>observeOn()</code>可以多次使用，可以随意变换线程</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>学会线程控制后才算是真正学会了使用RxJava。RxJava的使用十分灵活，想要对其熟悉使用只有一个办法，那就是多用啦，熟能生巧。</p><p>参考：<br><a href="https://www.jianshu.com/p/ecfb9d68d2a2" target="_blank" rel="noopener">https://www.jianshu.com/p/ecfb9d68d2a2</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（三）对象转换器——map、flatMap</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%99%A8%E2%80%94%E2%80%94map%E3%80%81flatMap/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（三）对象转换器——map、flatMap/</id>
    <published>2018-02-26T06:57:00.000Z</published>
    <updated>2018-03-02T14:52:04.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>在使用<code>map</code>之前要先说道一个接口：<code>Func1</code>，<code>Func1</code>和上一篇提到的<code>Action1</code>相似。<code>Func1</code> 和 <code>Action</code>的区别在于， <code>Func1</code> 包装的是有返回值的方法。<br>接下来就是map的用法，看代码更直观点；</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>得到多个Student对象中的name，保存到nameList中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到<code>Observable</code>中原来的参数是<code>Student对象</code>，而最后我们需要的是<code>name</code>，这里使用了<code>map</code>来实现这一转换的过程。当然，<code>map</code>可以多次使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多次使用map，想用几个用几个</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;<span class="comment">//将String类型的转化为Integer类型的哈希码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;<span class="comment">//将转化后得到的Integer类型的哈希码再转化为String类型</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer.intValue() + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h1><p><code>flatMap</code>是一个比教难理解的一个转换，在这里先假设一个需求，需要打印多个<code>Student</code>所学的课程。这跟之前获取<code>Student</code>的<code>name</code>又不同了，这里先确定一下关系，一个<code>Student</code>类中只有一个<code>name</code>，而一个<code>Student</code>却有多门课程（Course），<code>Student</code>我们可以理解成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 学生类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; coursesList;<span class="comment">//所修的课程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 课程类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//课程名</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果使用<code>map</code>来实现打印所有学生所修个课程名，实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Action1&lt;List&lt;Course&gt;&gt; action1 = <span class="keyword">new</span> Action1&lt;List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历courses，输出cuouses的name</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++)&#123;</span><br><span class="line">            Log.i(TAG, courses.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//返回coursesList</span></span><br><span class="line">                <span class="keyword">return</span> student.getCoursesList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(action1);</span><br></pre></td></tr></table></figure></p><p>可以看到，在<code>Action1</code>中出现了for来循环打印课程名，使用<code>RxJava</code>就是为了剔除这样的嵌套结构，使得整体的逻辑性更强。这时候就可以使用<code>flatMap</code>了，使用<code>flatMap</code>实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(student.getCoursesList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Course&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, course.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这样就实现了跟上面代码一样的效果，看起来有点懵？确实，<code>flatMap</code>理解起来有点绕，刚接触<code>flatMap</code>的时候我也是懵逼一个。下面我将<code>flatMap</code>的示意图，希望能帮助理解：</p><p>flatMap示意图</p><p>由上图可以看出<code>Student1</code>、<code>Student2</code>经过<code>flatMap</code>后，按顺序依次经历了<code>Observable1</code>、<code>Observable2</code>，分别转化为<code>Course</code>。最后按顺序得到<code>Course1</code>、<code>Course2</code>、<code>Course3</code>、<code>Course4</code>、<code>Course5</code>、<code>Course6</code>，其中1-3由Student1得到，4-6由Student2得到。<br>结合代码和示意图，是不是对flatMap有了一定的理解。</p><blockquote><p><strong>注意</strong>：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。也就说，传入的顺序可能跟出来的顺序不一样。<br>如果要保证顺的的话，可以使用concatMap。</p></blockquote><p>#其他操作符</p><p>除了<code>map</code>和<code>flatMap</code>之外，还有其他操作符以供使用。这里就不一一列举他们的用法了，其他常用的操作符如下：</p><ul><li><code>filter</code>：集合进行过滤</li><li><code>each</code>：遍历集合</li><li><code>take</code>：取出集合中的前几个</li><li><code>skip</code>：跳过前几个元素</li></ul><p><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/32209660" target="_blank" rel="noopener">更多操作符</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/52cd2d514528" target="_blank" rel="noopener">https://www.jianshu.com/p/52cd2d514528</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h1&gt;&lt;p&gt;在使用&lt;code&gt;map&lt;/code&gt;之前要先说道一个接口：&lt;code&gt;Func1&lt;/code&gt;，&lt;code&gt;Func1&lt;/code
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（二）Action</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89Action/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（二）Action/</id>
    <published>2018-02-26T06:44:00.000Z</published>
    <updated>2018-03-02T14:52:04.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>例：分别打印”Hello”、” World”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到，我们这里只用了<code>onNext(obj)</code>，还有两个重写的<code>onError(error)</code>和<code>onCompleted()</code>并没有用到，这样导致我们多出了几行根本用不到的代码。于是就想能不能只写我们使用到的，其他几个没用到的就不写，这样的代码看着才舒服。接下来就是使用本次的主角<code>Action</code>来代替<code>Subscriber</code></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>上部分的代码使用Action来代替Subscriber得到的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>舒服多了有没有！！</p><h2 id="什么是Action"><a href="#什么是Action" class="headerlink" title="什么是Action"></a>什么是Action</h2><p><code>Action</code>是<code>RxJava</code> 的一个接口，常用的有<code>Action0</code>和<code>Action1</code>。<br><code>Action0</code>： 它只有一个方法 <code>call()</code>，这个方法是无参无返回值的；由于 <code>onCompleted()</code> 方法也是无参无返回值的，因此 <code>Action0</code> 可以被当成一个包装对象，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。<br><code>Ation1</code>：它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数；与 <code>Action0</code> 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 <code>Action1</code> 可以将 <code>onNext(obj)</code>和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调</p><h2 id="Action的使用"><a href="#Action的使用" class="headerlink" title="Action的使用"></a>Action的使用</h2><p>定义三个对象，分别打包<code>onNext(obj)</code>、<code>onError(error)</code>、<code>onCompleted()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line"><span class="comment">//处理onNext()中的内容</span></span><br><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onError()中的内容</span></span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onCompleted()中的内容</span></span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来使用<code>subscribe</code>重载的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 onNextAction 来定义 onNext()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction);</span><br><span class="line"><span class="comment">//使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">//使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure></p><p>根据实际情况使用以上的方法处理<code>onNext(obj)</code>、<code>onError(error)</code> 、<code>onCompleted()</code>的回调。<br>现在有个疑问，为什么使用<code>Action</code>也能达到使用<code>Subscriber</code>的结果？进<code>subscribe(Action1 onNext)</code>的源码看看。</p><p><img src="/assets/blog/img/2018-02-26/31.png" width="700"></p><p>还以为有多高深，原来就是把<code>Action</code>对象转化成对应的<code>Subscriber</code>对象了。这样就不难理解为什么可以使用<code>Action</code>来代替<code>Subscriber</code>了。</p><h2 id="重写打印”Hello”、”-Wrod”的方法"><a href="#重写打印”Hello”、”-Wrod”的方法" class="headerlink" title="重写打印”Hello”、” Wrod”的方法"></a>重写打印”Hello”、” Wrod”的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>相比第一篇那冗长的代码，现在感觉怎么样？还是觉得代码多？确实，如果只是打印几个字符串确实还是略微复杂。不急，RxJava还有其他功能呢。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Action</code>的使用为我们减少了不必要的代码，使得写出的代码看上去更加得简洁。不过就目前来看<code>RxJava</code>还是没有什么优势值得我们去使用，下一篇我还会介绍更多<code>RxJava</code>的用法。慢慢得，你就会发现使用<code>RxJava</code>写出来的代码看上去真的很漂亮。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/c7a995f3763c" target="_blank" rel="noopener">https://www.jianshu.com/p/c7a995f3763c</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;例：分别打印”Hello”、” World”&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（一）基本用法</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（一）基本用法/</id>
    <published>2018-02-26T05:45:00.000Z</published>
    <updated>2018-03-02T14:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步处理。异步的话我们一般有现成的 AsyncTask / Handler / View.postdelay / … , 不过，今天我们用RxJava。RxJava的本质是<strong>异步处理</strong>，RxJava的好处就在于它的简洁性，逻辑简单的时候看不出RxJava的优势，想必大家都知道在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。这时候RxJava的优势就来了，<strong>随着程序逻辑变得越来越复杂，它依然能够保持简洁</strong>。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>首先要先介绍一下观察者模式（可能比喻的不够恰当，意思到了就好）；</p><ul><li><strong>观察者</strong>：监视着被观察者的行为，当被观察者某个状态改变的时候会通知观察者，观察者会执行对应的操作；</li><li><strong>被观察者</strong>：被监视的对象，当某个状态改变的时候会通知观察者；</li><li><strong>订阅（或注册）</strong>：将观察者和被观察者建立联系。</li></ul><p>（很乱？来个栗子？）<br>这里举一个我个常用的例子，点击<code>Button</code>后触发<code>OnClickListener</code><br>中的<code>onClick()</code>事件。在这个事件中他们的角色分别如下：</p><ul><li><strong>观察者</strong>：OnClickListener；</li><li><strong>被观察者</strong>：Button；</li><li><strong>订阅（或注册）</strong>：setOnClickListener()。</li></ul><h1 id="RxJava中的观察者模式"><a href="#RxJava中的观察者模式" class="headerlink" title="RxJava中的观察者模式"></a>RxJava中的观察者模式</h1><p>在上面介绍了观察者模式，这里也将RxJava中的三个角色进行一下角色分配</p><ul><li><strong>观察者</strong>：Observer；</li><li><strong>被观察者</strong>：Observable；</li><li><strong>订阅（或注册）</strong>：subscribe()。</li></ul><h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p><code>Observer</code> 即观察者，它决定事件触发的时候将有怎样的行为。</p><p>RxJava 观察者的事件回调方法除了普通事件<code>onNext()</code>（相当于<code>onClick()/onEvent()</code>）之外，还定义了两个特殊的事件：<code>onCompleted()</code>和<code>onError()</code>。</p><ul><li><code>onCompleted()</code>: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的<code>onNext()</code>发出时，需要触发<code>onCompleted()</code>方法作为标志。</li><li><code>onError()</code>: 事件队列异常。在事件处理过程中出异常时，<code>onError()</code>会被触发，同时队列自动终止，不允许再有事件发出。</li></ul><p>在一个正确运行的事件序列中,<code>onCompleted()</code>和<code>onError()</code>有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code>:和<code>onError()</code>二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p><h2 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h2><p><code>Observable</code> 即被观察者，它决定什么时候触发事件以及触发怎样的事件。可以使用<code>create()</code>、<code>just(T...)</code>、<code>from(T[])</code>或<code>from(Iterable&lt;? extends T&gt;)</code>来创建一个 <code>Observable</code> ，并为它定义事件触发规则。</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>创建了<code>Observable</code>和<code>Observer</code>之后，再用<code>subscribe()</code>方法将它们联结起来</p><h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>例：打印字符串</p><ol><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava:1.0.14'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure></li><li><p>依次创建观察者，被观察者，订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用Observable.create()创建被观察者</span></span><br><span class="line">Observable observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Wrold"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//订阅</span></span><br><span class="line">observable1.subscribe(observer);</span><br></pre></td></tr></table></figure></li></ol><p>以上用到的都是rx包里面的，别用错了！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.Observer;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br></pre></td></tr></table></figure></p><p>上面完成了一次Rxjava的基本使用，会在log里显示<code>Hello World</code>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/19cac3c5b106" target="_blank" rel="noopener">https://www.jianshu.com/p/19cac3c5b106</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 Android抽象布局——include、merge 、ViewStub</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android%E6%8A%BD%E8%B1%A1%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94include%E3%80%81merge%20%E3%80%81ViewStub/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android抽象布局——include、merge 、ViewStub/</id>
    <published>2018-02-26T03:58:00.000Z</published>
    <updated>2018-03-02T14:52:03.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在布局优化中，Androi的官方提到了这三种布局<code>&lt;include /&gt;</code>、<code>&lt;merge /&gt;</code>、<code>&lt;ViewStub /&gt;</code>，并介绍了这三种布局各有的优势，下面也是简单说一下他们的优势，以及怎么使用，记下来权当做笔记。</p><h1 id="布局重用-lt-include-gt"><a href="#布局重用-lt-include-gt" class="headerlink" title="布局重用&lt;include /&gt;"></a>布局重用<code>&lt;include /&gt;</code></h1><p><code>&lt;include /&gt;</code>标签能够重用布局文件，简单的使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/app_bg"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/titlebar"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"@string/hello"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    ...  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li><code>&lt;include /&gt;</code>标签可以使用单独的layout属性，这个也是必须使用的。</li><li>可以使用其他属性。<code>&lt;include /&gt;</code>标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖，解决方案。</li><li>在<code>include</code>标签中所有的<code>android:layout_*</code>都是有效的，前提是必须要写<code>layout_width</code>和<code>layout_height</code>两个属性。</li><li>布局中可以包含两个相同的<code>include</code>标签，引用时可以使用如下方法解决（参考）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View bookmarks_container_2 = findViewById(R.id.bookmarks_favourite);   </span><br><span class="line">  </span><br><span class="line">bookmarks_container_2.findViewById(R.id.bookmarks_list);</span><br></pre></td></tr></table></figure></li></ol><h1 id="减少视图层级-lt-merge-gt"><a href="#减少视图层级-lt-merge-gt" class="headerlink" title="减少视图层级&lt;merge /&gt;"></a>减少视图层级<code>&lt;merge /&gt;</code></h1><p><code>&lt;merge/&gt;</code>标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级，优化UI。<code>&lt;merge/&gt;</code>多用于替换FrameLayout或者当一个布局包含另一个时，<code>&lt;merge/&gt;</code>标签消除视图层次结构中多余的视图组。例如你的主布局文件是垂直布局，引入了一个垂直布局的<code>include</code>，这是如果<code>include</code>布局使用的<code>LinearLayout</code>就没意义了，使用的话反而减慢你的UI表现。这时可以使用<code>&lt;merge/&gt;</code>标签优化。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/add"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/delete"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在，当你添加该布局文件时(使用<code>&lt;include /&gt;</code>标签)，系统忽略<code>&lt;merge /&gt;</code>节点并且直接添加两个Button。更多<code>&lt;merge /&gt;</code>介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize by merging》</a></p><h1 id="需要时使用-lt-ViewStub-gt"><a href="#需要时使用-lt-ViewStub-gt" class="headerlink" title="需要时使用&lt;ViewStub /&gt;"></a>需要时使用<code>&lt;ViewStub /&gt;</code></h1><p><code>&lt;ViewStub /&gt;</code>标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。各种不常用的布局想进度条、显示错误消息等可以使用<code>&lt;ViewStub /&gt;</code>标签，以减少内存使用量，加快渲染速度。<code>&lt;ViewStub /&gt;</code>是一个<code>不可见的，大小为0的View</code>。<code>&lt;ViewStub /&gt;</code>标签使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/stub_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:inflatedId</span>=<span class="string">"@+id/panel_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout</span>=<span class="string">"@layout/progress_overlay"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>当你想加载布局时，可以使用下面其中一种方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub) findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);  </span><br><span class="line"><span class="comment">// or  </span></span><br><span class="line">View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();</span><br></pre></td></tr></table></figure></p><p>当调用<code>inflate()</code>函数的时候，<code>ViewStub</code>被引用的资源替代，并且返回引用的view。 这样程序可以直接得到引用的<code>view</code>而不用再次调用函数<code>findViewById()</code>来查找了。<br>注：<code>ViewStub</code>目前有个缺陷就是还不支持 <code>&lt;merge /&gt;</code> 标签。</p><p>更多<code>&lt;ViewStub /&gt;</code>标签介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-with.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize with stubs》</a></p><p>参考：<br><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/reusing-layouts.html</a><br><a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html</a><br><a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint</a><br><a href="http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html</a><br><a href="http://developer.android.com/training/improving-layouts/loading-ondemand.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/loading-ondemand.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在布局优化中，Androi的官方提到了这三种布局&lt;code&gt;&amp;lt;include /&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;merge
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="xml" scheme="http://xichen.pub/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（三）封装</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%81%E8%A3%85/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（三）封装/</id>
    <published>2018-02-26T03:02:00.000Z</published>
    <updated>2018-03-02T14:52:03.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>封装后方便对 OrmLite 的使用</p><p><a href="https://github.com/triline3/timecat/blob/master/app/src/main/java/com/time/cat/database/GenericDao.java" target="_blank" rel="noopener">见项目</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（二）高级操作</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（二）高级操作/</id>
    <published>2018-02-25T23:02:00.000Z</published>
    <updated>2018-03-02T14:52:03.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>这篇文章主要介绍 <code>OrmLite 框架</code>中使用到的一些查询方法.</p><h1 id="WEHRE子句"><a href="#WEHRE子句" class="headerlink" title="WEHRE子句"></a>WEHRE子句</h1><p>在SQL语句中，经常会用到where语句，where 进行条件筛选。<br><code>dao.queryBuilder.()where()</code>方法返回一个<code>where对象</code>，<code>where</code>中提供了很多方法来进行条件筛选,下边逐个讲<code>where</code>中的方法。</p><p>方法 ：eq(columnName,value) 等于（=）equals<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id = 2</code></p><p>方法 ：lt(columnName,value) 小于（&lt;） less than<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt; 2</code></p><p>方法 ：gt(columnName,value) 大于（&gt;） greater than<br>使用示范：<code>mDao.queryBuilder().where().gt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt; 2</code></p><p>方法 ：ge(columnName,value) 大于等于（&gt;=）greater-than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().ge(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt;= 2</code></p><p>方法 ：le(columnName,value) 小于等于（&lt;=）less than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().le(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;= 2</code></p><p>方法 ：ne(columnName,value) 不等于（&lt;&gt;）not-equal-to<br>使用示范：<code>mDao.queryBuilder().where().ne(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;&gt; 2</code></p><p>方法 ：in(columnName,object…) 在指定列中匹配object数组所对应的值，返回匹配到的结果行集合,in还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().in(“id”, 1，2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id IN (1，2 )</code></p><p>方法 ：notIn(columnName,object…) 在指定列中匹配object数组所对应的值，返回没有匹配到的结果行集合notIn还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().notIn(“id”,1,2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id NOT IN (1 ,2 )</code></p><p>方法 ：like(columnName,pattern) 使用%通配符来匹配，指定行数据，返回匹配到的结果<br>使用示范：<code>mDao.queryBuilder().where().like(“LastName”, “A%”).query();</code> 匹配A开头的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%s”).query();</code> 匹配s结尾的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%art%”).query();</code> 匹配中间为art的LastName<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `LastName` LIKE &#39;A%&#39;</code></p><p>方法 ：between(columnName,low,high) 获取指定范围内的结果<br>使用示范：<code>mDao.queryBuilder().where().between(“id”, 1, 2).query();</code>获取id是1到2之间的结果<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `id` BETWEEN 1 AND 2</code></p><p>方法and()，or()用来组合上述where子语句。进行与，或操作。<br>方法 ：and() where子句与操作<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 3).and().gt(“id”, 1).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` &lt; 3 AND `id` &gt; 1 )</code></p><p>方法 ：or() where子句或操作<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 1).or().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` = 1 OR `id` = 2 )</code></p><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p>根据指定列名排序，降序，升序<br>使用示范：<code>mDao.queryBuilder().orderBy(“id”, false).query(); //参数false表示降序，true表示升序。</code><br>对应SQL：<code>SELECT * FROM `t_person` ORDER BY `id` DESC（降序）</code></p><h1 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h1><p>过滤指定列不重复数据行，重复的只返回一次。<br>使用示范：<code>mDao.queryBuilder().selectColumns(“City”).distinct().query();</code><br>对应SQL：<code>SELECT DISTINCT `City` FROM `t_person`</code></p><h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h1><p>按照指定列分组<br>使用示范：<code>mDao.queryBuilder().groupBy(“city”).query();</code><br>对应SQL：<code>SELECT * FROM t_person GROUP BY city</code></p><h1 id="offset-Limit"><a href="#offset-Limit" class="headerlink" title="offset Limit"></a>offset Limit</h1><p>offset跳过指定的行数<br>limit限制获取指定行数<br>使用示范：<code>mDao.queryBuilder().offset(2).limit(2).query();</code> 可以用来分页<br>对应SQL：<code>SELECT * FROM t_person LIMIT 2 OFFSET 2</code></p><h1 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h1><p>等同于sql中的Having，针对分组数据，进行聚合函数（SUM, COUNT, MAX, AVG）运算。<br>使用示范：  <code>mPersonList = mDao.queryBuilder().groupBy(“City”).having(“SUM(id)&gt;4”).query()</code><br>对应SQL： <code>SELECT * FROM t_person GROUP BY City HAVING SUM(id)&gt;4</code></p><h1 id="countOf"><a href="#countOf" class="headerlink" title="countOf"></a>countOf</h1><p>返回查询结果的总数<br>使用示范：<code>mDao.queryBuilder().countOf()</code><br>对应SQL：<code>SELECT COUNT(*) FROM t_person</code></p><h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>返回一个结果集的迭代器。<br>使用示范：<code>Iterator iterator = mDao.queryBuilder().iterator();</code></p><h1 id="queryForFirst"><a href="#queryForFirst" class="headerlink" title="queryForFirst"></a>queryForFirst</h1><p>返回所有行的第一行。<br>使用示范：<code>mDao.queryBuilder().queryForFirst();</code></p><p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（一）快速入门</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（一）快速入门/</id>
    <published>2018-02-25T22:49:00.000Z</published>
    <updated>2018-03-02T14:52:03.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。</p><p>本文主要针对 Android 使用 <code>OrmLite 框架</code> 对数据库的基本操作介绍，如有那些地方介绍的不对，请指出来，一起学习，一起进步。</p><h1 id="添加-OrmLite-包"><a href="#添加-OrmLite-包" class="headerlink" title="添加 OrmLite 包"></a>添加 OrmLite 包</h1><p>向工程中添加 OrmLite 的 jar 包有两种方式：</p><ol><li>到 OrmLite 官网下载 ormlite-core-4.49.jar 和 ormlite-android-4.49.jar 两个jar 包添加到工程中。</li><li>在项目中添加依赖的方式。</li></ol><h1 id="创建项目中使用DatabaseHelper类"><a href="#创建项目中使用DatabaseHelper类" class="headerlink" title="创建项目中使用DatabaseHelper类"></a>创建项目中使用DatabaseHelper类</h1><p>首先要简单说一下 <code>OrmLite 框架</code>中 <code>OrmLiteSqliteOpenHelper</code> 类 ，<code>OrmLiteSqliteOpenHelper</code> 类继承了 <code>SQLiteOpenHelper</code>。所以，创建项目中的D<code>atabaseHelper</code> 类，要使该类继承 <code>OrmLite 框架</code> 的 <code>OrmLiteSqliteOpenHelper</code> 类来获得 <code>SQLiteHelper</code>.</p><h1 id="继承-OrmLiteSqliteOpenHelper-实现几个方法说明"><a href="#继承-OrmLiteSqliteOpenHelper-实现几个方法说明" class="headerlink" title="继承 OrmLiteSqliteOpenHelper 实现几个方法说明"></a>继承 <code>OrmLiteSqliteOpenHelper</code> 实现几个方法说明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context, String databaseName, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> databaseVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, databaseName, factory, databaseVersion);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数说明：</span></span><br><span class="line"><span class="comment">         * context：上下文。</span></span><br><span class="line"><span class="comment">         * databaseName： 数据库名。</span></span><br><span class="line"><span class="comment">         * factory： 游标实例，多数时候设置成NULL。</span></span><br><span class="line"><span class="comment">         * databaseVersion：数据库版本，当数据库版本升高时，会调用onUpgrade（）方法。</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource)</span> </span>&#123; </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在该方法中进行创建表操作</span></span><br><span class="line"><span class="comment">         * 使用`OrmLite 框架`的 TableUtils.createTable进行创建表操作。</span></span><br><span class="line"><span class="comment">         *eg.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TableUtils.createTable(connectionSource, UserInfo.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="数据库版本提升更新方法"><a href="#数据库版本提升更新方法" class="headerlink" title="数据库版本提升更新方法"></a>数据库版本提升更新方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//在该方法中进行更新操作</span></span><br></pre></td></tr></table></figure><h1 id="创建数据库表对应的-Bean"><a href="#创建数据库表对应的-Bean" class="headerlink" title="创建数据库表对应的 Bean"></a>创建数据库表对应的 Bean</h1><p>Bean 类中的变量对应数据库中的字段，在 Bean 中使用注解方式进行设置。<br>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DatabaseTable</span>(tableName = <span class="string">"tb_user_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DatabaseField</span>(generatedId = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"addr"</span>)</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应字段的set 和 get 方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="数据库中字段注解设置说明："><a href="#数据库中字段注解设置说明：" class="headerlink" title="数据库中字段注解设置说明："></a>数据库中字段注解设置说明：</h1><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">参数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">@DatabaseTable</td><td style="text-align:center">tableName</td><td style="text-align:center">指定表明,没有将使用类名作为表明</td></tr><tr><td style="text-align:center">@DatabaseField</td><td style="text-align:center">cloumnName</td><td style="text-align:center">指定字段名,不指定则变量名作为字段名</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">canBeNull</td><td style="text-align:center">是否可以为null</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">dataType</td><td style="text-align:center">指定字段的类型</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">defaultValue</td><td style="text-align:center">指定默认值</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">width</td><td style="text-align:center">指定长度</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">id</td><td style="text-align:center">指定字段为id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">generatedId</td><td style="text-align:center">指定字段为自增长的id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">generatedIdSequence</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreign</td><td style="text-align:center">指定这个字段的对象是一个外键,外键值是这个对象的id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">useGetSet</td><td style="text-align:center">指定ormlite访问变量使用set,get方法默认使用的是反射机制直接访问变量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">throwIfNull</td><td style="text-align:center">如果空值抛出异常</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">persisted</td><td style="text-align:center">指定是否持久化此变量,默认true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">unique</td><td style="text-align:center">字段值唯一</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueCombo</td><td style="text-align:center">整列的值唯一</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">index</td><td style="text-align:center">索引</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueIndex</td><td style="text-align:center">唯一索引</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignAutoRefresh</td><td style="text-align:center">外键值,自动刷新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueIndex</td><td style="text-align:center">外键值,自动刷新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignAutoCreate</td><td style="text-align:center">外键不存在时是否自动添加到外间表中</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignColumnName</td><td style="text-align:center">外键字段指定的外键表中的哪个字段</td></tr></tbody></table><h1 id="获取操作数据库对应表的-Bean-的-Dao"><a href="#获取操作数据库对应表的-Bean-的-Dao" class="headerlink" title="获取操作数据库对应表的 Bean 的 Dao"></a>获取操作数据库对应表的 Bean 的 Dao</h1><p>在<code>OrmLite 框架</code>中。操作数据是通过 对应<code>Bean</code>的<code>Dao</code> 实现的。 </p><p>那么Dao 是如何获取的呢？ </p><p>Dao 的获取方式： </p><p>对应Bean是通过 <code>OrmLiteSqliteOpenHelper</code> 类中 <code>getDao(Class clazz)</code> 方法获取。</p><p>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatabaseHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dao&lt;UserInfo,Integer&gt; <span class="title">getUserDao</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        helper = <span class="keyword">new</span> DatabaseHelper(context);</span><br><span class="line">        <span class="keyword">return</span> helper.getDao(UserInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 <code>Dao</code> 对数据库进行简单增、删、改、查操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDao mDao = <span class="keyword">new</span> UserDao();</span><br></pre></td></tr></table></figure></p><p>增：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        UserInfo u1 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"beijng"</span>,<span class="string">"nan"</span>);</span><br><span class="line">        mDao.getUserDao(mContext).create(u1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删：<br>下面的示例是使用删除集合完成删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改和删除要通过id 进行操作</span></span><br><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">UserInfo u3 = <span class="keyword">new</span> UserInfo(<span class="string">"招商"</span>,<span class="string">"beijng"</span>,<span class="string">"女"</span>);</span><br><span class="line">u3.setUserId(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Collection&lt;UserInfo&gt; collection = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</span><br><span class="line">    collection.add(u4);</span><br><span class="line">    collection.add(u3);</span><br><span class="line">    mDao.getUserDao(mContext).delete(collection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"updateMan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mDao.getUserDao(mContext).update(u4);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查：<br>注：这里只举了一个查询方式，查询全部。条件查询请参考（OrmLite 复杂条件查询）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;UserInfo&gt; infos =  mDao.getUserDao(mContext).queryForAll();</span><br><span class="line">    <span class="keyword">for</span>(UserInfo info : infos)&#123;</span><br><span class="line">        <span class="comment">//在此处使用TextView进行显示</span></span><br><span class="line">        mUserText.append(<span class="string">"\n"</span> + info.toString() + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
</feed>
