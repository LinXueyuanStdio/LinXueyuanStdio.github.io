<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiChen</title>
  
  <subtitle>XiChen&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xichen.pub/"/>
  <updated>2018-03-02T14:52:04.047Z</updated>
  <id>http://xichen.pub/</id>
  
  <author>
    <name>Lin Xueyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Android TimeCat】 原地归并排序</title>
    <link href="http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-%E5%8E%9F%E5%9C%B0%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-原地归并排序/</id>
    <published>2018-03-01T04:43:00.000Z</published>
    <updated>2018-03-02T14:52:04.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中有个需求，需要把用户的task排序。</p><p>排序规则为，先按label排，每个label下按创建日期排，task处于完成状态的话覆盖原来label。label有四个，重要紧急，重要不紧急，紧急不重要，不重要不紧急。label加上完成状态共5组。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是先用桶排序分组，再对每个组内用原地归并排序。</p><p>考虑到分组有且只有5组，用桶排序逻辑清晰，易于阅读，效率也高。</p><p>之所以用原地归并排序，是因为我想学(zhuang)习(bi)。用其他排序方法也是可以的，因为单个用户的task不会太多，而且排序放在网络请求之后，各种排序方法的差别不大。</p><h2 id="纯java版原地归并排序"><a href="#纯java版原地归并排序" class="headerlink" title="纯java版原地归并排序"></a>纯java版原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InPlaceMergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i++] = arr[j];</span><br><span class="line">        arr[j--] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">        reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">        reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r)  &#123;<span class="comment">//原地归并结束的条件。</span></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = j;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= r &amp;&amp; arr[j] &lt;= arr[i]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">            i += (j-index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(arr, l, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">            inplaceMerge(arr, l, mid, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试用例 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯java版非原地归并排序"><a href="#纯java版非原地归并排序" class="headerlink" title="纯java版非原地归并排序"></a>纯java版非原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> p = l;</span><br><span class="line">    <span class="keyword">int</span> q = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (src[p] &lt;= src[q]) &#123;</span><br><span class="line">            dest[i++] = src[p++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest[i++] = src[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid) &#123;</span><br><span class="line">        dest[i++] = src[p++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q &lt;= r) &#123;</span><br><span class="line">        dest[i++] = src[q++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// （原[l, r]范围的内容被复制回原数组）  </span></span><br><span class="line">    i = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= r) &#123;  </span><br><span class="line">        src[i] = dest[i++];  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] dest, <span class="keyword">int</span>[] src, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(dest, src, l, mid);</span><br><span class="line">        mergeSort(dest, src, mid + <span class="number">1</span>, r);</span><br><span class="line">        merge(dest, src, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目运用版-：桶排序-原地归并排序"><a href="#项目运用版-：桶排序-原地归并排序" class="headerlink" title="项目运用版 ：桶排序 + 原地归并排序"></a>项目运用版 ：桶排序 + 原地归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;DBTask&gt; <span class="title">sort</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;DBTask&gt; sortedDBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_0_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_1_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_2_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; label_3_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;DBTask&gt; finished_DBTaskList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (DBTask dbTask : taskArrayList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbTask.getIsFinish()) &#123;</span><br><span class="line">            finished_DBTaskList.add(dbTask);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (dbTask.getLabel()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_URGENT:</span><br><span class="line">                label_0_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_1_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_URGENT:</span><br><span class="line">                label_2_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DBTask.LABEL_NOT_IMPORTANT_NOT_URGENT:</span><br><span class="line">                label_3_DBTaskList.add(dbTask);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort2List(label_0_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_1_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_2_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(label_3_DBTaskList, sortedDBTaskList);</span><br><span class="line">    mergeSort2List(finished_DBTaskList, sortedDBTaskList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedDBTaskList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">        DBTask temp = arr.get(i);</span><br><span class="line">        arr.set(i++, arr.get(j));</span><br><span class="line">        arr.set(j--, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap [bias, bias+headSize) and [bias+headSize, bias+headSize+endSize)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapAdjacentBlocks</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> bias, <span class="keyword">int</span> oneSize, <span class="keyword">int</span> anotherSize)</span> </span>&#123;</span><br><span class="line">    reverse(arr, bias, bias + oneSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias + oneSize, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">    reverse(arr, bias, bias + oneSize + anotherSize - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inplaceMerge</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;     <span class="comment">// 指示左侧有序串</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 指示右侧有序串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j &amp;&amp; j &lt;= r) &#123; <span class="comment">//原地归并结束的条件。</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; isValid(arr, i, j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = j;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r &amp;&amp; isValid(arr, j, i)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        swapAdjacentBlocks(arr, i, index-i, j-index);</span><br><span class="line">        i += (j-index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Date date_i = TimeUtil.formatGMTDateStr(arr.get(i).getCreated_datetime());</span><br><span class="line">    Date date_j = TimeUtil.formatGMTDateStr(arr.get(j).getCreated_datetime());</span><br><span class="line">    <span class="keyword">return</span> (date_i != <span class="keyword">null</span> ? date_i.getTime() : <span class="number">0</span>) &lt;= (date_j != <span class="keyword">null</span> ? date_j.getTime() : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(ArrayList&lt;DBTask&gt; arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, l, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        inplaceMerge(arr, l, mid, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort2List</span><span class="params">(ArrayList&lt;DBTask&gt; taskArrayList, ArrayList&lt;DBTask&gt; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (taskArrayList == <span class="keyword">null</span> || taskArrayList.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mergeSort(taskArrayList, <span class="number">0</span>, taskArrayList.size()-<span class="number">1</span>);</span><br><span class="line">    result.addAll(taskArrayList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中有个需求，需要把用户的task排序。&lt;/p&gt;
&lt;p&gt;排序规则为，先按label排，每个label下按创建日期排，task处
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Algorithm" scheme="http://xichen.pub/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 给刷新按钮添加旋转动画</title>
    <link href="http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-%E7%BB%99%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%B7%BB%E5%8A%A0%E6%97%8B%E8%BD%AC%E5%8A%A8%E7%94%BB/"/>
    <id>http://xichen.pub/2018/03/01/2018-03-01-Android-TimeCat-给刷新按钮添加旋转动画/</id>
    <published>2018-03-01T04:11:00.000Z</published>
    <updated>2018-03-02T14:52:03.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本着用户的动作反馈原则，给刷新按钮添加旋转动画。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>思路是给原来的按钮上面覆盖一层view来承担动画效果，点击按钮时，覆盖的view显示并旋转，此时按钮被覆盖处于不可点击状态；当动画完成时隐藏覆盖的view，按钮又可以被点击了。需要计算动画时间来及时把动画停掉，我采用postdelay解决。</p><h2 id="res-menu-main-xml"><a href="#res-menu-main-xml" class="headerlink" title="res/menu/main.xml"></a>res/menu/main.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_action_refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:showAsAction</span>=<span class="string">"always"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="res-layout-action-view-xml"><a href="#res-layout-action-view-xml" class="headerlink" title="res/layout/action_view.xml"></a>res/layout/action_view.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minHeight</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:minWidth</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingEnd</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:paddingStart</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:scaleType</span>=<span class="string">"centerInside"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="res-anim-refresh-xml"><a href="#res-anim-refresh-xml" class="headerlink" title="res/anim/refresh.xml"></a>res/anim/refresh.xml</h2><p>设置一秒绕中心旋转720度的动画，这样动画重复次数取1，不用重复</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/linear_interpolator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"720"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MenuItem refreshItem;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.refresh:</span><br><span class="line">            showRefreshAnimation(item);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRefreshAnimation</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        hideRefreshAnimation(); <span class="comment">//清空之前的效果</span></span><br><span class="line"></span><br><span class="line">        refreshItem = item;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里使用一个ImageView设置成MenuItem的ActionView，这样我们就可以使用这个ImageView显示旋转动画了</span></span><br><span class="line">        ImageView refreshActionView = (ImageView) getLayoutInflater().inflate(R.layout.action_view, <span class="keyword">null</span>);</span><br><span class="line">        refreshActionView.setImageResource(R.drawable.ic_autorenew_white_24dp);</span><br><span class="line">        refreshItem.setActionView(refreshActionView);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示刷新动画</span></span><br><span class="line">        Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.refresh);</span><br><span class="line">        animation.setRepeatMode(Animation.RESTART);</span><br><span class="line">        animation.setRepeatCount(<span class="number">1</span>); <span class="comment">// 这里设置动画重复次数</span></span><br><span class="line">        refreshActionView.startAnimation(animation);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                hideRefreshAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>); </span><br><span class="line">        <span class="comment">// 在动画xml文件里定义了动画时长为1秒，而动画重复次数为1次，所以在1秒后停止动画即可防止过度点击。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideRefreshAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refreshItem != <span class="keyword">null</span>) &#123;</span><br><span class="line">            View view = refreshItem.getActionView();</span><br><span class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                view.clearAnimation();</span><br><span class="line">                refreshItem.setActionView(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h1><ul><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/anim/refresh.xml" target="_blank" rel="noopener">refresh.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/layout/action_view.xml" target="_blank" rel="noopener">action_view.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/res/menu/main_menu.xml" target="_blank" rel="noopener">main_menu.xml</a></li><li><a href="https://github.com/triline3/timecat/blob/ca49ac9747e326f09e629f217772b2a3ade127fc/app/src/main/java/com/time/cat/ui/activity/main/MainActivity.java" target="_blank" rel="noopener">MainActivity.java</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本着用户的动作反馈原则，给刷新按钮添加旋转动画。&lt;/p&gt;
&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Animation" scheme="http://xichen.pub/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 MVP架构演进</title>
    <link href="http://xichen.pub/2018/02/28/2018-02-28-Android-TimeCat-MVP%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B/"/>
    <id>http://xichen.pub/2018/02/28/2018-02-28-Android-TimeCat-MVP架构演进/</id>
    <published>2018-02-27T23:42:00.000Z</published>
    <updated>2018-03-02T14:52:04.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我就想看看MVP怎么搞…</p><h1 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h1><p><a href="https://github.com/triline3/timecat/blob/e0a39a6087bbf7f4ad0e4e8f4e418526e96a4fb7/app/src/main/java/com/time/cat/ui/fragment/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/NotesFragment.java</a></p><p><strong>代码行数</strong>：~290</p><p><strong>文件目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>业务分层，把fragment的初始化分成<code>initView()</code>, <code>initData()</code>, <code>initListener()</code></li><li>功能分区，按<code>View</code>, <code>Data</code>, <code>Listener</code>,在fragment文件内部分区，用注释隔开，简单易懂</li></ul><p><strong>缺点</strong>：</p><ul><li>fragment持有内部类</li><li>数据的刷新需要context, 应该做到数据与状态无关，易于复用</li><li>fragment管的东西太多</li></ul><h1 id="基础MVP架构"><a href="#基础MVP架构" class="headerlink" title="基础MVP架构"></a>基础MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/c5a1a0a932be19b4756bd3c539cfdcaf9f2e22ee/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p><p><strong>代码行数</strong>：~160</p><p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">notes</span><br><span class="line">├── model</span><br><span class="line">│   ├── NotesDataManagerAction.java</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   ├── NotesPresenterAction.java</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>数据（model）和UI（view）解耦，双方都只暴露接口给presenter，由presenter决定数据和UI的互动</li><li>NotesFragment只作为view层，下放业务处理能力给presenter，使代码量大量减少（实际是转移给presenter，没有减少）</li><li>NotesFragment不再持有内部类，加载速度增加</li><li>在数据层去掉context，使data与view相互独立</li></ul><p><strong>缺点</strong>：</p><ul><li>没有绑定view，presenter可能在fragment销毁后仍有其引用，导致内存泄漏</li><li>NotesFragment里除了需要显示的view的初始化就都是接口的具体实现，对新手不友好</li></ul><h1 id="高级MVP架构"><a href="#高级MVP架构" class="headerlink" title="高级MVP架构"></a>高级MVP架构</h1><p><a href="https://github.com/triline3/timecat/blob/5fe59fa970011abb1bd06bd82b3911f91fe68575/app/src/main/java/com/time/cat/ui/fragment/notes/view/NotesFragment.java" target="_blank" rel="noopener">…ui/fragment/notes/view/NotesFragment.java</a></p><p><strong>代码行数</strong>：~160</p><p><strong>目录结构</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">notes/</span><br><span class="line">├── model</span><br><span class="line">│   └── NotesDataManager.java</span><br><span class="line">├── presenter</span><br><span class="line">│   └── NotesPresenter.java</span><br><span class="line">└── view</span><br><span class="line">    ├── CardStackViewAdapter.java</span><br><span class="line">    ├── ColorItemViewHolder.java</span><br><span class="line">    ├── NotesFragmentAction.java</span><br><span class="line">    └── NotesFragment.java</span><br></pre></td></tr></table></figure></p><p><strong>优点</strong>：</p><ul><li>高度抽象，减少代码冗余（比如绑定view）</li><li>使用代理模式将绑定和解绑view的操作抽离出来</li><li>使用工厂模式和注解在上层统一创建Presenter</li><li>将Presenter的创建过程放入到获取Presenter的方法中，如果存在返回，不存在创建，保证Presenter不会为空，保证在使用的时候再创建，节省内存资源</li><li>删除不必要的接口文件，用分区的方法突出类内可调用的业务处理函数</li><li>总的来说就是耐操</li></ul><p><strong>缺点</strong>：</p><ul><li>新手不友好，依赖注入设计模式等操作有一定的复杂度</li><li>MVP固有缺点：每条逻辑都要有完全不同的presenter来管理</li><li>添加多个presenter麻烦</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;我就想看看MVP怎么搞…&lt;/p&gt;
&lt;h1 id=&quot;分层架构&quot;&gt;&lt;a href=&quot;#分层架构&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="MVP" scheme="http://xichen.pub/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RecyclerView的卡顿问题</title>
    <link href="http://xichen.pub/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView%E7%9A%84%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/"/>
    <id>http://xichen.pub/2018/02/27/2018-02-27-Android-TimeCat-RecyclerView的卡顿问题/</id>
    <published>2018-02-27T00:12:00.000Z</published>
    <updated>2018-03-02T14:52:04.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中大量使用了<code>RecycleView</code>和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。</p><h1 id="RecyclerView为什么会卡"><a href="#RecyclerView为什么会卡" class="headerlink" title="RecyclerView为什么会卡"></a>RecyclerView为什么会卡</h1><p><code>RecyclerView</code>作为v7包的新控件，自从推出就广受Android Developer们欢迎，实际上它已经取代了ListView和GridView两位老前辈的地位。然而不少亲们想必也已经发现了：没有优化过的Recycler性能很poor。上一篇博主使用的item也仅仅是一个图两串字而已，结果一滑动就卡的要命，不能忍！<br>那么why？回想在用<code>ListView</code>和<code>GridView</code>的<code>adapter</code>时，我们是用一种叫<code>ViewHolder</code>的自定义类（容器）来实现优化的，而<code>RecyclerView</code>的特性之一就是强制你使用它的<code>RecyclerView.ViewHolder</code>。可是，<code>RecyclerView.ViewHolder</code>要比我们写的那个单纯的容器复杂多了（源码里算上注释有大约500行），与<code>RecyclerView.Adapter</code>的联系也是千丝万缕。</p><p>按stackoverflow上面比较通俗的解释：<code>RecyclerView.Adapter</code>里面的<code>onCreateViewHolder()</code>方法和<code>onBindViewHolder()</code>方法对时间都非常敏感。类似I/O读写，Bitmap解码一类的耗时操作，最好不要在它们里面进行。</p><h1 id="如何解决卡顿问题"><a href="#如何解决卡顿问题" class="headerlink" title="如何解决卡顿问题"></a>如何解决卡顿问题</h1><p>首先当然得优化你的item，合理运用<code>&lt;include&gt;</code>，<code>&lt;merge&gt;</code>，<code>&lt;ViewStub&gt;</code>等标签，使布局层次尽量少——其实<code>ListView</code>和<code>GridView</code>里你也应该这么做，应该当成是一种写UI的习惯。</p><p>其次就是灵活使用各种第三方库，去完成各种耗时操作，比如通过<code>Glide</code>或者是<code>Picasso</code>加载图片。优秀的开源库在性能上往往都考虑得很仔细。</p><p>最后的问题来了，如果只想写一个小demo，不愿大张旗鼓怎么办？如果即便一般的第三方库也不好解决问题，比如上一篇那个该死的loadIcon()方法返回的是一个Drawable对象，Glide和Picasso都没法直接处理，转码又等于添了个耗时任务，那怎么办？<br>真正的app管理应用，应该引入UIL或者Picasso一类的加载库进行图标加载<br>（在此原谅博主没仔细敲代码，就信口开河了）<br>答案就是，<strong>想法在你setAdapter之前就把任务给完成</strong>。</p><h1 id="TimeCat-实例"><a href="#TimeCat-实例" class="headerlink" title="TimeCat 实例"></a>TimeCat 实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    context = getContext();</span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_notes, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    mStackView = view.findViewById(R.id.notes_csv);   <span class="comment">// 初始化RecycleView</span></span><br><span class="line">    cardStackViewAdapter = <span class="keyword">new</span> CardStackViewAdapter(context); <span class="comment">// 初始化Adapter</span></span><br><span class="line">    refreshData();  <span class="comment">// 刷新一次数据</span></span><br><span class="line">    mStackView.setAdapter(cardStackViewAdapter);  <span class="comment">// 在数据准备好后再setAdapter()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中大量使用了&lt;code&gt;RecycleView&lt;/code&gt;和折叠结构，虽然便于用户交互，但同时也使性能成为一个问题。&lt;/p
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RecycleView" scheme="http://xichen.pub/tags/RecycleView/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 当RxJava遇到Retrofit（二）api注解@Path, @Url等</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%BA%8C%EF%BC%89api%E6%B3%A8%E8%A7%A3@Path,%20@Url%E7%AD%89/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-当RxJava遇到Retrofit（二）api注解@Path, @Url等/</id>
    <published>2018-02-26T08:12:00.000Z</published>
    <updated>2018-03-02T14:52:04.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>下面分为<code>GET</code>、<code>POST</code>、<code>DELETE</code>还有<code>PUT</code>的请求，说明<code>@Path</code>、<code>@Query</code>、<code>@QueryMap</code>、<code>@Body</code>、<code>@Field</code>的用法。</p><h1 id="初始化Retrofit"><a href="#初始化Retrofit" class="headerlink" title="初始化Retrofit"></a>初始化Retrofit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String BASE_URL = <span class="string">"http://192.168.88.105:8000/api/"</span>;</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder() </span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><h2 id="样式1（一个简单的get请求）"><a href="#样式1（一个简单的get请求）" class="headerlink" title="样式1（一个简单的get请求）"></a>样式1（一个简单的get请求）</h2><p><a href="http://192.168.88.105:8000/api/News" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="样式2（URL中有参数）"><a href="#样式2（URL中有参数）" class="headerlink" title="样式2（URL中有参数）"></a>样式2（URL中有参数）</h2><p><a href="http://192.168.88.105:8000/api/News/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure></p><p>或<br><a href="http://192.168.88.105:8000/api/News/1/类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/1/类型1</a><br><a href="http://192.168.88.105:8000/api/News/{资讯id}/{类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News/{资讯id}/{类型}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News/&#123;newsId&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Path(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Path</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（参数在URL问号之后）"><a href="#样式3（参数在URL问号之后）" class="headerlink" title="样式3（参数在URL问号之后）"></a>样式3（参数在URL问号之后）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId)</span>;</span><br></pre></td></tr></table></figure><p>或<br><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a><br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@Query(<span class="string">"newsId"</span>)</span> String newsId， @<span class="title">Query</span><span class="params">(<span class="string">"type"</span>)</span> String type)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式4（多个参数在URL问号之后，且个数不确定）"><a href="#样式4（多个参数在URL问号之后，且个数不确定）" class="headerlink" title="样式4（多个参数在URL问号之后，且个数不确定）"></a>样式4（多个参数在URL问号之后，且个数不确定）</h2><p><a href="http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId=1&amp;type=类型1</a>…<br><a href="http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/News?newsId={资讯id}&amp;type={类型}</a>…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(@QueryMap Map&lt;String, String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span>(<span class="string">"News"</span>)</span><br><span class="line"><span class="function">Call&lt;NewsBean&gt; <span class="title">getItem</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">          @Query(<span class="string">"newsId"</span>)</span> String newsId，</span></span><br><span class="line"><span class="function">          @QueryMap Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><h2 id="样式1（需要补全URL，post的数据只有一条reason）"><a href="#样式1（需要补全URL，post的数据只有一条reason）" class="headerlink" title="样式1（需要补全URL，post的数据只有一条reason）"></a>样式1（需要补全URL，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）"><a href="#样式2（需要补全URL，问号后加入access-token，post的数据只有一条reason）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）"></a>样式2（需要补全URL，问号后加入access_token，post的数据只有一条reason）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @<span class="title">Field</span><span class="params">(<span class="string">"reason"</span>)</span> String reason)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（需要补全URL，问号后加入access-token，post一个body（对象））"><a href="#样式3（需要补全URL，问号后加入access-token，post一个body（对象））" class="headerlink" title="样式3（需要补全URL，问号后加入access_token，post一个body（对象））"></a>样式3（需要补全URL，问号后加入access_token，post一个body（对象））</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{newsId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"Comments/&#123;newsId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;Comment&gt; <span class="title">reportComment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"newsId"</span>)</span> String commentId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body CommentBean bean)</span>;</span><br></pre></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="样式1（需要补全URL）"><a href="#样式1（需要补全URL）" class="headerlink" title="样式1（需要补全URL）"></a>样式1（需要补全URL）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式2（需要补全URL，问号后加入access-token）"><a href="#样式2（需要补全URL，问号后加入access-token）" class="headerlink" title="样式2（需要补全URL，问号后加入access_token）"></a>样式2（需要补全URL，问号后加入access_token）</h2><p><a href="http://192.168.88.105:8000/api/Comments/1?access_token=1234123" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/1?access_token=1234123</a><br><a href="http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments/{commentId}?access_token={access_token}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DELETE</span>(<span class="string">"Comments/&#123;commentId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteNewsCommentFromAccount</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"commentId"</span>)</span> String commentId，</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token)</span>;</span><br></pre></td></tr></table></figure><h2 id="样式3（带有body）"><a href="#样式3（带有body）" class="headerlink" title="样式3（带有body）"></a>样式3（带有body）</h2><p><a href="http://192.168.88.105:8000/api/Comments" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HTTP</span>(method = <span class="string">"DELETE"</span>,path = <span class="string">"Comments"</span>,hasBody = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">deleteCommont</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Body CommentBody body</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line">CommentBody：需要提交的内容，与Post中的Body相同</span><br></pre></td></tr></table></figure><h1 id="PUT（这个请求很少用到，例子就写一个）"><a href="#PUT（这个请求很少用到，例子就写一个）" class="headerlink" title="PUT（这个请求很少用到，例子就写一个）"></a>PUT（这个请求很少用到，例子就写一个）</h1><p><a href="http://192.168.88.105:8000/api/Accounts/1" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/1</a><br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PUT</span>(<span class="string">"Accounts/&#123;accountId&#125;"</span>)</span><br><span class="line"><span class="function">Call&lt;ExtrasBean&gt; <span class="title">updateExtras</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Path(<span class="string">"accountId"</span>)</span> String accountId,</span></span><br><span class="line"><span class="function">    @<span class="title">Query</span><span class="params">(<span class="string">"access_token"</span>)</span> String access_token,</span></span><br><span class="line"><span class="function">    @Body ExtrasBean bean)</span>;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>@Path：所有在网址中的参数（URL的问号前面），如：<br><a href="http://192.168.88.105:8000/api/Accounts/{accountId}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Accounts/{accountId}</a></li><li>@Query：URL问号后面的参数，如：<br><a href="http://192.168.88.105:8000/api/Comments?access_token={access_token}" target="_blank" rel="noopener">http://192.168.88.105:8000/api/Comments?access_token={access_token}</a></li><li>@QueryMap：相当于多个@Query</li><li>@Field：用于POST请求，提交单个数据</li><li>@Body：相当于多个@Field，以对象的形式提交</li></ul><blockquote><p>Tips</p><ul><li>Tips1 使用@Field时记得添加@FormUrlEncoded</li><li>Tips2 若需要重新定义接口地址，可以使用@Url，将地址以参数的形式传入即可。如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; getActivityList(</span><br><span class="line">        <span class="meta">@Url</span> String url,</span><br><span class="line">        <span class="meta">@QueryMap</span> Map&lt;String, String&gt; map);</span><br><span class="line">Call&lt;List&lt;Activity&gt;&gt; call = service.getActivityList(</span><br><span class="line">            <span class="string">"http://115.159.198.162:3001/api/ActivitySubjects"</span>, map);</span><br></pre></td></tr></table></figure></li></ul></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/7687365aa946" target="_blank" rel="noopener">https://www.jianshu.com/p/7687365aa946</a><br><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;下面分为&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;还有&lt;code&gt;PUT&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://xichen.pub/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 当RxJava遇到Retrofit（一）Retrofit入门</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-%E5%BD%93RxJava%E9%81%87%E5%88%B0Retrofit%EF%BC%88%E4%B8%80%EF%BC%89Retrofit%E5%85%A5%E9%97%A8/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-27-Android-TimeCat-当RxJava遇到Retrofit（一）Retrofit入门/</id>
    <published>2018-02-26T07:37:00.000Z</published>
    <updated>2018-03-02T14:52:03.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比<code>HttpClient</code>以及<code>HttpUrlConnection</code>等，略懂android开发的估计无人不知<code>android-async-http</code>或者<code>volley</code>啥的，再往上走，有<code>okhttp</code>等。但是最后我们选择了一个新的http请求框架，<code>Retrofit</code>。</p><h1 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h1><p><code>retrofit</code>是<code>Square</code>公司出品的，为android和java提供一个类型安全的Http网络请求库，这里是官网地址。</p><p><code>Retrofit</code>的优点</p><ol><li>使用注解来描述http请求</li><li>URL参数的替换和query参数的支持</li><li>对象转化为请求体（如：JSON，protocol buffers等）</li><li>多重请求体和文件上传<br>以上都是官网描述</li></ol><h1 id="TimeCat中的实例"><a href="#TimeCat中的实例" class="headerlink" title="TimeCat中的实例"></a>TimeCat中的实例</h1><p>定义接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NoteService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Headers</span>(&#123;<span class="string">"Content-Type: application/json"</span>, <span class="string">"Accept: application/json"</span>&#125;)</span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Note&gt; <span class="title">createNote</span><span class="params">(@Body Note note)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>辅助使用Retrofit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetrofitHelper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"http://192.168.88.105:8000/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient mOkHttpClient;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        initOkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OKHttpClient</span></span><br><span class="line"><span class="comment">     * 设置缓存</span></span><br><span class="line"><span class="comment">     * 设置超时时间</span></span><br><span class="line"><span class="comment">     * 设置打印日志</span></span><br><span class="line"><span class="comment">     * 设置UA拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpLoggingInterceptor interceptor = <span class="keyword">new</span> HttpLoggingInterceptor(<span class="keyword">new</span> Log());</span><br><span class="line">        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RetrofitHelper.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mOkHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置Http缓存</span></span><br><span class="line">                    Cache cache = <span class="keyword">new</span> Cache(<span class="keyword">new</span> File(TimeCatApp.getInstance().getCacheDir(), <span class="string">"HttpCache"</span>), <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>);</span><br><span class="line">                    mOkHttpClient = <span class="keyword">new</span> OkHttpClient.Builder().cache(cache).addInterceptor(interceptor).retryOnConnectionFailure(<span class="keyword">true</span>).connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS).writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS).readTimeout(<span class="number">20</span>, TimeUnit.SECONDS).build();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NoteService <span class="title">getNoteService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .client(mOkHttpClient)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(NoteService.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结合RxJava发起网络请求只需要<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">RetrofitHelper.getNoteService().createNote(note) <span class="comment">//获取Observable对象</span></span><br><span class="line">        .compose(<span class="keyword">this</span>.bindToLifecycle())         <span class="comment">// 绑定到生命周期</span></span><br><span class="line">        .subscribeOn(Schedulers.newThread())     <span class="comment">//请求在新的线程中执行</span></span><br><span class="line">        .observeOn(Schedulers.io())              <span class="comment">//请求完成后在io线程中执行</span></span><br><span class="line">        .doOnNext(<span class="keyword">new</span> Action1&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                DB.notes().saveAndFireEvent(ModelUtil.toDBNote(note)); <span class="comment">// 进行数据读写，甚至可以进行文件读写</span></span><br><span class="line">                Log.e(TAG, <span class="string">"保存任务信息到本地"</span> + note.toString()); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//最后在主线程中执行</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Note&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                ToastUtil.show(<span class="string">"添加[ 任务 ]失败"</span>);</span><br><span class="line">                Log.e(TAG, e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Note note)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                ToastUtil.show(<span class="string">"成功添加[ 任务 ]:"</span> + dialog_add_task_et_content.getText().toString());</span><br><span class="line">                finish();</span><br><span class="line">                Log.e(TAG, <span class="string">"请求成功"</span> + note.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="使用的套路"><a href="#使用的套路" class="headerlink" title="使用的套路"></a>使用的套路</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个没什么好说的，没有网络权限什么都做不了</p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure><p>这里几个库的含义是：我们使用<code>retrofit2.0</code>去进行网络请求操作，同时我们使用<code>gson</code>去进行数据解析，并且结合<code>rxjava</code>去进行相应的代码编写</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .client(mOkHttpClient)</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>这段就是使用<code>RxJava</code>，利用<code>gson</code>做解析（这边解析器可以设置注入<code>Jackson</code>之类的，甚至可以自定义），http引擎框架是<code>okhttp</code></p><h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p><code>Retrofit</code>需要通过注解请求方法以及请求参数来表明应该如何去进行一个Http请求，目前内置了5种注解方式<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>以及<code>HEAD</code>。同时资源的相对URL要在注解中明确的指出。比如请求方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@POST</span>(<span class="string">"/notes/"</span>)</span><br></pre></td></tr></table></figure></p><p><code>@POST(&quot;/notes/&quot;)</code>的意思是，用<code>POST</code>方法，向<code>BASE_URL + &#39;notes/&#39;</code> 即<code>http://192.168.88.105:8000/notes/</code>发起请求。注意两个斜杆，左边的<code>/</code>代表在<code>BASE_URL</code>的基础上，右边的<code>/</code>表示<code>notes</code>的实际接口，去掉其中一个都会导致不同的结果。</p><p>更多api的写法请看<a href="">下一篇</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/6b3daeda1eed" target="_blank" rel="noopener">https://www.jianshu.com/p/6b3daeda1eed</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在Time Cat项目开发过程中，我们尝试过很多网络请求库。基本点的就是原生的http请求框架，好比&lt;code&gt;HttpClient&lt;/co
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://xichen.pub/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（四）线程控制 —— Scheduler</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6%20%E2%80%94%E2%80%94%20Scheduler/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（四）线程控制 —— Scheduler/</id>
    <published>2018-02-26T06:59:00.000Z</published>
    <updated>2018-03-02T14:52:04.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，事件的发起和消费都是在同一个线程中执行，也就是说之前我们使用的RxJava是同步的～～～</p><p>观察者模式本身的目的不就是后台处理，将处理结果回调给前台？这同步的是要哪样？所以，这篇为大家介绍RxJava的重要的概念——<code>Scheduler</code></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RxJava在不指定线程的情况下，发起时间和消费时间默认使用当前线程。所以之前的做法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>因为是在主线程中发起的，所以不管中间 <code>map</code>的处理还是<code>Action1</code>的执行都是在主线程中进行的。若是<code>map</code>中有耗时的操作(比如网络请求)，这样会导致主线程拥塞，这并不是我们想看到的。</p><h1 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h1><p><code>Scheduler</code>：线程控制器，可以指定每一段代码在什么样的线程中执行。<br>模拟一个需求：新的线程发起事件，在主线程中消费<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rxJavaTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.just(<span class="string">"Hello"</span>, <span class="string">"Word"</span>)</span><br><span class="line">            .subscribeOn(Schedulers.newThread())<span class="comment">//指定 subscribe() 发生在新的线程</span></span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())<span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">            .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    Log.i(TAG, s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p><p>上面用到了<code>subscribeOn()</code>，和<code>observeOn()</code>方法来指定发生的线程和消费的线程。</p><ul><li><code>subscribeOn()</code>：指定subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</li><li><code>observeOn()</code>：指定Subscriber 所运行在的线程。或者叫做事件消费的线程。</li></ul><p>以及参数Scheduler，RxJava已经为我们提供了一下几个Scheduler</p><ul><li><code>Schedulers.immediate()</code>：直接在当前线程运行，相当于不指定线程。这是默认的 <code>Scheduler</code>。</li><li><code>Schedulers.newThread()</code>：总是启用新线程，并在新线程执行操作。</li><li><code>Schedulers.io()</code>： I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 <code>newThread()</code> 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li><li><code>Schedulers.computation()</code>：计算所使用的 <code>Scheduler</code>。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 <code>computation()</code> 中，否则 I/O 操作的等待时间会浪费 CPU。</li><li><code>AndroidSchedulers.mainThread()</code>：它指定的操作将在 Android 主线程运行。</li></ul><h1 id="多次切换线程"><a href="#多次切换线程" class="headerlink" title="多次切换线程"></a>多次切换线程</h1><p>看完上面的介绍想必对RxJava线程的切换有了一些理解，上面只是对事件的发起和消费制定了线程。如果中间有<code>map</code>之类的操作呢？是否可以实现发起的线程在新线程中，<code>map</code>的处理在IO线程，最后的消费在主线程中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.newThread())<span class="comment">//指定：在新的线程中发起</span></span><br><span class="line">        .observeOn(Schedulers.io())         <span class="comment">//指定：在io线程中处理</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> handleString(s);       <span class="comment">//处理数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())<span class="comment">//指定：在主线程中处理</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                show(s);                       <span class="comment">//消费事件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到<code>observeOn()</code>被调用了两次，分别指定了<code>map</code>的处理的现场和消费事件<code>show(s)</code>的线程。</p><p>若将<code>observeOn(AndroidSchedulers.mainThread())</code>去掉会怎么样？不为消费事件<code>show(s)</code>指定线程后，<code>show(s)</code>会在那里执行？<br>其实，<code>observeOn()</code>指定的是它之后的操作所在的线程。也就是说，<code>map</code>的处理和最后的消费事件<code>show(s)</code>都会在io线程中执行。<br><code>observeOn()</code>可以多次使用，可以随意变换线程</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>学会线程控制后才算是真正学会了使用RxJava。RxJava的使用十分灵活，想要对其熟悉使用只有一个办法，那就是多用啦，熟能生巧。</p><p>参考：<br><a href="https://www.jianshu.com/p/ecfb9d68d2a2" target="_blank" rel="noopener">https://www.jianshu.com/p/ecfb9d68d2a2</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;经过前几篇的介绍，对RxJava对模式有了一定的理解：由Observable发起事件，经过中间的处理后由Observer消费。之前的代码中，
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（三）对象转换器——map、flatMap</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E5%99%A8%E2%80%94%E2%80%94map%E3%80%81flatMap/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（三）对象转换器——map、flatMap/</id>
    <published>2018-02-26T06:57:00.000Z</published>
    <updated>2018-03-02T14:52:04.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>在使用<code>map</code>之前要先说道一个接口：<code>Func1</code>，<code>Func1</code>和上一篇提到的<code>Action1</code>相似。<code>Func1</code> 和 <code>Action</code>的区别在于， <code>Func1</code> 包装的是有返回值的方法。<br>接下来就是map的用法，看代码更直观点；</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>得到多个Student对象中的name，保存到nameList中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(student1, student2, student2)</span><br><span class="line">        <span class="comment">//使用map进行转换，参数1：转换前的类型，参数2：转换后的类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student i)</span> </span>&#123;</span><br><span class="line">                String name = i.getName();<span class="comment">//获取Student对象中的name</span></span><br><span class="line">                <span class="keyword">return</span> name;<span class="comment">//返回name</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                nameList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到<code>Observable</code>中原来的参数是<code>Student对象</code>，而最后我们需要的是<code>name</code>，这里使用了<code>map</code>来实现这一转换的过程。当然，<code>map</code>可以多次使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多次使用map，想用几个用几个</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;<span class="comment">//将String类型的转化为Integer类型的哈希码</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;<span class="comment">//将转化后得到的Integer类型的哈希码再转化为String类型</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer.intValue() + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h1><p><code>flatMap</code>是一个比教难理解的一个转换，在这里先假设一个需求，需要打印多个<code>Student</code>所学的课程。这跟之前获取<code>Student</code>的<code>name</code>又不同了，这里先确定一下关系，一个<code>Student</code>类中只有一个<code>name</code>，而一个<code>Student</code>却有多门课程（Course），<code>Student</code>我们可以理解成这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 学生类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; coursesList;<span class="comment">//所修的课程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 课程类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//课程名</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果使用<code>map</code>来实现打印所有学生所修个课程名，实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Action1&lt;List&lt;Course&gt;&gt; action1 = <span class="keyword">new</span> Action1&lt;List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历courses，输出cuouses的name</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++)&#123;</span><br><span class="line">            Log.i(TAG, courses.get(i).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, List&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//返回coursesList</span></span><br><span class="line">                <span class="keyword">return</span> student.getCoursesList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(action1);</span><br></pre></td></tr></table></figure></p><p>可以看到，在<code>Action1</code>中出现了for来循环打印课程名，使用<code>RxJava</code>就是为了剔除这样的嵌套结构，使得整体的逻辑性更强。这时候就可以使用<code>flatMap</code>了，使用<code>flatMap</code>实现的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">students.add...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Observable.from(students)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(student.getCoursesList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Course&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, course.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这样就实现了跟上面代码一样的效果，看起来有点懵？确实，<code>flatMap</code>理解起来有点绕，刚接触<code>flatMap</code>的时候我也是懵逼一个。下面我将<code>flatMap</code>的示意图，希望能帮助理解：</p><p>flatMap示意图</p><p>由上图可以看出<code>Student1</code>、<code>Student2</code>经过<code>flatMap</code>后，按顺序依次经历了<code>Observable1</code>、<code>Observable2</code>，分别转化为<code>Course</code>。最后按顺序得到<code>Course1</code>、<code>Course2</code>、<code>Course3</code>、<code>Course4</code>、<code>Course5</code>、<code>Course6</code>，其中1-3由Student1得到，4-6由Student2得到。<br>结合代码和示意图，是不是对flatMap有了一定的理解。</p><blockquote><p><strong>注意</strong>：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。也就说，传入的顺序可能跟出来的顺序不一样。<br>如果要保证顺的的话，可以使用concatMap。</p></blockquote><p>#其他操作符</p><p>除了<code>map</code>和<code>flatMap</code>之外，还有其他操作符以供使用。这里就不一一列举他们的用法了，其他常用的操作符如下：</p><ul><li><code>filter</code>：集合进行过滤</li><li><code>each</code>：遍历集合</li><li><code>take</code>：取出集合中的前几个</li><li><code>skip</code>：跳过前几个元素</li></ul><p><a href="https://link.jianshu.com/?t=https://www.zhihu.com/question/32209660" target="_blank" rel="noopener">更多操作符</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/52cd2d514528" target="_blank" rel="noopener">https://www.jianshu.com/p/52cd2d514528</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h1&gt;&lt;p&gt;在使用&lt;code&gt;map&lt;/code&gt;之前要先说道一个接口：&lt;code&gt;Func1&lt;/code&gt;，&lt;code&gt;Func1&lt;/code
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（二）Action</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89Action/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（二）Action/</id>
    <published>2018-02-26T06:44:00.000Z</published>
    <updated>2018-03-02T14:52:04.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>例：分别打印”Hello”、” World”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>可以看到，我们这里只用了<code>onNext(obj)</code>，还有两个重写的<code>onError(error)</code>和<code>onCompleted()</code>并没有用到，这样导致我们多出了几行根本用不到的代码。于是就想能不能只写我们使用到的，其他几个没用到的就不写，这样的代码看着才舒服。接下来就是使用本次的主角<code>Action</code>来代替<code>Subscriber</code></p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>上部分的代码使用Action来代替Subscriber得到的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>舒服多了有没有！！</p><h2 id="什么是Action"><a href="#什么是Action" class="headerlink" title="什么是Action"></a>什么是Action</h2><p><code>Action</code>是<code>RxJava</code> 的一个接口，常用的有<code>Action0</code>和<code>Action1</code>。<br><code>Action0</code>： 它只有一个方法 <code>call()</code>，这个方法是无参无返回值的；由于 <code>onCompleted()</code> 方法也是无参无返回值的，因此 <code>Action0</code> 可以被当成一个包装对象，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。<br><code>Ation1</code>：它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数；与 <code>Action0</code> 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 <code>Action1</code> 可以将 <code>onNext(obj)</code>和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调</p><h2 id="Action的使用"><a href="#Action的使用" class="headerlink" title="Action的使用"></a>Action的使用</h2><p>定义三个对象，分别打包<code>onNext(obj)</code>、<code>onError(error)</code>、<code>onCompleted()</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line"><span class="comment">//处理onNext()中的内容</span></span><br><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onError()中的内容</span></span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理onCompleted()中的内容</span></span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下来使用<code>subscribe</code>重载的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 onNextAction 来定义 onNext()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction);</span><br><span class="line"><span class="comment">//使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">//使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure></p><p>根据实际情况使用以上的方法处理<code>onNext(obj)</code>、<code>onError(error)</code> 、<code>onCompleted()</code>的回调。<br>现在有个疑问，为什么使用<code>Action</code>也能达到使用<code>Subscriber</code>的结果？进<code>subscribe(Action1 onNext)</code>的源码看看。</p><p><img src="/assets/blog/img/2018-02-26/31.png" width="700"></p><p>还以为有多高深，原来就是把<code>Action</code>对象转化成对应的<code>Subscriber</code>对象了。这样就不难理解为什么可以使用<code>Action</code>来代替<code>Subscriber</code>了。</p><h2 id="重写打印”Hello”、”-Wrod”的方法"><a href="#重写打印”Hello”、”-Wrod”的方法" class="headerlink" title="重写打印”Hello”、” Wrod”的方法"></a>重写打印”Hello”、” Wrod”的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello"</span>, <span class="string">"Wrold"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>相比第一篇那冗长的代码，现在感觉怎么样？还是觉得代码多？确实，如果只是打印几个字符串确实还是略微复杂。不急，RxJava还有其他功能呢。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><code>Action</code>的使用为我们减少了不必要的代码，使得写出的代码看上去更加得简洁。不过就目前来看<code>RxJava</code>还是没有什么优势值得我们去使用，下一篇我还会介绍更多<code>RxJava</code>的用法。慢慢得，你就会发现使用<code>RxJava</code>写出来的代码看上去真的很漂亮。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/c7a995f3763c" target="_blank" rel="noopener">https://www.jianshu.com/p/c7a995f3763c</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;例：分别打印”Hello”、” World”&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 RxJava的使用（一）基本用法</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-RxJava的使用（一）基本用法/</id>
    <published>2018-02-26T05:45:00.000Z</published>
    <updated>2018-03-02T14:52:04.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步处理。异步的话我们一般有现成的 AsyncTask / Handler / View.postdelay / … , 不过，今天我们用RxJava。RxJava的本质是<strong>异步处理</strong>，RxJava的好处就在于它的简洁性，逻辑简单的时候看不出RxJava的优势，想必大家都知道在调度过程比较复杂的情况下，异步代码经常会既难写也难被读懂。这时候RxJava的优势就来了，<strong>随着程序逻辑变得越来越复杂，它依然能够保持简洁</strong>。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>首先要先介绍一下观察者模式（可能比喻的不够恰当，意思到了就好）；</p><ul><li><strong>观察者</strong>：监视着被观察者的行为，当被观察者某个状态改变的时候会通知观察者，观察者会执行对应的操作；</li><li><strong>被观察者</strong>：被监视的对象，当某个状态改变的时候会通知观察者；</li><li><strong>订阅（或注册）</strong>：将观察者和被观察者建立联系。</li></ul><p>（很乱？来个栗子？）<br>这里举一个我个常用的例子，点击<code>Button</code>后触发<code>OnClickListener</code><br>中的<code>onClick()</code>事件。在这个事件中他们的角色分别如下：</p><ul><li><strong>观察者</strong>：OnClickListener；</li><li><strong>被观察者</strong>：Button；</li><li><strong>订阅（或注册）</strong>：setOnClickListener()。</li></ul><h1 id="RxJava中的观察者模式"><a href="#RxJava中的观察者模式" class="headerlink" title="RxJava中的观察者模式"></a>RxJava中的观察者模式</h1><p>在上面介绍了观察者模式，这里也将RxJava中的三个角色进行一下角色分配</p><ul><li><strong>观察者</strong>：Observer；</li><li><strong>被观察者</strong>：Observable；</li><li><strong>订阅（或注册）</strong>：subscribe()。</li></ul><h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p><code>Observer</code> 即观察者，它决定事件触发的时候将有怎样的行为。</p><p>RxJava 观察者的事件回调方法除了普通事件<code>onNext()</code>（相当于<code>onClick()/onEvent()</code>）之外，还定义了两个特殊的事件：<code>onCompleted()</code>和<code>onError()</code>。</p><ul><li><code>onCompleted()</code>: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的<code>onNext()</code>发出时，需要触发<code>onCompleted()</code>方法作为标志。</li><li><code>onError()</code>: 事件队列异常。在事件处理过程中出异常时，<code>onError()</code>会被触发，同时队列自动终止，不允许再有事件发出。</li></ul><p>在一个正确运行的事件序列中,<code>onCompleted()</code>和<code>onError()</code>有且只有一个，并且是事件序列中的最后一个。需要注意的是，<code>onCompleted()</code>:和<code>onError()</code>二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p><h2 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h2><p><code>Observable</code> 即被观察者，它决定什么时候触发事件以及触发怎样的事件。可以使用<code>create()</code>、<code>just(T...)</code>、<code>from(T[])</code>或<code>from(Iterable&lt;? extends T&gt;)</code>来创建一个 <code>Observable</code> ，并为它定义事件触发规则。</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>创建了<code>Observable</code>和<code>Observer</code>之后，再用<code>subscribe()</code>方法将它们联结起来</p><h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap, show me the code"></a>Talk is cheap, show me the code</h1><p>例：打印字符串</p><ol><li><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava:1.0.14'</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure></li><li><p>依次创建观察者，被观察者，订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个观察者</span></span><br><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"Error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用Observable.create()创建被观察者</span></span><br><span class="line">Observable observable1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Wrold"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//订阅</span></span><br><span class="line">observable1.subscribe(observer);</span><br></pre></td></tr></table></figure></li></ol><p>以上用到的都是rx包里面的，别用错了！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.Observer;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br></pre></td></tr></table></figure></p><p>上面完成了一次Rxjava的基本使用，会在log里显示<code>Hello World</code>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/19cac3c5b106" target="_blank" rel="noopener">https://www.jianshu.com/p/19cac3c5b106</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">http://gank.io/post/560e15be2dca930e00da1083</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Time Cat中，网络请求是必不可少的。而网络请求最好不要放在主线程中，因为网络请求要监听服务端的回应，耗时长。所以我们一般把网络请求异步
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="RxJava" scheme="http://xichen.pub/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 Android抽象布局——include、merge 、ViewStub</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android%E6%8A%BD%E8%B1%A1%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94include%E3%80%81merge%20%E3%80%81ViewStub/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android抽象布局——include、merge 、ViewStub/</id>
    <published>2018-02-26T03:58:00.000Z</published>
    <updated>2018-03-02T14:52:03.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在布局优化中，Androi的官方提到了这三种布局<code>&lt;include /&gt;</code>、<code>&lt;merge /&gt;</code>、<code>&lt;ViewStub /&gt;</code>，并介绍了这三种布局各有的优势，下面也是简单说一下他们的优势，以及怎么使用，记下来权当做笔记。</p><h1 id="布局重用-lt-include-gt"><a href="#布局重用-lt-include-gt" class="headerlink" title="布局重用&lt;include /&gt;"></a>布局重用<code>&lt;include /&gt;</code></h1><p><code>&lt;include /&gt;</code>标签能够重用布局文件，简单的使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/app_bg"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/titlebar"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">”match_parent”</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"@string/hello"</span>  </span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"10dp"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    ...  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li><code>&lt;include /&gt;</code>标签可以使用单独的layout属性，这个也是必须使用的。</li><li>可以使用其他属性。<code>&lt;include /&gt;</code>标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖，解决方案。</li><li>在<code>include</code>标签中所有的<code>android:layout_*</code>都是有效的，前提是必须要写<code>layout_width</code>和<code>layout_height</code>两个属性。</li><li>布局中可以包含两个相同的<code>include</code>标签，引用时可以使用如下方法解决（参考）:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View bookmarks_container_2 = findViewById(R.id.bookmarks_favourite);   </span><br><span class="line">  </span><br><span class="line">bookmarks_container_2.findViewById(R.id.bookmarks_list);</span><br></pre></td></tr></table></figure></li></ol><h1 id="减少视图层级-lt-merge-gt"><a href="#减少视图层级-lt-merge-gt" class="headerlink" title="减少视图层级&lt;merge /&gt;"></a>减少视图层级<code>&lt;merge /&gt;</code></h1><p><code>&lt;merge/&gt;</code>标签在UI的结构优化中起着非常重要的作用，它可以删减多余的层级，优化UI。<code>&lt;merge/&gt;</code>多用于替换FrameLayout或者当一个布局包含另一个时，<code>&lt;merge/&gt;</code>标签消除视图层次结构中多余的视图组。例如你的主布局文件是垂直布局，引入了一个垂直布局的<code>include</code>，这是如果<code>include</code>布局使用的<code>LinearLayout</code>就没意义了，使用的话反而减慢你的UI表现。这时可以使用<code>&lt;merge/&gt;</code>标签优化。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/add"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/delete"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在，当你添加该布局文件时(使用<code>&lt;include /&gt;</code>标签)，系统忽略<code>&lt;merge /&gt;</code>节点并且直接添加两个Button。更多<code>&lt;merge /&gt;</code>介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize by merging》</a></p><h1 id="需要时使用-lt-ViewStub-gt"><a href="#需要时使用-lt-ViewStub-gt" class="headerlink" title="需要时使用&lt;ViewStub /&gt;"></a>需要时使用<code>&lt;ViewStub /&gt;</code></h1><p><code>&lt;ViewStub /&gt;</code>标签最大的优点是当你需要时才会加载，使用他并不会影响UI初始化时的性能。各种不常用的布局想进度条、显示错误消息等可以使用<code>&lt;ViewStub /&gt;</code>标签，以减少内存使用量，加快渲染速度。<code>&lt;ViewStub /&gt;</code>是一个<code>不可见的，大小为0的View</code>。<code>&lt;ViewStub /&gt;</code>标签使用如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/stub_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:inflatedId</span>=<span class="string">"@+id/panel_import"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout</span>=<span class="string">"@layout/progress_overlay"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>当你想加载布局时，可以使用下面其中一种方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((ViewStub) findViewById(R.id.stub_import)).setVisibility(View.VISIBLE);  </span><br><span class="line"><span class="comment">// or  </span></span><br><span class="line">View importPanel = ((ViewStub) findViewById(R.id.stub_import)).inflate();</span><br></pre></td></tr></table></figure></p><p>当调用<code>inflate()</code>函数的时候，<code>ViewStub</code>被引用的资源替代，并且返回引用的view。 这样程序可以直接得到引用的<code>view</code>而不用再次调用函数<code>findViewById()</code>来查找了。<br>注：<code>ViewStub</code>目前有个缺陷就是还不支持 <code>&lt;merge /&gt;</code> 标签。</p><p>更多<code>&lt;ViewStub /&gt;</code>标签介绍可以参考<a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-with.html" target="_blank" rel="noopener">《Android Layout Tricks #3: Optimize with stubs》</a></p><p>参考：<br><a href="http://developer.android.com/training/improving-layouts/reusing-layouts.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/reusing-layouts.html</a><br><a href="http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/03/android-layout-tricks-3-optimize-by.html</a><br><a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/optimizing-layout.html#Lint</a><br><a href="http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html" target="_blank" rel="noopener">http://android-developers.blogspot.com/2009/02/android-layout-tricks-1.html</a><br><a href="http://developer.android.com/training/improving-layouts/loading-ondemand.html" target="_blank" rel="noopener">http://developer.android.com/training/improving-layouts/loading-ondemand.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在布局优化中，Androi的官方提到了这三种布局&lt;code&gt;&amp;lt;include /&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;merge
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="xml" scheme="http://xichen.pub/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（三）封装</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89%E5%B0%81%E8%A3%85/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（三）封装/</id>
    <published>2018-02-26T03:02:00.000Z</published>
    <updated>2018-03-02T14:52:03.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>封装后方便对 OrmLite 的使用</p><p><a href="https://github.com/triline3/timecat/blob/master/app/src/main/java/com/time/cat/database/GenericDao.java" target="_blank" rel="noopener">见项目</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（二）高级操作</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（二）高级操作/</id>
    <published>2018-02-25T23:02:00.000Z</published>
    <updated>2018-03-02T14:52:03.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。<br>这篇文章主要介绍 <code>OrmLite 框架</code>中使用到的一些查询方法.</p><h1 id="WEHRE子句"><a href="#WEHRE子句" class="headerlink" title="WEHRE子句"></a>WEHRE子句</h1><p>在SQL语句中，经常会用到where语句，where 进行条件筛选。<br><code>dao.queryBuilder.()where()</code>方法返回一个<code>where对象</code>，<code>where</code>中提供了很多方法来进行条件筛选,下边逐个讲<code>where</code>中的方法。</p><p>方法 ：eq(columnName,value) 等于（=）equals<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id = 2</code></p><p>方法 ：lt(columnName,value) 小于（&lt;） less than<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt; 2</code></p><p>方法 ：gt(columnName,value) 大于（&gt;） greater than<br>使用示范：<code>mDao.queryBuilder().where().gt(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt; 2</code></p><p>方法 ：ge(columnName,value) 大于等于（&gt;=）greater-than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().ge(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &gt;= 2</code></p><p>方法 ：le(columnName,value) 小于等于（&lt;=）less than or equals-to<br>使用示范：<code>mDao.queryBuilder().where().le(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;= 2</code></p><p>方法 ：ne(columnName,value) 不等于（&lt;&gt;）not-equal-to<br>使用示范：<code>mDao.queryBuilder().where().ne(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id &lt;&gt; 2</code></p><p>方法 ：in(columnName,object…) 在指定列中匹配object数组所对应的值，返回匹配到的结果行集合,in还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().in(“id”, 1，2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id IN (1，2 )</code></p><p>方法 ：notIn(columnName,object…) 在指定列中匹配object数组所对应的值，返回没有匹配到的结果行集合notIn还有几个重载方法，需要的话可以去看文档或源码<br>使用示范：<code>mDao.queryBuilder().where().notIn(“id”,1,2).query();</code><br>对应SQL：<code>SELECT * FROM t_person WHERE id NOT IN (1 ,2 )</code></p><p>方法 ：like(columnName,pattern) 使用%通配符来匹配，指定行数据，返回匹配到的结果<br>使用示范：<code>mDao.queryBuilder().where().like(“LastName”, “A%”).query();</code> 匹配A开头的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%s”).query();</code> 匹配s结尾的LastName<br><code>mDao.queryBuilder().where().like(“LastName”, “%art%”).query();</code> 匹配中间为art的LastName<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `LastName` LIKE &#39;A%&#39;</code></p><p>方法 ：between(columnName,low,high) 获取指定范围内的结果<br>使用示范：<code>mDao.queryBuilder().where().between(“id”, 1, 2).query();</code>获取id是1到2之间的结果<br>对应SQL：<code>SELECT * FROM `t_person` WHERE `id` BETWEEN 1 AND 2</code></p><p>方法and()，or()用来组合上述where子语句。进行与，或操作。<br>方法 ：and() where子句与操作<br>使用示范：<code>mDao.queryBuilder().where().lt(“id”, 3).and().gt(“id”, 1).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` &lt; 3 AND `id` &gt; 1 )</code></p><p>方法 ：or() where子句或操作<br>使用示范：<code>mDao.queryBuilder().where().eq(“id”, 1).or().eq(“id”, 2).query();</code><br>对应SQL：<code>SELECT * FROM `t_person` WHERE (`id` = 1 OR `id` = 2 )</code></p><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p>根据指定列名排序，降序，升序<br>使用示范：<code>mDao.queryBuilder().orderBy(“id”, false).query(); //参数false表示降序，true表示升序。</code><br>对应SQL：<code>SELECT * FROM `t_person` ORDER BY `id` DESC（降序）</code></p><h1 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h1><p>过滤指定列不重复数据行，重复的只返回一次。<br>使用示范：<code>mDao.queryBuilder().selectColumns(“City”).distinct().query();</code><br>对应SQL：<code>SELECT DISTINCT `City` FROM `t_person`</code></p><h1 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h1><p>按照指定列分组<br>使用示范：<code>mDao.queryBuilder().groupBy(“city”).query();</code><br>对应SQL：<code>SELECT * FROM t_person GROUP BY city</code></p><h1 id="offset-Limit"><a href="#offset-Limit" class="headerlink" title="offset Limit"></a>offset Limit</h1><p>offset跳过指定的行数<br>limit限制获取指定行数<br>使用示范：<code>mDao.queryBuilder().offset(2).limit(2).query();</code> 可以用来分页<br>对应SQL：<code>SELECT * FROM t_person LIMIT 2 OFFSET 2</code></p><h1 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h1><p>等同于sql中的Having，针对分组数据，进行聚合函数（SUM, COUNT, MAX, AVG）运算。<br>使用示范：  <code>mPersonList = mDao.queryBuilder().groupBy(“City”).having(“SUM(id)&gt;4”).query()</code><br>对应SQL： <code>SELECT * FROM t_person GROUP BY City HAVING SUM(id)&gt;4</code></p><h1 id="countOf"><a href="#countOf" class="headerlink" title="countOf"></a>countOf</h1><p>返回查询结果的总数<br>使用示范：<code>mDao.queryBuilder().countOf()</code><br>对应SQL：<code>SELECT COUNT(*) FROM t_person</code></p><h1 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h1><p>返回一个结果集的迭代器。<br>使用示范：<code>Iterator iterator = mDao.queryBuilder().iterator();</code></p><h1 id="queryForFirst"><a href="#queryForFirst" class="headerlink" title="queryForFirst"></a>queryForFirst</h1><p>返回所有行的第一行。<br>使用示范：<code>mDao.queryBuilder().queryForFirst();</code></p><p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 OrmLite框架入门与封装（一）快速入门</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%B8%8E%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-OrmLite框架入门与封装（一）快速入门/</id>
    <published>2018-02-25T22:49:00.000Z</published>
    <updated>2018-03-02T14:52:03.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本来打算把<code>Time Cat</code>做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。</p><p>本文主要针对 Android 使用 <code>OrmLite 框架</code> 对数据库的基本操作介绍，如有那些地方介绍的不对，请指出来，一起学习，一起进步。</p><h1 id="添加-OrmLite-包"><a href="#添加-OrmLite-包" class="headerlink" title="添加 OrmLite 包"></a>添加 OrmLite 包</h1><p>向工程中添加 OrmLite 的 jar 包有两种方式：</p><ol><li>到 OrmLite 官网下载 ormlite-core-4.49.jar 和 ormlite-android-4.49.jar 两个jar 包添加到工程中。</li><li>在项目中添加依赖的方式。</li></ol><h1 id="创建项目中使用DatabaseHelper类"><a href="#创建项目中使用DatabaseHelper类" class="headerlink" title="创建项目中使用DatabaseHelper类"></a>创建项目中使用DatabaseHelper类</h1><p>首先要简单说一下 <code>OrmLite 框架</code>中 <code>OrmLiteSqliteOpenHelper</code> 类 ，<code>OrmLiteSqliteOpenHelper</code> 类继承了 <code>SQLiteOpenHelper</code>。所以，创建项目中的D<code>atabaseHelper</code> 类，要使该类继承 <code>OrmLite 框架</code> 的 <code>OrmLiteSqliteOpenHelper</code> 类来获得 <code>SQLiteHelper</code>.</p><h1 id="继承-OrmLiteSqliteOpenHelper-实现几个方法说明"><a href="#继承-OrmLiteSqliteOpenHelper-实现几个方法说明" class="headerlink" title="继承 OrmLiteSqliteOpenHelper 实现几个方法说明"></a>继承 <code>OrmLiteSqliteOpenHelper</code> 实现几个方法说明</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatabaseHelper</span><span class="params">(Context context, String databaseName, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> databaseVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, databaseName, factory, databaseVersion);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数说明：</span></span><br><span class="line"><span class="comment">         * context：上下文。</span></span><br><span class="line"><span class="comment">         * databaseName： 数据库名。</span></span><br><span class="line"><span class="comment">         * factory： 游标实例，多数时候设置成NULL。</span></span><br><span class="line"><span class="comment">         * databaseVersion：数据库版本，当数据库版本升高时，会调用onUpgrade（）方法。</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource)</span> </span>&#123; </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在该方法中进行创建表操作</span></span><br><span class="line"><span class="comment">         * 使用`OrmLite 框架`的 TableUtils.createTable进行创建表操作。</span></span><br><span class="line"><span class="comment">         *eg.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TableUtils.createTable(connectionSource, UserInfo.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="数据库版本提升更新方法"><a href="#数据库版本提升更新方法" class="headerlink" title="数据库版本提升更新方法"></a>数据库版本提升更新方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, <span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//在该方法中进行更新操作</span></span><br></pre></td></tr></table></figure><h1 id="创建数据库表对应的-Bean"><a href="#创建数据库表对应的-Bean" class="headerlink" title="创建数据库表对应的 Bean"></a>创建数据库表对应的 Bean</h1><p>Bean 类中的变量对应数据库中的字段，在 Bean 中使用注解方式进行设置。<br>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DatabaseTable</span>(tableName = <span class="string">"tb_user_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DatabaseField</span>(generatedId = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"addr"</span>)</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="meta">@DatabaseField</span>(columnName = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应字段的set 和 get 方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="数据库中字段注解设置说明："><a href="#数据库中字段注解设置说明：" class="headerlink" title="数据库中字段注解设置说明："></a>数据库中字段注解设置说明：</h1><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">参数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">@DatabaseTable</td><td style="text-align:center">tableName</td><td style="text-align:center">指定表明,没有将使用类名作为表明</td></tr><tr><td style="text-align:center">@DatabaseField</td><td style="text-align:center">cloumnName</td><td style="text-align:center">指定字段名,不指定则变量名作为字段名</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">canBeNull</td><td style="text-align:center">是否可以为null</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">dataType</td><td style="text-align:center">指定字段的类型</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">defaultValue</td><td style="text-align:center">指定默认值</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">width</td><td style="text-align:center">指定长度</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">id</td><td style="text-align:center">指定字段为id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">generatedId</td><td style="text-align:center">指定字段为自增长的id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">generatedIdSequence</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreign</td><td style="text-align:center">指定这个字段的对象是一个外键,外键值是这个对象的id</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">useGetSet</td><td style="text-align:center">指定ormlite访问变量使用set,get方法默认使用的是反射机制直接访问变量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">throwIfNull</td><td style="text-align:center">如果空值抛出异常</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">persisted</td><td style="text-align:center">指定是否持久化此变量,默认true</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">unique</td><td style="text-align:center">字段值唯一</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueCombo</td><td style="text-align:center">整列的值唯一</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">index</td><td style="text-align:center">索引</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueIndex</td><td style="text-align:center">唯一索引</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignAutoRefresh</td><td style="text-align:center">外键值,自动刷新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">uniqueIndex</td><td style="text-align:center">外键值,自动刷新</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignAutoCreate</td><td style="text-align:center">外键不存在时是否自动添加到外间表中</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">foreignColumnName</td><td style="text-align:center">外键字段指定的外键表中的哪个字段</td></tr></tbody></table><h1 id="获取操作数据库对应表的-Bean-的-Dao"><a href="#获取操作数据库对应表的-Bean-的-Dao" class="headerlink" title="获取操作数据库对应表的 Bean 的 Dao"></a>获取操作数据库对应表的 Bean 的 Dao</h1><p>在<code>OrmLite 框架</code>中。操作数据是通过 对应<code>Bean</code>的<code>Dao</code> 实现的。 </p><p>那么Dao 是如何获取的呢？ </p><p>Dao 的获取方式： </p><p>对应Bean是通过 <code>OrmLiteSqliteOpenHelper</code> 类中 <code>getDao(Class clazz)</code> 方法获取。</p><p>实例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatabaseHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dao&lt;UserInfo,Integer&gt; <span class="title">getUserDao</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        helper = <span class="keyword">new</span> DatabaseHelper(context);</span><br><span class="line">        <span class="keyword">return</span> helper.getDao(UserInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 <code>Dao</code> 对数据库进行简单增、删、改、查操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDao mDao = <span class="keyword">new</span> UserDao();</span><br></pre></td></tr></table></figure></p><p>增：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        UserInfo u1 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"beijng"</span>,<span class="string">"nan"</span>);</span><br><span class="line">        mDao.getUserDao(mContext).create(u1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删：<br>下面的示例是使用删除集合完成删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改和删除要通过id 进行操作</span></span><br><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"zhangsan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">UserInfo u3 = <span class="keyword">new</span> UserInfo(<span class="string">"招商"</span>,<span class="string">"beijng"</span>,<span class="string">"女"</span>);</span><br><span class="line">u3.setUserId(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Collection&lt;UserInfo&gt; collection = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</span><br><span class="line">    collection.add(u4);</span><br><span class="line">    collection.add(u3);</span><br><span class="line">    mDao.getUserDao(mContext).delete(collection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserInfo u4 = <span class="keyword">new</span> UserInfo(<span class="string">"updateMan"</span>,<span class="string">"北京"</span>,<span class="string">"女"</span>);</span><br><span class="line">u4.setUserId(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    mDao.getUserDao(mContext).update(u4);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查：<br>注：这里只举了一个查询方式，查询全部。条件查询请参考（OrmLite 复杂条件查询）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;UserInfo&gt; infos =  mDao.getUserDao(mContext).queryForAll();</span><br><span class="line">    <span class="keyword">for</span>(UserInfo info : infos)&#123;</span><br><span class="line">        <span class="comment">//在此处使用TextView进行显示</span></span><br><span class="line">        mUserText.append(<span class="string">"\n"</span> + info.toString() + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://blog.csdn.net/u013501637/article/details/52388802" target="_blank" rel="noopener">http://blog.csdn.net/u013501637/article/details/52388802</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;本来打算把&lt;code&gt;Time Cat&lt;/code&gt;做成完全依赖网络的，但是考虑到业务场景，离线使用的占比不低，只好做个数据库来适应需求。&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="OrmLite" scheme="http://xichen.pub/tags/OrmLite/"/>
    
      <category term="database" scheme="http://xichen.pub/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 制作捐赠二维码，实现捐赠收款</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-%E5%88%B6%E4%BD%9C%E6%8D%90%E8%B5%A0%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%8D%90%E8%B5%A0%E6%94%B6%E6%AC%BE/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-制作捐赠二维码，实现捐赠收款/</id>
    <published>2018-02-25T22:45:00.000Z</published>
    <updated>2018-03-02T14:52:04.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>撰写了一篇对读者有帮助的博客，</p><p>贡献了一套对开发者有用的开源项目，<br>上架了一个免费的App，用户觉得好用想回报作者，<br>上架了一个收费的App，小白用户因不会使用 苹果支付（Apple Pay），谷歌钱包（Google Wallet Card），PayPal，没办法只要使用越狱破解版本，但又想获得版本更新，好用想回报作者，</p><p>以上问题因为有了 阿里支付宝（alipay）的二维码支付（捐赠），一切皆不是问题。平时你在互联网上看到的快捷捐赠就是这样实现的，你也可以实现.</p><h1 id="步骤分解："><a href="#步骤分解：" class="headerlink" title="步骤分解："></a>步骤分解：</h1><ol><li>PC端登陆支付宝官方网站 <a href="https://qr.alipay.com" target="_blank" rel="noopener">https://qr.alipay.com</a> </li><li>免费领取“向我付款”的二维码。</li><li>个性化设置可以自行上传头像照片，并设置收款人姓名</li><li>下载“向我付款”的二维码，放到你的博客、github、App下载页面（注意不要放到AppStore或App内，会违反AppStore审核规则被Reject！）</li></ol><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><ol><li>支付宝二维码实则为一个可以打开支付宝客户端的url地址。也可以用手机原生浏览器，如iOS的Safari，Android的浏览器，直接访问二维码的Web地址，如我的二维码地址为<a href="https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5" target="_blank" rel="noopener">https://qr.alipay.com/a6x08960yukqk4sjdmrwbd5</a></li><li>必须使用支付宝android，iOS客户端的“扫一扫”功能，如没有安装，先安装。</li><li>使用微信扫描时，微信会禁止跳转到支付宝（竞争对手关系吧），这时候需要选择扫描结果页面–右上角的打开方式“…”，使用原生浏览器打开，并拷贝支付地址</li></ol><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><ol><li>WeiboX：新浪微博 MAC客户端，个人开发者<a href="http://weiboformac.sinaapp.com/donates.php" target="_blank" rel="noopener">http://weiboformac.sinaapp.com/donates.php</a></li><li>JeepREC：iPhone版行车记录仪，个人开发者<br>专业版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-zhuan-ye/id918614632?mt=8</a><br>免费版 <a href="https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/xing-che-ji-lu-yi-mian-fei/id918642080?mt=8</a></li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="http://blog.csdn.net/huanghr_1/article/details/41118059" target="_blank" rel="noopener">如何制作捐赠二维码，实现开源项目或免费应用的捐赠收款（支付宝篇）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;撰写了一篇对读者有帮助的博客，&lt;/p&gt;
&lt;p&gt;贡献了一套对开发者有用的开源项目，&lt;br&gt;上架了一个免费的App，用户觉得好用想回报作者，&lt;b
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="alipay" scheme="http://xichen.pub/tags/alipay/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 跳转QQ加群</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-%E8%B7%B3%E8%BD%ACQQ%E5%8A%A0%E7%BE%A4/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-跳转QQ加群/</id>
    <published>2018-02-25T22:25:00.000Z</published>
    <updated>2018-03-02T14:52:04.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目内测需要用到</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>访问<a href="https://qun.qq.com/join.html" target="_blank" rel="noopener">https://qun.qq.com/join.html</a></li><li>登录</li><li>左边选择QQ群，右边有代码，直接复制到项目即可</li></ol><p><img src="/assets/blog/img/2018-02-26/30.png" width="700"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>必须明确QQ群号</li><li>该用户必须是QQ群号的管理员或群主</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;TimeCat项目内测需要用到&lt;/p&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="QQ" scheme="http://xichen.pub/tags/QQ/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 Android Studio 高效配置</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E9%AB%98%E6%95%88%E9%85%8D%E7%BD%AE/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android Studio高效配置/</id>
    <published>2018-02-25T22:25:00.000Z</published>
    <updated>2018-03-02T14:52:03.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="1、代码提示不区分大小写"><a href="#1、代码提示不区分大小写" class="headerlink" title="1、代码提示不区分大小写"></a>1、代码提示不区分大小写</h1><p>File | Settings 打开设置，选择Editor | General | Code Completion</p><p>Case sensitive completion：选择None。</p><p><img src="/assets/blog/img/2018-02-26/5.png" width="700"></p><h1 id="2、显示行号"><a href="#2、显示行号" class="headerlink" title="2、显示行号"></a>2、显示行号</h1><p>File | Settings 打开设置，选择Editor | General | Appearance</p><p>如图勾选 Show line numbers。</p><p><img src="/assets/blog/img/2018-02-26/6.png" width="700"></p><h1 id="3、自动导包"><a href="#3、自动导包" class="headerlink" title="3、自动导包"></a>3、自动导包</h1><p>在 Android Studio 中， Alt + Enter 和 Control + Alt + O 是用来导包和清除无用导包。但是，你可以设置其快速自动导包的。</p><p>File | Settings打开设置，选择 Editor | General | Auto Import，勾选 Optimize imports on the fly 和 Add unambiguous imports on the fly 。</p><p><img src="/assets/blog/img/2018-02-26/7.png" width="700"></p><h1 id="4、Log日志的颜色自定义"><a href="#4、Log日志的颜色自定义" class="headerlink" title="4、Log日志的颜色自定义"></a>4、Log日志的颜色自定义</h1><p>Android Studio中 Logcat 的默认只有红白两种颜色，这样不利于我们分析Log打印的信息。建议还是采用Android Holo主题的配色方案。</p><p>File | Settings 打开设置，选择Editor | Color &amp; Fonts | Android Logcat，点击 Click on Save As…按钮创建一个新的配色 myLog。</p><p>注意：修改之前一定要取消勾选 Use inherited attributes</p><p><img src="/assets/blog/img/2018-02-26/8.png" width="700"></p><h1 id="5、屏幕截图与屏幕录屏"><a href="#5、屏幕截图与屏幕录屏" class="headerlink" title="5、屏幕截图与屏幕录屏"></a>5、屏幕截图与屏幕录屏</h1><p>Android Studio中 自带了截屏与录屏的功能。如图</p><p>截屏：</p><p><img src="/assets/blog/img/2018-02-26/9.png" width="200"><br><img src="/assets/blog/img/2018-02-26/10.png" width="200"></p><p>录屏：</p><p><img src="/assets/blog/img/2018-02-26/11.png" width="700"><br><img src="/assets/blog/img/2018-02-26/12.png" width="700"><br><img src="/assets/blog/img/2018-02-26/13.png" width="400"></p><h1 id="6、Android-Studio真机ADB-WiFi调试"><a href="#6、Android-Studio真机ADB-WiFi调试" class="headerlink" title="6、Android Studio真机ADB WiFi调试"></a>6、Android Studio真机ADB WiFi调试</h1><p>第一步，安装ADBWIFI插件，安装后之后重启AndroidStudio。</p><p><img src="/assets/blog/img/2018-02-26/14.png" width="300"><br><img src="/assets/blog/img/2018-02-26/15.png" width="300"><br><img src="/assets/blog/img/2018-02-26/16.png" width="300"></p><p>第二步，重启后，你会发现Tools | Android 多了一个 ADB WIFI。</p><p><img src="/assets/blog/img/2018-02-26/17.png" width="700"></p><p>手机通过数据线连上电脑，如图点击ADB Restart，出现如下图则成功</p><p><img src="/assets/blog/img/2018-02-26/18.png" width="700"></p><p>再点击 ADB USB to WIFI，出现如下图则成功，便可拔掉数据线无线调试了。</p><p><img src="/assets/blog/img/2018-02-26/19.png" width="700"></p><h1 id="7、WaKaTime"><a href="#7、WaKaTime" class="headerlink" title="7、WaKaTime"></a>7、WaKaTime</h1><p>一款可以记录你敲代码时间的插件。</p><p>安装wakatime插件如上面，安装后重启。记得在官网上注册账号获取API Key。在Tools下面点击WaKaTime Settings 设置你的API Key。</p><p>官网地址：<a href="https://wakatime.com/" target="_blank" rel="noopener">https://wakatime.com/</a></p><p><img src="/assets/blog/img/2018-02-26/20.png" width="700"><br><img src="/assets/blog/img/2018-02-26/21.png" width="700"><br><img src="/assets/blog/img/2018-02-26/22.png" width="700"></p><h1 id="8、SexyEditor插件（AndroidStudio设置背景）"><a href="#8、SexyEditor插件（AndroidStudio设置背景）" class="headerlink" title="8、SexyEditor插件（AndroidStudio设置背景）"></a>8、SexyEditor插件（AndroidStudio设置背景）</h1><p>你可以在你的AndroidStudio上设置一张背景图片。File | Settings 打开设置，Other Settings下面的SexyEditor。</p><p>opacity：设置图片的 透明度 0-100 数值越大  背景图片越清晰。</p><p>shrink to fit: 缩小到适合尺寸。设置图片的缩放。</p><p>random:设置图片随机循环播放。</p><p>file list ：批量选择图片列表。</p><p>往下拉有个Insert 插入图片的按钮。</p><p><img src="/assets/blog/img/2018-02-26/23.png" width="700"><br><img src="/assets/blog/img/2018-02-26/24.png" width="700"></p><p>效果怎么样，是不是高大上。</p><p><img src="/assets/blog/img/2018-02-26/25.png" width="700"></p><h1 id="9、ECTranslation翻译插件"><a href="#9、ECTranslation翻译插件" class="headerlink" title="9、ECTranslation翻译插件"></a>9、ECTranslation翻译插件</h1><p>选中某个单词，翻译中文。</p><p><img src="/assets/blog/img/2018-02-26/26.png" width="700"></p><p>安装完插件重启，然后在Preferences -&gt; Keymap -&gt; 搜索Translate，右键设置快捷键。</p><p><img src="/assets/blog/img/2018-02-26/27.png" width="700"></p><p>选中某个单词+快捷键如图：</p><p><img src="/assets/blog/img/2018-02-26/28.png" width="700"></p><h1 id="10、GsonFormat"><a href="#10、GsonFormat" class="headerlink" title="10、GsonFormat"></a>10、GsonFormat</h1><p>json数据自动生成实体类。安装插件和上面一样，重启之后你可以设置一下快捷键，方法和上面一样，我的快捷键设置的是Alt+S。下面是演示。</p><p><img src="/assets/blog/img/2018-02-26/29.png" width="700"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h1 id=&quot;1、代码提示不区分大小写&quot;&gt;&lt;a href=&quot;#1、代码提示不区分大小写&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://xichen.pub/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 Android Studio拾色器</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android%20Studio%E6%8B%BE%E8%89%B2%E5%99%A8/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-Android Studio拾色器/</id>
    <published>2018-02-25T21:37:00.000Z</published>
    <updated>2018-03-02T14:52:03.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在考虑UI颜色配置的时候需要颜色对齐，需要用的次数多了，给Android Studio自带的拾色器作个小总结。</p><p>你可能下载过一些获取颜色值的一些小工具，<br>　　这种方式获取颜色，需要先切换窗口转跳到桌面，然后打开拾色器小工具程序，然后去拾取颜色；</p><p>你可能也知道Android Studio自带一个颜色拾色器，通过下面这种方式才能找到<br>　　这种方式获取颜色值限制性很强，需要特定的窗口，需要点击那么一小块颜色才能弹出窗口，才能使用</p><p><img src="/assets/blog/img/2018-02-26/1.png" width="700"></p><p>那有没有更好的方式？ 答案是肯定的，不然这些个干嘛~~<br>不用向上面那样去打开拾色器小工具程序，不用在特定的窗口点击特定的位置弹出拾色器工具，是用我们最喜欢的快捷键的方式打开<br>Android Studio自带了颜色拾色器工具，但是它没有设置快捷键，也没有告诉我们， 这才是问题，<br>不罗嗦了，跟着下面的设置去设置快捷键吧 </p><p><img src="/assets/blog/img/2018-02-26/2.png" width="700"></p><p><img src="/assets/blog/img/2018-02-26/3.png" width="700"></p><p>设置好之后Apply应用 + OK确认下就好了</p><p>下面就能愉快的玩耍了，Alt+C~~ </p><p><img src="/assets/blog/img/2018-02-26/4.png" width="700"></p><p>参考：<br><a href="http://blog.csdn.net/shibin1990_/article/details/51684877" target="_blank" rel="noopener">Android Studio设置颜色拾色器工具Color Picker</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在考虑UI颜色配置的时候需要颜色对齐，需要用的次数多了，给Android Studio自带的拾色器作个小总结。&lt;/p&gt;
&lt;p&gt;你可能下载过一
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://xichen.pub/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 懒加载需求下的BaseFragment封装</title>
    <link href="http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-%E6%87%92%E5%8A%A0%E8%BD%BD%E9%9C%80%E6%B1%82%E4%B8%8B%E7%9A%84BaseFragment%E5%B0%81%E8%A3%85/"/>
    <id>http://xichen.pub/2018/02/26/2018-02-26-Android-TimeCat-懒加载需求下的BaseFragment封装/</id>
    <published>2018-02-25T20:37:00.000Z</published>
    <updated>2018-03-02T14:52:04.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在多个Fragment需要加载的时候,启动速度往往会变慢，影响用户体验。分析发现并非所有的Fragment都需要第一时间将数据填充完毕，因为它们都还没有被用户所”看见”.所以我们要达到的效果是Fragment被显示后才加载数据(lazy load)。由于这种需求具有共性，即每个Fragment都可能有懒加载的需要，故封装成基类BaseFragment.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fragment title</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String fragmentTitle;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可见状态 为了避免和&#123;<span class="doctag">@link</span> Fragment#isVisible()&#125;冲突 换个名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFragmentVisible;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标志位，View已经初始化完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否第一次加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     * 一般用于PagerAdapter需要刷新各个子Fragment的场景</span></span><br><span class="line"><span class="comment">     * 不要new 新的 PagerAdapter 而采取reset数据的方式</span></span><br><span class="line"><span class="comment">     * 所以要求Fragment重新走initData方法</span></span><br><span class="line"><span class="comment">     * 故使用 &#123;<span class="doctag">@link</span> BaseFragment#setForceLoad(boolean)&#125;来让Fragment下次执行initData</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceLoad = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Bundle bundle = getArguments();</span><br><span class="line">        <span class="keyword">if</span> (bundle != <span class="keyword">null</span> &amp;&amp; bundle.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            initVariables(bundle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若 viewpager 不设置 setOffscreenPageLimit 或设置数量不够</span></span><br><span class="line">        <span class="comment">// 销毁的Fragment onCreateView 每次都会执行(但实体类没有从内存销毁)</span></span><br><span class="line">        isFirstLoad = <span class="keyword">true</span>;</span><br><span class="line">        View view = initViews(inflater, container, savedInstanceState);</span><br><span class="line">        isPrepared = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是与ViewPager一起使用，调用的是setUserVisibleHint</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isVisibleToUser 是否显示出来了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">        <span class="keyword">if</span> (getUserVisibleHint()) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是通过FragmentTransaction的show和hide的方法来控制显示，调用的是onHiddenChanged.</span></span><br><span class="line"><span class="comment">     * 若是初始就show的Fragment 为了触发该事件 需要先hide再show</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hidden hidden True if the fragment is now hidden, false if it is not</span></span><br><span class="line"><span class="comment">     * visible.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHiddenChanged</span><span class="params">(<span class="keyword">boolean</span> hidden)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onHiddenChanged(hidden);</span><br><span class="line">        <span class="keyword">if</span> (!hidden) &#123;</span><br><span class="line">            onVisible();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onInvisible();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">true</span>;</span><br><span class="line">        lazyLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isFragmentVisible = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要实现延迟加载Fragment内容,需要在 onCreateView</span></span><br><span class="line"><span class="comment">     * isPrepared = true;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrepared() &amp;&amp; isFragmentVisible()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forceLoad || isFirstLoad()) &#123;</span><br><span class="line">                forceLoad = <span class="keyword">false</span>;</span><br><span class="line">                isFirstLoad = <span class="keyword">false</span>;</span><br><span class="line">                initData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        isPrepared = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被ViewPager移出的Fragment 下次显示时会从getArguments()中重新获取数据</span></span><br><span class="line"><span class="comment">     * 所以若需要刷新被移除Fragment内的数据需要重新put数据 eg:</span></span><br><span class="line"><span class="comment">     * Bundle args = getArguments();</span></span><br><span class="line"><span class="comment">     * if (args != null) &#123;</span></span><br><span class="line"><span class="comment">     * args.putParcelable(KEY, info);</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initVariables</span><span class="params">(Bundle bundle)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">initViews</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isPrepared;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略isFirstLoad的值，强制刷新数据，但仍要Visible &amp; Prepared</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceLoad</span><span class="params">(<span class="keyword">boolean</span> forceLoad)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceLoad = forceLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirstLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFirstLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFragmentVisible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFragmentVisible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fragmentTitle) &#123;</span><br><span class="line">            setDefaultFragmentTitle(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TextUtils.isEmpty(fragmentTitle) ? <span class="string">""</span> : fragmentTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        fragmentTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置fragment的Title直接调用 &#123;<span class="doctag">@link</span> BaseFragment#setTitle(String)&#125;,若不显示该title 可以不做处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 一般用于显示在TabLayout的标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setDefaultFragmentTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://github.com/xmagicj/LazyFragment" target="_blank" rel="noopener">LazyFragment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在多个Fragment需要加载的时候,启动速度往往会变慢，影响用户体验。分析发现并非所有的Fragment都需要第一时间将数据填充完毕，因为
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="Fragment" scheme="http://xichen.pub/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>【Android TimeCat】 Android中使用矢量图（SVG, VectorDrawable）</title>
    <link href="http://xichen.pub/2018/02/25/2018-02-25-Android-TimeCat-%E4%BD%BF%E7%94%A8%E7%9F%A2%E9%87%8F%E5%9B%BE%EF%BC%88SVG,%20VectorDrawable%EF%BC%89/"/>
    <id>http://xichen.pub/2018/02/25/2018-02-25-Android-TimeCat-使用矢量图（SVG, VectorDrawable）/</id>
    <published>2018-02-25T03:28:00.000Z</published>
    <updated>2018-03-02T14:52:03.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>TimeCat项目中需要根据不同的场景动态改变图标颜色，如果用png等格式，会使图片资源过多。明明图案是一样的，为什么改变个颜色就得多一张图?如果整体颜色风格改变，那之前的图片资源就都废了？所以选择用xml文件来描述图片颜色，想用什么色就用什么色。</p><p>图片本质上是一个存像素点的矩阵，而svg高级一点，存一些点，比如一个圆，那么就存圆心和半径数据就行了，这是轨迹，然后再规定颜色，这样和png资源相比，内存大大减少，还容易自定义，改个图标颜色简直不要太方便！</p><h1 id="SVG-和-VectorDrawable"><a href="#SVG-和-VectorDrawable" class="headerlink" title="SVG 和 VectorDrawable"></a>SVG 和 VectorDrawable</h1><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><blockquote><p>可缩放矢量图形（英语：Scalable Vector Graphics，SVG）是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。SVG由W3C制定，是一个开放标准。——摘自维基百科</p></blockquote><p><code>.svg</code>格式相对于<code>.jpg</code>、<code>.png</code>甚至<code>.webp</code>具有较多优势，我认为核心有两点：</p><ul><li>省时间。图像与分辨率无关，收放自如，适配安卓机坑爹的分辨率真是一劳永逸；</li><li>省空间。体积小，一般复杂图像也能在数KB搞定，图标更不在话下。</li></ul><h2 id="VectorDrawable"><a href="#VectorDrawable" class="headerlink" title="VectorDrawable"></a>VectorDrawable</h2><p><code>VectorDrawable</code>是Google从Android 5.0开始引入的一个新的<code>Drawable</code>子类，能够加载矢量图。到现在通过<code>support-library</code>已经至少能适配到Android 4.0了（通过AppBrain统计的Android版本分布来看，Android 4.1以下（api&lt;15）几乎可以不考虑了）。Android中的<code>VectorDrawable</code>只支持SVG的部分属性，相当于阉割版。</p><p>它虽然是个类，但是一般通过配置xml再设置到要使用的控件上。在Android工程中，在资源文件夹<code>res/drawable/</code>的目录下（没有则需新建），通过<code>&lt;vector&gt;&lt;/vector&gt;</code>标签描述，例如<code>svg_ic_arrow_right.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:height</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportHeight</span>=<span class="string">"24.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:viewportWidth</span>=<span class="string">"24.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fillColor</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pathData</span>=<span class="string">"M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本属性说明：</p><ul><li><code>width</code>, <code>height</code>：图片的宽高。可手动修改到需要尺寸；</li><li><code>viewportHeight</code>, <code>viewportWidth</code>：对应将上面height width等分的份数。以svg_ic_arrow_right.xml举例，可以想象将长宽都为8dp的正方形均分为24x24的网格，在这个网格中就可以很方便地描述点的坐标，图像就是这些点连接起来构成的。</li><li><code>fillColor</code>：填充颜色。最好直接在这里写明色值<code>#xxxxxxxx</code>，而不要用<code>@color/some_color</code>的形式，避免某些5.0以下机型可能会报错。</li><li><code>pathData</code>：在2中描述的网格中作画的路径。具体语法不是本文的重点，故不展开。</li></ul><p>下面这段代码描述出来的是一个蓝色闹钟，可以从Android Studio的<code>preview</code>功能栏里预览到它的样子：</p><p><img src="/assets/blog/img/2018-02-25/2.png" width="700"></p><p>emm…既然xml资源作图标这么方便，应该怎么获取呢？</p><h1 id="获取矢量图方式一：Android-Studio的Material-Icon"><a href="#获取矢量图方式一：Android-Studio的Material-Icon" class="headerlink" title="获取矢量图方式一：Android Studio的Material Icon"></a>获取矢量图方式一：<code>Android Studio</code>的<code>Material Icon</code></h1><p>鼠标选中<code>drawable</code>文件夹，右键， <code>New</code>， <code>Vector Asset</code></p><p><img src="/assets/blog/img/2018-02-25/3.png" width="700"></p><p>然后出现：</p><p><img src="/assets/blog/img/2018-02-25/4.png" width="700"></p><p>点击机器人进入搜索筛选：</p><p><img src="/assets/blog/img/2018-02-25/5.png" width="700"></p><p>左侧的搜索和分类可以快速索引。这里都是由谷歌官方制作的MD标准图标，建议先到这里搜索，如果没有再到网上搜索。</p><h1 id="获取矢量图方式二：iconfont"><a href="#获取矢量图方式二：iconfont" class="headerlink" title="获取矢量图方式二：iconfont"></a>获取矢量图方式二：<a href="https://link.jianshu.com/?t=http://iconfont.cn" target="_blank" rel="noopener">iconfont</a></h1><p>墙裂安利一个网站，阿里的iconfont，海量在线矢量图，早收藏早致富！我已经离不开它了=￣ω￣=</p><p>第一步，搜索你要的资源名字，中英文一般都会有结果。比如“arrow”，结果：</p><p><img src="/assets/blog/img/2018-02-25/6.png" width="700"></p><p>第二步，鼠标移动到某一图标上点击，比如上面第一排第二个，出现：</p><p><img src="/assets/blog/img/2018-02-25/7.png" width="200"></p><p>三个选项，第一相当于购物车，可不用登录，第二是收藏，第三是下载，均需要登录。如果未登录，点击后出现：</p><p><img src="/assets/blog/img/2018-02-25/8.png" width="700"></p><p>选择GitHub或微博都行。<br>第三步，登录成功，点击下载，弹出：</p><p><img src="/assets/blog/img/2018-02-25/9.png" width="700"></p><p>可以对图标属性进行编辑，如色值和大小（单位dp），然后点按钮“SVG下载”。下载成功后在下载目录找到一个.svg格式的文件，这个文件可以用浏览器打开-&gt;查看网页源码，或者用NotePad++等编辑器打开看到里面的内容，格式化后是这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> standalone=<span class="string">"no"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"</span></span><br><span class="line"><span class="meta">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">"1490517024583"</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">style</span>=<span class="string">""</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">p-id</span>=<span class="string">"1010"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">width</span>=<span class="string">"16"</span> <span class="attr">height</span>=<span class="string">"16"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M288.86749 12.482601C272.260723-4.160867 245.369563-4.160867 228.720647 12.482601 212.15603 29.126068 212.15603 56.438425 228.720647 73.081892L704.289552 511.786622 228.720647 950.918109C212.15603 967.561574 212.15603 994.447175 228.720647 1011.517401 245.369563 1028.160866 272.260723 1028.160866 288.86749 1011.517401L794.952385 544.646802C803.803707 535.684935 807.597131 523.735776 807.007043 511.786622 807.597131 500.264224 803.803707 488.315065 794.952385 479.353198L288.86749 12.482601Z"</span> <span class="attr">p-id</span>=<span class="string">"1011"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件里好多标签Android是不认识的。不过没关系，有三种解决办法</p><h2 id="手动转化成xml"><a href="#手动转化成xml" class="headerlink" title="手动转化成xml"></a>手动转化成xml</h2><p>新建一个<code>&lt;vector&gt;&lt;/vector&gt;</code>标签的<code>xml文件</code>，通过观察文件内容，很容易获取到关键信息。</p><ul><li><code>width</code>, <code>height</code>自然对应<code>&lt;vector/&gt;</code>中宽高，</li><li><code>viewBox</code>后两位数字是分别对应<code>&lt;vector/&gt;</code>中的<code>viewportWidth</code>和<code>viewportHeight</code>，</li><li><code>&lt;path/&gt;</code>中的<code>d</code>的数据的对应<code>&lt;vector/&gt;</code>中<code>&lt;path/&gt;</code>中的<code>pathData</code>。</li><li><code>fillColor</code>自己手动设置。</li></ul><h2 id="svgtoandroid插件"><a href="#svgtoandroid插件" class="headerlink" title="svgtoandroid插件"></a>svgtoandroid插件</h2><p>安装：File -&gt; Setting -&gt; Plugins -&gt; Browser repositories -&gt; 搜“svg2VectorDrawable” -&gt; 安装并重启Android Studio，再次进来后顶部工具栏会多一个图标：</p><p><img src="/assets/blog/img/2018-02-25/10.png" width="200"></p><p>点击图标弹出对话框：</p><p><img src="/assets/blog/img/2018-02-25/12.png" width="700"></p><p>勾选Batch选项，将对被选中文件夹中的.svg文件进行批量转换。nodpi会自动添加到没有后缀的drawable文件夹中。</p><blockquote><p>网上下载的svg资源往往一步到位，有个这个插件将会事半功倍。导入第一个svg文件时就命名成我们想要的名字，如果不满意再导入时无需再关注命名，将后面导入的pathData覆盖第一个观察效果，直到满意后删除不需要的文件。</p></blockquote><h2 id="Android-Studio自带转化"><a href="#Android-Studio自带转化" class="headerlink" title="Android Studio自带转化"></a>Android Studio自带转化</h2><p>鼠标选中drawable文件夹，右键， New， Vector Asset， Local file，然后出现：</p><p><img src="/assets/blog/img/2018-02-25/13.png" width="700"></p><p>先选本地文件（还能支持PSD，强吧），再到磁盘中找到之前下载的.svg矢量图。导入后可以为文件重命名（建议用svg_或者有区别于其它格式的前缀），默认导入宽高均为24dp，选中Override框则读取文件本来宽高，其它配置视需求而定。点击Next到下一页最后点Finish就导入了。自动导入需要格式化一下就是前面svg_ic_arrow_right.xml的样子了。</p><blockquote><p>海搜比较耗时间，线条粗细啦，位置没居中啦，大小不搭配啦，关键是这些问题都是导入项目或者运行到手机后才能发现（非强迫症当我没说）。<br>iconfont还有诸多成套的图标库，优点是风格大小一致，或者多彩图标。</p></blockquote><h1 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>项目的<code>build.gradle</code>配置有：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    vectorDrawables.useSupportLibrary = <span class="keyword">true</span></span><br><span class="line">   &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  compile <span class="string">"com.android.support:appcompat-v7:21+"</span> <span class="comment">// 至少Api21</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>项目的Activity中都包含（通用做法是在BaseActivity中加）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  AppCompatDelegate.setCompatVectorFromResourcesEnabled(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AppCompatImageView"><a href="#AppCompatImageView" class="headerlink" title="AppCompatImageView"></a>AppCompatImageView</h2><p>这是继承自ImageView用于5.0以下加载矢量图的控件，只需要替换src为srcCompat属性，其它没什么不同。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.AppCompatImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你的<code>Activity</code>直接或间接继承自<code>AppCompatActivity</code>，当前视图中的<code>ImageView</code>在编译过程中会被自动转为<code>AppCompatImageView</code>（<code>support包</code>中所有含有<code>AppCompat</code>前缀的控件均受相同处理），因而在<code>Activity</code>中通过<code>findViewById()</code>的实例用<code>ImageView</code>或<code>AppCompatActivity</code>接收是没有区别的。<br>用以上条件的<code>Activity</code>中装载的<code>Fragment</code>，或者通过动态注入（如<code>Dialog</code>的<code>contentView</code>）的<code>ImageView</code>，均将被自动转为<code>AppCompatActivity</code>。<br>从<code>xml</code>文件中初始化<code>ImageView</code>并加载矢量图，必须使用<code>AppCompatImageView</code>的<code>srcCompat</code>属性。<br><code>ImageView</code>的染色属性tint同样适合矢量图。</p><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>在我的经验中，<code>TextView</code>可以用到矢量图的场景是最多的，主要是设置<code>CompoundDrawable</code>。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawableRight</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawablePadding</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"drawable right"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样设置后，没有任何不适，编译器也不报错，可能你自己运行也没问题。但是！这才是深坑啊。5.0以下某些机型可能会崩溃的。</p><p><code>AppCompatTextView</code>是没有对<code>CompoundDrawable</code>进行适配的，所以需要自己动手才能丰衣足食。简单原理是，判断系统版本如果小于5.0，就用<code>ContextCompat.getDrawable</code>获取到<code>Drawable</code>实例，再<code>setCompoundDrawablesWithIntrinsicBounds</code>。</p><p>这个部分已经有人做好并开源了，地址：<a href="https://link.jianshu.com/?t=https://github.com/woxingxiao/VectorCompatTextView" target="_blank" rel="noopener">VectorCompatTextView</a>，轻松compile到项目中使用。他还特意添加了一个实用功能——tint染色——可以选择是否让图标与文字颜色一样，这样就不必关心xml里的fillColor属性了。用例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xw.repo.VectorCompatTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/color_gray_light"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Next"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:drawableRightCompat</span>=<span class="string">"@drawable/svg_ic_arrow_right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:tintDrawableInTextColor</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：</p><h2 id="MenuItem"><a href="#MenuItem" class="headerlink" title="MenuItem"></a>MenuItem</h2><p><code>MenuItem</code>就是在<code>res/menu/</code>目录下通过xml配置的菜单，适用于<code>NavigationView</code>的<code>menu属性</code>和<code>Activity</code>中<code>onCreateOptionsMenu()</code>注入的选项菜单。</p><h2 id="VectorDrawable-转-Bitmap"><a href="#VectorDrawable-转-Bitmap" class="headerlink" title="VectorDrawable 转 Bitmap"></a>VectorDrawable 转 Bitmap</h2><p>自定义View中也可以自由使用矢量图。<br>首先需要将<code>VectorDrawable</code> 转为 <code>Bitmap</code>，看码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmapFromVectorDrawable</span><span class="params">(Context context, <span class="keyword">int</span> drawableId)</span> </span>&#123;</span><br><span class="line">        Drawable drawable = ContextCompat.getDrawable(context, drawableId);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            drawable = (DrawableCompat.wrap(drawable)).mutate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(),</span><br><span class="line">                Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">        drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, canvas.getWidth(), canvas.getHeight());</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>执行以上方法获得一个<code>Bitmap</code>的实例（设为<code>mVectorBitmap</code>），然后再在<code>ondraw()</code>里根据你的需求画出<code>bitmap</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">     canvas.drawBitmap(mVectorBitmap, left, top, paint);</span><br><span class="line">     <span class="comment">///</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.jianshu.com/p/0555b8c1d26a" target="_blank" rel="noopener">https://www.jianshu.com/p/0555b8c1d26a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;TimeCat项目中需要根据不同的场景动态改变图标颜色，如果用png等格式，会使图片资源过多。明明图案是一样的，为什么改变个颜色就得多一张图
      
    
    </summary>
    
      <category term="Android" scheme="http://xichen.pub/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xichen.pub/tags/Android/"/>
    
      <category term="svg" scheme="http://xichen.pub/tags/svg/"/>
    
  </entry>
  
</feed>
